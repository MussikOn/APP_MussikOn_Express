a00644ce4ccf77d1616d26d10b220fff
"use strict";

/* istanbul ignore next */
function cov_1phtk7vunv() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\paymentSystemService.ts";
  var hash = "525964058a12bbca7b1a0e15dfde44431636b32c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\paymentSystemService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "14": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "15": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 14,
          column: 50
        }
      },
      "16": {
        start: {
          line: 15,
          column: 19
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "17": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 36
        }
      },
      "18": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 61
        }
      },
      "19": {
        start: {
          line: 25,
          column: 31
        },
        end: {
          line: 25,
          column: 55
        }
      },
      "20": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "21": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "22": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "23": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 103
        }
      },
      "24": {
        start: {
          line: 40,
          column: 35
        },
        end: {
          line: 40,
          column: 100
        }
      },
      "25": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 54,
          column: 17
        }
      },
      "26": {
        start: {
          line: 43,
          column: 43
        },
        end: {
          line: 51,
          column: 21
        }
      },
      "27": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 100
        }
      },
      "28": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "29": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 41
        }
      },
      "30": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 60,
          column: 19
        }
      },
      "31": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 71
        }
      },
      "32": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "33": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "34": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 101
        }
      },
      "35": {
        start: {
          line: 72,
          column: 36
        },
        end: {
          line: 72,
          column: 240
        }
      },
      "36": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 101
        }
      },
      "37": {
        start: {
          line: 75,
          column: 37
        },
        end: {
          line: 77,
          column: 26
        }
      },
      "38": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 81,
          column: 17
        }
      },
      "39": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 49
        }
      },
      "40": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 116
        }
      },
      "41": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 35
        }
      },
      "42": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 87,
          column: 19
        }
      },
      "43": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 69
        }
      },
      "44": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 142,
          column: 11
        }
      },
      "45": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "46": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 113
        }
      },
      "47": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 134,
          column: 17
        }
      },
      "48": {
        start: {
          line: 102,
          column: 45
        },
        end: {
          line: 106,
          column: 30
        }
      },
      "49": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 72
        }
      },
      "50": {
        start: {
          line: 107,
          column: 60
        },
        end: {
          line: 107,
          column: 70
        }
      },
      "51": {
        start: {
          line: 111,
          column: 34
        },
        end: {
          line: 111,
          column: 44
        }
      },
      "52": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 133,
          column: 21
        }
      },
      "53": {
        start: {
          line: 113,
          column: 24
        },
        end: {
          line: 115,
          column: 27
        }
      },
      "54": {
        start: {
          line: 116,
          column: 49
        },
        end: {
          line: 118,
          column: 34
        }
      },
      "55": {
        start: {
          line: 119,
          column: 41
        },
        end: {
          line: 119,
          column: 85
        }
      },
      "56": {
        start: {
          line: 119,
          column: 74
        },
        end: {
          line: 119,
          column: 84
        }
      },
      "57": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 128,
          column: 27
        }
      },
      "58": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 125,
          column: 29
        }
      },
      "59": {
        start: {
          line: 124,
          column: 32
        },
        end: {
          line: 124,
          column: 60
        }
      },
      "60": {
        start: {
          line: 127,
          column: 28
        },
        end: {
          line: 127,
          column: 101
        }
      },
      "61": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 41
        }
      },
      "62": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 139,
          column: 19
        }
      },
      "63": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 70
        }
      },
      "64": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 185,
          column: 11
        }
      },
      "65": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "66": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 134
        }
      },
      "67": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 152,
          column: 213
        }
      },
      "68": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 175,
          column: 17
        }
      },
      "69": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 93
        }
      },
      "70": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 31
        }
      },
      "71": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 182,
          column: 19
        }
      },
      "72": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 74
        }
      },
      "73": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "74": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "75": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 116
        }
      },
      "76": {
        start: {
          line: 194,
          column: 35
        },
        end: {
          line: 194,
          column: 91
        }
      },
      "77": {
        start: {
          line: 195,
          column: 35
        },
        end: {
          line: 195,
          column: 57
        }
      },
      "78": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 198,
          column: 17
        }
      },
      "79": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 197,
          column: 62
        }
      },
      "80": {
        start: {
          line: 199,
          column: 32
        },
        end: {
          line: 199,
          column: 49
        }
      },
      "81": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 202,
          column: 17
        }
      },
      "82": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 65
        }
      },
      "83": {
        start: {
          line: 203,
          column: 35
        },
        end: {
          line: 209,
          column: 17
        }
      },
      "84": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "85": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 212,
          column: 126
        }
      },
      "86": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 52
        }
      },
      "87": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 218,
          column: 17
        }
      },
      "88": {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 217,
          column: 92
        }
      },
      "89": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 223,
          column: 19
        }
      },
      "90": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 62
        }
      },
      "91": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 270,
          column: 11
        }
      },
      "92": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "93": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 241,
          column: 19
        }
      },
      "94": {
        start: {
          line: 242,
          column: 35
        },
        end: {
          line: 242,
          column: 79
        }
      },
      "95": {
        start: {
          line: 243,
          column: 37
        },
        end: {
          line: 256,
          column: 17
        }
      },
      "96": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 257,
          column: 104
        }
      },
      "97": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 63
        }
      },
      "98": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 102
        }
      },
      "99": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 36
        }
      },
      "100": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 267,
          column: 19
        }
      },
      "101": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 67
        }
      },
      "102": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 299,
          column: 11
        }
      },
      "103": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 298,
          column: 13
        }
      },
      "104": {
        start: {
          line: 278,
          column: 32
        },
        end: {
          line: 288,
          column: 17
        }
      },
      "105": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 289,
          column: 97
        }
      },
      "106": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 110
        }
      },
      "107": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 296,
          column: 19
        }
      },
      "108": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 70
        }
      },
      "109": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 332,
          column: 11
        }
      },
      "110": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "111": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 140
        }
      },
      "112": {
        start: {
          line: 309,
          column: 32
        },
        end: {
          line: 309,
          column: 69
        }
      },
      "113": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 312,
          column: 17
        }
      },
      "114": {
        start: {
          line: 311,
          column: 20
        },
        end: {
          line: 311,
          column: 73
        }
      },
      "115": {
        start: {
          line: 313,
          column: 35
        },
        end: {
          line: 322,
          column: 17
        }
      },
      "116": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 323,
          column: 105
        }
      },
      "117": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 324,
          column: 34
        }
      },
      "118": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 329,
          column: 19
        }
      },
      "119": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 60
        }
      },
      "120": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 369,
          column: 11
        }
      },
      "121": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 368,
          column: 13
        }
      },
      "122": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 116
        }
      },
      "123": {
        start: {
          line: 341,
          column: 38
        },
        end: {
          line: 341,
          column: 103
        }
      },
      "124": {
        start: {
          line: 342,
          column: 38
        },
        end: {
          line: 342,
          column: 63
        }
      },
      "125": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 345,
          column: 17
        }
      },
      "126": {
        start: {
          line: 344,
          column: 20
        },
        end: {
          line: 344,
          column: 73
        }
      },
      "127": {
        start: {
          line: 346,
          column: 35
        },
        end: {
          line: 346,
          column: 55
        }
      },
      "128": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 349,
          column: 17
        }
      },
      "129": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 348,
          column: 76
        }
      },
      "130": {
        start: {
          line: 350,
          column: 35
        },
        end: {
          line: 356,
          column: 17
        }
      },
      "131": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 357,
          column: 55
        }
      },
      "132": {
        start: {
          line: 359,
          column: 16
        },
        end: {
          line: 361,
          column: 17
        }
      },
      "133": {
        start: {
          line: 360,
          column: 20
        },
        end: {
          line: 360,
          column: 106
        }
      },
      "134": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 366,
          column: 19
        }
      },
      "135": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 59
        }
      },
      "136": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 420,
          column: 11
        }
      },
      "137": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 419,
          column: 13
        }
      },
      "138": {
        start: {
          line: 377,
          column: 35
        },
        end: {
          line: 377,
          column: 88
        }
      },
      "139": {
        start: {
          line: 378,
          column: 35
        },
        end: {
          line: 378,
          column: 57
        }
      },
      "140": {
        start: {
          line: 379,
          column: 37
        },
        end: {
          line: 379,
          column: 38
        }
      },
      "141": {
        start: {
          line: 380,
          column: 36
        },
        end: {
          line: 380,
          column: 37
        }
      },
      "142": {
        start: {
          line: 381,
          column: 39
        },
        end: {
          line: 381,
          column: 40
        }
      },
      "143": {
        start: {
          line: 382,
          column: 36
        },
        end: {
          line: 382,
          column: 37
        }
      },
      "144": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 389,
          column: 17
        }
      },
      "145": {
        start: {
          line: 384,
          column: 36
        },
        end: {
          line: 384,
          column: 53
        }
      },
      "146": {
        start: {
          line: 385,
          column: 20
        },
        end: {
          line: 385,
          column: 53
        }
      },
      "147": {
        start: {
          line: 386,
          column: 20
        },
        end: {
          line: 386,
          column: 58
        }
      },
      "148": {
        start: {
          line: 387,
          column: 20
        },
        end: {
          line: 387,
          column: 64
        }
      },
      "149": {
        start: {
          line: 388,
          column: 20
        },
        end: {
          line: 388,
          column: 58
        }
      },
      "150": {
        start: {
          line: 391,
          column: 35
        },
        end: {
          line: 391,
          column: 58
        }
      },
      "151": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 402,
          column: 17
        }
      },
      "152": {
        start: {
          line: 394,
          column: 24
        },
        end: {
          line: 394,
          column: 48
        }
      },
      "153": {
        start: {
          line: 395,
          column: 24
        },
        end: {
          line: 395,
          column: 30
        }
      },
      "154": {
        start: {
          line: 397,
          column: 24
        },
        end: {
          line: 397,
          column: 61
        }
      },
      "155": {
        start: {
          line: 398,
          column: 24
        },
        end: {
          line: 398,
          column: 30
        }
      },
      "156": {
        start: {
          line: 400,
          column: 24
        },
        end: {
          line: 400,
          column: 48
        }
      },
      "157": {
        start: {
          line: 401,
          column: 24
        },
        end: {
          line: 401,
          column: 30
        }
      },
      "158": {
        start: {
          line: 403,
          column: 39
        },
        end: {
          line: 411,
          column: 17
        }
      },
      "159": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 412,
          column: 53
        }
      },
      "160": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 417,
          column: 19
        }
      },
      "161": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 418,
          column: 73
        }
      },
      "162": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 481,
          column: 11
        }
      },
      "163": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 480,
          column: 13
        }
      },
      "164": {
        start: {
          line: 429,
          column: 41
        },
        end: {
          line: 431,
          column: 26
        }
      },
      "165": {
        start: {
          line: 432,
          column: 38
        },
        end: {
          line: 435,
          column: 21
        }
      },
      "166": {
        start: {
          line: 433,
          column: 36
        },
        end: {
          line: 433,
          column: 46
        }
      },
      "167": {
        start: {
          line: 434,
          column: 20
        },
        end: {
          line: 434,
          column: 48
        }
      },
      "168": {
        start: {
          line: 437,
          column: 41
        },
        end: {
          line: 439,
          column: 26
        }
      },
      "169": {
        start: {
          line: 440,
          column: 38
        },
        end: {
          line: 443,
          column: 21
        }
      },
      "170": {
        start: {
          line: 441,
          column: 36
        },
        end: {
          line: 441,
          column: 46
        }
      },
      "171": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 442,
          column: 48
        }
      },
      "172": {
        start: {
          line: 444,
          column: 41
        },
        end: {
          line: 447,
          column: 21
        }
      },
      "173": {
        start: {
          line: 445,
          column: 36
        },
        end: {
          line: 445,
          column: 46
        }
      },
      "174": {
        start: {
          line: 446,
          column: 20
        },
        end: {
          line: 446,
          column: 52
        }
      },
      "175": {
        start: {
          line: 449,
          column: 44
        },
        end: {
          line: 451,
          column: 26
        }
      },
      "176": {
        start: {
          line: 452,
          column: 41
        },
        end: {
          line: 455,
          column: 21
        }
      },
      "177": {
        start: {
          line: 453,
          column: 39
        },
        end: {
          line: 453,
          column: 49
        }
      },
      "178": {
        start: {
          line: 454,
          column: 20
        },
        end: {
          line: 454,
          column: 51
        }
      },
      "179": {
        start: {
          line: 457,
          column: 48
        },
        end: {
          line: 459,
          column: 26
        }
      },
      "180": {
        start: {
          line: 461,
          column: 51
        },
        end: {
          line: 463,
          column: 26
        }
      },
      "181": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 475,
          column: 18
        }
      },
      "182": {
        start: {
          line: 478,
          column: 16
        },
        end: {
          line: 478,
          column: 94
        }
      },
      "183": {
        start: {
          line: 479,
          column: 16
        },
        end: {
          line: 479,
          column: 74
        }
      },
      "184": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 499,
          column: 11
        }
      },
      "185": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 498,
          column: 13
        }
      },
      "186": {
        start: {
          line: 489,
          column: 41
        },
        end: {
          line: 492,
          column: 26
        }
      },
      "187": {
        start: {
          line: 493,
          column: 16
        },
        end: {
          line: 493,
          column: 68
        }
      },
      "188": {
        start: {
          line: 493,
          column: 56
        },
        end: {
          line: 493,
          column: 66
        }
      },
      "189": {
        start: {
          line: 496,
          column: 16
        },
        end: {
          line: 496,
          column: 93
        }
      },
      "190": {
        start: {
          line: 497,
          column: 16
        },
        end: {
          line: 497,
          column: 73
        }
      },
      "191": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 517,
          column: 11
        }
      },
      "192": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 516,
          column: 13
        }
      },
      "193": {
        start: {
          line: 507,
          column: 44
        },
        end: {
          line: 510,
          column: 26
        }
      },
      "194": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 511,
          column: 71
        }
      },
      "195": {
        start: {
          line: 511,
          column: 59
        },
        end: {
          line: 511,
          column: 69
        }
      },
      "196": {
        start: {
          line: 514,
          column: 16
        },
        end: {
          line: 514,
          column: 91
        }
      },
      "197": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 71
        }
      },
      "198": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 537,
          column: 11
        }
      },
      "199": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 536,
          column: 13
        }
      },
      "200": {
        start: {
          line: 525,
          column: 41
        },
        end: {
          line: 528,
          column: 26
        }
      },
      "201": {
        start: {
          line: 529,
          column: 16
        },
        end: {
          line: 529,
          column: 68
        }
      },
      "202": {
        start: {
          line: 529,
          column: 56
        },
        end: {
          line: 529,
          column: 66
        }
      },
      "203": {
        start: {
          line: 532,
          column: 16
        },
        end: {
          line: 534,
          column: 19
        }
      },
      "204": {
        start: {
          line: 535,
          column: 16
        },
        end: {
          line: 535,
          column: 72
        }
      },
      "205": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 544,
          column: 11
        }
      },
      "206": {
        start: {
          line: 542,
          column: 34
        },
        end: {
          line: 542,
          column: 79
        }
      },
      "207": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 543,
          column: 38
        }
      },
      "208": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 552,
          column: 11
        }
      },
      "209": {
        start: {
          line: 548,
          column: 38
        },
        end: {
          line: 550,
          column: 22
        }
      },
      "210": {
        start: {
          line: 551,
          column: 12
        },
        end: {
          line: 551,
          column: 42
        }
      },
      "211": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 558,
          column: 11
        }
      },
      "212": {
        start: {
          line: 556,
          column: 35
        },
        end: {
          line: 556,
          column: 81
        }
      },
      "213": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 557,
          column: 39
        }
      },
      "214": {
        start: {
          line: 561,
          column: 0
        },
        end: {
          line: 561,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 37
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 23
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 27
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 37,
            column: 47
          },
          end: {
            line: 37,
            column: 48
          }
        },
        loc: {
          start: {
            line: 37,
            column: 60
          },
          end: {
            line: 63,
            column: 9
          }
        },
        line: 37
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 45
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 68
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 69,
            column: 47
          },
          end: {
            line: 69,
            column: 48
          }
        },
        loc: {
          start: {
            line: 69,
            column: 60
          },
          end: {
            line: 90,
            column: 9
          }
        },
        line: 69
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 32
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 95
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 96,
            column: 47
          },
          end: {
            line: 96,
            column: 48
          }
        },
        loc: {
          start: {
            line: 96,
            column: 60
          },
          end: {
            line: 142,
            column: 9
          }
        },
        line: 96
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 107,
            column: 53
          },
          end: {
            line: 107,
            column: 54
          }
        },
        loc: {
          start: {
            line: 107,
            column: 60
          },
          end: {
            line: 107,
            column: 70
          }
        },
        line: 107
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 119,
            column: 67
          },
          end: {
            line: 119,
            column: 68
          }
        },
        loc: {
          start: {
            line: 119,
            column: 74
          },
          end: {
            line: 119,
            column: 84
          }
        },
        line: 119
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 121,
            column: 45
          },
          end: {
            line: 121,
            column: 46
          }
        },
        loc: {
          start: {
            line: 121,
            column: 55
          },
          end: {
            line: 128,
            column: 25
          }
        },
        line: 121
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 46
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 147
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 148,
            column: 47
          },
          end: {
            line: 148,
            column: 48
          }
        },
        loc: {
          start: {
            line: 148,
            column: 60
          },
          end: {
            line: 185,
            column: 9
          }
        },
        line: 148
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 73
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 190
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 191,
            column: 47
          },
          end: {
            line: 191,
            column: 48
          }
        },
        loc: {
          start: {
            line: 191,
            column: 60
          },
          end: {
            line: 226,
            column: 9
          }
        },
        line: 191
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 37
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 231
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 232,
            column: 47
          },
          end: {
            line: 232,
            column: 48
          }
        },
        loc: {
          start: {
            line: 232,
            column: 60
          },
          end: {
            line: 270,
            column: 9
          }
        },
        line: 232
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 40
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 275
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 276,
            column: 47
          },
          end: {
            line: 276,
            column: 48
          }
        },
        loc: {
          start: {
            line: 276,
            column: 60
          },
          end: {
            line: 299,
            column: 9
          }
        },
        line: 276
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 304,
            column: 5
          }
        },
        loc: {
          start: {
            line: 304,
            column: 50
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 304
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 305,
            column: 47
          },
          end: {
            line: 305,
            column: 48
          }
        },
        loc: {
          start: {
            line: 305,
            column: 60
          },
          end: {
            line: 332,
            column: 9
          }
        },
        line: 305
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 62
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 337
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 338,
            column: 47
          },
          end: {
            line: 338,
            column: 48
          }
        },
        loc: {
          start: {
            line: 338,
            column: 60
          },
          end: {
            line: 369,
            column: 9
          }
        },
        line: 338
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 55
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 374
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 375,
            column: 47
          },
          end: {
            line: 375,
            column: 48
          }
        },
        loc: {
          start: {
            line: 375,
            column: 60
          },
          end: {
            line: 420,
            column: 9
          }
        },
        line: 375
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 27
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 425
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 426,
            column: 47
          },
          end: {
            line: 426,
            column: 48
          }
        },
        loc: {
          start: {
            line: 426,
            column: 60
          },
          end: {
            line: 481,
            column: 9
          }
        },
        line: 426
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 432,
            column: 67
          },
          end: {
            line: 432,
            column: 68
          }
        },
        loc: {
          start: {
            line: 432,
            column: 81
          },
          end: {
            line: 435,
            column: 17
          }
        },
        line: 432
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 440,
            column: 67
          },
          end: {
            line: 440,
            column: 68
          }
        },
        loc: {
          start: {
            line: 440,
            column: 81
          },
          end: {
            line: 443,
            column: 17
          }
        },
        line: 440
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 444,
            column: 70
          },
          end: {
            line: 444,
            column: 71
          }
        },
        loc: {
          start: {
            line: 444,
            column: 84
          },
          end: {
            line: 447,
            column: 17
          }
        },
        line: 444
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 452,
            column: 73
          },
          end: {
            line: 452,
            column: 74
          }
        },
        loc: {
          start: {
            line: 452,
            column: 87
          },
          end: {
            line: 455,
            column: 17
          }
        },
        line: 452
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 25
          },
          end: {
            line: 500,
            column: 5
          }
        },
        line: 486
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 487,
            column: 47
          },
          end: {
            line: 487,
            column: 48
          }
        },
        loc: {
          start: {
            line: 487,
            column: 60
          },
          end: {
            line: 499,
            column: 9
          }
        },
        line: 487
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 493,
            column: 49
          },
          end: {
            line: 493,
            column: 50
          }
        },
        loc: {
          start: {
            line: 493,
            column: 56
          },
          end: {
            line: 493,
            column: 66
          }
        },
        line: 493
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 504,
            column: 4
          },
          end: {
            line: 504,
            column: 5
          }
        },
        loc: {
          start: {
            line: 504,
            column: 28
          },
          end: {
            line: 518,
            column: 5
          }
        },
        line: 504
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 505,
            column: 47
          },
          end: {
            line: 505,
            column: 48
          }
        },
        loc: {
          start: {
            line: 505,
            column: 60
          },
          end: {
            line: 517,
            column: 9
          }
        },
        line: 505
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 511,
            column: 52
          },
          end: {
            line: 511,
            column: 53
          }
        },
        loc: {
          start: {
            line: 511,
            column: 59
          },
          end: {
            line: 511,
            column: 69
          }
        },
        line: 511
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 522,
            column: 4
          },
          end: {
            line: 522,
            column: 5
          }
        },
        loc: {
          start: {
            line: 522,
            column: 36
          },
          end: {
            line: 538,
            column: 5
          }
        },
        line: 522
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 523,
            column: 47
          },
          end: {
            line: 523,
            column: 48
          }
        },
        loc: {
          start: {
            line: 523,
            column: 60
          },
          end: {
            line: 537,
            column: 9
          }
        },
        line: 523
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 529,
            column: 49
          },
          end: {
            line: 529,
            column: 50
          }
        },
        loc: {
          start: {
            line: 529,
            column: 56
          },
          end: {
            line: 529,
            column: 66
          }
        },
        line: 529
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 540,
            column: 4
          },
          end: {
            line: 540,
            column: 5
          }
        },
        loc: {
          start: {
            line: 540,
            column: 20
          },
          end: {
            line: 545,
            column: 5
          }
        },
        line: 540
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 541,
            column: 47
          },
          end: {
            line: 541,
            column: 48
          }
        },
        loc: {
          start: {
            line: 541,
            column: 60
          },
          end: {
            line: 544,
            column: 9
          }
        },
        line: 541
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 546,
            column: 4
          },
          end: {
            line: 546,
            column: 5
          }
        },
        loc: {
          start: {
            line: 546,
            column: 24
          },
          end: {
            line: 553,
            column: 5
          }
        },
        line: 546
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 547,
            column: 47
          },
          end: {
            line: 547,
            column: 48
          }
        },
        loc: {
          start: {
            line: 547,
            column: 60
          },
          end: {
            line: 552,
            column: 9
          }
        },
        line: 547
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 554,
            column: 4
          },
          end: {
            line: 554,
            column: 5
          }
        },
        loc: {
          start: {
            line: 554,
            column: 21
          },
          end: {
            line: 559,
            column: 5
          }
        },
        line: 554
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 555,
            column: 47
          },
          end: {
            line: 555,
            column: 48
          }
        },
        loc: {
          start: {
            line: 555,
            column: 60
          },
          end: {
            line: 558,
            column: 9
          }
        },
        line: 555
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 54,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 54,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 112,
            column: 20
          },
          end: {
            line: 133,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 20
          },
          end: {
            line: 133,
            column: 21
          }
        }, {
          start: {
            line: 130,
            column: 25
          },
          end: {
            line: 133,
            column: 21
          }
        }],
        line: 112
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 24
          },
          end: {
            line: 112,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 24
          },
          end: {
            line: 112,
            column: 60
          }
        }, {
          start: {
            line: 112,
            column: 65
          },
          end: {
            line: 112,
            column: 143
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 112,
            column: 65
          },
          end: {
            line: 112,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 114
          },
          end: {
            line: 112,
            column: 120
          }
        }, {
          start: {
            line: 112,
            column: 123
          },
          end: {
            line: 112,
            column: 143
          }
        }],
        line: 112
      },
      "10": {
        loc: {
          start: {
            line: 112,
            column: 65
          },
          end: {
            line: 112,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 65
          },
          end: {
            line: 112,
            column: 94
          }
        }, {
          start: {
            line: 112,
            column: 98
          },
          end: {
            line: 112,
            column: 111
          }
        }],
        line: 112
      },
      "11": {
        loc: {
          start: {
            line: 123,
            column: 28
          },
          end: {
            line: 125,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 28
          },
          end: {
            line: 125,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "12": {
        loc: {
          start: {
            line: 124,
            column: 39
          },
          end: {
            line: 124,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 53
          },
          end: {
            line: 124,
            column: 54
          }
        }, {
          start: {
            line: 124,
            column: 57
          },
          end: {
            line: 124,
            column: 59
          }
        }],
        line: 124
      },
      "13": {
        loc: {
          start: {
            line: 152,
            column: 97
          },
          end: {
            line: 152,
            column: 150
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 97
          },
          end: {
            line: 152,
            column: 133
          }
        }, {
          start: {
            line: 152,
            column: 137
          },
          end: {
            line: 152,
            column: 150
          }
        }],
        line: 152
      },
      "14": {
        loc: {
          start: {
            line: 152,
            column: 152
          },
          end: {
            line: 152,
            column: 200
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 152
          },
          end: {
            line: 152,
            column: 184
          }
        }, {
          start: {
            line: 152,
            column: 188
          },
          end: {
            line: 152,
            column: 200
          }
        }],
        line: 152
      },
      "15": {
        loc: {
          start: {
            line: 160,
            column: 34
          },
          end: {
            line: 160,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 34
          },
          end: {
            line: 160,
            column: 70
          }
        }, {
          start: {
            line: 160,
            column: 74
          },
          end: {
            line: 160,
            column: 87
          }
        }],
        line: 160
      },
      "16": {
        loc: {
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "17": {
        loc: {
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 202,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 202,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "18": {
        loc: {
          start: {
            line: 204,
            column: 28
          },
          end: {
            line: 204,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 39
          },
          end: {
            line: 204,
            column: 49
          }
        }, {
          start: {
            line: 204,
            column: 52
          },
          end: {
            line: 204,
            column: 62
          }
        }],
        line: 204
      },
      "19": {
        loc: {
          start: {
            line: 211,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "20": {
        loc: {
          start: {
            line: 211,
            column: 20
          },
          end: {
            line: 211,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 20
          },
          end: {
            line: 211,
            column: 28
          }
        }, {
          start: {
            line: 211,
            column: 32
          },
          end: {
            line: 211,
            column: 48
          }
        }],
        line: 211
      },
      "21": {
        loc: {
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "22": {
        loc: {
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "23": {
        loc: {
          start: {
            line: 343,
            column: 16
          },
          end: {
            line: 345,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 16
          },
          end: {
            line: 345,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "24": {
        loc: {
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 349,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 349,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "25": {
        loc: {
          start: {
            line: 351,
            column: 28
          },
          end: {
            line: 351,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 351,
            column: 39
          },
          end: {
            line: 351,
            column: 49
          }
        }, {
          start: {
            line: 351,
            column: 52
          },
          end: {
            line: 351,
            column: 62
          }
        }],
        line: 351
      },
      "26": {
        loc: {
          start: {
            line: 359,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "27": {
        loc: {
          start: {
            line: 383,
            column: 16
          },
          end: {
            line: 389,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 16
          },
          end: {
            line: 389,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      },
      "28": {
        loc: {
          start: {
            line: 392,
            column: 16
          },
          end: {
            line: 402,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 393,
            column: 20
          },
          end: {
            line: 395,
            column: 30
          }
        }, {
          start: {
            line: 396,
            column: 20
          },
          end: {
            line: 398,
            column: 30
          }
        }, {
          start: {
            line: 399,
            column: 20
          },
          end: {
            line: 401,
            column: 30
          }
        }],
        line: 392
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0]
    },
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\paymentSystemService.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\paymentSystemService.ts"],
      sourcesContent: ["import { db } from '../utils/firebase';\nimport { logger } from './loggerService';\nimport { uploadToS3 } from '../utils/idriveE2';\nimport { \n  BankAccount, \n  UserDeposit, \n  EventPayment, \n  MusicianEarnings, \n  WithdrawalRequest, \n  UserBalance, \n  CommissionCalculation,\n  PaymentStatistics,\n  BankAccountData,\n  DepositRequest,\n  WithdrawalRequestData,\n  EventPaymentRequest\n} from '../types/paymentTypes';\n\nexport class PaymentSystemService {\n  private readonly COMMISSION_RATE = 0.10; // 10% de comisi\xF3n\n\n  /**\n   * Calcular comisi\xF3n de la plataforma\n   */\n  private calculateCommission(eventAmount: number): CommissionCalculation {\n    const commission = eventAmount * this.COMMISSION_RATE;\n    const musicianAmount = eventAmount - commission;\n    \n    return {\n      totalAmount: eventAmount,\n      commissionAmount: commission,\n      musicianAmount: musicianAmount,\n      commissionRate: this.COMMISSION_RATE\n    };\n  }\n\n  /**\n   * Obtener balance de usuario\n   */\n  async getUserBalance(userId: string): Promise<UserBalance> {\n    try {\n      logger.info('Obteniendo balance de usuario', { metadata: { userId } });\n      \n      const balanceDoc = await db.collection('user_balances').doc(userId).get();\n      \n      if (!balanceDoc.exists) {\n        // Crear balance inicial si no existe\n        const initialBalance: UserBalance = {\n          userId,\n          balance: 0,\n          currency: 'RD$',\n          lastUpdated: new Date().toISOString(),\n          totalDeposits: 0,\n          totalWithdrawals: 0,\n          totalEarnings: 0\n        };\n        \n        await db.collection('user_balances').doc(userId).set(initialBalance);\n        return initialBalance;\n      }\n      \n      return balanceDoc.data() as UserBalance;\n    } catch (error) {\n      logger.error('Error obteniendo balance de usuario', error as Error, { \n        metadata: { userId } \n      });\n      throw new Error('Error obteniendo balance de usuario');\n    }\n  }\n\n  /**\n   * Registrar cuenta bancaria\n   */\n  async registerBankAccount(userId: string, accountData: BankAccountData): Promise<BankAccount> {\n    try {\n      logger.info('Registrando cuenta bancaria', { metadata: { userId } });\n      \n      const bankAccount: BankAccount = {\n        id: `bank_${Date.now()}_${userId}`,\n        userId,\n        ...accountData,\n        isVerified: false,\n        isDefault: false,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('bank_accounts').doc(bankAccount.id).set(bankAccount);\n      \n      // Si es la primera cuenta, establecer como default\n      const userAccounts = await db.collection('bank_accounts')\n        .where('userId', '==', userId)\n        .get();\n      \n      if (userAccounts.size === 1) {\n        bankAccount.isDefault = true;\n        await db.collection('bank_accounts').doc(bankAccount.id).update({ isDefault: true });\n      }\n      \n      return bankAccount;\n    } catch (error) {\n      logger.error('Error registrando cuenta bancaria', error as Error, { \n        metadata: { userId } \n      });\n      throw new Error('Error registrando cuenta bancaria');\n    }\n  }\n\n  /**\n   * Obtener cuentas bancarias de usuario\n   */\n  async getUserBankAccounts(userId: string): Promise<BankAccount[]> {\n    try {\n      logger.info('Obteniendo cuentas bancarias de usuario', { metadata: { userId } });\n      \n      try {\n        // Intentar consulta optimizada con \xEDndices\n        const accountsSnapshot = await db.collection('bank_accounts')\n          .where('userId', '==', userId)\n          .orderBy('isDefault', 'desc')\n          .orderBy('createdAt', 'desc')\n          .get();\n        \n        return accountsSnapshot.docs.map(doc => doc.data() as BankAccount);\n      } catch (indexError) {\n        // Si falla por falta de \xEDndice, usar consulta simple y ordenar en memoria\n        const error = indexError as any;\n        if (error.code === 'FAILED_PRECONDITION' && error.message?.includes('index')) {\n          logger.warn('\xCDndice no disponible, usando ordenamiento en memoria', { \n            metadata: { userId, error: error.message } \n          });\n          \n          const accountsSnapshot = await db.collection('bank_accounts')\n            .where('userId', '==', userId)\n            .get();\n          \n          const accounts = accountsSnapshot.docs.map(doc => doc.data() as BankAccount);\n          \n          // Ordenar por default primero, luego por fecha de creaci\xF3n\n          return accounts.sort((a, b) => {\n            // Primero por isDefault (descendente)\n            if (a.isDefault !== b.isDefault) {\n              return b.isDefault ? 1 : -1;\n            }\n            // Luego por createdAt (descendente)\n            return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n          });\n        } else {\n          // Si es otro tipo de error, relanzarlo\n          throw indexError;\n        }\n      }\n    } catch (error) {\n      logger.error('Error obteniendo cuentas bancarias', error as Error, { \n        metadata: { userId } \n      });\n      throw new Error('Error obteniendo cuentas bancarias');\n    }\n  }\n\n  /**\n   * Subir comprobante de dep\xF3sito\n   */\n  async uploadDepositVoucher(userId: string, depositData: DepositRequest): Promise<UserDeposit> {\n    try {\n      logger.info('Subiendo comprobante de dep\xF3sito', { metadata: { userId, amount: depositData.amount } });\n      \n      // Subir archivo a S3\n      const fileUrl = await uploadToS3(\n        depositData.voucherFile.buffer,\n        depositData.voucherFile.originalname || 'voucher.jpg',\n        depositData.voucherFile.mimetype || 'image/jpeg',\n        'deposits'\n      );\n      \n      const deposit: UserDeposit = {\n        id: `deposit_${Date.now()}_${userId}`,\n        userId,\n        amount: depositData.amount,\n        currency: 'RD$',\n        voucherFile: {\n          url: fileUrl,\n          filename: depositData.voucherFile.originalname || 'voucher.jpg',\n          uploadedAt: new Date().toISOString()\n        },\n        // Informaci\xF3n del dep\xF3sito bancario\n        accountHolderName: depositData.accountHolderName,\n        accountNumber: depositData.accountNumber,\n        bankName: depositData.bankName,\n        depositDate: depositData.depositDate,\n        depositTime: depositData.depositTime,\n        referenceNumber: depositData.referenceNumber,\n        comments: depositData.comments,\n        // Estado inicial\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('user_deposits').doc(deposit.id).set(deposit);\n      \n      return deposit;\n    } catch (error) {\n      logger.error('Error subiendo comprobante de dep\xF3sito', error as Error, { \n        metadata: { userId } \n      });\n      throw new Error('Error subiendo comprobante de dep\xF3sito');\n    }\n  }\n\n  /**\n   * Verificar dep\xF3sito (admin)\n   */\n  async verifyDeposit(\n    depositId: string, \n    adminId: string, \n    approved: boolean, \n    notes?: string,\n    verificationData?: {\n      bankDepositDate: string;\n      bankDepositTime: string;\n      referenceNumber: string;\n      accountLastFourDigits: string;\n      verifiedBy: string;\n    }\n  ): Promise<void> {\n    try {\n      logger.info('Verificando dep\xF3sito', { metadata: { depositId, adminId, approved } });\n      \n      const depositRef = db.collection('user_deposits').doc(depositId);\n      const depositDoc = await depositRef.get();\n      \n      if (!depositDoc.exists) {\n        throw new Error('Dep\xF3sito no encontrado');\n      }\n      \n      const deposit = depositDoc.data() as UserDeposit;\n      \n      if (deposit.status !== 'pending') {\n        throw new Error('Dep\xF3sito ya fue procesado');\n      }\n      \n      const updateData: Partial<UserDeposit> = {\n        status: approved ? 'approved' : 'rejected',\n        verifiedBy: adminId,\n        verifiedAt: new Date().toISOString(),\n        notes,\n        updatedAt: new Date().toISOString()\n      };\n\n      // Si fue aprobado y se proporcionan datos de verificaci\xF3n, agregarlos\n      if (approved && verificationData) {\n        updateData.verificationData = {\n          ...verificationData,\n          verifiedBy: adminId\n        };\n      }\n      \n      await depositRef.update(updateData);\n      \n      // Si fue aprobado, actualizar balance del usuario\n      if (approved) {\n        await this.updateUserBalance(deposit.userId, deposit.amount, 'deposit');\n      }\n    } catch (error) {\n      logger.error('Error verificando dep\xF3sito', error as Error, { \n        metadata: { depositId, adminId } \n      });\n      throw new Error('Error verificando dep\xF3sito');\n    }\n  }\n\n  /**\n   * Procesar pago de evento\n   */\n  async processEventPayment(paymentData: EventPaymentRequest): Promise<EventPayment> {\n    try {\n      logger.info('Procesando pago de evento', { \n        metadata: { \n          eventId: paymentData.eventId,\n          organizerId: paymentData.organizerId,\n          musicianId: paymentData.musicianId,\n          amount: paymentData.amount\n        }\n      });\n      \n      const commission = this.calculateCommission(paymentData.amount);\n      \n      const eventPayment: EventPayment = {\n        id: `payment_${Date.now()}_${paymentData.eventId}`,\n        eventId: paymentData.eventId,\n        organizerId: paymentData.organizerId,\n        musicianId: paymentData.musicianId,\n        amount: paymentData.amount,\n        currency: 'RD$',\n        commission: commission.commissionAmount,\n        musicianAmount: commission.musicianAmount,\n        status: 'completed',\n        paymentMethod: 'transfer',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('event_payments').doc(eventPayment.id).set(eventPayment);\n      \n      // Crear ganancia para el m\xFAsico\n      await this.createMusicianEarning(eventPayment);\n      \n      // Actualizar balance del organizador (deducir pago)\n      await this.updateUserBalance(paymentData.organizerId, -paymentData.amount, 'payment');\n      \n      return eventPayment;\n    } catch (error) {\n      logger.error('Error procesando pago de evento', error as Error, { \n        metadata: { eventId: paymentData.eventId } \n      });\n      throw new Error('Error procesando pago de evento');\n    }\n  }\n\n  /**\n   * Crear ganancia para m\xFAsico\n   */\n  private async createMusicianEarning(eventPayment: EventPayment): Promise<void> {\n    try {\n      const earning: MusicianEarnings = {\n        id: `earning_${Date.now()}_${eventPayment.musicianId}`,\n        musicianId: eventPayment.musicianId,\n        eventId: eventPayment.eventId,\n        eventPaymentId: eventPayment.id,\n        amount: eventPayment.musicianAmount,\n        currency: 'RD$',\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('musician_earnings').doc(earning.id).set(earning);\n      \n      // Actualizar balance del m\xFAsico\n      await this.updateUserBalance(eventPayment.musicianId, eventPayment.musicianAmount, 'earning');\n    } catch (error) {\n      logger.error('Error creando ganancia para m\xFAsico', error as Error, { \n        metadata: { musicianId: eventPayment.musicianId, eventId: eventPayment.eventId } \n      });\n      throw new Error('Error creando ganancia para m\xFAsico');\n    }\n  }\n\n  /**\n   * Solicitar retiro de ganancias\n   */\n  async requestWithdrawal(musicianId: string, withdrawalData: WithdrawalRequestData): Promise<WithdrawalRequest> {\n    try {\n      logger.info('Solicitando retiro de ganancias', { metadata: { musicianId, amount: withdrawalData.amount } });\n      \n      // Verificar que el usuario tenga suficiente balance\n      const balance = await this.getUserBalance(musicianId);\n      if (balance.balance < withdrawalData.amount) {\n        throw new Error('Saldo insuficiente para el retiro');\n      }\n      \n      const withdrawal: WithdrawalRequest = {\n        id: `withdrawal_${Date.now()}_${musicianId}`,\n        musicianId,\n        amount: withdrawalData.amount,\n        currency: 'RD$',\n        bankAccountId: withdrawalData.bankAccountId,\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('withdrawal_requests').doc(withdrawal.id).set(withdrawal);\n      \n      return withdrawal;\n    } catch (error) {\n      logger.error('Error solicitando retiro', error as Error, { \n        metadata: { musicianId } \n      });\n      throw new Error('Error solicitando retiro');\n    }\n  }\n\n  /**\n   * Procesar retiro (admin)\n   */\n  async processWithdrawal(withdrawalId: string, adminId: string, approved: boolean, notes?: string): Promise<void> {\n    try {\n      logger.info('Procesando retiro', { metadata: { withdrawalId, adminId, approved } });\n      \n      const withdrawalRef = db.collection('withdrawal_requests').doc(withdrawalId);\n      const withdrawalDoc = await withdrawalRef.get();\n      \n      if (!withdrawalDoc.exists) {\n        throw new Error('Solicitud de retiro no encontrada');\n      }\n      \n      const withdrawal = withdrawalDoc.data() as WithdrawalRequest;\n      \n      if (withdrawal.status !== 'pending') {\n        throw new Error('Solicitud de retiro ya fue procesada');\n      }\n      \n      const updateData: Partial<WithdrawalRequest> = {\n        status: approved ? 'approved' : 'rejected',\n        processedBy: adminId,\n        processedAt: new Date().toISOString(),\n        notes,\n        updatedAt: new Date().toISOString()\n      };\n      \n      await withdrawalRef.update(updateData);\n      \n      // Si fue aprobado, actualizar balance del usuario\n      if (approved) {\n        await this.updateUserBalance(withdrawal.musicianId, -withdrawal.amount, 'withdrawal');\n      }\n    } catch (error) {\n      logger.error('Error procesando retiro', error as Error, { \n        metadata: { withdrawalId, adminId } \n      });\n      throw new Error('Error procesando retiro');\n    }\n  }\n\n  /**\n   * Actualizar balance de usuario\n   */\n  private async updateUserBalance(userId: string, amount: number, transactionType: 'deposit' | 'payment' | 'earning' | 'withdrawal'): Promise<void> {\n    try {\n      const balanceRef = db.collection('user_balances').doc(userId);\n      const balanceDoc = await balanceRef.get();\n      \n      let currentBalance = 0;\n      let totalDeposits = 0;\n      let totalWithdrawals = 0;\n      let totalEarnings = 0;\n      \n      if (balanceDoc.exists) {\n        const balance = balanceDoc.data() as UserBalance;\n        currentBalance = balance.balance;\n        totalDeposits = balance.totalDeposits;\n        totalWithdrawals = balance.totalWithdrawals;\n        totalEarnings = balance.totalEarnings;\n      }\n      \n      // Actualizar balance y estad\xEDsticas\n      const newBalance = currentBalance + amount;\n      \n      switch (transactionType) {\n        case 'deposit':\n          totalDeposits += amount;\n          break;\n        case 'withdrawal':\n          totalWithdrawals += Math.abs(amount);\n          break;\n        case 'earning':\n          totalEarnings += amount;\n          break;\n      }\n      \n      const updatedBalance: UserBalance = {\n        userId,\n        balance: newBalance,\n        currency: 'RD$',\n        lastUpdated: new Date().toISOString(),\n        totalDeposits,\n        totalWithdrawals,\n        totalEarnings\n      };\n      \n      await balanceRef.set(updatedBalance);\n    } catch (error) {\n      logger.error('Error actualizando balance de usuario', error as Error, { \n        metadata: { userId, amount, transactionType } \n      });\n      throw new Error('Error actualizando balance de usuario');\n    }\n  }\n\n  /**\n   * Obtener estad\xEDsticas de pagos (admin)\n   */\n  async getPaymentStatistics(): Promise<PaymentStatistics> {\n    try {\n      // Obtener total de dep\xF3sitos\n      const depositsSnapshot = await db.collection('user_deposits')\n        .where('status', '==', 'approved')\n        .get();\n      \n      const totalDeposits = depositsSnapshot.docs.reduce((sum, doc) => {\n        const deposit = doc.data() as UserDeposit;\n        return sum + deposit.amount;\n      }, 0);\n      \n      // Obtener total de pagos de eventos\n      const paymentsSnapshot = await db.collection('event_payments')\n        .where('status', '==', 'completed')\n        .get();\n      \n      const totalPayments = paymentsSnapshot.docs.reduce((sum, doc) => {\n        const payment = doc.data() as EventPayment;\n        return sum + payment.amount;\n      }, 0);\n      \n      const totalCommissions = paymentsSnapshot.docs.reduce((sum, doc) => {\n        const payment = doc.data() as EventPayment;\n        return sum + payment.commission;\n      }, 0);\n      \n      // Obtener total de retiros\n      const withdrawalsSnapshot = await db.collection('withdrawal_requests')\n        .where('status', '==', 'approved')\n        .get();\n      \n      const totalWithdrawals = withdrawalsSnapshot.docs.reduce((sum, doc) => {\n        const withdrawal = doc.data() as WithdrawalRequest;\n        return sum + withdrawal.amount;\n      }, 0);\n      \n      // Obtener dep\xF3sitos pendientes\n      const pendingDepositsSnapshot = await db.collection('user_deposits')\n        .where('status', '==', 'pending')\n        .get();\n      \n      // Obtener retiros pendientes\n      const pendingWithdrawalsSnapshot = await db.collection('withdrawal_requests')\n        .where('status', '==', 'pending')\n        .get();\n      \n      return {\n        totalDeposits,\n        totalPayments,\n        totalCommissions,\n        totalWithdrawals,\n        pendingDepositsCount: pendingDepositsSnapshot.size,\n        pendingWithdrawalsCount: pendingWithdrawalsSnapshot.size,\n        totalUsers: await this.getTotalUsers(),\n        totalMusicians: await this.getTotalMusicians(),\n        totalEvents: await this.getTotalEvents(),\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      logger.error('Error obteniendo estad\xEDsticas de pagos', error as Error);\n      throw new Error('Error obteniendo estad\xEDsticas de pagos');\n    }\n  }\n\n  /**\n   * Obtener dep\xF3sitos pendientes (admin)\n   */\n  async getPendingDeposits(): Promise<UserDeposit[]> {\n    try {\n      const depositsSnapshot = await db.collection('user_deposits')\n        .where('status', '==', 'pending')\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return depositsSnapshot.docs.map(doc => doc.data() as UserDeposit);\n    } catch (error) {\n      logger.error('Error obteniendo dep\xF3sitos pendientes', error as Error);\n      throw new Error('Error obteniendo dep\xF3sitos pendientes');\n    }\n  }\n\n  /**\n   * Obtener retiros pendientes (admin)\n   */\n  async getPendingWithdrawals(): Promise<WithdrawalRequest[]> {\n    try {\n      const withdrawalsSnapshot = await db.collection('withdrawal_requests')\n        .where('status', '==', 'pending')\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return withdrawalsSnapshot.docs.map(doc => doc.data() as WithdrawalRequest);\n    } catch (error) {\n      logger.error('Error obteniendo retiros pendientes', error as Error);\n      throw new Error('Error obteniendo retiros pendientes');\n    }\n  }\n\n  /**\n   * Obtener ganancias de m\xFAsico\n   */\n  async getMusicianEarnings(musicianId: string): Promise<MusicianEarnings[]> {\n    try {\n      const earningsSnapshot = await db.collection('musician_earnings')\n        .where('musicianId', '==', musicianId)\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return earningsSnapshot.docs.map(doc => doc.data() as MusicianEarnings);\n    } catch (error) {\n      logger.error('Error obteniendo ganancias de m\xFAsico', error as Error, { \n        metadata: { musicianId } \n      });\n      throw new Error('Error obteniendo ganancias de m\xFAsico');\n    }\n  }\n\n  // M\xE9todos auxiliares para estad\xEDsticas\n  private async getTotalUsers(): Promise<number> {\n    const usersSnapshot = await db.collection('users').get();\n    return usersSnapshot.size;\n  }\n\n  private async getTotalMusicians(): Promise<number> {\n    const musiciansSnapshot = await db.collection('users')\n      .where('role', '==', 'musician')\n      .get();\n    return musiciansSnapshot.size;\n  }\n\n  private async getTotalEvents(): Promise<number> {\n    const eventsSnapshot = await db.collection('events').get();\n    return eventsSnapshot.size;\n  }\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "525964058a12bbca7b1a0e15dfde44431636b32c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1phtk7vunv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1phtk7vunv();
var __awaiter =
/* istanbul ignore next */
(cov_1phtk7vunv().s[0]++,
/* istanbul ignore next */
(cov_1phtk7vunv().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1phtk7vunv().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_1phtk7vunv().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_1phtk7vunv().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[1]++;
    cov_1phtk7vunv().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_1phtk7vunv().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_1phtk7vunv().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[2]++;
      cov_1phtk7vunv().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_1phtk7vunv().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_1phtk7vunv().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_1phtk7vunv().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[4]++;
      cov_1phtk7vunv().s[4]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[5]++;
      cov_1phtk7vunv().s[7]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[6]++;
      cov_1phtk7vunv().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_1phtk7vunv().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_1phtk7vunv().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_1phtk7vunv().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_1phtk7vunv().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_1phtk7vunv().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_1phtk7vunv().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1phtk7vunv().s[13]++;
exports.PaymentSystemService = void 0;
const firebase_1 =
/* istanbul ignore next */
(cov_1phtk7vunv().s[14]++, require("../utils/firebase"));
const loggerService_1 =
/* istanbul ignore next */
(cov_1phtk7vunv().s[15]++, require("./loggerService"));
const idriveE2_1 =
/* istanbul ignore next */
(cov_1phtk7vunv().s[16]++, require("../utils/idriveE2"));
class PaymentSystemService {
  constructor() {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[7]++;
    cov_1phtk7vunv().s[17]++;
    this.COMMISSION_RATE = 0.10; // 10% de comisión
  }
  /**
   * Calcular comisión de la plataforma
   */
  calculateCommission(eventAmount) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[8]++;
    const commission =
    /* istanbul ignore next */
    (cov_1phtk7vunv().s[18]++, eventAmount * this.COMMISSION_RATE);
    const musicianAmount =
    /* istanbul ignore next */
    (cov_1phtk7vunv().s[19]++, eventAmount - commission);
    /* istanbul ignore next */
    cov_1phtk7vunv().s[20]++;
    return {
      totalAmount: eventAmount,
      commissionAmount: commission,
      musicianAmount: musicianAmount,
      commissionRate: this.COMMISSION_RATE
    };
  }
  /**
   * Obtener balance de usuario
   */
  getUserBalance(userId) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[9]++;
    cov_1phtk7vunv().s[21]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[10]++;
      cov_1phtk7vunv().s[22]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[23]++;
        loggerService_1.logger.info('Obteniendo balance de usuario', {
          metadata: {
            userId
          }
        });
        const balanceDoc =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[24]++, yield firebase_1.db.collection('user_balances').doc(userId).get());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[25]++;
        if (!balanceDoc.exists) {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[5][0]++;
          // Crear balance inicial si no existe
          const initialBalance =
          /* istanbul ignore next */
          (cov_1phtk7vunv().s[26]++, {
            userId,
            balance: 0,
            currency: 'RD$',
            lastUpdated: new Date().toISOString(),
            totalDeposits: 0,
            totalWithdrawals: 0,
            totalEarnings: 0
          });
          /* istanbul ignore next */
          cov_1phtk7vunv().s[27]++;
          yield firebase_1.db.collection('user_balances').doc(userId).set(initialBalance);
          /* istanbul ignore next */
          cov_1phtk7vunv().s[28]++;
          return initialBalance;
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[5][1]++;
        }
        cov_1phtk7vunv().s[29]++;
        return balanceDoc.data();
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[30]++;
        loggerService_1.logger.error('Error obteniendo balance de usuario', error, {
          metadata: {
            userId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[31]++;
        throw new Error('Error obteniendo balance de usuario');
      }
    });
  }
  /**
   * Registrar cuenta bancaria
   */
  registerBankAccount(userId, accountData) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[11]++;
    cov_1phtk7vunv().s[32]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[12]++;
      cov_1phtk7vunv().s[33]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[34]++;
        loggerService_1.logger.info('Registrando cuenta bancaria', {
          metadata: {
            userId
          }
        });
        const bankAccount =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[35]++, Object.assign(Object.assign({
          id: `bank_${Date.now()}_${userId}`,
          userId
        }, accountData), {
          isVerified: false,
          isDefault: false,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }));
        /* istanbul ignore next */
        cov_1phtk7vunv().s[36]++;
        yield firebase_1.db.collection('bank_accounts').doc(bankAccount.id).set(bankAccount);
        // Si es la primera cuenta, establecer como default
        const userAccounts =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[37]++, yield firebase_1.db.collection('bank_accounts').where('userId', '==', userId).get());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[38]++;
        if (userAccounts.size === 1) {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[6][0]++;
          cov_1phtk7vunv().s[39]++;
          bankAccount.isDefault = true;
          /* istanbul ignore next */
          cov_1phtk7vunv().s[40]++;
          yield firebase_1.db.collection('bank_accounts').doc(bankAccount.id).update({
            isDefault: true
          });
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[6][1]++;
        }
        cov_1phtk7vunv().s[41]++;
        return bankAccount;
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[42]++;
        loggerService_1.logger.error('Error registrando cuenta bancaria', error, {
          metadata: {
            userId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[43]++;
        throw new Error('Error registrando cuenta bancaria');
      }
    });
  }
  /**
   * Obtener cuentas bancarias de usuario
   */
  getUserBankAccounts(userId) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[13]++;
    cov_1phtk7vunv().s[44]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[14]++;
      var _a;
      /* istanbul ignore next */
      cov_1phtk7vunv().s[45]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[46]++;
        loggerService_1.logger.info('Obteniendo cuentas bancarias de usuario', {
          metadata: {
            userId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[47]++;
        try {
          // Intentar consulta optimizada con índices
          const accountsSnapshot =
          /* istanbul ignore next */
          (cov_1phtk7vunv().s[48]++, yield firebase_1.db.collection('bank_accounts').where('userId', '==', userId).orderBy('isDefault', 'desc').orderBy('createdAt', 'desc').get());
          /* istanbul ignore next */
          cov_1phtk7vunv().s[49]++;
          return accountsSnapshot.docs.map(doc => {
            /* istanbul ignore next */
            cov_1phtk7vunv().f[15]++;
            cov_1phtk7vunv().s[50]++;
            return doc.data();
          });
        } catch (indexError) {
          // Si falla por falta de índice, usar consulta simple y ordenar en memoria
          const error =
          /* istanbul ignore next */
          (cov_1phtk7vunv().s[51]++, indexError);
          /* istanbul ignore next */
          cov_1phtk7vunv().s[52]++;
          if (
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[8][0]++, error.code === 'FAILED_PRECONDITION') &&
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[8][1]++,
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[10][0]++, (_a = error.message) === null) ||
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[10][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[9][0]++, void 0) :
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[9][1]++, _a.includes('index')))) {
            /* istanbul ignore next */
            cov_1phtk7vunv().b[7][0]++;
            cov_1phtk7vunv().s[53]++;
            loggerService_1.logger.warn('Índice no disponible, usando ordenamiento en memoria', {
              metadata: {
                userId,
                error: error.message
              }
            });
            const accountsSnapshot =
            /* istanbul ignore next */
            (cov_1phtk7vunv().s[54]++, yield firebase_1.db.collection('bank_accounts').where('userId', '==', userId).get());
            const accounts =
            /* istanbul ignore next */
            (cov_1phtk7vunv().s[55]++, accountsSnapshot.docs.map(doc => {
              /* istanbul ignore next */
              cov_1phtk7vunv().f[16]++;
              cov_1phtk7vunv().s[56]++;
              return doc.data();
            }));
            // Ordenar por default primero, luego por fecha de creación
            /* istanbul ignore next */
            cov_1phtk7vunv().s[57]++;
            return accounts.sort((a, b) => {
              /* istanbul ignore next */
              cov_1phtk7vunv().f[17]++;
              cov_1phtk7vunv().s[58]++;
              // Primero por isDefault (descendente)
              if (a.isDefault !== b.isDefault) {
                /* istanbul ignore next */
                cov_1phtk7vunv().b[11][0]++;
                cov_1phtk7vunv().s[59]++;
                return b.isDefault ?
                /* istanbul ignore next */
                (cov_1phtk7vunv().b[12][0]++, 1) :
                /* istanbul ignore next */
                (cov_1phtk7vunv().b[12][1]++, -1);
              } else
              /* istanbul ignore next */
              {
                cov_1phtk7vunv().b[11][1]++;
              }
              // Luego por createdAt (descendente)
              cov_1phtk7vunv().s[60]++;
              return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
            });
          } else {
            /* istanbul ignore next */
            cov_1phtk7vunv().b[7][1]++;
            cov_1phtk7vunv().s[61]++;
            // Si es otro tipo de error, relanzarlo
            throw indexError;
          }
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[62]++;
        loggerService_1.logger.error('Error obteniendo cuentas bancarias', error, {
          metadata: {
            userId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[63]++;
        throw new Error('Error obteniendo cuentas bancarias');
      }
    });
  }
  /**
   * Subir comprobante de depósito
   */
  uploadDepositVoucher(userId, depositData) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[18]++;
    cov_1phtk7vunv().s[64]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[19]++;
      cov_1phtk7vunv().s[65]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[66]++;
        loggerService_1.logger.info('Subiendo comprobante de depósito', {
          metadata: {
            userId,
            amount: depositData.amount
          }
        });
        // Subir archivo a S3
        const fileUrl =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[67]++, yield (0, idriveE2_1.uploadToS3)(depositData.voucherFile.buffer,
        /* istanbul ignore next */
        (cov_1phtk7vunv().b[13][0]++, depositData.voucherFile.originalname) ||
        /* istanbul ignore next */
        (cov_1phtk7vunv().b[13][1]++, 'voucher.jpg'),
        /* istanbul ignore next */
        (cov_1phtk7vunv().b[14][0]++, depositData.voucherFile.mimetype) ||
        /* istanbul ignore next */
        (cov_1phtk7vunv().b[14][1]++, 'image/jpeg'), 'deposits'));
        const deposit =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[68]++, {
          id: `deposit_${Date.now()}_${userId}`,
          userId,
          amount: depositData.amount,
          currency: 'RD$',
          voucherFile: {
            url: fileUrl,
            filename:
            /* istanbul ignore next */
            (cov_1phtk7vunv().b[15][0]++, depositData.voucherFile.originalname) ||
            /* istanbul ignore next */
            (cov_1phtk7vunv().b[15][1]++, 'voucher.jpg'),
            uploadedAt: new Date().toISOString()
          },
          // Información del depósito bancario
          accountHolderName: depositData.accountHolderName,
          accountNumber: depositData.accountNumber,
          bankName: depositData.bankName,
          depositDate: depositData.depositDate,
          depositTime: depositData.depositTime,
          referenceNumber: depositData.referenceNumber,
          comments: depositData.comments,
          // Estado inicial
          status: 'pending',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[69]++;
        yield firebase_1.db.collection('user_deposits').doc(deposit.id).set(deposit);
        /* istanbul ignore next */
        cov_1phtk7vunv().s[70]++;
        return deposit;
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[71]++;
        loggerService_1.logger.error('Error subiendo comprobante de depósito', error, {
          metadata: {
            userId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[72]++;
        throw new Error('Error subiendo comprobante de depósito');
      }
    });
  }
  /**
   * Verificar depósito (admin)
   */
  verifyDeposit(depositId, adminId, approved, notes, verificationData) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[20]++;
    cov_1phtk7vunv().s[73]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[21]++;
      cov_1phtk7vunv().s[74]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[75]++;
        loggerService_1.logger.info('Verificando depósito', {
          metadata: {
            depositId,
            adminId,
            approved
          }
        });
        const depositRef =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[76]++, firebase_1.db.collection('user_deposits').doc(depositId));
        const depositDoc =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[77]++, yield depositRef.get());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[78]++;
        if (!depositDoc.exists) {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[16][0]++;
          cov_1phtk7vunv().s[79]++;
          throw new Error('Depósito no encontrado');
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[16][1]++;
        }
        const deposit =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[80]++, depositDoc.data());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[81]++;
        if (deposit.status !== 'pending') {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[17][0]++;
          cov_1phtk7vunv().s[82]++;
          throw new Error('Depósito ya fue procesado');
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[17][1]++;
        }
        const updateData =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[83]++, {
          status: approved ?
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[18][0]++, 'approved') :
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[18][1]++, 'rejected'),
          verifiedBy: adminId,
          verifiedAt: new Date().toISOString(),
          notes,
          updatedAt: new Date().toISOString()
        });
        // Si fue aprobado y se proporcionan datos de verificación, agregarlos
        /* istanbul ignore next */
        cov_1phtk7vunv().s[84]++;
        if (
        /* istanbul ignore next */
        (cov_1phtk7vunv().b[20][0]++, approved) &&
        /* istanbul ignore next */
        (cov_1phtk7vunv().b[20][1]++, verificationData)) {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[19][0]++;
          cov_1phtk7vunv().s[85]++;
          updateData.verificationData = Object.assign(Object.assign({}, verificationData), {
            verifiedBy: adminId
          });
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[19][1]++;
        }
        cov_1phtk7vunv().s[86]++;
        yield depositRef.update(updateData);
        // Si fue aprobado, actualizar balance del usuario
        /* istanbul ignore next */
        cov_1phtk7vunv().s[87]++;
        if (approved) {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[21][0]++;
          cov_1phtk7vunv().s[88]++;
          yield this.updateUserBalance(deposit.userId, deposit.amount, 'deposit');
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[21][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[89]++;
        loggerService_1.logger.error('Error verificando depósito', error, {
          metadata: {
            depositId,
            adminId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[90]++;
        throw new Error('Error verificando depósito');
      }
    });
  }
  /**
   * Procesar pago de evento
   */
  processEventPayment(paymentData) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[22]++;
    cov_1phtk7vunv().s[91]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[23]++;
      cov_1phtk7vunv().s[92]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[93]++;
        loggerService_1.logger.info('Procesando pago de evento', {
          metadata: {
            eventId: paymentData.eventId,
            organizerId: paymentData.organizerId,
            musicianId: paymentData.musicianId,
            amount: paymentData.amount
          }
        });
        const commission =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[94]++, this.calculateCommission(paymentData.amount));
        const eventPayment =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[95]++, {
          id: `payment_${Date.now()}_${paymentData.eventId}`,
          eventId: paymentData.eventId,
          organizerId: paymentData.organizerId,
          musicianId: paymentData.musicianId,
          amount: paymentData.amount,
          currency: 'RD$',
          commission: commission.commissionAmount,
          musicianAmount: commission.musicianAmount,
          status: 'completed',
          paymentMethod: 'transfer',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[96]++;
        yield firebase_1.db.collection('event_payments').doc(eventPayment.id).set(eventPayment);
        // Crear ganancia para el músico
        /* istanbul ignore next */
        cov_1phtk7vunv().s[97]++;
        yield this.createMusicianEarning(eventPayment);
        // Actualizar balance del organizador (deducir pago)
        /* istanbul ignore next */
        cov_1phtk7vunv().s[98]++;
        yield this.updateUserBalance(paymentData.organizerId, -paymentData.amount, 'payment');
        /* istanbul ignore next */
        cov_1phtk7vunv().s[99]++;
        return eventPayment;
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[100]++;
        loggerService_1.logger.error('Error procesando pago de evento', error, {
          metadata: {
            eventId: paymentData.eventId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[101]++;
        throw new Error('Error procesando pago de evento');
      }
    });
  }
  /**
   * Crear ganancia para músico
   */
  createMusicianEarning(eventPayment) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[24]++;
    cov_1phtk7vunv().s[102]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[25]++;
      cov_1phtk7vunv().s[103]++;
      try {
        const earning =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[104]++, {
          id: `earning_${Date.now()}_${eventPayment.musicianId}`,
          musicianId: eventPayment.musicianId,
          eventId: eventPayment.eventId,
          eventPaymentId: eventPayment.id,
          amount: eventPayment.musicianAmount,
          currency: 'RD$',
          status: 'pending',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[105]++;
        yield firebase_1.db.collection('musician_earnings').doc(earning.id).set(earning);
        // Actualizar balance del músico
        /* istanbul ignore next */
        cov_1phtk7vunv().s[106]++;
        yield this.updateUserBalance(eventPayment.musicianId, eventPayment.musicianAmount, 'earning');
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[107]++;
        loggerService_1.logger.error('Error creando ganancia para músico', error, {
          metadata: {
            musicianId: eventPayment.musicianId,
            eventId: eventPayment.eventId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[108]++;
        throw new Error('Error creando ganancia para músico');
      }
    });
  }
  /**
   * Solicitar retiro de ganancias
   */
  requestWithdrawal(musicianId, withdrawalData) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[26]++;
    cov_1phtk7vunv().s[109]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[27]++;
      cov_1phtk7vunv().s[110]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[111]++;
        loggerService_1.logger.info('Solicitando retiro de ganancias', {
          metadata: {
            musicianId,
            amount: withdrawalData.amount
          }
        });
        // Verificar que el usuario tenga suficiente balance
        const balance =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[112]++, yield this.getUserBalance(musicianId));
        /* istanbul ignore next */
        cov_1phtk7vunv().s[113]++;
        if (balance.balance < withdrawalData.amount) {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[22][0]++;
          cov_1phtk7vunv().s[114]++;
          throw new Error('Saldo insuficiente para el retiro');
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[22][1]++;
        }
        const withdrawal =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[115]++, {
          id: `withdrawal_${Date.now()}_${musicianId}`,
          musicianId,
          amount: withdrawalData.amount,
          currency: 'RD$',
          bankAccountId: withdrawalData.bankAccountId,
          status: 'pending',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[116]++;
        yield firebase_1.db.collection('withdrawal_requests').doc(withdrawal.id).set(withdrawal);
        /* istanbul ignore next */
        cov_1phtk7vunv().s[117]++;
        return withdrawal;
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[118]++;
        loggerService_1.logger.error('Error solicitando retiro', error, {
          metadata: {
            musicianId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[119]++;
        throw new Error('Error solicitando retiro');
      }
    });
  }
  /**
   * Procesar retiro (admin)
   */
  processWithdrawal(withdrawalId, adminId, approved, notes) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[28]++;
    cov_1phtk7vunv().s[120]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[29]++;
      cov_1phtk7vunv().s[121]++;
      try {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[122]++;
        loggerService_1.logger.info('Procesando retiro', {
          metadata: {
            withdrawalId,
            adminId,
            approved
          }
        });
        const withdrawalRef =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[123]++, firebase_1.db.collection('withdrawal_requests').doc(withdrawalId));
        const withdrawalDoc =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[124]++, yield withdrawalRef.get());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[125]++;
        if (!withdrawalDoc.exists) {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[23][0]++;
          cov_1phtk7vunv().s[126]++;
          throw new Error('Solicitud de retiro no encontrada');
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[23][1]++;
        }
        const withdrawal =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[127]++, withdrawalDoc.data());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[128]++;
        if (withdrawal.status !== 'pending') {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[24][0]++;
          cov_1phtk7vunv().s[129]++;
          throw new Error('Solicitud de retiro ya fue procesada');
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[24][1]++;
        }
        const updateData =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[130]++, {
          status: approved ?
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[25][0]++, 'approved') :
          /* istanbul ignore next */
          (cov_1phtk7vunv().b[25][1]++, 'rejected'),
          processedBy: adminId,
          processedAt: new Date().toISOString(),
          notes,
          updatedAt: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[131]++;
        yield withdrawalRef.update(updateData);
        // Si fue aprobado, actualizar balance del usuario
        /* istanbul ignore next */
        cov_1phtk7vunv().s[132]++;
        if (approved) {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[26][0]++;
          cov_1phtk7vunv().s[133]++;
          yield this.updateUserBalance(withdrawal.musicianId, -withdrawal.amount, 'withdrawal');
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[26][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[134]++;
        loggerService_1.logger.error('Error procesando retiro', error, {
          metadata: {
            withdrawalId,
            adminId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[135]++;
        throw new Error('Error procesando retiro');
      }
    });
  }
  /**
   * Actualizar balance de usuario
   */
  updateUserBalance(userId, amount, transactionType) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[30]++;
    cov_1phtk7vunv().s[136]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[31]++;
      cov_1phtk7vunv().s[137]++;
      try {
        const balanceRef =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[138]++, firebase_1.db.collection('user_balances').doc(userId));
        const balanceDoc =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[139]++, yield balanceRef.get());
        let currentBalance =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[140]++, 0);
        let totalDeposits =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[141]++, 0);
        let totalWithdrawals =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[142]++, 0);
        let totalEarnings =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[143]++, 0);
        /* istanbul ignore next */
        cov_1phtk7vunv().s[144]++;
        if (balanceDoc.exists) {
          /* istanbul ignore next */
          cov_1phtk7vunv().b[27][0]++;
          const balance =
          /* istanbul ignore next */
          (cov_1phtk7vunv().s[145]++, balanceDoc.data());
          /* istanbul ignore next */
          cov_1phtk7vunv().s[146]++;
          currentBalance = balance.balance;
          /* istanbul ignore next */
          cov_1phtk7vunv().s[147]++;
          totalDeposits = balance.totalDeposits;
          /* istanbul ignore next */
          cov_1phtk7vunv().s[148]++;
          totalWithdrawals = balance.totalWithdrawals;
          /* istanbul ignore next */
          cov_1phtk7vunv().s[149]++;
          totalEarnings = balance.totalEarnings;
        } else
        /* istanbul ignore next */
        {
          cov_1phtk7vunv().b[27][1]++;
        }
        // Actualizar balance y estadísticas
        const newBalance =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[150]++, currentBalance + amount);
        /* istanbul ignore next */
        cov_1phtk7vunv().s[151]++;
        switch (transactionType) {
          case 'deposit':
            /* istanbul ignore next */
            cov_1phtk7vunv().b[28][0]++;
            cov_1phtk7vunv().s[152]++;
            totalDeposits += amount;
            /* istanbul ignore next */
            cov_1phtk7vunv().s[153]++;
            break;
          case 'withdrawal':
            /* istanbul ignore next */
            cov_1phtk7vunv().b[28][1]++;
            cov_1phtk7vunv().s[154]++;
            totalWithdrawals += Math.abs(amount);
            /* istanbul ignore next */
            cov_1phtk7vunv().s[155]++;
            break;
          case 'earning':
            /* istanbul ignore next */
            cov_1phtk7vunv().b[28][2]++;
            cov_1phtk7vunv().s[156]++;
            totalEarnings += amount;
            /* istanbul ignore next */
            cov_1phtk7vunv().s[157]++;
            break;
        }
        const updatedBalance =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[158]++, {
          userId,
          balance: newBalance,
          currency: 'RD$',
          lastUpdated: new Date().toISOString(),
          totalDeposits,
          totalWithdrawals,
          totalEarnings
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[159]++;
        yield balanceRef.set(updatedBalance);
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[160]++;
        loggerService_1.logger.error('Error actualizando balance de usuario', error, {
          metadata: {
            userId,
            amount,
            transactionType
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[161]++;
        throw new Error('Error actualizando balance de usuario');
      }
    });
  }
  /**
   * Obtener estadísticas de pagos (admin)
   */
  getPaymentStatistics() {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[32]++;
    cov_1phtk7vunv().s[162]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[33]++;
      cov_1phtk7vunv().s[163]++;
      try {
        // Obtener total de depósitos
        const depositsSnapshot =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[164]++, yield firebase_1.db.collection('user_deposits').where('status', '==', 'approved').get());
        const totalDeposits =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[165]++, depositsSnapshot.docs.reduce((sum, doc) => {
          /* istanbul ignore next */
          cov_1phtk7vunv().f[34]++;
          const deposit =
          /* istanbul ignore next */
          (cov_1phtk7vunv().s[166]++, doc.data());
          /* istanbul ignore next */
          cov_1phtk7vunv().s[167]++;
          return sum + deposit.amount;
        }, 0));
        // Obtener total de pagos de eventos
        const paymentsSnapshot =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[168]++, yield firebase_1.db.collection('event_payments').where('status', '==', 'completed').get());
        const totalPayments =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[169]++, paymentsSnapshot.docs.reduce((sum, doc) => {
          /* istanbul ignore next */
          cov_1phtk7vunv().f[35]++;
          const payment =
          /* istanbul ignore next */
          (cov_1phtk7vunv().s[170]++, doc.data());
          /* istanbul ignore next */
          cov_1phtk7vunv().s[171]++;
          return sum + payment.amount;
        }, 0));
        const totalCommissions =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[172]++, paymentsSnapshot.docs.reduce((sum, doc) => {
          /* istanbul ignore next */
          cov_1phtk7vunv().f[36]++;
          const payment =
          /* istanbul ignore next */
          (cov_1phtk7vunv().s[173]++, doc.data());
          /* istanbul ignore next */
          cov_1phtk7vunv().s[174]++;
          return sum + payment.commission;
        }, 0));
        // Obtener total de retiros
        const withdrawalsSnapshot =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[175]++, yield firebase_1.db.collection('withdrawal_requests').where('status', '==', 'approved').get());
        const totalWithdrawals =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[176]++, withdrawalsSnapshot.docs.reduce((sum, doc) => {
          /* istanbul ignore next */
          cov_1phtk7vunv().f[37]++;
          const withdrawal =
          /* istanbul ignore next */
          (cov_1phtk7vunv().s[177]++, doc.data());
          /* istanbul ignore next */
          cov_1phtk7vunv().s[178]++;
          return sum + withdrawal.amount;
        }, 0));
        // Obtener depósitos pendientes
        const pendingDepositsSnapshot =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[179]++, yield firebase_1.db.collection('user_deposits').where('status', '==', 'pending').get());
        // Obtener retiros pendientes
        const pendingWithdrawalsSnapshot =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[180]++, yield firebase_1.db.collection('withdrawal_requests').where('status', '==', 'pending').get());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[181]++;
        return {
          totalDeposits,
          totalPayments,
          totalCommissions,
          totalWithdrawals,
          pendingDepositsCount: pendingDepositsSnapshot.size,
          pendingWithdrawalsCount: pendingWithdrawalsSnapshot.size,
          totalUsers: yield this.getTotalUsers(),
          totalMusicians: yield this.getTotalMusicians(),
          totalEvents: yield this.getTotalEvents(),
          lastUpdated: new Date().toISOString()
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[182]++;
        loggerService_1.logger.error('Error obteniendo estadísticas de pagos', error);
        /* istanbul ignore next */
        cov_1phtk7vunv().s[183]++;
        throw new Error('Error obteniendo estadísticas de pagos');
      }
    });
  }
  /**
   * Obtener depósitos pendientes (admin)
   */
  getPendingDeposits() {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[38]++;
    cov_1phtk7vunv().s[184]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[39]++;
      cov_1phtk7vunv().s[185]++;
      try {
        const depositsSnapshot =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[186]++, yield firebase_1.db.collection('user_deposits').where('status', '==', 'pending').orderBy('createdAt', 'desc').get());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[187]++;
        return depositsSnapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_1phtk7vunv().f[40]++;
          cov_1phtk7vunv().s[188]++;
          return doc.data();
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[189]++;
        loggerService_1.logger.error('Error obteniendo depósitos pendientes', error);
        /* istanbul ignore next */
        cov_1phtk7vunv().s[190]++;
        throw new Error('Error obteniendo depósitos pendientes');
      }
    });
  }
  /**
   * Obtener retiros pendientes (admin)
   */
  getPendingWithdrawals() {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[41]++;
    cov_1phtk7vunv().s[191]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[42]++;
      cov_1phtk7vunv().s[192]++;
      try {
        const withdrawalsSnapshot =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[193]++, yield firebase_1.db.collection('withdrawal_requests').where('status', '==', 'pending').orderBy('createdAt', 'desc').get());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[194]++;
        return withdrawalsSnapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_1phtk7vunv().f[43]++;
          cov_1phtk7vunv().s[195]++;
          return doc.data();
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[196]++;
        loggerService_1.logger.error('Error obteniendo retiros pendientes', error);
        /* istanbul ignore next */
        cov_1phtk7vunv().s[197]++;
        throw new Error('Error obteniendo retiros pendientes');
      }
    });
  }
  /**
   * Obtener ganancias de músico
   */
  getMusicianEarnings(musicianId) {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[44]++;
    cov_1phtk7vunv().s[198]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[45]++;
      cov_1phtk7vunv().s[199]++;
      try {
        const earningsSnapshot =
        /* istanbul ignore next */
        (cov_1phtk7vunv().s[200]++, yield firebase_1.db.collection('musician_earnings').where('musicianId', '==', musicianId).orderBy('createdAt', 'desc').get());
        /* istanbul ignore next */
        cov_1phtk7vunv().s[201]++;
        return earningsSnapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_1phtk7vunv().f[46]++;
          cov_1phtk7vunv().s[202]++;
          return doc.data();
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1phtk7vunv().s[203]++;
        loggerService_1.logger.error('Error obteniendo ganancias de músico', error, {
          metadata: {
            musicianId
          }
        });
        /* istanbul ignore next */
        cov_1phtk7vunv().s[204]++;
        throw new Error('Error obteniendo ganancias de músico');
      }
    });
  }
  // Métodos auxiliares para estadísticas
  getTotalUsers() {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[47]++;
    cov_1phtk7vunv().s[205]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[48]++;
      const usersSnapshot =
      /* istanbul ignore next */
      (cov_1phtk7vunv().s[206]++, yield firebase_1.db.collection('users').get());
      /* istanbul ignore next */
      cov_1phtk7vunv().s[207]++;
      return usersSnapshot.size;
    });
  }
  getTotalMusicians() {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[49]++;
    cov_1phtk7vunv().s[208]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[50]++;
      const musiciansSnapshot =
      /* istanbul ignore next */
      (cov_1phtk7vunv().s[209]++, yield firebase_1.db.collection('users').where('role', '==', 'musician').get());
      /* istanbul ignore next */
      cov_1phtk7vunv().s[210]++;
      return musiciansSnapshot.size;
    });
  }
  getTotalEvents() {
    /* istanbul ignore next */
    cov_1phtk7vunv().f[51]++;
    cov_1phtk7vunv().s[211]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1phtk7vunv().f[52]++;
      const eventsSnapshot =
      /* istanbul ignore next */
      (cov_1phtk7vunv().s[212]++, yield firebase_1.db.collection('events').get());
      /* istanbul ignore next */
      cov_1phtk7vunv().s[213]++;
      return eventsSnapshot.size;
    });
  }
}
/* istanbul ignore next */
cov_1phtk7vunv().s[214]++;
exports.PaymentSystemService = PaymentSystemService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,