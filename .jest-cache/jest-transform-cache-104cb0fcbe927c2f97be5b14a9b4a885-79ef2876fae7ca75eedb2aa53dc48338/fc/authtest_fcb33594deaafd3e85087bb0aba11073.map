{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\auth.test.ts","mappings":";;AAAA,wCAAwC;AACxC,kEAAyE;AAEzE,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACrD,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,OAAO;gBACjB,SAAS,EAAE,kBAAkB;gBAC7B,YAAY,EAAE,cAAc;gBAC5B,IAAI,EAAE,QAAQ;aACf,CAAC;YAEF,MAAM,EAAE,KAAK,EAAE,GAAG,kCAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACvC,MAAM,WAAW,GAAG;gBAClB,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,OAAO;gBACjB,SAAS,EAAE,eAAe;gBAC1B,YAAY,EAAE,cAAc;gBAC5B,IAAI,EAAE,QAAQ;aACf,CAAC;YAEF,MAAM,EAAE,KAAK,EAAE,GAAG,kCAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACvD,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YAC5B,MAAM,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACvC,MAAM,WAAW,GAAG;gBAClB,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,OAAO;gBACjB,SAAS,EAAE,kBAAkB;gBAC7B,YAAY,EAAE,KAAK;gBACnB,IAAI,EAAE,QAAQ;aACf,CAAC;YAEF,MAAM,EAAE,KAAK,EAAE,GAAG,kCAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACvD,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YAC5B,MAAM,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC9C,MAAM,SAAS,GAAG;gBAChB,SAAS,EAAE,kBAAkB;gBAC7B,YAAY,EAAE,cAAc;aAC7B,CAAC;YAEF,MAAM,EAAE,KAAK,EAAE,GAAG,+BAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACrC,MAAM,WAAW,GAAG;gBAClB,SAAS,EAAE,EAAE;gBACb,YAAY,EAAE,cAAc;aAC7B,CAAC;YAEF,MAAM,EAAE,KAAK,EAAE,GAAG,+BAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACpD,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\auth.test.ts"],"sourcesContent":["// Authentication tests for MussikOn API\r\nimport { registerSchema, loginSchema } from '../utils/validationSchemas';\r\n\r\ndescribe('Authentication Validation', () => {\r\n  describe('Register Schema', () => {\r\n    test('should validate correct registration data', () => {\r\n      const validData = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'juan@example.com',\r\n        userPassword: 'Password123!',\r\n        roll: 'musico'\r\n      };\r\n\r\n      const { error } = registerSchema.validate(validData);\r\n      expect(error).toBeUndefined();\r\n    });\r\n\r\n    test('should reject invalid email', () => {\r\n      const invalidData = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'invalid-email',\r\n        userPassword: 'Password123!',\r\n        roll: 'musico'\r\n      };\r\n\r\n      const { error } = registerSchema.validate(invalidData);\r\n      expect(error).toBeDefined();\r\n      expect(error?.details[0].path).toContain('userEmail');\r\n    });\r\n\r\n    test('should reject weak password', () => {\r\n      const invalidData = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'juan@example.com',\r\n        userPassword: '123',\r\n        roll: 'musico'\r\n      };\r\n\r\n      const { error } = registerSchema.validate(invalidData);\r\n      expect(error).toBeDefined();\r\n      expect(error?.details[0].path).toContain('userPassword');\r\n    });\r\n  });\r\n\r\n  describe('Login Schema', () => {\r\n    test('should validate correct login data', () => {\r\n      const validData = {\r\n        userEmail: 'juan@example.com',\r\n        userPassword: 'Password123!'\r\n      };\r\n\r\n      const { error } = loginSchema.validate(validData);\r\n      expect(error).toBeUndefined();\r\n    });\r\n\r\n    test('should reject empty email', () => {\r\n      const invalidData = {\r\n        userEmail: '',\r\n        userPassword: 'Password123!'\r\n      };\r\n\r\n      const { error } = loginSchema.validate(invalidData);\r\n      expect(error).toBeDefined();\r\n    });\r\n  });\r\n}); "],"version":3}