{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\validationMiddleware.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\validationMiddleware.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { validate } from '../middleware/validationMiddleware';\r\nimport { registerSchema } from '../utils/validationSchemas';\r\nimport { createMockRequest, createMockResponse } from './setup';\r\n\r\ndescribe('ValidationMiddleware', () => {\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockNext: NextFunction;\r\n  let mockJson: jest.Mock;\r\n  let mockStatus: jest.Mock;\r\n\r\n  beforeEach(() => {\r\n    mockJson = jest.fn();\r\n    mockStatus = jest.fn().mockReturnValue({ json: mockJson });\r\n    \r\n    mockResponse = {\r\n      status: mockStatus,\r\n      json: mockJson\r\n    };\r\n\r\n    mockNext = jest.fn();\r\n\r\n    // Reset de todos los mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('validate', () => {\r\n    it('should return 400 when validation fails with missing required fields', () => {\r\n      mockRequest = createMockRequest({\r\n        body: {\r\n          name: 'Juan',\r\n          lastName: 'Pérez'\r\n          // userEmail, userPassword, roll faltantes\r\n        }\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Datos de entrada inválidos',\r\n        errors: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            field: 'userEmail',\r\n            message: 'El email es requerido',\r\n            type: 'any.required',\r\n            value: undefined\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'userPassword',\r\n            message: 'La contraseña es requerida',\r\n            type: 'any.required',\r\n            value: undefined\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'roll',\r\n            message: '\"roll\" is required',\r\n            type: 'any.required',\r\n            value: undefined\r\n          })\r\n        ]),\r\n        path: undefined,\r\n        timestamp: expect.any(String)\r\n      });\r\n    });\r\n\r\n    it('should return 400 when email format is invalid', () => {\r\n      mockRequest = createMockRequest({\r\n        body: {\r\n          name: 'Juan',\r\n          lastName: 'Pérez',\r\n          userEmail: 'invalid-email',\r\n          userPassword: 'Password123!',\r\n          roll: 'musico'\r\n        }\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Datos de entrada inválidos',\r\n        errors: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            field: 'userEmail',\r\n            message: 'El email debe tener un formato válido',\r\n            type: 'string.email',\r\n            value: 'invalid-email'\r\n          })\r\n        ]),\r\n        path: undefined,\r\n        timestamp: expect.any(String)\r\n      });\r\n    });\r\n\r\n    it('should return 400 when password is too weak', () => {\r\n      mockRequest = createMockRequest({\r\n        body: {\r\n          name: 'Juan',\r\n          lastName: 'Pérez',\r\n          userEmail: 'juan@example.com',\r\n          userPassword: 'weak',\r\n          roll: 'musico'\r\n        }\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Datos de entrada inválidos',\r\n        errors: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            field: 'userPassword',\r\n            message: 'La contraseña debe tener al menos 8 caracteres',\r\n            type: 'string.min',\r\n            value: 'weak'\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'userPassword',\r\n            message: 'La contraseña debe contener al menos una minúscula, una mayúscula, un número y un carácter especial',\r\n            type: 'string.pattern.base',\r\n            value: 'weak'\r\n          })\r\n        ]),\r\n        path: undefined,\r\n        timestamp: expect.any(String)\r\n      });\r\n    });\r\n\r\n    it('should return 400 when roll is invalid', () => {\r\n      mockRequest = createMockRequest({\r\n        body: {\r\n          name: 'Juan',\r\n          lastName: 'Pérez',\r\n          userEmail: 'juan@example.com',\r\n          userPassword: 'Password123!',\r\n          roll: 'invalid-role'\r\n        }\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Datos de entrada inválidos',\r\n        errors: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            field: 'roll',\r\n            message: 'El rol debe ser uno de los valores permitidos',\r\n            type: 'any.only',\r\n            value: 'invalid-role'\r\n          })\r\n        ]),\r\n        path: undefined,\r\n        timestamp: expect.any(String)\r\n      });\r\n    });\r\n\r\n    it('should return 400 when name is too short', () => {\r\n      mockRequest = createMockRequest({\r\n        body: {\r\n          name: 'J',\r\n          lastName: 'Pérez',\r\n          userEmail: 'juan@example.com',\r\n          userPassword: 'Password123!',\r\n          roll: 'musico'\r\n        }\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Datos de entrada inválidos',\r\n        errors: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            field: 'name',\r\n            message: 'El nombre debe tener al menos 2 caracteres',\r\n            type: 'string.min',\r\n            value: 'J'\r\n          })\r\n        ]),\r\n        path: undefined,\r\n        timestamp: expect.any(String)\r\n      });\r\n    });\r\n\r\n    it('should return 400 when lastName is too short', () => {\r\n      mockRequest = createMockRequest({\r\n        body: {\r\n          name: 'Juan',\r\n          lastName: 'P',\r\n          userEmail: 'juan@example.com',\r\n          userPassword: 'Password123!',\r\n          roll: 'musico'\r\n        }\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Datos de entrada inválidos',\r\n        errors: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            field: 'lastName',\r\n            message: 'El apellido debe tener al menos 2 caracteres',\r\n            type: 'string.min',\r\n            value: 'P'\r\n          })\r\n        ]),\r\n        path: undefined,\r\n        timestamp: expect.any(String)\r\n      });\r\n    });\r\n\r\n    it('should handle multiple validation errors', () => {\r\n      mockRequest = createMockRequest({\r\n        body: {\r\n          name: 'J',\r\n          lastName: 'P',\r\n          userEmail: 'invalid-email',\r\n          userPassword: 'weak',\r\n          roll: 'invalid-role'\r\n        }\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Datos de entrada inválidos',\r\n        errors: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            field: 'name',\r\n            message: 'El nombre debe tener al menos 2 caracteres',\r\n            type: 'string.min',\r\n            value: 'J'\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'lastName',\r\n            message: 'El apellido debe tener al menos 2 caracteres',\r\n            type: 'string.min',\r\n            value: 'P'\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'userEmail',\r\n            message: 'El email debe tener un formato válido',\r\n            type: 'string.email',\r\n            value: 'invalid-email'\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'userPassword',\r\n            message: 'La contraseña debe tener al menos 8 caracteres',\r\n            type: 'string.min',\r\n            value: 'weak'\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'userPassword',\r\n            message: 'La contraseña debe contener al menos una minúscula, una mayúscula, un número y un carácter especial',\r\n            type: 'string.pattern.base',\r\n            value: 'weak'\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'roll',\r\n            message: 'El rol debe ser uno de los valores permitidos',\r\n            type: 'any.only',\r\n            value: 'invalid-role'\r\n          })\r\n        ]),\r\n        path: undefined,\r\n        timestamp: expect.any(String)\r\n      });\r\n    });\r\n\r\n    it('should handle empty body', () => {\r\n      mockRequest = createMockRequest({\r\n        body: {}\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Datos de entrada inválidos',\r\n        errors: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            field: 'name',\r\n            message: 'El nombre es requerido',\r\n            type: 'any.required',\r\n            value: undefined\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'lastName',\r\n            message: 'El apellido es requerido',\r\n            type: 'any.required',\r\n            value: undefined\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'userEmail',\r\n            message: 'El email es requerido',\r\n            type: 'any.required',\r\n            value: undefined\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'userPassword',\r\n            message: 'La contraseña es requerida',\r\n            type: 'any.required',\r\n            value: undefined\r\n          }),\r\n          expect.objectContaining({\r\n            field: 'roll',\r\n            message: '\"roll\" is required',\r\n            type: 'any.required',\r\n            value: undefined\r\n          })\r\n        ]),\r\n        path: undefined,\r\n        timestamp: expect.any(String)\r\n      });\r\n    });\r\n\r\n    it('should handle null body', () => {\r\n      mockRequest = createMockRequest({\r\n        body: null\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Datos de entrada inválidos',\r\n        errors: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            field: '',\r\n            message: '\"value\" must be of type object',\r\n            type: 'object.base',\r\n            value: null\r\n          })\r\n        ]),\r\n        path: undefined,\r\n        timestamp: expect.any(String)\r\n      });\r\n    });\r\n\r\n    it('should call next() when validation passes', () => {\r\n      mockRequest = createMockRequest({\r\n        body: {\r\n          name: 'Juan',\r\n          lastName: 'Pérez',\r\n          userEmail: 'juan@example.com',\r\n          userPassword: 'Password123!',\r\n          roll: 'musico'\r\n        }\r\n      });\r\n\r\n      const middleware = validate(registerSchema);\r\n      middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n      expect(mockResponse.status).not.toHaveBeenCalled();\r\n      expect(mockResponse.json).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n}); "],"version":3}