401427029cef079022decfafb2c9cc7b
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadToS3 = exports.s3 = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
exports.s3 = new client_s3_1.S3Client({
    region: process.env.IDRIVE_E2_REGION,
    endpoint: process.env.IDRIVE_E2_ENDPOINT,
    credentials: {
        accessKeyId: process.env.IDRIVE_E2_ACCESS_KEY,
        secretAccessKey: process.env.IDRIVE_E2_SECRET_KEY,
    },
    forcePathStyle: true,
});
/**
 * Sube un archivo a iDrive E2 (S3)
 */
const uploadToS3 = (file_1, fileName_1, contentType_1, ...args_1) => __awaiter(void 0, [file_1, fileName_1, contentType_1, ...args_1], void 0, function* (file, fileName, contentType, folder = 'uploads') {
    try {
        const key = `${folder}/${Date.now()}-${fileName}`;
        const command = new client_s3_1.PutObjectCommand({
            Bucket: process.env.IDRIVE_E2_BUCKET_NAME,
            Key: key,
            Body: file,
            ContentType: contentType,
            ACL: 'private',
        });
        yield exports.s3.send(command);
        // Retorna la URL del archivo
        return `${process.env.IDRIVE_E2_ENDPOINT}/${process.env.IDRIVE_E2_BUCKET_NAME}/${key}`;
    }
    catch (error) {
        console.error('[src/utils/idriveE2.ts] Error al subir archivo a S3:', error);
        throw new Error('Error al subir archivo a S3');
    }
});
exports.uploadToS3 = uploadToS3;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXHNyY1xcQVBQX011c3Npa09uXFxBUFBfTXVzc2lrT25fRXhwcmVzc1xcc3JjXFx1dGlsc1xcaWRyaXZlRTIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsa0RBQWdFO0FBRW5ELFFBQUEsRUFBRSxHQUFHLElBQUksb0JBQVEsQ0FBQztJQUM3QixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0I7SUFDcEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCO0lBQ3hDLFdBQVcsRUFBRTtRQUNYLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFxQjtRQUM5QyxlQUFlLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBcUI7S0FDbkQ7SUFDRCxjQUFjLEVBQUUsSUFBSTtDQUNyQixDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNJLE1BQU0sVUFBVSxHQUFHLCtDQUtQLEVBQUUsc0ZBSm5CLElBQVksRUFDWixRQUFnQixFQUNoQixXQUFtQixFQUNuQixTQUFpQixTQUFTO0lBRTFCLElBQUksQ0FBQztRQUNILE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUVsRCxNQUFNLE9BQU8sR0FBRyxJQUFJLDRCQUFnQixDQUFDO1lBQ25DLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFzQjtZQUMxQyxHQUFHLEVBQUUsR0FBRztZQUNSLElBQUksRUFBRSxJQUFJO1lBQ1YsV0FBVyxFQUFFLFdBQVc7WUFDeEIsR0FBRyxFQUFFLFNBQVM7U0FDZixDQUFDLENBQUM7UUFFSCxNQUFNLFVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdkIsNkJBQTZCO1FBQzdCLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLElBQUksR0FBRyxFQUFFLENBQUM7SUFDekYsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHNEQUFzRCxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdFLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUNqRCxDQUFDO0FBQ0gsQ0FBQyxDQUFBLENBQUM7QUF6QlcsUUFBQSxVQUFVLGNBeUJyQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcc3JjXFxBUFBfTXVzc2lrT25cXEFQUF9NdXNzaWtPbl9FeHByZXNzXFxzcmNcXHV0aWxzXFxpZHJpdmVFMi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTM0NsaWVudCwgUHV0T2JqZWN0Q29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zMyc7XG5cbmV4cG9ydCBjb25zdCBzMyA9IG5ldyBTM0NsaWVudCh7XG4gIHJlZ2lvbjogcHJvY2Vzcy5lbnYuSURSSVZFX0UyX1JFR0lPTixcbiAgZW5kcG9pbnQ6IHByb2Nlc3MuZW52LklEUklWRV9FMl9FTkRQT0lOVCxcbiAgY3JlZGVudGlhbHM6IHtcbiAgICBhY2Nlc3NLZXlJZDogcHJvY2Vzcy5lbnYuSURSSVZFX0UyX0FDQ0VTU19LRVkhLFxuICAgIHNlY3JldEFjY2Vzc0tleTogcHJvY2Vzcy5lbnYuSURSSVZFX0UyX1NFQ1JFVF9LRVkhLFxuICB9LFxuICBmb3JjZVBhdGhTdHlsZTogdHJ1ZSxcbn0pO1xuXG4vKipcbiAqIFN1YmUgdW4gYXJjaGl2byBhIGlEcml2ZSBFMiAoUzMpXG4gKi9cbmV4cG9ydCBjb25zdCB1cGxvYWRUb1MzID0gYXN5bmMgKFxuICBmaWxlOiBCdWZmZXIsXG4gIGZpbGVOYW1lOiBzdHJpbmcsXG4gIGNvbnRlbnRUeXBlOiBzdHJpbmcsXG4gIGZvbGRlcjogc3RyaW5nID0gJ3VwbG9hZHMnXG4pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGtleSA9IGAke2ZvbGRlcn0vJHtEYXRlLm5vdygpfS0ke2ZpbGVOYW1lfWA7XG4gICAgXG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBQdXRPYmplY3RDb21tYW5kKHtcbiAgICAgIEJ1Y2tldDogcHJvY2Vzcy5lbnYuSURSSVZFX0UyX0JVQ0tFVF9OQU1FISxcbiAgICAgIEtleToga2V5LFxuICAgICAgQm9keTogZmlsZSxcbiAgICAgIENvbnRlbnRUeXBlOiBjb250ZW50VHlwZSxcbiAgICAgIEFDTDogJ3ByaXZhdGUnLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgczMuc2VuZChjb21tYW5kKTtcbiAgICBcbiAgICAvLyBSZXRvcm5hIGxhIFVSTCBkZWwgYXJjaGl2b1xuICAgIHJldHVybiBgJHtwcm9jZXNzLmVudi5JRFJJVkVfRTJfRU5EUE9JTlR9LyR7cHJvY2Vzcy5lbnYuSURSSVZFX0UyX0JVQ0tFVF9OQU1FfS8ke2tleX1gO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tzcmMvdXRpbHMvaWRyaXZlRTIudHNdIEVycm9yIGFsIHN1YmlyIGFyY2hpdm8gYSBTMzonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBhbCBzdWJpciBhcmNoaXZvIGEgUzMnKTtcbiAgfVxufTtcbiJdLCJ2ZXJzaW9uIjozfQ==