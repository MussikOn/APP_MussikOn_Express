const axios = require('axios');

console.log('üîç DIAGN√ìSTICO AVANZADO DE CONSULTAS INFINITAS - VERSI√ìN 3');
console.log('================================================================\n');

// Configuraci√≥n
const BASE_URL = 'http://192.168.54.11:3001';
const ENDPOINTS = [
    '/imgs/stats/public',
    '/imgs/all/public', 
    '/imgs/statistics/public',
    '/imgs/verify/public'
];

// Funci√≥n para probar un endpoint
async function testEndpoint(endpoint) {
    try {
        const startTime = Date.now();
        const response = await axios.get(`${BASE_URL}${endpoint}`, {
            timeout: 5000,
            headers: {
                'User-Agent': 'Diagnostic-Script-v3'
            }
        });
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        console.log(`‚úÖ ${endpoint}: ${response.status} (${duration}ms)`);
        return { success: true, duration, status: response.status };
    } catch (error) {
        console.log(`‚ùå ${endpoint}: ${error.response?.status || error.code} - ${error.message}`);
        return { success: false, error: error.message };
    }
}

// Funci√≥n principal de diagn√≥stico
async function runDiagnosis() {
    console.log('üìã PASO 1: Verificando conectividad del servidor...');
    
    try {
        const serverResponse = await axios.get(`${BASE_URL}/health`, { timeout: 3000 });
        console.log(`‚úÖ Servidor respondiendo: ${serverResponse.status}`);
    } catch (error) {
        console.log(`‚ùå Servidor no responde: ${error.message}`);
        console.log('üí° Aseg√∫rate de que el servidor est√© ejecut√°ndose con: npm start');
        return;
    }
    
    console.log('\nüìã PASO 2: Probando endpoints de im√°genes...');
    
    for (const endpoint of ENDPOINTS) {
        await testEndpoint(endpoint);
        // Peque√±a pausa entre requests
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('\nüìã PASO 3: An√°lisis de posibles causas...');
    console.log('\nüîç POSIBLES CAUSAS DE CONSULTAS INFINITAS:');
    console.log('===========================================');
    
    console.log('\n1Ô∏è‚É£ ERRORES DE IM√ÅGENES (M√ÅS PROBABLE):');
    console.log('   - El atributo onerror="this.src=\'/placeholder-image.jpg\'" en las im√°genes');
    console.log('   - Si /placeholder-image.jpg no existe, puede causar un bucle infinito');
    console.log('   - SOLUCI√ìN: Comentar temporalmente el onerror en createImageCard()');
    
    console.log('\n2Ô∏è‚É£ EVENTOS DE REDIMENSIONAMIENTO:');
    console.log('   - window.resize, scroll, o focus pueden estar re-triggerando las funciones');
    console.log('   - SOLUCI√ìN: Verificar si hay event listeners en estos eventos');
    
    console.log('\n3Ô∏è‚É£ MUTATION OBSERVERS:');
    console.log('   - Observadores del DOM que detectan cambios y re-ejecutan funciones');
    console.log('   - SOLUCI√ìN: Verificar si hay MutationObserver activos');
    
    console.log('\n4Ô∏è‚É£ PROMESAS RECHAZADAS:');
    console.log('   - Errores en fetch que causan re-intentos autom√°ticos');
    console.log('   - SOLUCI√ìN: Verificar el manejo de errores en loadImageStatistics() y loadImages()');
    
    console.log('\n5Ô∏è‚É£ CACH√â DEL NAVEGADOR:');
    console.log('   - El navegador puede estar cacheando y re-ejecutando scripts');
    console.log('   - SOLUCI√ìN: Hard refresh (Ctrl+F5) o limpiar cach√©');
    
    console.log('\nüìã PASO 4: Instrucciones para debugging en el navegador...');
    console.log('\nüîß INSTRUCCIONES PARA EL USUARIO:');
    console.log('==================================');
    
    console.log('\n1Ô∏è‚É£ ABRIR HERRAMIENTAS DE DESARROLLADOR:');
    console.log('   - Presiona F12 o Ctrl+Shift+I');
    console.log('   - Ve a la pesta√±a "Console"');
    
    console.log('\n2Ô∏è‚É£ BUSCAR PATRONES EN LOS LOGS:');
    console.log('   - Busca los logs que empiecen con "üìä" y "üñºÔ∏è"');
    console.log('   - Verifica si los n√∫meros de ejecuci√≥n aumentan r√°pidamente');
    console.log('   - Ejemplo: "Ejecuci√≥n #1", "Ejecuci√≥n #2", etc.');
    
    console.log('\n3Ô∏è‚É£ REVISAR LA PESTA√ëA NETWORK:');
    console.log('   - Ve a la pesta√±a "Network"');
    console.log('   - Filtra por "Fetch/XHR"');
    console.log('   - Observa qu√© requests se repiten infinitamente');
    console.log('   - Verifica el timing entre requests');
    
    console.log('\n4Ô∏è‚É£ PRUEBA TEMPORAL - COMENTAR ONERROR:');
    console.log('   - En images-admin.html, l√≠nea ~1045, comenta temporalmente:');
    console.log('   - onerror="this.src=\'/placeholder-image.jpg\'"');
    console.log('   - Cambia a: // onerror="this.src=\'/placeholder-image.jpg\'"');
    
    console.log('\n5Ô∏è‚É£ VERIFICAR SI HAY PLACEHOLDER IMAGE:');
    console.log('   - Ve a: http://192.168.54.11:3001/placeholder-image.jpg');
    console.log('   - Si devuelve 404, ese es el problema');
    
    console.log('\n6Ô∏è‚É£ MONITOREO EN TIEMPO REAL:');
    console.log('   - En la consola, ejecuta este c√≥digo para monitorear:');
    console.log(`
    let requestCount = 0;
    const originalFetch = window.fetch;
    window.fetch = function(...args) {
        requestCount++;
        console.log(\`üåê Request #\${requestCount}: \${args[0]}\`);
        return originalFetch.apply(this, args);
    };
    `);
    
    console.log('\nüìã PASO 5: Soluciones inmediatas a probar...');
    console.log('\nüöÄ SOLUCIONES R√ÅPIDAS:');
    console.log('=====================');
    
    console.log('\n1Ô∏è‚É£ SOLUCI√ìN INMEDIATA - DESHABILITAR ONERROR:');
    console.log('   - Edita public/images-admin.html');
    console.log('   - Comenta la l√≠nea con onerror en createImageCard()');
    console.log('   - Recarga la p√°gina');
    
    console.log('\n2Ô∏è‚É£ SOLUCI√ìN ALTERNATIVA - CREAR PLACEHOLDER:');
    console.log('   - Crea un archivo placeholder-image.jpg en public/');
    console.log('   - O cambia la ruta a una imagen que s√≠ exista');
    
    console.log('\n3Ô∏è‚É£ SOLUCI√ìN DE EMERGENCIA - DESHABILITAR CARGA:');
    console.log('   - Comenta temporalmente las llamadas a loadImageStatistics() y loadImages()');
    console.log('   - En el DOMContentLoaded event listener');
    
    console.log('\nüìä RESUMEN DEL DIAGN√ìSTICO:');
    console.log('============================');
    console.log('‚úÖ Backend endpoints funcionando correctamente');
    console.log('üîç El problema est√° en el frontend (JavaScript)');
    console.log('üéØ Causa m√°s probable: onerror en im√°genes o eventos de DOM');
    console.log('üí° Pr√≥ximo paso: Seguir las instrucciones de debugging');
    
    console.log('\nüìû SI EL PROBLEMA PERSISTE:');
    console.log('===========================');
    console.log('1. Comparte los logs de la consola del navegador');
    console.log('2. Comparte una captura de la pesta√±a Network');
    console.log('3. Indica si el problema se resuelve al comentar onerror');
    console.log('4. Proporciona el n√∫mero de requests por segundo que observas');
}

// Ejecutar diagn√≥stico
runDiagnosis().catch(console.error); 