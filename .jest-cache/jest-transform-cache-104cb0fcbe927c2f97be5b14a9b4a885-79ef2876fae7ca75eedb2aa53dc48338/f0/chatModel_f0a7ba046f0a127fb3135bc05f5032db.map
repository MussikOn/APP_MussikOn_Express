{"version":3,"names":["firebase_1","cov_pa1ohw0ul","s","require","admin","__importStar","loggerService_1","createConversationModel","participants","f","__awaiter","now","Date","toISOString","conversationRef","db","collection","doc","conversation","id","unreadCount","updatedAt","isActive","createdAt","set","logger","info","metadata","exports","getConversationsByUserModel","userEmail","snapshot","where","orderBy","get","docs","map","data","error","b","code","message","includes","console","warn","conversations","sort","a","dateA","dateB","getTime","getConversationByIdModel","conversationId","conversationSnap","exists","getMessagesByConversationModel","createMessageModel","messageData","messageRef","Object","assign","timestamp","updateConversationLastMessage","update","lastMessage","firestore","FieldValue","increment","markMessageAsReadModel","messageId","status","markConversationAsReadModel","Error","searchConversationsModel","filters","query","unreadOnly","dateFrom","dateTo","search","filter","_a","content","toLowerCase","otherParticipants","p","some","deleteConversationModel","archiveConversationModel","getConversationBetweenUsersModel","user1","user2","find","conv","getChatStatsModel","totalConversations","length","unreadMessages","reduce","sum","activeConversations"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\models\\chatModel.ts"],"sourcesContent":["import { db } from '../utils/firebase';\r\nimport { Message, Conversation, ChatFilters } from '../utils/DataTypes';\r\nimport * as admin from 'firebase-admin';\r\nimport { logger } from '../services/loggerService';\r\n\r\n// Crear una nueva conversación\r\nexport const createConversationModel = async (\r\n  participants: string[]\r\n): Promise<Conversation> => {\r\n  const now = new Date().toISOString();\r\n  const conversationRef = db.collection('conversations').doc();\r\n\r\n  const conversation: Conversation = {\r\n    id: conversationRef.id,\r\n    participants,\r\n    unreadCount: 0,\r\n    updatedAt: now,\r\n    isActive: true,\r\n    createdAt: now,\r\n  };\r\n\r\n  await conversationRef.set(conversation);\r\n  logger.info('[src/models/chatModel.ts:19] Conversación creada:', { metadata: { id: conversation\r\n,    } });\r\n  return conversation;\r\n};\r\n\r\n// Obtener conversaciones de un usuario\r\nexport const getConversationsByUserModel = async (\r\n  userEmail: string\r\n): Promise<Conversation[]> => {\r\n  try {\r\n    // Primero intentar con la consulta optimizada\r\n    const snapshot = await db\r\n      .collection('conversations')\r\n      .where('participants', 'array-contains', userEmail)\r\n      .where('isActive', '==', true)\r\n      .orderBy('updatedAt', 'desc')\r\n      .get();\r\n\r\n    return snapshot.docs.map(doc => doc.data() as Conversation);\r\n  } catch (error: any) {\r\n    // Si falla por índice faltante, usar consulta alternativa\r\n    if (error.code === 9 && error.message.includes('requires an index')) {\r\n      console.warn('Índice compuesto faltante, usando consulta alternativa');\r\n      \r\n      // Consulta alternativa sin ordenamiento\r\n      const snapshot = await db\r\n        .collection('conversations')\r\n        .where('participants', 'array-contains', userEmail)\r\n        .where('isActive', '==', true)\r\n        .get();\r\n\r\n      const conversations = snapshot.docs.map(doc => doc.data() as Conversation);\r\n      \r\n      // Ordenar en memoria\r\n      return conversations.sort((a, b) => {\r\n        const dateA = new Date(a.updatedAt || a.createdAt || 0);\r\n        const dateB = new Date(b.updatedAt || b.createdAt || 0);\r\n        return dateB.getTime() - dateA.getTime();\r\n      });\r\n    }\r\n    \r\n    // Si es otro tipo de error, relanzarlo\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener conversación por ID\r\nexport const getConversationByIdModel = async (\r\n  conversationId: string\r\n): Promise<Conversation | null> => {\r\n  const conversationRef = db.collection('conversations').doc(conversationId);\r\n  const conversationSnap = await conversationRef.get();\r\n\r\n  if (!conversationSnap.exists) {\r\n    return null;\r\n  }\r\n\r\n  return conversationSnap.data() as Conversation;\r\n};\r\n\r\n// Obtener mensajes de una conversación\r\nexport const getMessagesByConversationModel = async (\r\n  conversationId: string\r\n): Promise<Message[]> => {\r\n  const snapshot = await db\r\n    .collection('messages')\r\n    .where('conversationId', '==', conversationId)\r\n    .orderBy('timestamp', 'asc')\r\n    .get();\r\n\r\n  return snapshot.docs.map(doc => doc.data() as Message);\r\n};\r\n\r\n// Crear un nuevo mensaje\r\nexport const createMessageModel = async (\r\n  messageData: Omit<Message, 'id' | 'timestamp'>\r\n): Promise<Message> => {\r\n  const now = new Date().toISOString();\r\n  const messageRef = db.collection('messages').doc();\r\n\r\n  const message: Message = {\r\n    ...messageData,\r\n    id: messageRef.id,\r\n    timestamp: now,\r\n  };\r\n\r\n  await messageRef.set(message);\r\n  logger.info('[src/models/chatModel.ts:68] Mensaje creado:', { metadata: { id: message  } });\r\n\r\n  // Actualizar la conversación con el último mensaje\r\n  await updateConversationLastMessage(message.conversationId, message);\r\n\r\n  return message;\r\n};\r\n\r\n// Actualizar el último mensaje de una conversación\r\nexport const updateConversationLastMessage = async (\r\n  conversationId: string,\r\n  message: Message\r\n): Promise<void> => {\r\n  const conversationRef = db.collection('conversations').doc(conversationId);\r\n\r\n  await conversationRef.update({\r\n    lastMessage: message,\r\n    updatedAt: message.timestamp,\r\n    unreadCount: admin.firestore.FieldValue.increment(1),\r\n  });\r\n};\r\n\r\n// Marcar mensaje como leído\r\nexport const markMessageAsReadModel = async (\r\n  messageId: string\r\n): Promise<void> => {\r\n  const messageRef = db.collection('messages').doc(messageId);\r\n  await messageRef.update({\r\n    status: 'read',\r\n  });\r\n};\r\n\r\n// Marcar conversación como leída\r\nexport const markConversationAsReadModel = async (\r\n  conversationId: string,\r\n  userEmail: string\r\n): Promise<void> => {\r\n  const conversationRef = db.collection('conversations').doc(conversationId);\r\n\r\n  // Obtener la conversación para verificar que el usuario es participante\r\n  const conversationSnap = await conversationRef.get();\r\n  if (!conversationSnap.exists) {\r\n    throw new Error('Conversación no encontrada');\r\n  }\r\n\r\n  const conversation = conversationSnap.data() as Conversation;\r\n  if (!conversation.participants.includes(userEmail)) {\r\n    throw new Error('Usuario no es participante de esta conversación');\r\n  }\r\n\r\n  await conversationRef.update({\r\n    unreadCount: 0,\r\n  });\r\n};\r\n\r\n// Buscar conversaciones con filtros\r\nexport const searchConversationsModel = async (\r\n  userEmail: string,\r\n  filters: ChatFilters\r\n): Promise<Conversation[]> => {\r\n  let query = db\r\n    .collection('conversations')\r\n    .where('participants', 'array-contains', userEmail)\r\n    .where('isActive', '==', true);\r\n\r\n  if (filters.unreadOnly) {\r\n    query = query.where('unreadCount', '>', 0);\r\n  }\r\n\r\n  if (filters.dateFrom) {\r\n    query = query.where('updatedAt', '>=', filters.dateFrom);\r\n  }\r\n\r\n  if (filters.dateTo) {\r\n    query = query.where('updatedAt', '<=', filters.dateTo);\r\n  }\r\n\r\n  const snapshot = await query.orderBy('updatedAt', 'desc').get();\r\n  let conversations = snapshot.docs.map(doc => doc.data() as Conversation);\r\n\r\n  // Filtrar por búsqueda de texto si se proporciona\r\n  if (filters.search) {\r\n    conversations = conversations.filter(conversation => {\r\n      // Buscar en el último mensaje\r\n      if (\r\n        conversation.lastMessage?.content\r\n          .toLowerCase()\r\n          .includes(filters.search!.toLowerCase())\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      // Buscar en participantes (excluyendo al usuario actual)\r\n      const otherParticipants = conversation.participants.filter(\r\n        p => p !== userEmail\r\n      );\r\n      return otherParticipants.some(p =>\r\n        p.toLowerCase().includes(filters.search!.toLowerCase())\r\n      );\r\n    });\r\n  }\r\n\r\n  return conversations;\r\n};\r\n\r\n// Eliminar conversación (marcar como inactiva)\r\nexport const deleteConversationModel = async (\r\n  conversationId: string,\r\n  userEmail: string\r\n): Promise<void> => {\r\n  const conversationRef = db.collection('conversations').doc(conversationId);\r\n\r\n  // Verificar que el usuario es participante\r\n  const conversationSnap = await conversationRef.get();\r\n  if (!conversationSnap.exists) {\r\n    throw new Error('Conversación no encontrada');\r\n  }\r\n\r\n  const conversation = conversationSnap.data() as Conversation;\r\n  if (!conversation.participants.includes(userEmail)) {\r\n    throw new Error('Usuario no es participante de esta conversación');\r\n  }\r\n\r\n  await conversationRef.update({\r\n    isActive: false,\r\n  });\r\n};\r\n\r\n// Archivar conversación\r\nexport const archiveConversationModel = async (\r\n  conversationId: string,\r\n  userEmail: string\r\n): Promise<void> => {\r\n  const conversationRef = db.collection('conversations').doc(conversationId);\r\n\r\n  // Verificar que el usuario es participante\r\n  const conversationSnap = await conversationRef.get();\r\n  if (!conversationSnap.exists) {\r\n    throw new Error('Conversación no encontrada');\r\n  }\r\n\r\n  const conversation = conversationSnap.data() as Conversation;\r\n  if (!conversation.participants.includes(userEmail)) {\r\n    throw new Error('Usuario no es participante de esta conversación');\r\n  }\r\n\r\n  await conversationRef.update({\r\n    isActive: false,\r\n  });\r\n};\r\n\r\n// Obtener conversación entre dos usuarios específicos\r\nexport const getConversationBetweenUsersModel = async (\r\n  user1: string,\r\n  user2: string\r\n): Promise<Conversation | null> => {\r\n  const snapshot = await db\r\n    .collection('conversations')\r\n    .where('participants', 'array-contains', user1)\r\n    .where('isActive', '==', true)\r\n    .get();\r\n\r\n  const conversations = snapshot.docs.map(doc => doc.data() as Conversation);\r\n\r\n  // Buscar conversación que contenga ambos usuarios\r\n  const conversation = conversations.find(\r\n    conv =>\r\n      conv.participants.includes(user1) && conv.participants.includes(user2)\r\n  );\r\n\r\n  return conversation || null;\r\n};\r\n\r\n// Obtener estadísticas de chat para un usuario\r\nexport const getChatStatsModel = async (\r\n  userEmail: string\r\n): Promise<{\r\n  totalConversations: number;\r\n  unreadMessages: number;\r\n  activeConversations: number;\r\n}> => {\r\n  const conversations = await getConversationsByUserModel(userEmail);\r\n\r\n  const totalConversations = conversations.length;\r\n  const unreadMessages = conversations.reduce(\r\n    (sum, conv) => sum + conv.unreadCount,\r\n    0\r\n  );\r\n  const activeConversations = conversations.filter(\r\n    conv => conv.isActive\r\n  ).length;\r\n\r\n  return {\r\n    totalConversations,\r\n    unreadMessages,\r\n    activeConversations,\r\n  };\r\n};\r\n"],"mappingsaAAA,GAAAC,CAAA,QAAAC,OAAA;AAEA,MAAAC,KAAA;AAAA;AAAA,CAAAH,aAAA,GAAAC,CAAA,QAAAG,YAAA,CAAAF,OAAA;AACA,MAAAG,eAAA;AAAA;AAAA,CAAAL,aAAA,GAAAC,CAAA,QAAAC,OAAA;AAEA;AAAA;AAAAF,aAAA,GAAAC,CAAA;AACO,MAAMK,uBAAuB,GAClCC,YAAsB,IACG;EAAA;EAAAP,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IACzB,MAAME,GAAG;IAAA;IAAA,CAAAV,aAAA,GAAAC,CAAA,QAAG,IAAIU,IAAI,EAAE,CAACC,WAAW,EAAE;IACpC,MAAMC,eAAe;IAAA;IAAA,CAAAb,aAAA,GAAAC,CAAA,QAAGF,UAAA,CAAAe,EAAE,CAACC,UAAU,CAAC,eAAe,CAAC,CAACC,GAAG,EAAE;IAE5D,MAAMC,YAAY;IAAA;IAAA,CAAAjB,aAAA,GAAAC,CAAA,QAAiB;MACjCiB,EAAE,EAAEL,eAAe,CAACK,EAAE;MACtBX,YAAY;MACZY,WAAW,EAAE,CAAC;MACdC,SAAS,EAAEV,GAAG;MACdW,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAEZ;KACZ;IAAC;IAAAV,aAAA,GAAAC,CAAA;IAEF,MAAMY,eAAe,CAACU,GAAG,CAACN,YAAY,CAAC;IAAC;IAAAjB,aAAA,GAAAC,CAAA;IACxCI,eAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,mDAAmD,EAAE;MAAEC,QAAQ,EAAE;QAAER,EAAE,EAAED;;IAC/E,CAAE,CAAC;IAAC;IAAAjB,aAAA,GAAAC,CAAA;IACR,OAAOgB,YAAY;EACrB,CAAC;AAAA;AAAC;AAAAjB,aAAA,GAAAC,CAAA;AAnBW0B,OAAA,CAAArB,uBAAuB,GAAAA,uBAAA;AAqBpC;AAAA;AAAAN,aAAA,GAAAC,CAAA;AACO,MAAM2B,2BAA2B,GACtCC,SAAiB,IACU;EAAA;EAAA7B,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAC,CAAA;IAC3B,IAAI;MACF;MACA,MAAM6B,QAAQ;MAAA;MAAA,CAAA9B,aAAA,GAAAC,CAAA,QAAG,MAAMF,UAAA,CAAAe,EAAE,CACtBC,UAAU,CAAC,eAAe,CAAC,CAC3BgB,KAAK,CAAC,cAAc,EAAE,gBAAgB,EAAEF,SAAS,CAAC,CAClDE,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAC7BC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAC5BC,GAAG,EAAE;MAAC;MAAAjC,aAAA,GAAAC,CAAA;MAET,OAAO6B,QAAQ,CAACI,IAAI,CAACC,GAAG,CAACnB,GAAG,IAAI;QAAA;QAAAhB,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QAAA,OAAAe,GAAG,CAACoB,IAAI,EAAkB;MAAlB,CAAkB,CAAC;IAC7D,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAArC,aAAA,GAAAC,CAAA;MACnB;MACA;MAAI;MAAA,CAAAD,aAAA,GAAAsC,CAAA,WAAAD,KAAK,CAACE,IAAI,KAAK,CAAC;MAAA;MAAA,CAAAvC,aAAA,GAAAsC,CAAA,WAAID,KAAK,CAACG,OAAO,CAACC,QAAQ,CAAC,mBAAmB,CAAC,GAAE;QAAA;QAAAzC,aAAA,GAAAsC,CAAA;QAAAtC,aAAA,GAAAC,CAAA;QACnEyC,OAAO,CAACC,IAAI,CAAC,wDAAwD,CAAC;QAEtE;QACA,MAAMb,QAAQ;QAAA;QAAA,CAAA9B,aAAA,GAAAC,CAAA,QAAG,MAAMF,UAAA,CAAAe,EAAE,CACtBC,UAAU,CAAC,eAAe,CAAC,CAC3BgB,KAAK,CAAC,cAAc,EAAE,gBAAgB,EAAEF,SAAS,CAAC,CAClDE,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAC7BE,GAAG,EAAE;QAER,MAAMW,aAAa;QAAA;QAAA,CAAA5C,aAAA,GAAAC,CAAA,QAAG6B,QAAQ,CAACI,IAAI,CAACC,GAAG,CAACnB,GAAG,IAAI;UAAA;UAAAhB,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAC,CAAA;UAAA,OAAAe,GAAG,CAACoB,IAAI,EAAkB;QAAlB,CAAkB,CAAC;QAE1E;QAAA;QAAApC,aAAA,GAAAC,CAAA;QACA,OAAO2C,aAAa,CAACC,IAAI,CAAC,CAACC,CAAC,EAAER,CAAC,KAAI;UAAA;UAAAtC,aAAA,GAAAQ,CAAA;UACjC,MAAMuC,KAAK;UAAA;UAAA,CAAA/C,aAAA,GAAAC,CAAA,QAAG,IAAIU,IAAI;UAAC;UAAA,CAAAX,aAAA,GAAAsC,CAAA,WAAAQ,CAAC,CAAC1B,SAAS;UAAA;UAAA,CAAApB,aAAA,GAAAsC,CAAA,WAAIQ,CAAC,CAACxB,SAAS;UAAA;UAAA,CAAAtB,aAAA,GAAAsC,CAAA,WAAI,CAAC,EAAC;UACvD,MAAMU,KAAK;UAAA;UAAA,CAAAhD,aAAA,GAAAC,CAAA,QAAG,IAAIU,IAAI;UAAC;UAAA,CAAAX,aAAA,GAAAsC,CAAA,WAAAA,CAAC,CAAClB,SAAS;UAAA;UAAA,CAAApB,aAAA,GAAAsC,CAAA,WAAIA,CAAC,CAAChB,SAAS;UAAA;UAAA,CAAAtB,aAAA,GAAAsC,CAAA,WAAI,CAAC,EAAC;UAAC;UAAAtC,aAAA,GAAAC,CAAA;UACxD,OAAO+C,KAAK,CAACC,OAAO,EAAE,GAAGF,KAAK,CAACE,OAAO,EAAE;QAC1C,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAjD,aAAA,GAAAsC,CAAA;MAAA;MAED;MAAAtC,aAAA,GAAAC,CAAA;MACA,MAAMoC,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAArC,aAAA,GAAAC,CAAA;AAtCW0B,OAAA,CAAAC,2BAA2B,GAAAA,2BAAA;AAwCxC;AAAA;AAAA5B,aAAA,GAAAC,CAAA;AACO,MAAMiD,wBAAwB,GACnCC,cAAsB,IACU;EAAA;EAAAnD,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IAChC,MAAMK,eAAe;IAAA;IAAA,CAAAb,aAAA,GAAAC,CAAA,QAAGF,UAAA,CAAAe,EAAE,CAACC,UAAU,CAAC,eAAe,CAAC,CAACC,GAAG,CAACmC,cAAc,CAAC;IAC1E,MAAMC,gBAAgB;IAAA;IAAA,CAAApD,aAAA,GAAAC,CAAA,QAAG,MAAMY,eAAe,CAACoB,GAAG,EAAE;IAAC;IAAAjC,aAAA,GAAAC,CAAA;IAErD,IAAI,CAACmD,gBAAgB,CAACC,MAAM,EAAE;MAAA;MAAArD,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MAC5B,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAD,aAAA,GAAAsC,CAAA;IAAA;IAAAtC,aAAA,GAAAC,CAAA;IAED,OAAOmD,gBAAgB,CAAChB,IAAI,EAAkB;EAChD,CAAC;AAAA;AAAC;AAAApC,aAAA,GAAAC,CAAA;AAXW0B,OAAA,CAAAuB,wBAAwB,GAAAA,wBAAA;AAarC;AAAA;AAAAlD,aAAA,GAAAC,CAAA;AACO,MAAMqD,8BAA8B,GACzCH,cAAsB,IACA;EAAA;EAAAnD,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IACtB,MAAMsB,QAAQ;IAAA;IAAA,CAAA9B,aAAA,GAAAC,CAAA,QAAG,MAAMF,UAAA,CAAAe,EAAE,CACtBC,UAAU,CAAC,UAAU,CAAC,CACtBgB,KAAK,CAAC,gBAAgB,EAAE,IAAI,EAAEoB,cAAc,CAAC,CAC7CnB,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAC3BC,GAAG,EAAE;IAAC;IAAAjC,aAAA,GAAAC,CAAA;IAET,OAAO6B,QAAQ,CAACI,IAAI,CAACC,GAAG,CAACnB,GAAG,IAAI;MAAA;MAAAhB,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MAAA,OAAAe,GAAG,CAACoB,IAAI,EAAa;IAAb,CAAa,CAAC;EACxD,CAAC;AAAA;AAAC;AAAApC,aAAA,GAAAC,CAAA;AAVW0B,OAAA,CAAA2B,8BAA8B,GAAAA,8BAAA;AAY3C;AAAA;AAAAtD,aAAA,GAAAC,CAAA;AACO,MAAMsD,kBAAkB,GAC7BC,WAA8C,IAC1B;EAAA;EAAAxD,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IACpB,MAAME,GAAG;IAAA;IAAA,CAAAV,aAAA,GAAAC,CAAA,QAAG,IAAIU,IAAI,EAAE,CAACC,WAAW,EAAE;IACpC,MAAM6C,UAAU;IAAA;IAAA,CAAAzD,aAAA,GAAAC,CAAA,QAAGF,UAAA,CAAAe,EAAE,CAACC,UAAU,CAAC,UAAU,CAAC,CAACC,GAAG,EAAE;IAElD,MAAMwB,OAAO;IAAA;IAAA,CAAAxC,aAAA,GAAAC,CAAA,QAAAyD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACRH,WAAW;MACdtC,EAAE,EAAEuC,UAAU,CAACvC,EAAE;MACjB0C,SAAS,EAAElD;IAAG,EACf;IAAC;IAAAV,aAAA,GAAAC,CAAA;IAEF,MAAMwD,UAAU,CAAClC,GAAG,CAACiB,OAAO,CAAC;IAAC;IAAAxC,aAAA,GAAAC,CAAA;IAC9BI,eAAA,CAAAmB,MAAM,CAACC,IAAI,CAAC,8CAA8C,EAAE;MAAEC,QAAQ,EAAE;QAAER,EAAE,EAAEsB;MAAO;IAAG,CAAE,CAAC;IAE3F;IAAA;IAAAxC,aAAA,GAAAC,CAAA;IACA,MAAM,IAAA0B,OAAA,CAAAkC,6BAA6B,EAACrB,OAAO,CAACW,cAAc,EAAEX,OAAO,CAAC;IAAC;IAAAxC,aAAA,GAAAC,CAAA;IAErE,OAAOuC,OAAO;EAChB,CAAC;AAAA;AAAC;AAAAxC,aAAA,GAAAC,CAAA;AAnBW0B,OAAA,CAAA4B,kBAAkB,GAAAA,kBAAA;AAqB/B;AAAA;AAAAvD,aAAA,GAAAC,CAAA;AACO,MAAM4D,6BAA6B,GAAGA,CAC3CV,cAAsB,EACtBX,OAAgB,KACC;EAAA;EAAAxC,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IACjB,MAAMK,eAAe;IAAA;IAAA,CAAAb,aAAA,GAAAC,CAAA,SAAGF,UAAA,CAAAe,EAAE,CAACC,UAAU,CAAC,eAAe,CAAC,CAACC,GAAG,CAACmC,cAAc,CAAC;IAAC;IAAAnD,aAAA,GAAAC,CAAA;IAE3E,MAAMY,eAAe,CAACiD,MAAM,CAAC;MAC3BC,WAAW,EAAEvB,OAAO;MACpBpB,SAAS,EAAEoB,OAAO,CAACoB,SAAS;MAC5BzC,WAAW,EAAEhB,KAAK,CAAC6D,SAAS,CAACC,UAAU,CAACC,SAAS,CAAC,CAAC;KACpD,CAAC;EACJ,CAAC;AAAA;AAAC;AAAAlE,aAAA,GAAAC,CAAA;AAXW0B,OAAA,CAAAkC,6BAA6B,GAAAA,6BAAA;AAa1C;AAAA;AAAA7D,aAAA,GAAAC,CAAA;AACO,MAAMkE,sBAAsB,GACjCC,SAAiB,IACA;EAAA;EAAApE,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IACjB,MAAMiD,UAAU;IAAA;IAAA,CAAAzD,aAAA,GAAAC,CAAA,SAAGF,UAAA,CAAAe,EAAE,CAACC,UAAU,CAAC,UAAU,CAAC,CAACC,GAAG,CAACoD,SAAS,CAAC;IAAC;IAAApE,aAAA,GAAAC,CAAA;IAC5D,MAAMwD,UAAU,CAACK,MAAM,CAAC;MACtBO,MAAM,EAAE;KACT,CAAC;EACJ,CAAC;AAAA;AAAC;AAAArE,aAAA,GAAAC,CAAA;AAPW0B,OAAA,CAAAwC,sBAAsB,GAAAA,sBAAA;AASnC;AAAA;AAAAnE,aAAA,GAAAC,CAAA;AACO,MAAMqE,2BAA2B,GAAGA,CACzCnB,cAAsB,EACtBtB,SAAiB,KACA;EAAA;EAAA7B,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IACjB,MAAMK,eAAe;IAAA;IAAA,CAAAb,aAAA,GAAAC,CAAA,SAAGF,UAAA,CAAAe,EAAE,CAACC,UAAU,CAAC,eAAe,CAAC,CAACC,GAAG,CAACmC,cAAc,CAAC;IAE1E;IACA,MAAMC,gBAAgB;IAAA;IAAA,CAAApD,aAAA,GAAAC,CAAA,SAAG,MAAMY,eAAe,CAACoB,GAAG,EAAE;IAAC;IAAAjC,aAAA,GAAAC,CAAA;IACrD,IAAI,CAACmD,gBAAgB,CAACC,MAAM,EAAE;MAAA;MAAArD,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MAC5B,MAAM,IAAIsE,KAAK,CAAC,4BAA4B,CAAC;IAC/C,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAAsC,CAAA;IAAA;IAED,MAAMrB,YAAY;IAAA;IAAA,CAAAjB,aAAA,GAAAC,CAAA,SAAGmD,gBAAgB,CAAChB,IAAI,EAAkB;IAAC;IAAApC,aAAA,GAAAC,CAAA;IAC7D,IAAI,CAACgB,YAAY,CAACV,YAAY,CAACkC,QAAQ,CAACZ,SAAS,CAAC,EAAE;MAAA;MAAA7B,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MAClD,MAAM,IAAIsE,KAAK,CAAC,iDAAiD,CAAC;IACpE,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAAsC,CAAA;IAAA;IAAAtC,aAAA,GAAAC,CAAA;IAED,MAAMY,eAAe,CAACiD,MAAM,CAAC;MAC3B3C,WAAW,EAAE;KACd,CAAC;EACJ,CAAC;AAAA;AAAC;AAAAnB,aAAA,GAAAC,CAAA;AApBW0B,OAAA,CAAA2C,2BAA2B,GAAAA,2BAAA;AAsBxC;AAAA;AAAAtE,aAAA,GAAAC,CAAA;AACO,MAAMuE,wBAAwB,GAAGA,CACtC3C,SAAiB,EACjB4C,OAAoB,KACO;EAAA;EAAAzE,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IAC3B,IAAIkE,KAAK;IAAA;IAAA,CAAA1E,aAAA,GAAAC,CAAA,SAAGF,UAAA,CAAAe,EAAE,CACXC,UAAU,CAAC,eAAe,CAAC,CAC3BgB,KAAK,CAAC,cAAc,EAAE,gBAAgB,EAAEF,SAAS,CAAC,CAClDE,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC;IAAC;IAAA/B,aAAA,GAAAC,CAAA;IAEjC,IAAIwE,OAAO,CAACE,UAAU,EAAE;MAAA;MAAA3E,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MACtByE,KAAK,GAAGA,KAAK,CAAC3C,KAAK,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;IAC5C,CAAC;IAAA;IAAA;MAAA/B,aAAA,GAAAsC,CAAA;IAAA;IAAAtC,aAAA,GAAAC,CAAA;IAED,IAAIwE,OAAO,CAACG,QAAQ,EAAE;MAAA;MAAA5E,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MACpByE,KAAK,GAAGA,KAAK,CAAC3C,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE0C,OAAO,CAACG,QAAQ,CAAC;IAC1D,CAAC;IAAA;IAAA;MAAA5E,aAAA,GAAAsC,CAAA;IAAA;IAAAtC,aAAA,GAAAC,CAAA;IAED,IAAIwE,OAAO,CAACI,MAAM,EAAE;MAAA;MAAA7E,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MAClByE,KAAK,GAAGA,KAAK,CAAC3C,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE0C,OAAO,CAACI,MAAM,CAAC;IACxD,CAAC;IAAA;IAAA;MAAA7E,aAAA,GAAAsC,CAAA;IAAA;IAED,MAAMR,QAAQ;IAAA;IAAA,CAAA9B,aAAA,GAAAC,CAAA,SAAG,MAAMyE,KAAK,CAAC1C,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAACC,GAAG,EAAE;IAC/D,IAAIW,aAAa;IAAA;IAAA,CAAA5C,aAAA,GAAAC,CAAA,SAAG6B,QAAQ,CAACI,IAAI,CAACC,GAAG,CAACnB,GAAG,IAAI;MAAA;MAAAhB,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MAAA,OAAAe,GAAG,CAACoB,IAAI,EAAkB;IAAlB,CAAkB,CAAC;IAExE;IAAA;IAAApC,aAAA,GAAAC,CAAA;IACA,IAAIwE,OAAO,CAACK,MAAM,EAAE;MAAA;MAAA9E,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MAClB2C,aAAa,GAAGA,aAAa,CAACmC,MAAM,CAAC9D,YAAY,IAAG;QAAA;QAAAjB,aAAA,GAAAQ,CAAA;;QAClD;QAAA;QAAAR,aAAA,GAAAC,CAAA;QACA;QACE;QAAA,CAAAD,aAAA,GAAAsC,CAAA,YAAA0C,EAAA,GAAA/D,YAAY,CAAC8C,WAAW;QAAA;QAAA,CAAA/D,aAAA,GAAAsC,CAAA,WAAA0C,EAAA;QAAA;QAAA,CAAAhF,aAAA,GAAAsC,CAAA;QAAA;QAAA,CAAAtC,aAAA,GAAAsC,CAAA,WAAA0C,EAAA,CAAEC,OAAO,CAC9BC,WAAW,GACXzC,QAAQ,CAACgC,OAAO,CAACK,MAAO,CAACI,WAAW,EAAE,CAAC,GAC1C;UAAA;UAAAlF,aAAA,GAAAsC,CAAA;UAAAtC,aAAA,GAAAC,CAAA;UACA,OAAO,IAAI;QACb,CAAC;QAAA;QAAA;UAAAD,aAAA,GAAAsC,CAAA;QAAA;QAED;QACA,MAAM6C,iBAAiB;QAAA;QAAA,CAAAnF,aAAA,GAAAC,CAAA,SAAGgB,YAAY,CAACV,YAAY,CAACwE,MAAM,CACxDK,CAAC,IAAI;UAAA;UAAApF,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAC,CAAA;UAAA,OAAAmF,CAAC,KAAKvD,SAAS;QAAT,CAAS,CACrB;QAAC;QAAA7B,aAAA,GAAAC,CAAA;QACF,OAAOkF,iBAAiB,CAACE,IAAI,CAACD,CAAC,IAC7B;UAAA;UAAApF,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAC,CAAA;UAAA,OAAAmF,CAAC,CAACF,WAAW,EAAE,CAACzC,QAAQ,CAACgC,OAAO,CAACK,MAAO,CAACI,WAAW,EAAE,CAAC;QAAD,CAAC,CACxD;MACH,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlF,aAAA,GAAAsC,CAAA;IAAA;IAAAtC,aAAA,GAAAC,CAAA;IAED,OAAO2C,aAAa;EACtB,CAAC;AAAA;AAAC;AAAA5C,aAAA,GAAAC,CAAA;AA/CW0B,OAAA,CAAA6C,wBAAwB,GAAAA,wBAAA;AAiDrC;AAAA;AAAAxE,aAAA,GAAAC,CAAA;AACO,MAAMqF,uBAAuB,GAAGA,CACrCnC,cAAsB,EACtBtB,SAAiB,KACA;EAAA;EAAA7B,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IACjB,MAAMK,eAAe;IAAA;IAAA,CAAAb,aAAA,GAAAC,CAAA,SAAGF,UAAA,CAAAe,EAAE,CAACC,UAAU,CAAC,eAAe,CAAC,CAACC,GAAG,CAACmC,cAAc,CAAC;IAE1E;IACA,MAAMC,gBAAgB;IAAA;IAAA,CAAApD,aAAA,GAAAC,CAAA,SAAG,MAAMY,eAAe,CAACoB,GAAG,EAAE;IAAC;IAAAjC,aAAA,GAAAC,CAAA;IACrD,IAAI,CAACmD,gBAAgB,CAACC,MAAM,EAAE;MAAA;MAAArD,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MAC5B,MAAM,IAAIsE,KAAK,CAAC,4BAA4B,CAAC;IAC/C,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAAsC,CAAA;IAAA;IAED,MAAMrB,YAAY;IAAA;IAAA,CAAAjB,aAAA,GAAAC,CAAA,SAAGmD,gBAAgB,CAAChB,IAAI,EAAkB;IAAC;IAAApC,aAAA,GAAAC,CAAA;IAC7D,IAAI,CAACgB,YAAY,CAACV,YAAY,CAACkC,QAAQ,CAACZ,SAAS,CAAC,EAAE;MAAA;MAAA7B,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MAClD,MAAM,IAAIsE,KAAK,CAAC,iDAAiD,CAAC;IACpE,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAAsC,CAAA;IAAA;IAAAtC,aAAA,GAAAC,CAAA;IAED,MAAMY,eAAe,CAACiD,MAAM,CAAC;MAC3BzC,QAAQ,EAAE;KACX,CAAC;EACJ,CAAC;AAAA;AAAC;AAAArB,aAAA,GAAAC,CAAA;AApBW0B,OAAA,CAAA2D,uBAAuB,GAAAA,uBAAA;AAsBpC;AAAA;AAAAtF,aAAA,GAAAC,CAAA;AACO,MAAMsF,wBAAwB,GAAGA,CACtCpC,cAAsB,EACtBtB,SAAiB,KACA;EAAA;EAAA7B,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IACjB,MAAMK,eAAe;IAAA;IAAA,CAAAb,aAAA,GAAAC,CAAA,SAAGF,UAAA,CAAAe,EAAE,CAACC,UAAU,CAAC,eAAe,CAAC,CAACC,GAAG,CAACmC,cAAc,CAAC;IAE1E;IACA,MAAMC,gBAAgB;IAAA;IAAA,CAAApD,aAAA,GAAAC,CAAA,SAAG,MAAMY,eAAe,CAACoB,GAAG,EAAE;IAAC;IAAAjC,aAAA,GAAAC,CAAA;IACrD,IAAI,CAACmD,gBAAgB,CAACC,MAAM,EAAE;MAAA;MAAArD,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MAC5B,MAAM,IAAIsE,KAAK,CAAC,4BAA4B,CAAC;IAC/C,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAAsC,CAAA;IAAA;IAED,MAAMrB,YAAY;IAAA;IAAA,CAAAjB,aAAA,GAAAC,CAAA,SAAGmD,gBAAgB,CAAChB,IAAI,EAAkB;IAAC;IAAApC,aAAA,GAAAC,CAAA;IAC7D,IAAI,CAACgB,YAAY,CAACV,YAAY,CAACkC,QAAQ,CAACZ,SAAS,CAAC,EAAE;MAAA;MAAA7B,aAAA,GAAAsC,CAAA;MAAAtC,aAAA,GAAAC,CAAA;MAClD,MAAM,IAAIsE,KAAK,CAAC,iDAAiD,CAAC;IACpE,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAAsC,CAAA;IAAA;IAAAtC,aAAA,GAAAC,CAAA;IAED,MAAMY,eAAe,CAACiD,MAAM,CAAC;MAC3BzC,QAAQ,EAAE;KACX,CAAC;EACJ,CAAC;AAAA;AAAC;AAAArB,aAAA,GAAAC,CAAA;AApBW0B,OAAA,CAAA4D,wBAAwB,GAAAA,wBAAA;AAsBrC;AAAA;AAAAvF,aAAA,GAAAC,CAAA;AACO,MAAMuF,gCAAgC,GAAGA,CAC9CC,KAAa,EACbC,KAAa,KACmB;EAAA;EAAA1F,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IAChC,MAAMsB,QAAQ;IAAA;IAAA,CAAA9B,aAAA,GAAAC,CAAA,SAAG,MAAMF,UAAA,CAAAe,EAAE,CACtBC,UAAU,CAAC,eAAe,CAAC,CAC3BgB,KAAK,CAAC,cAAc,EAAE,gBAAgB,EAAE0D,KAAK,CAAC,CAC9C1D,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAC7BE,GAAG,EAAE;IAER,MAAMW,aAAa;IAAA;IAAA,CAAA5C,aAAA,GAAAC,CAAA,SAAG6B,QAAQ,CAACI,IAAI,CAACC,GAAG,CAACnB,GAAG,IAAI;MAAA;MAAAhB,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MAAA,OAAAe,GAAG,CAACoB,IAAI,EAAkB;IAAlB,CAAkB,CAAC;IAE1E;IACA,MAAMnB,YAAY;IAAA;IAAA,CAAAjB,aAAA,GAAAC,CAAA,SAAG2C,aAAa,CAAC+C,IAAI,CACrCC,IAAI,IACF;MAAA;MAAA5F,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MAAA,kCAAAD,aAAA,GAAAsC,CAAA,WAAAsD,IAAI,CAACrF,YAAY,CAACkC,QAAQ,CAACgD,KAAK,CAAC;MAAA;MAAA,CAAAzF,aAAA,GAAAsC,CAAA,WAAIsD,IAAI,CAACrF,YAAY,CAACkC,QAAQ,CAACiD,KAAK,CAAC;IAAD,CAAC,CACzE;IAAC;IAAA1F,aAAA,GAAAC,CAAA;IAEF,OAAO,2BAAAD,aAAA,GAAAsC,CAAA,WAAArB,YAAY;IAAA;IAAA,CAAAjB,aAAA,GAAAsC,CAAA,WAAI,IAAI;EAC7B,CAAC;AAAA;AAAC;AAAAtC,aAAA,GAAAC,CAAA;AAnBW0B,OAAA,CAAA6D,gCAAgC,GAAAA,gCAAA;AAqB7C;AAAA;AAAAxF,aAAA,GAAAC,CAAA;AACO,MAAM4F,iBAAiB,GAC5BhE,SAAiB,IAKd;EAAA;EAAA7B,aAAA,GAAAQ,CAAA;EAAAR,aAAA,GAAAC,CAAA;EAAA,OAAAQ,SAAA;IAAA;IAAAT,aAAA,GAAAQ,CAAA;IACH,MAAMoC,aAAa;IAAA;IAAA,CAAA5C,aAAA,GAAAC,CAAA,SAAG,MAAM,IAAA0B,OAAA,CAAAC,2BAA2B,EAACC,SAAS,CAAC;IAElE,MAAMiE,kBAAkB;IAAA;IAAA,CAAA9F,aAAA,GAAAC,CAAA,SAAG2C,aAAa,CAACmD,MAAM;IAC/C,MAAMC,cAAc;IAAA;IAAA,CAAAhG,aAAA,GAAAC,CAAA,SAAG2C,aAAa,CAACqD,MAAM,CACzC,CAACC,GAAG,EAAEN,IAAI,KAAK;MAAA;MAAA5F,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MAAA,OAAAiG,GAAG,GAAGN,IAAI,CAACzE,WAAW;IAAX,CAAW,EACrC,CAAC,CACF;IACD,MAAMgF,mBAAmB;IAAA;IAAA,CAAAnG,aAAA,GAAAC,CAAA,SAAG2C,aAAa,CAACmC,MAAM,CAC9Ca,IAAI,IAAI;MAAA;MAAA5F,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MAAA,OAAA2F,IAAI,CAACvE,QAAQ;IAAR,CAAQ,CACtB,CAAC0E,MAAM;IAAC;IAAA/F,aAAA,GAAAC,CAAA;IAET,OAAO;MACL6F,kBAAkB;MAClBE,cAAc;MACdG;KACD;EACH,CAAC;AAAA;AAAC;AAAAnG,aAAA,GAAAC,CAAA;AAvBW0B,OAAA,CAAAkE,iBAAiB,GAAAA,iBAAA","ignoreList":[]}