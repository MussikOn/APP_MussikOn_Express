{"version":3,"names":["loggerService_1","cov_2jviggwuus","s","require","imagesModel_1","uploadImageController","req","res","f","__awaiter","user","b","status","json","error","file","category","description","tags","isPublic","body","includes","metadata","JSON","parse","undefined","image","uploadImage","userEmail","console","log","id","success","message","logger","details","exports","getImageByIdController","imageId","params","getImageById","listImagesController","userId","search","limit","offset","query","filters","parseInt","images","listImages","length","total","updateImageController","updateData","existingImage","updatedImage","updateImage","deleteImageController","deleteImage","getImageStatsController","roll","stats","getImageStats","getUserProfileImagesController","getUserProfileImages","getPostImagesController","getPostImages","getEventImagesController","eventId","getEventImages","cleanupExpiredImagesController","deletedCount","cleanupExpiredImages","getAllImagesController","getImageUrlController","key","url"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\imagesController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { logger } from '../services/loggerService';\r\nimport {\r\n  uploadImage,\r\n  getImageById,\r\n  listImages,\r\n  updateImage,\r\n  deleteImage,\r\n  getImageStats,\r\n  getUserProfileImages,\r\n  getPostImages,\r\n  getEventImages,\r\n  deleteImageFromS3,\r\n  cleanupExpiredImages,\r\n} from '../models/imagesModel';\r\nimport { ImageFilters, ImageUpdateRequest } from '../utils/DataTypes';\r\n\r\n/**\r\n * @swagger\r\n * /images/upload:\r\n *   post:\r\n *     summary: Subir una nueva imagen\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               image:\r\n *                 type: string\r\n *                 format: binary\r\n *                 description: Archivo de imagen\r\n *               category:\r\n *                 type: string\r\n *                 enum: [profile, post, event, gallery, admin]\r\n *                 description: Categoría de la imagen\r\n *               description:\r\n *                 type: string\r\n *                 description: Descripción de la imagen\r\n *               tags:\r\n *                 type: array\r\n *                 items:\r\n *                   type: string\r\n *                 description: Etiquetas de la imagen\r\n *               isPublic:\r\n *                 type: boolean\r\n *                 default: true\r\n *                 description: Si la imagen es pública\r\n *     responses:\r\n *       200:\r\n *         description: Imagen subida exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 image:\r\n *                   $ref: '#/components/schemas/Image'\r\n */\r\nexport const uploadImageController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (!user) {\r\n      res.status(401).json({ error: 'Usuario no autenticado' });\r\n      return;\r\n    }\r\n\r\n    if (!req.file) {\r\n      res.status(400).json({ error: 'No se proporcionó ningún archivo' });\r\n      return;\r\n    }\r\n\r\n    const { category, description, tags, isPublic } = req.body;\r\n\r\n    if (\r\n      !category ||\r\n      !['profile', 'post', 'event', 'gallery', 'admin'].includes(category)\r\n    ) {\r\n      res.status(400).json({ error: 'Categoría inválida' });\r\n      return;\r\n    }\r\n\r\n    const metadata = {\r\n      description: description || '',\r\n      tags: tags ? JSON.parse(tags) : [],\r\n      isPublic: isPublic !== undefined ? JSON.parse(isPublic) : true,\r\n    };\r\n\r\n    const image = await uploadImage(\r\n      req.file,\r\n      user.userEmail,\r\n      category,\r\n      metadata\r\n    );\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:uploadImageController] Imagen subida por ${user.userEmail}:`,\r\n      image.id\r\n    );\r\n\r\n    res.status(201).json({\r\n      success: true,\r\n      message: 'Imagen subida exitosamente',\r\n      image,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:uploadImageController] Error al subir imagen:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al subir imagen',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/{imageId}:\r\n *   get:\r\n *     summary: Obtener imagen por ID\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: path\r\n *         name: imageId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID de la imagen\r\n *     responses:\r\n *       200:\r\n *         description: Imagen encontrada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 image:\r\n *                   $ref: '#/components/schemas/Image'\r\n *       404:\r\n *         description: Imagen no encontrada\r\n */\r\nexport const getImageByIdController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { imageId } = req.params;\r\n\r\n    if (!imageId) {\r\n      res.status(400).json({ error: 'ID de imagen requerido' });\r\n      return;\r\n    }\r\n\r\n    const image = await getImageById(imageId);\r\n\r\n    if (!image) {\r\n      res.status(404).json({ error: 'Imagen no encontrada' });\r\n      return;\r\n    }\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getImageByIdController] Imagen obtenida:`,\r\n      imageId\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      image,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getImageByIdController] Error al obtener imagen:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener imagen',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images:\r\n *   get:\r\n *     summary: Listar imágenes con filtros\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: query\r\n *         name: category\r\n *         schema:\r\n *           type: string\r\n *           enum: [profile, post, event, gallery, admin]\r\n *         description: Filtrar por categoría\r\n *       - in: query\r\n *         name: userId\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por usuario\r\n *       - in: query\r\n *         name: isPublic\r\n *         schema:\r\n *           type: boolean\r\n *         description: Filtrar por visibilidad\r\n *       - in: query\r\n *         name: search\r\n *         schema:\r\n *           type: string\r\n *         description: Buscar en descripción y nombre\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           default: 20\r\n *         description: Límite de resultados\r\n *       - in: query\r\n *         name: offset\r\n *         schema:\r\n *           type: integer\r\n *           default: 0\r\n *         description: Offset para paginación\r\n *     responses:\r\n *       200:\r\n *         description: Lista de imágenes\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 images:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/Image'\r\n *                 total:\r\n *                   type: integer\r\n */\r\nexport const listImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const {\r\n      category,\r\n      userId,\r\n      isPublic,\r\n      search,\r\n      limit = 20,\r\n      offset = 0,\r\n    } = req.query;\r\n\r\n    const filters: ImageFilters = {};\r\n\r\n    if (category) filters.category = category as any;\r\n    if (userId) filters.userId = userId as string;\r\n    if (isPublic !== undefined) filters.isPublic = isPublic === 'true';\r\n    if (search) filters.search = search as string;\r\n    if (limit) filters.limit = parseInt(limit as string);\r\n    if (offset) filters.offset = parseInt(offset as string);\r\n\r\n    const images = await listImages(filters);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:listImagesController] ${images.length} imágenes listadas`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      images,\r\n      total: images.length,\r\n      filters,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:listImagesController] Error al listar imágenes:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al listar imágenes',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/{imageId}:\r\n *   put:\r\n *     summary: Actualizar imagen\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: imageId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID de la imagen\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               description:\r\n *                 type: string\r\n *               tags:\r\n *                 type: array\r\n *                 items:\r\n *                   type: string\r\n *               isPublic:\r\n *                 type: boolean\r\n *               isActive:\r\n *                 type: boolean\r\n *     responses:\r\n *       200:\r\n *         description: Imagen actualizada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 image:\r\n *                   $ref: '#/components/schemas/Image'\r\n */\r\nexport const updateImageController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (!user) {\r\n      res.status(401).json({ error: 'Usuario no autenticado' });\r\n      return;\r\n    }\r\n\r\n    const { imageId } = req.params;\r\n    const updateData: ImageUpdateRequest = req.body;\r\n\r\n    if (!imageId) {\r\n      res.status(400).json({ error: 'ID de imagen requerido' });\r\n      return;\r\n    }\r\n\r\n    // Verificar que la imagen existe y pertenece al usuario\r\n    const existingImage = await getImageById(imageId);\r\n    if (!existingImage) {\r\n      res.status(404).json({ error: 'Imagen no encontrada' });\r\n      return;\r\n    }\r\n\r\n    if (existingImage.userId !== user.userEmail) {\r\n      res\r\n        .status(403)\r\n        .json({ error: 'No tienes permisos para actualizar esta imagen' });\r\n      return;\r\n    }\r\n\r\n    const updatedImage = await updateImage(imageId, updateData);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:updateImageController] Imagen actualizada por ${user.userEmail}:`,\r\n      imageId\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Imagen actualizada exitosamente',\r\n      image: updatedImage,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:updateImageController] Error al actualizar imagen:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al actualizar imagen',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/{imageId}:\r\n *   delete:\r\n *     summary: Eliminar imagen\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: imageId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID de la imagen\r\n *     responses:\r\n *       200:\r\n *         description: Imagen eliminada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n */\r\nexport const deleteImageController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (!user) {\r\n      res.status(401).json({ error: 'Usuario no autenticado' });\r\n      return;\r\n    }\r\n\r\n    const { imageId } = req.params;\r\n\r\n    if (!imageId) {\r\n      res.status(400).json({ error: 'ID de imagen requerido' });\r\n      return;\r\n    }\r\n\r\n    await deleteImage(imageId, user.userEmail);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:deleteImageController] Imagen eliminada por ${user.userEmail}:`,\r\n      imageId\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Imagen eliminada exitosamente',\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:deleteImageController] Error al eliminar imagen:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al eliminar imagen',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/stats:\r\n *   get:\r\n *     summary: Obtener estadísticas de imágenes\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Estadísticas de imágenes\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 stats:\r\n *                   $ref: '#/components/schemas/ImageStats'\r\n */\r\nexport const getImageStatsController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (\r\n      !user ||\r\n      !['adminJunior', 'adminMidLevel', 'adminSenior', 'superAdmin'].includes(\r\n        user.roll\r\n      )\r\n    ) {\r\n      res.status(403).json({\r\n        error: 'Acceso denegado. Se requieren permisos de administrador',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const stats = await getImageStats();\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getImageStatsController] Estadísticas obtenidas por ${user.userEmail}`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      stats,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getImageStatsController] Error al obtener estadísticas:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener estadísticas',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/profile/{userId}:\r\n *   get:\r\n *     summary: Obtener imágenes de perfil de un usuario\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: path\r\n *         name: userId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: Email del usuario\r\n *     responses:\r\n *       200:\r\n *         description: Imágenes de perfil\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 images:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/Image'\r\n */\r\nexport const getUserProfileImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { userId } = req.params;\r\n\r\n    if (!userId) {\r\n      res.status(400).json({ error: 'ID de usuario requerido' });\r\n      return;\r\n    }\r\n\r\n    const images = await getUserProfileImages(userId);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getUserProfileImagesController] Imágenes de perfil obtenidas para ${userId}`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      images,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getUserProfileImagesController] Error al obtener imágenes de perfil:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener imágenes de perfil',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/posts:\r\n *   get:\r\n *     summary: Obtener imágenes de posts\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: query\r\n *         name: userId\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por usuario específico\r\n *     responses:\r\n *       200:\r\n *         description: Imágenes de posts\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 images:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/Image'\r\n */\r\nexport const getPostImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { userId } = req.query;\r\n\r\n    const images = await getPostImages(userId as string);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getPostImagesController] ${images.length} imágenes de posts obtenidas`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      images,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getPostImagesController] Error al obtener imágenes de posts:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener imágenes de posts',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/events:\r\n *   get:\r\n *     summary: Obtener imágenes de eventos\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: query\r\n *         name: eventId\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por evento específico\r\n *     responses:\r\n *       200:\r\n *         description: Imágenes de eventos\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 images:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/Image'\r\n */\r\nexport const getEventImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { eventId } = req.query;\r\n\r\n    const images = await getEventImages(eventId as string);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getEventImagesController] ${images.length} imágenes de eventos obtenidas`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      images,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getEventImagesController] Error al obtener imágenes de eventos:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener imágenes de eventos',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/cleanup:\r\n *   post:\r\n *     summary: Limpiar imágenes expiradas (Solo administradores)\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Limpieza completada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 deletedCount:\r\n *                   type: integer\r\n *                 message:\r\n *                   type: string\r\n */\r\nexport const cleanupExpiredImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (!user || !['adminSenior', 'superAdmin'].includes(user.roll)) {\r\n      res.status(403).json({\r\n        error: 'Acceso denegado. Se requieren permisos de administrador senior',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const deletedCount = await cleanupExpiredImages();\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:cleanupExpiredImagesController] Limpieza realizada por ${user.userEmail}: ${deletedCount} imágenes eliminadas`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      deletedCount,\r\n      message: `${deletedCount} imágenes expiradas eliminadas`,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:cleanupExpiredImagesController] Error en limpieza:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error en limpieza de imágenes',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Controladores legacy para compatibilidad\r\nexport const getAllImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const images = await listImages();\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Galería de fotos obtenida',\r\n      images,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getAllImagesController] Error al obtener galería:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener galería de imágenes',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getImageUrlController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { key } = req.params;\r\n    if (!key) {\r\n      res.status(400).json({ error: 'Clave de archivo requerida' });\r\n      return;\r\n    }\r\n\r\n    const image = await getImageById(key);\r\n    if (!image) {\r\n      res.status(404).json({ error: 'Imagen no encontrada' });\r\n      return;\r\n    }\r\n\r\n    res.status(200).json({ url: image.url });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getImageUrlController] Error al obtener URL:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al generar URL de archivo',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n"],"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","ignoreList":[]}