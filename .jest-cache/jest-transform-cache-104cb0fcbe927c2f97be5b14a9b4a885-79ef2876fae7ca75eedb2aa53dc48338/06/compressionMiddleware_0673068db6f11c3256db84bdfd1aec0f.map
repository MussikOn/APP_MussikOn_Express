{"version":3,"names":["cov_ernx8492a","actualCoverage","s","loggerService_1","require","CompressionMiddleware","constructor","options","b","f","Object","assign","threshold","level","filter","defaultFilter","initializeCompression","getInstance","instance","process","env","ENABLE_COMPRESSION","compression","logger","info","metadata","service","error","warn","req","res","headers","includes","contentLength","parseInt","getHeader","contentType","middleware","next","setHeader","compress","compressResponse","data","jsonString","JSON","stringify","length","compressed","getCompressionStats","originalSize","encoding","compressedSize","compressionRatio","algorithm","exports","compressionMiddleware"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\compressionMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { logger } from '../services/loggerService';\r\n\r\nexport interface CompressionOptions {\r\n  threshold?: number; // Minimum size to compress (bytes)\r\n  level?: number; // Compression level (1-9)\r\n  filter?: (req: Request, res: Response) => boolean;\r\n}\r\n\r\nexport class CompressionMiddleware {\r\n  private static instance: CompressionMiddleware;\r\n  private compression: any;\r\n  private options: CompressionOptions;\r\n\r\n  private constructor(options: CompressionOptions = {}) {\r\n    this.options = {\r\n      threshold: 1024, // 1KB\r\n      level: 6,\r\n      filter: this.defaultFilter,\r\n      ...options\r\n    };\r\n    this.initializeCompression();\r\n  }\r\n\r\n  public static getInstance(options?: CompressionOptions): CompressionMiddleware {\r\n    if (!CompressionMiddleware.instance) {\r\n      CompressionMiddleware.instance = new CompressionMiddleware(options);\r\n    }\r\n    return CompressionMiddleware.instance;\r\n  }\r\n\r\n  private initializeCompression(): void {\r\n    try {\r\n      // Use compression library if available\r\n      if (process.env.ENABLE_COMPRESSION === 'true') {\r\n        this.compression = require('compression');\r\n        logger.info('Compression middleware initialized', { \r\n          metadata: { service: 'CompressionMiddleware', options: this.options } \r\n        });\r\n      } else {\r\n        logger.info('Compression disabled by environment variable', { \r\n          metadata: { service: 'CompressionMiddleware' } \r\n        });\r\n      }\r\n    } catch (error) {\r\n      logger.warn('Compression library not available, using fallback', { \r\n        metadata: { service: 'CompressionMiddleware' } \r\n      });\r\n    }\r\n  }\r\n\r\n  private defaultFilter(req: Request, res: Response): boolean {\r\n    // Don't compress if request doesn't accept gzip\r\n    if (!req.headers['accept-encoding'] || !req.headers['accept-encoding'].includes('gzip')) {\r\n      return false;\r\n    }\r\n\r\n    // Don't compress small responses\r\n    const contentLength = parseInt(res.getHeader('content-length') as string) || 0;\r\n    if (contentLength < (this.options.threshold || 1024)) {\r\n      return false;\r\n    }\r\n\r\n    // Don't compress already compressed content\r\n    const contentType = res.getHeader('content-type') as string;\r\n    if (contentType && (\r\n      contentType.includes('image/') ||\r\n      contentType.includes('video/') ||\r\n      contentType.includes('audio/') ||\r\n      contentType.includes('application/zip') ||\r\n      contentType.includes('application/gzip')\r\n    )) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public middleware() {\r\n    return (req: Request, res: Response, next: NextFunction) => {\r\n      // Skip compression if not enabled or library not available\r\n      if (!this.compression || process.env.ENABLE_COMPRESSION !== 'true') {\r\n        return next();\r\n      }\r\n\r\n      // Check if response should be compressed\r\n      if (!this.options.filter!(req, res)) {\r\n        return next();\r\n      }\r\n\r\n      // Add compression headers\r\n      res.setHeader('Vary', 'Accept-Encoding');\r\n      \r\n      // Use compression middleware\r\n      const compress = this.compression({\r\n        threshold: this.options.threshold,\r\n        level: this.options.level,\r\n        filter: this.options.filter\r\n      });\r\n\r\n      compress(req, res, next);\r\n    };\r\n  }\r\n\r\n  public static compressResponse(data: any, req: Request, res: Response): Buffer | string {\r\n    try {\r\n      // Simple compression for JSON responses\r\n      if (typeof data === 'object') {\r\n        const jsonString = JSON.stringify(data);\r\n        \r\n        // Only compress if response is large enough\r\n        if (jsonString.length < (CompressionMiddleware.getInstance().options.threshold || 1024)) {\r\n          return jsonString;\r\n        }\r\n\r\n        // Simple compression by removing unnecessary whitespace\r\n        const compressed = JSON.stringify(data, null, 0);\r\n        res.setHeader('Content-Encoding', 'identity');\r\n        res.setHeader('X-Compression', 'simple');\r\n        \r\n        return compressed;\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('Error compressing response', error as Error, { \r\n        metadata: { service: 'CompressionMiddleware' } \r\n      });\r\n      return data;\r\n    }\r\n  }\r\n\r\n  public static getCompressionStats(req: Request, res: Response): {\r\n    originalSize: number;\r\n    compressedSize: number;\r\n    compressionRatio: number;\r\n    algorithm: string;\r\n  } {\r\n    const originalSize = parseInt(res.getHeader('content-length') as string) || 0;\r\n    const encoding = res.getHeader('content-encoding') as string;\r\n    const compressedSize = encoding === 'gzip' ? \r\n      parseInt(res.getHeader('x-compressed-size') as string) || originalSize : \r\n      originalSize;\r\n    \r\n    const compressionRatio = originalSize > 0 ? \r\n      ((originalSize - compressedSize) / originalSize) * 100 : 0;\r\n\r\n    return {\r\n      originalSize,\r\n      compressedSize,\r\n      compressionRatio,\r\n      algorithm: encoding || 'none'\r\n    };\r\n  }\r\n}\r\n\r\n// Export middleware function\r\nexport const compressionMiddleware = CompressionMiddleware.getInstance().middleware(); "],"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","ignoreList":[]}