{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\musicianSearchController.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\musicianSearchController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { MusicianSearchController } from '../controllers/musicianSearchController';\r\n\r\n// Mock de las dependencias\r\njest.mock('../models/eventModel', () => ({\r\n  getEventByIdModel: jest.fn()\r\n}));\r\n\r\njest.mock('../services/musicianSearchService', () => ({\r\n  MusicianSearchService: {\r\n    searchMusiciansForEvent: jest.fn(),\r\n    getRecommendedMusicians: jest.fn()\r\n  }\r\n}));\r\n\r\n// Importar los mocks\r\nimport { getEventByIdModel } from '../models/eventModel';\r\nimport { MusicianSearchService } from '../services/musicianSearchService';\r\n\r\ndescribe('MusicianSearchController', () => {\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockJson: jest.Mock;\r\n  let mockStatus: jest.Mock;\r\n\r\n  beforeEach(() => {\r\n    mockJson = jest.fn();\r\n    mockStatus = jest.fn().mockReturnValue({ json: mockJson });\r\n    \r\n    mockResponse = {\r\n      status: mockStatus,\r\n      json: mockJson\r\n    };\r\n\r\n    // Reset de todos los mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('searchMusiciansForEvent', () => {\r\n    beforeEach(() => {\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          email: 'user@example.com',\r\n          role: 'eventCreator',\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com',\r\n          roll: 'eventCreator'\r\n        },\r\n        body: {\r\n          eventId: 'event123',\r\n          criteria: {\r\n            instrument: 'guitarra',\r\n            location: 'Madrid',\r\n            budget: 500,\r\n            date: '2024-12-25',\r\n            time: '20:00',\r\n            duration: 120,\r\n            eventType: 'wedding',\r\n            maxDistance: 50\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should search musicians for event successfully', async () => {\r\n      // Mock del evento\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        user: 'user@example.com',\r\n        eventName: 'Boda de María',\r\n        instrument: 'guitarra',\r\n        location: 'Madrid',\r\n        budget: '500',\r\n        date: '2024-12-25',\r\n        time: '20:00',\r\n        duration: '120',\r\n        eventType: 'wedding'\r\n      };\r\n\r\n      // Mock de músicos encontrados\r\n      const mockMusicians = [\r\n        {\r\n          id: 'musician1',\r\n          name: 'Juan Pérez',\r\n          instrument: 'guitarra',\r\n          rating: 4.5,\r\n          rate: 150\r\n        }\r\n      ];\r\n\r\n      // Configurar mocks\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n      (MusicianSearchService.searchMusiciansForEvent as jest.Mock).mockResolvedValue(mockMusicians);\r\n\r\n      await MusicianSearchController.searchMusiciansForEvent(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          success: true,\r\n          message: 'Búsqueda de músicos completada exitosamente',\r\n          data: expect.objectContaining({\r\n            eventId: 'event123',\r\n            totalMusicians: 1,\r\n            musicians: mockMusicians\r\n          })\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should return error when user is not event creator', async () => {\r\n      mockRequest.user = {\r\n        userId: 'user123',\r\n        email: 'user@example.com',\r\n        role: 'musico',\r\n        name: 'Test User',\r\n        userEmail: 'user@example.com',\r\n        roll: 'musico'\r\n      };\r\n\r\n      await MusicianSearchController.searchMusiciansForEvent(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(403);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Solo los creadores de eventos pueden buscar músicos'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getRecommendedMusicians', () => {\r\n    beforeEach(() => {\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          email: 'user@example.com',\r\n          role: 'eventCreator',\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com',\r\n          roll: 'eventCreator'\r\n        },\r\n        params: {\r\n          eventId: 'event123'\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should get recommended musicians successfully', async () => {\r\n      // Mock de músicos recomendados\r\n      const mockMusicians = [\r\n        {\r\n          id: 'musician1',\r\n          name: 'Juan Pérez',\r\n          instrument: 'guitarra',\r\n          rating: 4.5,\r\n          rate: 150\r\n        }\r\n      ];\r\n\r\n      // Configurar mocks\r\n      (MusicianSearchService.getRecommendedMusicians as jest.Mock).mockResolvedValue(mockMusicians);\r\n\r\n      await MusicianSearchController.getRecommendedMusicians(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          success: true,\r\n          message: 'Recomendaciones obtenidas exitosamente',\r\n          data: expect.objectContaining({\r\n            eventId: 'event123',\r\n            recommendations: mockMusicians,\r\n            totalRecommendations: 1\r\n          })\r\n        })\r\n      );\r\n    });\r\n  });\r\n}); "],"version":3}