{"version":3,"names":["cov_uu4u3xkn1","actualCoverage","express_1","s","require","authMiddleware_1","validationMiddleware_1","joi_1","__importDefault","geolocationController_1","router","Router","coordinatesDTO","default","object","lat","number","min","max","required","lng","geocodeAddressDTO","address","string","reverseGeocodeDTO","calculateDistanceDTO","point1","point2","isWithinRadiusDTO","center","point","radius","positive","optimizeRouteDTO","startLocation","destinations","array","items","mode","valid","optimize","boolean","get","authMiddleware","searchByProximityController","findNearbyEventsController","findNearbyMusiciansController","post","validate","optimizeRouteController","geocodeAddressController","reverseGeocodeController","calculateDistanceController","getLocationStatsController","isWithinRadiusController","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\geolocationRoutes.ts"],"sourcesContent":["import { Router } from 'express';\r\nimport { authMiddleware } from '../middleware/authMiddleware';\r\nimport { validate } from '../middleware/validationMiddleware';\r\nimport Joi from 'joi';\r\nimport {\r\n  searchByProximityController,\r\n  findNearbyEventsController,\r\n  findNearbyMusiciansController,\r\n  optimizeRouteController,\r\n  geocodeAddressController,\r\n  reverseGeocodeController,\r\n  calculateDistanceController,\r\n  getLocationStatsController,\r\n  isWithinRadiusController,\r\n} from '../controllers/geolocationController';\r\n\r\nconst router = Router();\r\n\r\n// DTOs para validación\r\nconst coordinatesDTO = Joi.object({\r\n  lat: Joi.number().min(-90).max(90).required(),\r\n  lng: Joi.number().min(-180).max(180).required(),\r\n});\r\n\r\nconst geocodeAddressDTO = Joi.object({\r\n  address: Joi.string().required().min(3).max(200),\r\n});\r\n\r\nconst reverseGeocodeDTO = Joi.object({\r\n  lat: Joi.number().min(-90).max(90).required(),\r\n  lng: Joi.number().min(-180).max(180).required(),\r\n});\r\n\r\nconst calculateDistanceDTO = Joi.object({\r\n  point1: coordinatesDTO.required(),\r\n  point2: coordinatesDTO.required(),\r\n});\r\n\r\nconst isWithinRadiusDTO = Joi.object({\r\n  center: coordinatesDTO.required(),\r\n  point: coordinatesDTO.required(),\r\n  radius: Joi.number().positive().required(),\r\n});\r\n\r\nconst optimizeRouteDTO = Joi.object({\r\n  startLocation: coordinatesDTO.required(),\r\n  destinations: Joi.array().items(coordinatesDTO).min(1).required(),\r\n  mode: Joi.string().valid('driving', 'walking', 'transit').required(),\r\n  optimize: Joi.boolean().default(false),\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /geolocation/proximity:\r\n *   get:\r\n *     summary: Buscar ubicaciones por proximidad\r\n *     tags: [Geolocalización]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: lat\r\n *         schema:\r\n *           type: number\r\n *         required: true\r\n *         description: Latitud del centro de búsqueda\r\n *       - in: query\r\n *         name: lng\r\n *         schema:\r\n *           type: number\r\n *         required: true\r\n *         description: Longitud del centro de búsqueda\r\n *       - in: query\r\n *         name: radius\r\n *         schema:\r\n *           type: number\r\n *         required: true\r\n *         description: Radio de búsqueda en kilómetros\r\n *       - in: query\r\n *         name: type\r\n *         schema:\r\n *           type: string\r\n *           enum: [event, user, venue, all]\r\n *         description: Tipo de ubicación a buscar\r\n *       - in: query\r\n *         name: instrument\r\n *         schema:\r\n *           type: string\r\n *         description: Instrumento requerido\r\n *       - in: query\r\n *         name: eventType\r\n *         schema:\r\n *           type: string\r\n *         description: Tipo de evento\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: number\r\n *         description: Número máximo de resultados\r\n *       - in: query\r\n *         name: offset\r\n *         schema:\r\n *           type: number\r\n *         description: Desplazamiento para paginación\r\n *     responses:\r\n *       200:\r\n *         description: Ubicaciones encontradas\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     locations:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           id:\r\n *                             type: string\r\n *                           name:\r\n *                             type: string\r\n *                           address:\r\n *                             type: string\r\n *                           coordinates:\r\n *                             type: object\r\n *                             properties:\r\n *                               lat:\r\n *                                 type: number\r\n *                               lng:\r\n *                                 type: number\r\n *                           distance:\r\n *                             type: number\r\n *                     total:\r\n *                       type: number\r\n */\r\nrouter.get('/proximity', authMiddleware, searchByProximityController);\r\n\r\n/**\r\n * @swagger\r\n * /geolocation/nearby-events:\r\n *   get:\r\n *     summary: Buscar eventos cercanos\r\n *     tags: [Geolocalización]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: lat\r\n *         schema:\r\n *           type: number\r\n *         required: true\r\n *         description: Latitud del centro de búsqueda\r\n *       - in: query\r\n *         name: lng\r\n *         schema:\r\n *           type: number\r\n *         required: true\r\n *         description: Longitud del centro de búsqueda\r\n *       - in: query\r\n *         name: radius\r\n *         schema:\r\n *           type: number\r\n *         required: true\r\n *         description: Radio de búsqueda en kilómetros\r\n *       - in: query\r\n *         name: instrument\r\n *         schema:\r\n *           type: string\r\n *         description: Instrumento requerido\r\n *       - in: query\r\n *         name: eventType\r\n *         schema:\r\n *           type: string\r\n *         description: Tipo de evento\r\n *     responses:\r\n *       200:\r\n *         description: Eventos cercanos encontrados\r\n */\r\nrouter.get('/nearby-events', authMiddleware, findNearbyEventsController);\r\n\r\n/**\r\n * @swagger\r\n * /geolocation/nearby-musicians:\r\n *   get:\r\n *     summary: Buscar músicos cercanos\r\n *     tags: [Geolocalización]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: lat\r\n *         schema:\r\n *           type: number\r\n *         required: true\r\n *         description: Latitud del centro de búsqueda\r\n *       - in: query\r\n *         name: lng\r\n *         schema:\r\n *           type: number\r\n *         required: true\r\n *         description: Longitud del centro de búsqueda\r\n *       - in: query\r\n *         name: radius\r\n *         schema:\r\n *           type: number\r\n *         required: true\r\n *         description: Radio de búsqueda en kilómetros\r\n *       - in: query\r\n *         name: instrument\r\n *         schema:\r\n *           type: string\r\n *         description: Instrumento del músico\r\n *       - in: query\r\n *         name: specialties\r\n *         schema:\r\n *           type: string\r\n *         description: Especialidades del músico\r\n *     responses:\r\n *       200:\r\n *         description: Músicos cercanos encontrados\r\n */\r\nrouter.get('/nearby-musicians', authMiddleware, findNearbyMusiciansController);\r\n\r\n/**\r\n * @swagger\r\n * /geolocation/optimize-route:\r\n *   post:\r\n *     summary: Optimizar ruta para múltiples destinos\r\n *     tags: [Geolocalización]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               startLocation:\r\n *                 type: object\r\n *                 properties:\r\n *                   lat:\r\n *                     type: number\r\n *                   lng:\r\n *                     type: number\r\n *               destinations:\r\n *                 type: array\r\n *                 items:\r\n *                   type: object\r\n *                   properties:\r\n *                     lat:\r\n *                       type: number\r\n *                     lng:\r\n *                       type: number\r\n *               mode:\r\n *                 type: string\r\n *                 enum: [driving, walking, transit]\r\n *               optimize:\r\n *                 type: boolean\r\n *     responses:\r\n *       200:\r\n *         description: Ruta optimizada\r\n */\r\nrouter.post(\r\n  '/optimize-route',\r\n  authMiddleware,\r\n  validate(optimizeRouteDTO),\r\n  optimizeRouteController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /geolocation/geocode:\r\n *   post:\r\n *     summary: Geocodificar dirección a coordenadas\r\n *     tags: [Geolocalización]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               address:\r\n *                 type: string\r\n *     responses:\r\n *       200:\r\n *         description: Coordenadas obtenidas\r\n */\r\nrouter.post(\r\n  '/geocode',\r\n  authMiddleware,\r\n  validate(geocodeAddressDTO),\r\n  geocodeAddressController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /geolocation/reverse-geocode:\r\n *   post:\r\n *     summary: Geocodificar coordenadas a dirección\r\n *     tags: [Geolocalización]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               lat:\r\n *                 type: number\r\n *               lng:\r\n *                 type: number\r\n *     responses:\r\n *       200:\r\n *         description: Dirección obtenida\r\n */\r\nrouter.post(\r\n  '/reverse-geocode',\r\n  authMiddleware,\r\n  validate(reverseGeocodeDTO),\r\n  reverseGeocodeController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /geolocation/calculate-distance:\r\n *   post:\r\n *     summary: Calcular distancia entre dos puntos\r\n *     tags: [Geolocalización]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               point1:\r\n *                 type: object\r\n *                 properties:\r\n *                   lat:\r\n *                     type: number\r\n *                   lng:\r\n *                     type: number\r\n *               point2:\r\n *                 type: object\r\n *                 properties:\r\n *                   lat:\r\n *                     type: number\r\n *                   lng:\r\n *                     type: number\r\n *     responses:\r\n *       200:\r\n *         description: Distancia calculada\r\n */\r\nrouter.post(\r\n  '/calculate-distance',\r\n  authMiddleware,\r\n  validate(calculateDistanceDTO),\r\n  calculateDistanceController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /geolocation/stats:\r\n *   get:\r\n *     summary: Obtener estadísticas de ubicaciones\r\n *     tags: [Geolocalización]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Estadísticas de ubicaciones\r\n */\r\nrouter.get('/stats', authMiddleware, getLocationStatsController);\r\n\r\n/**\r\n * @swagger\r\n * /geolocation/within-radius:\r\n *   post:\r\n *     summary: Verificar si un punto está dentro del radio\r\n *     tags: [Geolocalización]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               center:\r\n *                 type: object\r\n *                 properties:\r\n *                   lat:\r\n *                     type: number\r\n *                   lng:\r\n *                     type: number\r\n *               point:\r\n *                 type: object\r\n *                 properties:\r\n *                   lat:\r\n *                     type: number\r\n *                   lng:\r\n *                     type: number\r\n *               radius:\r\n *                 type: number\r\n *     responses:\r\n *       200:\r\n *         description: Resultado de la verificación\r\n */\r\nrouter.post(\r\n  '/within-radius',\r\n  authMiddleware,\r\n  validate(isWithinRadiusDTO),\r\n  isWithinRadiusController\r\n);\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]}