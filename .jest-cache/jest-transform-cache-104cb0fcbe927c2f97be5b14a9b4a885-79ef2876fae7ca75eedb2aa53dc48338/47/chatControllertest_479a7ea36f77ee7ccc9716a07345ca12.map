{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\chatController.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\chatController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport {\r\n  getConversations,\r\n  getMessages,\r\n  sendMessage,\r\n  markAsRead,\r\n  createConversation,\r\n  searchConversations,\r\n  deleteConversation,\r\n  archiveConversation,\r\n  getConversationById,\r\n  getChatStats,\r\n  getAvailableUsers\r\n} from '../controllers/chatController';\r\nimport {\r\n  createConversationModel,\r\n  getConversationsByUserModel,\r\n  getConversationByIdModel,\r\n  getMessagesByConversationModel,\r\n  createMessageModel,\r\n  markMessageAsReadModel,\r\n  markConversationAsReadModel,\r\n  searchConversationsModel,\r\n  deleteConversationModel,\r\n  archiveConversationModel,\r\n  getChatStatsModel,\r\n  getConversationBetweenUsersModel,\r\n} from '../models/chatModel';\r\n\r\n// Mock the chat models\r\njest.mock('../models/chatModel');\r\njest.mock('../services/loggerService', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    error: jest.fn(),\r\n    warn: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('ChatController', () => {\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockStatus: jest.Mock;\r\n  let mockJson: jest.Mock;\r\n\r\n  beforeEach(() => {\r\n    mockStatus = jest.fn().mockReturnThis();\r\n    mockJson = jest.fn().mockReturnThis();\r\n    mockResponse = {\r\n      status: mockStatus,\r\n      json: mockJson\r\n    };\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('getConversations', () => {\r\n    it('should return user conversations successfully', async () => {\r\n      // Arrange\r\n      const userEmail = 'user@example.com';\r\n      const mockConversations = [\r\n        {\r\n          id: 'conv1',\r\n          participants: ['user@example.com', 'other@example.com'],\r\n          lastMessage: 'Hello there',\r\n          lastMessageTime: new Date().toISOString(),\r\n          unreadCount: 2,\r\n          isArchived: false,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        }\r\n      ];\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        }\r\n      };\r\n\r\n      (getConversationsByUserModel as jest.Mock).mockResolvedValue(mockConversations);\r\n\r\n      // Act\r\n      await getConversations(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(getConversationsByUserModel).toHaveBeenCalledWith(userEmail);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockConversations\r\n      });\r\n    });\r\n\r\n    it('should return error when user is not authenticated', async () => {\r\n      // Arrange\r\n      mockRequest = {\r\n        user: undefined\r\n      };\r\n\r\n      // Act\r\n      await getConversations(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(401);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        error: 'Usuario no autenticado'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getMessages', () => {\r\n    it('should return messages successfully', async () => {\r\n      // Arrange\r\n      const conversationId = 'conv123';\r\n      const userEmail = 'user@example.com';\r\n      const mockMessages = [\r\n        {\r\n          id: 'msg1',\r\n          conversationId,\r\n          sender: 'user@example.com',\r\n          content: 'Hello',\r\n          timestamp: new Date().toISOString(),\r\n          isRead: false\r\n        }\r\n      ];\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { conversationId }\r\n      };\r\n\r\n      (getConversationByIdModel as jest.Mock).mockResolvedValue({\r\n        id: conversationId,\r\n        participants: [userEmail, 'other@example.com']\r\n      });\r\n      (getMessagesByConversationModel as jest.Mock).mockResolvedValue(mockMessages);\r\n      (markConversationAsReadModel as jest.Mock).mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await getMessages(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(getConversationByIdModel).toHaveBeenCalledWith(conversationId);\r\n      expect(getMessagesByConversationModel).toHaveBeenCalledWith(conversationId);\r\n      expect(markConversationAsReadModel).toHaveBeenCalledWith(conversationId, userEmail);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockMessages\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('sendMessage', () => {\r\n    it('should send message successfully', async () => {\r\n      // Arrange\r\n      const conversationId = 'conv123';\r\n      const userEmail = 'user@example.com';\r\n      const messageContent = 'Hello there';\r\n      const mockMessage = {\r\n        id: 'msg123',\r\n        conversationId,\r\n        sender: userEmail,\r\n        content: messageContent,\r\n        timestamp: new Date().toISOString(),\r\n        isRead: false\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { conversationId },\r\n        body: { content: messageContent }\r\n      };\r\n\r\n      (getConversationByIdModel as jest.Mock).mockResolvedValue({\r\n        id: conversationId,\r\n        participants: [userEmail, 'other@example.com']\r\n      });\r\n      (createMessageModel as jest.Mock).mockResolvedValue(mockMessage);\r\n\r\n      // Act\r\n      await sendMessage(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(getConversationByIdModel).toHaveBeenCalledWith(conversationId);\r\n      expect(createMessageModel).toHaveBeenCalledWith({\r\n        conversationId,\r\n        senderId: userEmail,\r\n        senderName: 'Test User',\r\n        content: messageContent,\r\n        status: 'sent',\r\n        type: 'text'\r\n      });\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockMessage\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('markAsRead', () => {\r\n    it('should mark message as read successfully', async () => {\r\n      // Arrange\r\n      const messageId = 'msg123';\r\n      const userEmail = 'user@example.com';\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { messageId }\r\n      };\r\n\r\n      (markMessageAsReadModel as jest.Mock).mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await markAsRead(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(markMessageAsReadModel).toHaveBeenCalledWith(messageId);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: null\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('createConversation', () => {\r\n    it('should create conversation successfully', async () => {\r\n      // Arrange\r\n      const userEmail = 'user@example.com';\r\n      const participantEmail = 'other@example.com';\r\n      const mockConversation = {\r\n        id: 'conv123',\r\n        participants: [userEmail, participantEmail],\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: { participants: [participantEmail] }\r\n      };\r\n\r\n      (getConversationBetweenUsersModel as jest.Mock).mockResolvedValue(null);\r\n      (createConversationModel as jest.Mock).mockResolvedValue(mockConversation);\r\n\r\n      // Act\r\n      await createConversation(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(getConversationBetweenUsersModel).toHaveBeenCalledWith(userEmail, participantEmail);\r\n      expect(createConversationModel).toHaveBeenCalledWith([userEmail, participantEmail]);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockConversation\r\n      });\r\n    });\r\n\r\n    it('should return error when participant email is missing', async () => {\r\n      // Arrange\r\n      const userEmail = 'user@example.com';\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: { participants: [] }\r\n      };\r\n\r\n      // Act\r\n      await createConversation(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        error: 'Se requiere al menos un participante'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('searchConversations', () => {\r\n    it('should search conversations successfully', async () => {\r\n      // Arrange\r\n      const userEmail = 'user@example.com';\r\n      const searchTerm = 'test';\r\n      const mockConversations = [\r\n        {\r\n          id: 'conv1',\r\n          participants: [userEmail, 'other@example.com'],\r\n          lastMessage: 'test message',\r\n          lastMessageTime: new Date().toISOString(),\r\n          unreadCount: 0,\r\n          isArchived: false\r\n        }\r\n      ];\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        query: { search: searchTerm }\r\n      };\r\n\r\n      (searchConversationsModel as jest.Mock).mockResolvedValue(mockConversations);\r\n\r\n      // Act\r\n      await searchConversations(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(searchConversationsModel).toHaveBeenCalledWith(userEmail, {\r\n        dateFrom: undefined,\r\n        dateTo: undefined,\r\n        search: searchTerm,\r\n        unreadOnly: false\r\n      });\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockConversations\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('deleteConversation', () => {\r\n    it('should delete conversation successfully', async () => {\r\n      // Arrange\r\n      const conversationId = 'conv123';\r\n      const userEmail = 'user@example.com';\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { conversationId }\r\n      };\r\n\r\n      (deleteConversationModel as jest.Mock).mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await deleteConversation(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(deleteConversationModel).toHaveBeenCalledWith(conversationId, userEmail);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: null\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('archiveConversation', () => {\r\n    it('should archive conversation successfully', async () => {\r\n      // Arrange\r\n      const conversationId = 'conv123';\r\n      const userEmail = 'user@example.com';\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { conversationId }\r\n      };\r\n\r\n      (archiveConversationModel as jest.Mock).mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await archiveConversation(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(archiveConversationModel).toHaveBeenCalledWith(conversationId, userEmail);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: null\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getConversationById', () => {\r\n    it('should return conversation by id successfully', async () => {\r\n      // Arrange\r\n      const conversationId = 'conv123';\r\n      const userEmail = 'user@example.com';\r\n      const mockConversation = {\r\n        id: conversationId,\r\n        participants: [userEmail, 'other@example.com'],\r\n        lastMessage: 'Hello there',\r\n        lastMessageTime: new Date().toISOString(),\r\n        unreadCount: 2,\r\n        isArchived: false,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { conversationId }\r\n      };\r\n\r\n      (getConversationByIdModel as jest.Mock).mockResolvedValue(mockConversation);\r\n\r\n      // Act\r\n      await getConversationById(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(getConversationByIdModel).toHaveBeenCalledWith(conversationId);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockConversation\r\n      });\r\n    });\r\n\r\n    it('should return 404 when conversation not found', async () => {\r\n      // Arrange\r\n      const conversationId = 'nonexistent';\r\n      const userEmail = 'user@example.com';\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { conversationId }\r\n      };\r\n\r\n      (getConversationByIdModel as jest.Mock).mockResolvedValue(null);\r\n\r\n      // Act\r\n      await getConversationById(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(404);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        error: 'Conversación no encontrada'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getChatStats', () => {\r\n    it('should return chat stats successfully', async () => {\r\n      // Arrange\r\n      const userEmail = 'user@example.com';\r\n      const mockStats = {\r\n        totalConversations: 10,\r\n        unreadMessages: 5,\r\n        archivedConversations: 2,\r\n        totalMessages: 150\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        }\r\n      };\r\n\r\n      (getChatStatsModel as jest.Mock).mockResolvedValue(mockStats);\r\n\r\n      // Act\r\n      await getChatStats(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(getChatStatsModel).toHaveBeenCalledWith(userEmail);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockStats\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getAvailableUsers', () => {\r\n    it('should return available users successfully', async () => {\r\n      // Arrange\r\n      const userEmail = 'user@example.com';\r\n      const mockUsers = [\r\n        {\r\n          email: 'other@example.com',\r\n          name: 'Other User',\r\n          role: 'musician',\r\n          isOnline: true\r\n        }\r\n      ];\r\n\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          userEmail: userEmail,\r\n          email: userEmail,\r\n          role: 'user',\r\n          name: 'Test User'\r\n        }\r\n      };\r\n\r\n      // Mock the function that gets available users (this would need to be implemented)\r\n      // For now, we'll just test the basic structure\r\n      mockResponse.json = jest.fn();\r\n\r\n      // Act\r\n      await getAvailableUsers(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockResponse.json).toHaveBeenCalled();\r\n    });\r\n  });\r\n}); "],"version":3}