const axios = require('axios');

const BASE_URL = 'http://192.168.54.11:3001';

async function testAuthEndpoints() {
  console.log('üîç Probando endpoints de autenticaci√≥n...\n');

  try {
    // 1. Probar login con credenciales de demo
    console.log('1Ô∏è‚É£ Probando login...');
    try {
      const loginResponse = await axios.post(`${BASE_URL}/admin-auth/login`, {
        email: 'admin@mussikon.com',
        password: 'admin123'
      });
      
      console.log('‚úÖ Login exitoso');
      console.log(`   Token: ${loginResponse.data.token ? '‚úÖ Presente' : '‚ùå Ausente'}`);
      console.log(`   Usuario: ${loginResponse.data.user ? loginResponse.data.user.userEmail : '‚ùå Ausente'}`);
      console.log(`   Rol: ${loginResponse.data.user ? loginResponse.data.user.roll : '‚ùå Ausente'}`);
      
      const token = loginResponse.data.token;
      
      // 2. Probar verificaci√≥n de token
      console.log('\n2Ô∏è‚É£ Probando verificaci√≥n de token...');
      try {
        const verifyResponse = await axios.get(`${BASE_URL}/admin-auth/verify`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        console.log('‚úÖ Verificaci√≥n de token exitosa');
        console.log(`   Usuario verificado: ${verifyResponse.data.user ? verifyResponse.data.user.userEmail : '‚ùå Ausente'}`);
      } catch (error) {
        console.log('‚ùå Error en verificaci√≥n de token:', error.response?.status, error.response?.data?.message || error.message);
      }
      
      // 3. Probar endpoint de im√°genes con autenticaci√≥n
      console.log('\n3Ô∏è‚É£ Probando endpoints de im√°genes con autenticaci√≥n...');
      
      const authHeaders = { Authorization: `Bearer ${token}` };
      
      // Probar /imgs/stats
      try {
        const statsResponse = await axios.get(`${BASE_URL}/imgs/stats`, { headers: authHeaders });
        console.log('‚úÖ /imgs/stats: OK');
        console.log(`   Total im√°genes: ${statsResponse.data.totalImages || 0}`);
      } catch (error) {
        console.log('‚ùå /imgs/stats:', error.response?.status, error.response?.data?.message || error.message);
      }
      
      // Probar /imgs/
      try {
        const imagesResponse = await axios.get(`${BASE_URL}/imgs/`, { headers: authHeaders });
        console.log('‚úÖ /imgs/: OK');
        console.log(`   Im√°genes encontradas: ${imagesResponse.data.images ? imagesResponse.data.images.length : 0}`);
      } catch (error) {
        console.log('‚ùå /imgs/:', error.response?.status, error.response?.data?.message || error.message);
      }
      
      // Probar /imgs/statistics
      try {
        const statisticsResponse = await axios.get(`${BASE_URL}/imgs/statistics`, { headers: authHeaders });
        console.log('‚úÖ /imgs/statistics: OK');
        console.log(`   Estad√≠sticas obtenidas: ${Object.keys(statisticsResponse.data).length} campos`);
      } catch (error) {
        console.log('‚ùå /imgs/statistics:', error.response?.status, error.response?.data?.message || error.message);
      }
      
      // Probar /imgs/diagnose
      try {
        const diagnoseResponse = await axios.get(`${BASE_URL}/imgs/diagnose`, { headers: authHeaders });
        console.log('‚úÖ /imgs/diagnose: OK');
        console.log(`   Diagn√≥stico completado: ${diagnoseResponse.data.message || 'OK'}`);
      } catch (error) {
        console.log('‚ùå /imgs/diagnose:', error.response?.status, error.response?.data?.message || error.message);
      }
      
    } catch (error) {
      console.log('‚ùå Error en login:', error.response?.status, error.response?.data?.message || error.message);
      
      // Si el login falla, probar rutas p√∫blicas de desarrollo
      console.log('\nüîÑ Probando rutas p√∫blicas de desarrollo...');
      
      try {
        const statsResponse = await axios.get(`${BASE_URL}/imgs/stats/public`);
        console.log('‚úÖ /imgs/stats/public: OK');
        console.log(`   Total im√°genes: ${statsResponse.data.totalImages || 0}`);
      } catch (error) {
        console.log('‚ùå /imgs/stats/public:', error.response?.status, error.response?.data?.message || error.message);
      }
      
      try {
        const imagesResponse = await axios.get(`${BASE_URL}/imgs/all/public`);
        console.log('‚úÖ /imgs/all/public: OK');
        console.log(`   Im√°genes encontradas: ${imagesResponse.data.images ? imagesResponse.data.images.length : 0}`);
      } catch (error) {
        console.log('‚ùå /imgs/all/public:', error.response?.status, error.response?.data?.message || error.message);
      }
      
      try {
        const statisticsResponse = await axios.get(`${BASE_URL}/imgs/statistics/public`);
        console.log('‚úÖ /imgs/statistics/public: OK');
        console.log(`   Estad√≠sticas obtenidas: ${Object.keys(statisticsResponse.data).length} campos`);
      } catch (error) {
        console.log('‚ùå /imgs/statistics/public:', error.response?.status, error.response?.data?.message || error.message);
      }
      
      try {
        const verifyResponse = await axios.get(`${BASE_URL}/imgs/verify/public`);
        console.log('‚úÖ /imgs/verify/public: OK');
        console.log(`   Verificaci√≥n completada: ${verifyResponse.data.message || 'OK'}`);
      } catch (error) {
        console.log('‚ùå /imgs/verify/public:', error.response?.status, error.response?.data?.message || error.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }
  
  console.log('\nüéØ Recomendaciones:');
  console.log('1. Si el login falla, ejecuta: npm run create-admin-users');
  console.log('2. Si los endpoints fallan, verifica que el servidor est√© corriendo');
  console.log('3. Si hay errores 401, verifica que el token se est√© enviando correctamente');
  console.log('4. Si hay errores 404, verifica que las rutas est√©n registradas correctamente');
}

testAuthEndpoints(); 