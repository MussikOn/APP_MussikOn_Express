{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\integration\\ratingIntegration.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\integration\\ratingIntegration.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { RatingController } from '../../controllers/ratingController';\r\nimport { ratingService } from '../../services/ratingService';\r\n\r\n// Mock más realista del servicio\r\njest.mock('../../services/ratingService');\r\njest.mock('../../services/loggerService', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    error: jest.fn(),\r\n    warn: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('RatingController Integration Tests', () => {\r\n  let ratingController: RatingController;\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockStatus: jest.Mock;\r\n  let mockJson: jest.Mock;\r\n  let mockRatingService: jest.Mocked<typeof ratingService>;\r\n\r\n  beforeEach(() => {\r\n    mockStatus = jest.fn().mockReturnThis();\r\n    mockJson = jest.fn().mockReturnThis();\r\n    mockResponse = {\r\n      status: mockStatus,\r\n      json: mockJson\r\n    };\r\n\r\n    ratingController = new RatingController();\r\n    mockRatingService = ratingService as jest.Mocked<typeof ratingService>;\r\n\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  // 🆕 TESTS DE INTEGRACIÓN: Escenarios complejos\r\n  describe('Complex Integration Scenarios', () => {\r\n    \r\n    // Test de concurrencia simulada\r\n    it('should handle concurrent rating creation requests', async () => {\r\n      // Arrange\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: 'Excellent performance!',\r\n        category: 'musician' as const\r\n      };\r\n\r\n      const mockRating = {\r\n        id: 'rating123',\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        rating: 5,\r\n        review: 'Excellent performance!',\r\n        category: 'musician' as const,\r\n        isVerified: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        helpfulCount: 0,\r\n        reportedCount: 0,\r\n        isActive: true\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: ratingData\r\n      };\r\n\r\n      // Simular múltiples llamadas concurrentes\r\n      const promises = [];\r\n      for (let i = 0; i < 5; i++) {\r\n        mockRatingService.createRating.mockResolvedValueOnce({\r\n          ...mockRating,\r\n          id: `rating${i}`\r\n        });\r\n        promises.push(\r\n          ratingController.createRating(mockRequest as Request, mockResponse as Response)\r\n        );\r\n      }\r\n\r\n      // Act\r\n      await Promise.all(promises);\r\n\r\n      // Assert\r\n      expect(mockRatingService.createRating).toHaveBeenCalledTimes(5);\r\n      expect(mockStatus).toHaveBeenCalledWith(201);\r\n    });\r\n\r\n    // Test de rate limiting simulado\r\n    it('should handle rate limiting scenarios', async () => {\r\n      // Arrange\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: 'Excellent performance!',\r\n        category: 'musician' as const\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: ratingData\r\n      };\r\n\r\n      // Simular error de rate limiting\r\n      const rateLimitError = new Error('Rate limit exceeded');\r\n      rateLimitError.name = 'RateLimitError';\r\n      mockRatingService.createRating.mockRejectedValue(rateLimitError);\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(500);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Rate limit exceeded'\r\n      });\r\n    });\r\n\r\n    // Test de validación de datos maliciosos\r\n    it('should handle malicious input data', async () => {\r\n      // Arrange\r\n      const maliciousData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: '<script>alert(\"XSS\")</script>',\r\n        category: 'musician' as const\r\n      };\r\n\r\n      const mockRating = {\r\n        id: 'rating123',\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        rating: 5,\r\n        review: '<script>alert(\"XSS\")</script>',\r\n        category: 'musician' as const,\r\n        isVerified: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        helpfulCount: 0,\r\n        reportedCount: 0,\r\n        isActive: true\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: maliciousData\r\n      };\r\n\r\n      mockRatingService.createRating.mockResolvedValue(mockRating);\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.createRating).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          review: '<script>alert(\"XSS\")</script>'\r\n        })\r\n      );\r\n      expect(mockStatus).toHaveBeenCalledWith(201);\r\n    });\r\n\r\n    // Test de validación de IDs maliciosos\r\n    it('should handle malicious ID formats', async () => {\r\n      // Arrange\r\n      const maliciousData = {\r\n        eventId: 'event123; DROP TABLE users; --',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: 'Test review',\r\n        category: 'musician' as const\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: maliciousData\r\n      };\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      // El controlador debería validar y rechazar IDs maliciosos\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n    });\r\n\r\n    // Test de validación de emails maliciosos\r\n    it('should handle malicious email formats', async () => {\r\n      // Arrange\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: 'Test review',\r\n        category: 'musician' as const\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com<script>alert(\"XSS\")</script>',\r\n          email: 'user@example.com<script>alert(\"XSS\")</script>',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: ratingData\r\n      };\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      // El controlador debería validar y rechazar emails maliciosos\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n    });\r\n\r\n    // Test de validación de caracteres especiales en review\r\n    it('should handle special characters in review', async () => {\r\n      // Arrange\r\n      const specialCharsReview = '¡Hola! ¿Cómo estás? 🎵🎶🎸🎹🎺🎻🎷🥁';\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: specialCharsReview,\r\n        category: 'musician' as const\r\n      };\r\n\r\n      const mockRating = {\r\n        id: 'rating123',\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        rating: 5,\r\n        review: specialCharsReview,\r\n        category: 'musician' as const,\r\n        isVerified: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        helpfulCount: 0,\r\n        reportedCount: 0,\r\n        isActive: true\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: ratingData\r\n      };\r\n\r\n      mockRatingService.createRating.mockResolvedValue(mockRating);\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.createRating).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          review: specialCharsReview\r\n        })\r\n      );\r\n      expect(mockStatus).toHaveBeenCalledWith(201);\r\n    });\r\n\r\n    // Test de validación de review muy larga\r\n    it('should handle very long review text', async () => {\r\n      // Arrange\r\n      const longReview = 'A'.repeat(10000); // Review de 10,000 caracteres\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: longReview,\r\n        category: 'musician' as const\r\n      };\r\n\r\n      const mockRating = {\r\n        id: 'rating123',\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        rating: 5,\r\n        review: longReview,\r\n        category: 'musician' as const,\r\n        isVerified: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        helpfulCount: 0,\r\n        reportedCount: 0,\r\n        isActive: true\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: ratingData\r\n      };\r\n\r\n      mockRatingService.createRating.mockResolvedValue(mockRating);\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.createRating).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          review: longReview\r\n        })\r\n      );\r\n      expect(mockStatus).toHaveBeenCalledWith(201);\r\n    });\r\n\r\n    // Test de validación de review con caracteres de control\r\n    it('should handle control characters in review', async () => {\r\n      // Arrange\r\n      const controlCharsReview = 'Review with \\x00\\x01\\x02 control chars \\x7F\\x80\\x81';\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: controlCharsReview,\r\n        category: 'musician' as const\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: ratingData\r\n      };\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      // El controlador debería validar y rechazar caracteres de control\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n    });\r\n\r\n    // Test de validación de rating con valores extremos\r\n    it('should handle extreme rating values', async () => {\r\n      // Arrange\r\n      const extremeValues = [\r\n        Number.MAX_SAFE_INTEGER,\r\n        Number.MIN_SAFE_INTEGER,\r\n        Number.MAX_VALUE,\r\n        Number.MIN_VALUE,\r\n        Number.POSITIVE_INFINITY,\r\n        Number.NEGATIVE_INFINITY,\r\n        Number.EPSILON\r\n      ];\r\n\r\n      for (const extremeValue of extremeValues) {\r\n        const ratingData = {\r\n          eventId: 'event123',\r\n          musicianId: 'musician123',\r\n          rating: extremeValue,\r\n          review: 'Test review',\r\n          category: 'musician' as const\r\n        };\r\n\r\n        mockRequest = {\r\n          user: {\r\n            id: 'user123',\r\n            userId: 'user123',\r\n            userEmail: 'user@example.com',\r\n            email: 'user@example.com',\r\n            role: 'user',\r\n            name: 'Test User'\r\n          },\r\n          body: ratingData\r\n        };\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockStatus).toHaveBeenCalledWith(400);\r\n        expect(mockJson).toHaveBeenCalledWith({\r\n          success: false,\r\n          message: 'El rating debe estar entre 1 y 5 estrellas'\r\n        });\r\n\r\n        // Reset mocks for next iteration\r\n        jest.clearAllMocks();\r\n      }\r\n    });\r\n\r\n    // Test de validación de category con valores extremos\r\n    it('should handle extreme category values', async () => {\r\n      // Arrange\r\n      const extremeCategories = [\r\n        'A'.repeat(1000), // Category muy larga\r\n        '', // Category vacía\r\n        '   ', // Solo espacios\r\n        '\\t\\n\\r', // Caracteres de control\r\n        'musician\\x00', // Con caracteres de control\r\n        'musician<script>alert(\"XSS\")</script>', // Con script\r\n        'musician; DROP TABLE users; --' // SQL injection\r\n      ];\r\n\r\n      for (const category of extremeCategories) {\r\n        const ratingData = {\r\n          eventId: 'event123',\r\n          musicianId: 'musician123',\r\n          rating: 5,\r\n          review: 'Test review',\r\n          category: category as any\r\n        };\r\n\r\n        mockRequest = {\r\n          user: {\r\n            id: 'user123',\r\n            userId: 'user123',\r\n            userEmail: 'user@example.com',\r\n            email: 'user@example.com',\r\n            role: 'user',\r\n            name: 'Test User'\r\n          },\r\n          body: ratingData\r\n        };\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockStatus).toHaveBeenCalledWith(400);\r\n        expect(mockJson).toHaveBeenCalledWith({\r\n          success: false,\r\n          message: 'Categoría debe ser \"musician\" o \"event_creator\"'\r\n        });\r\n\r\n        // Reset mocks for next iteration\r\n        jest.clearAllMocks();\r\n      }\r\n    });\r\n  });\r\n\r\n  // 🆕 TESTS DE INTEGRACIÓN: Escenarios de error complejos\r\n  describe('Complex Error Scenarios', () => {\r\n    \r\n    // Test de timeout del servicio\r\n    it('should handle service timeout', async () => {\r\n      // Arrange\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: 'Test review',\r\n        category: 'musician' as const\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: ratingData\r\n      };\r\n\r\n      // Simular timeout\r\n      const timeoutError = new Error('Request timeout');\r\n      timeoutError.name = 'TimeoutError';\r\n      mockRatingService.createRating.mockRejectedValue(timeoutError);\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(500);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Request timeout'\r\n      });\r\n    });\r\n\r\n    // Test de error de red\r\n    it('should handle network error', async () => {\r\n      // Arrange\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: 'Test review',\r\n        category: 'musician' as const\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: ratingData\r\n      };\r\n\r\n      // Simular error de red\r\n      const networkError = new Error('Network error');\r\n      networkError.name = 'NetworkError';\r\n      mockRatingService.createRating.mockRejectedValue(networkError);\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(500);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Network error'\r\n      });\r\n    });\r\n\r\n    // Test de error de base de datos\r\n    it('should handle database error', async () => {\r\n      // Arrange\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        rating: 5,\r\n        review: 'Test review',\r\n        category: 'musician' as const\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        body: ratingData\r\n      };\r\n\r\n      // Simular error de base de datos\r\n      const dbError = new Error('Database connection failed');\r\n      dbError.name = 'DatabaseError';\r\n      mockRatingService.createRating.mockRejectedValue(dbError);\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(500);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Database connection failed'\r\n      });\r\n    });\r\n  });\r\n}); "],"version":3}