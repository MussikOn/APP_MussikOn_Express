{"version":3,"names":["cov_2ihmcu3rtn","actualCoverage","firebase_1","s","require","loggerService_1","cacheService_1","FirestoreOptimizationService","constructor","config","b","enableCache","cacheTTL","batchSize","maxConcurrentQueries","enableIndexing","f","queryCache","Map","activeQueries","Set","getInstance","instance","optimizedQuery","collection_1","collection","filters","options","startTime","Date","now","cacheKey","generateCacheKey","cachedData","getFromCache","data","metrics","queryTime","resultCount","length","cacheHit","indexUsed","optimizationApplied","query","db","applyOptimizedFilters","orderBy","field","direction","select","limit","offset","snapshot","get","docs","map","doc","Object","assign","id","setCache","checkIndexUsage","logger","debug","metadata","service","error","batchOperations","operations","results","errors","batches","i","batch","slice","operation","docRef","document","type","set","update","delete","push","batchResults","Promise","allSettled","commit","forEach","result","index","status","value","batchIndex","reason","info","totalOperations","successfulBatches","failedBatches","success","operationCount","createCompositeIndex","fields_1","fields","queryScopes","indexName","join","analyzeQueryPerformance","filters_1","recommendations","suggestedIndexes","estimatedCost","filterFields","keys","orderFields","Array","isArray","o","estimateQueryCost","recommendedIndexes","optimizationSuggestions","entries","where","gte","undefined","lte","gt","lt","key","cacheService","ttl","prefix","filterString","JSON","stringify","optionsString","filterCount","hasOrdering","cost","Math","round","clearCache","clear","getStats","cacheSize","size","exports","firestoreOptimizationService"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\firestoreOptimizationService.ts"],"sourcesContent":["import { db } from '../utils/firebase';\r\nimport { logger } from './loggerService';\r\nimport { cacheService } from './cacheService';\r\n\r\nexport interface QueryOptimizationConfig {\r\n  enableCache: boolean;\r\n  cacheTTL: number;\r\n  batchSize: number;\r\n  maxConcurrentQueries: number;\r\n  enableIndexing: boolean;\r\n}\r\n\r\nexport interface QueryMetrics {\r\n  queryTime: number;\r\n  resultCount: number;\r\n  cacheHit: boolean;\r\n  indexUsed: boolean;\r\n  optimizationApplied: boolean;\r\n}\r\n\r\nexport interface BatchOperation {\r\n  type: 'create' | 'update' | 'delete';\r\n  collection: string;\r\n  document: string;\r\n  data?: any;\r\n}\r\n\r\nexport class FirestoreOptimizationService {\r\n  private static instance: FirestoreOptimizationService;\r\n  private config: QueryOptimizationConfig;\r\n  private queryCache: Map<string, { data: any; timestamp: number; ttl: number }>;\r\n  private activeQueries: Set<string>;\r\n\r\n  private constructor(config: QueryOptimizationConfig = {\r\n    enableCache: true,\r\n    cacheTTL: 300, // 5 minutes\r\n    batchSize: 500,\r\n    maxConcurrentQueries: 10,\r\n    enableIndexing: true\r\n  }) {\r\n    this.config = config;\r\n    this.queryCache = new Map();\r\n    this.activeQueries = new Set();\r\n  }\r\n\r\n  public static getInstance(config?: QueryOptimizationConfig): FirestoreOptimizationService {\r\n    if (!FirestoreOptimizationService.instance) {\r\n      FirestoreOptimizationService.instance = new FirestoreOptimizationService(config);\r\n    }\r\n    return FirestoreOptimizationService.instance;\r\n  }\r\n\r\n  public async optimizedQuery(\r\n    collection: string,\r\n    filters: Record<string, any> = {},\r\n    options: {\r\n      limit?: number;\r\n      offset?: number;\r\n      orderBy?: { field: string; direction: 'asc' | 'desc' };\r\n      select?: string[];\r\n      cacheKey?: string;\r\n    } = {}\r\n  ): Promise<{ data: any[]; metrics: QueryMetrics }> {\r\n    const startTime = Date.now();\r\n    const cacheKey = options.cacheKey || this.generateCacheKey(collection, filters, options);\r\n    \r\n    try {\r\n      // Check cache first\r\n      if (this.config.enableCache) {\r\n        const cachedData = await this.getFromCache(cacheKey);\r\n        if (cachedData) {\r\n          return {\r\n            data: cachedData,\r\n            metrics: {\r\n              queryTime: Date.now() - startTime,\r\n              resultCount: cachedData.length,\r\n              cacheHit: true,\r\n              indexUsed: false,\r\n              optimizationApplied: true\r\n            }\r\n          };\r\n        }\r\n      }\r\n\r\n      // Build optimized query\r\n      let query: any = db.collection(collection);\r\n\r\n      // Apply filters with optimization\r\n      query = this.applyOptimizedFilters(query, filters);\r\n\r\n      // Apply ordering\r\n      if (options.orderBy) {\r\n        query = query.orderBy(options.orderBy.field, options.orderBy.direction);\r\n      }\r\n\r\n      // Apply field selection\r\n      if (options.select && options.select.length > 0) {\r\n        query = query.select(...options.select);\r\n      }\r\n\r\n      // Apply pagination\r\n      if (options.limit) {\r\n        query = query.limit(options.limit);\r\n      }\r\n\r\n      if (options.offset) {\r\n        query = query.offset(options.offset);\r\n      }\r\n\r\n      // Execute query\r\n      const snapshot = await query.get();\r\n      const data = snapshot.docs.map((doc: any) => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n\r\n      // Cache results\r\n      if (this.config.enableCache) {\r\n        await this.setCache(cacheKey, data);\r\n      }\r\n\r\n      const metrics: QueryMetrics = {\r\n        queryTime: Date.now() - startTime,\r\n        resultCount: data.length,\r\n        cacheHit: false,\r\n        indexUsed: this.checkIndexUsage(filters, options.orderBy),\r\n        optimizationApplied: true\r\n      };\r\n\r\n      logger.debug('Optimized query executed successfully', {\r\n        metadata: {\r\n          service: 'FirestoreOptimizationService',\r\n          collection,\r\n          metrics,\r\n          cacheKey\r\n        }\r\n      });\r\n\r\n      return { data, metrics };\r\n\r\n    } catch (error) {\r\n      logger.error('Error executing optimized query', error as Error, {\r\n        metadata: {\r\n          service: 'FirestoreOptimizationService',\r\n          collection,\r\n          filters,\r\n          options\r\n        }\r\n      });\r\n\r\n      return {\r\n        data: [],\r\n        metrics: {\r\n          queryTime: Date.now() - startTime,\r\n          resultCount: 0,\r\n          cacheHit: false,\r\n          indexUsed: false,\r\n          optimizationApplied: false\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  public async batchOperations(operations: BatchOperation[]): Promise<{\r\n    success: boolean;\r\n    results: any[];\r\n    errors: any[];\r\n  }> {\r\n    const results: any[] = [];\r\n    const errors: any[] = [];\r\n    const batches: any[] = [];\r\n\r\n    try {\r\n      // Split operations into batches\r\n      for (let i = 0; i < operations.length; i += this.config.batchSize) {\r\n        const batch = db.batch();\r\n        const batchOperations = operations.slice(i, i + this.config.batchSize);\r\n\r\n        for (const operation of batchOperations) {\r\n          const docRef = db.collection(operation.collection).doc(operation.document);\r\n\r\n          switch (operation.type) {\r\n            case 'create':\r\n              batch.set(docRef, operation.data);\r\n              break;\r\n            case 'update':\r\n              batch.update(docRef, operation.data);\r\n              break;\r\n            case 'delete':\r\n              batch.delete(docRef);\r\n              break;\r\n          }\r\n        }\r\n\r\n        batches.push(batch);\r\n      }\r\n\r\n      // Execute batches concurrently (with limit)\r\n      const batchResults = await Promise.allSettled(\r\n        batches.map(batch => batch.commit())\r\n      );\r\n\r\n      // Process results\r\n      batchResults.forEach((result, index) => {\r\n        if (result.status === 'fulfilled') {\r\n          results.push(...result.value);\r\n        } else {\r\n          errors.push({\r\n            batchIndex: index,\r\n            error: result.reason\r\n          });\r\n        }\r\n      });\r\n\r\n      logger.info('Batch operations completed', {\r\n        metadata: {\r\n          service: 'FirestoreOptimizationService',\r\n          totalOperations: operations.length,\r\n          successfulBatches: results.length,\r\n          failedBatches: errors.length\r\n        }\r\n      });\r\n\r\n      return {\r\n        success: errors.length === 0,\r\n        results,\r\n        errors\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('Error executing batch operations', error as Error, {\r\n        metadata: {\r\n          service: 'FirestoreOptimizationService',\r\n          operationCount: operations.length\r\n        }\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        results: [],\r\n        errors: [error]\r\n      };\r\n    }\r\n  }\r\n\r\n  public async createCompositeIndex(\r\n    collection: string,\r\n    fields: string[],\r\n    queryScopes: string[] = ['COLLECTION']\r\n  ): Promise<{ success: boolean; indexName?: string }> {\r\n    try {\r\n      // This would typically interact with Firestore Admin SDK\r\n      // to create composite indexes programmatically\r\n      logger.info('Composite index creation requested', {\r\n        metadata: {\r\n          service: 'FirestoreOptimizationService',\r\n          collection,\r\n          fields,\r\n          queryScopes\r\n        }\r\n      });\r\n\r\n      // For now, we'll just log the request\r\n      // In a real implementation, you would use the Admin SDK\r\n      return {\r\n        success: true,\r\n        indexName: `${collection}_${fields.join('_')}`\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('Error creating composite index', error as Error, {\r\n        metadata: {\r\n          service: 'FirestoreOptimizationService',\r\n          collection,\r\n          fields\r\n        }\r\n      });\r\n\r\n      return { success: false };\r\n    }\r\n  }\r\n\r\n  public async analyzeQueryPerformance(\r\n    collection: string,\r\n    filters: Record<string, any>,\r\n    options: any = {}\r\n  ): Promise<{\r\n    recommendedIndexes: string[];\r\n    estimatedCost: number;\r\n    optimizationSuggestions: string[];\r\n  }> {\r\n    try {\r\n      const recommendations: string[] = [];\r\n      const suggestedIndexes: string[] = [];\r\n      let estimatedCost = 0;\r\n\r\n      // Analyze filters for index requirements\r\n      const filterFields = Object.keys(filters);\r\n      if (filterFields.length > 1) {\r\n        suggestedIndexes.push(`${collection}_${filterFields.join('_')}`);\r\n        recommendations.push('Consider creating a composite index for multiple filters');\r\n      }\r\n\r\n      // Analyze ordering\r\n      if (options.orderBy) {\r\n        const orderFields = Array.isArray(options.orderBy) \r\n          ? options.orderBy.map((o: any) => o.field)\r\n          : [options.orderBy.field];\r\n        \r\n        if (filterFields.length > 0) {\r\n          suggestedIndexes.push(`${collection}_${filterFields.join('_')}_${orderFields.join('_')}`);\r\n          recommendations.push('Consider creating an index that includes both filters and ordering');\r\n        }\r\n      }\r\n\r\n      // Estimate cost based on collection size and query complexity\r\n      estimatedCost = this.estimateQueryCost(filters, options);\r\n\r\n      return {\r\n        recommendedIndexes: suggestedIndexes,\r\n        estimatedCost,\r\n        optimizationSuggestions: recommendations\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('Error analyzing query performance', error as Error, {\r\n        metadata: {\r\n          service: 'FirestoreOptimizationService',\r\n          collection,\r\n          filters\r\n        }\r\n      });\r\n\r\n      return {\r\n        recommendedIndexes: [],\r\n        estimatedCost: 0,\r\n        optimizationSuggestions: ['Unable to analyze query performance']\r\n      };\r\n    }\r\n  }\r\n\r\n  private applyOptimizedFilters(query: any, filters: Record<string, any>): any {\r\n    let optimizedQuery = query;\r\n\r\n    for (const [field, value] of Object.entries(filters)) {\r\n      if (Array.isArray(value)) {\r\n        // Handle array filters\r\n        optimizedQuery = optimizedQuery.where(field, 'in', value);\r\n      } else if (typeof value === 'object' && value !== null) {\r\n        // Handle range queries\r\n        if (value.gte !== undefined) {\r\n          optimizedQuery = optimizedQuery.where(field, '>=', value.gte);\r\n        }\r\n        if (value.lte !== undefined) {\r\n          optimizedQuery = optimizedQuery.where(field, '<=', value.lte);\r\n        }\r\n        if (value.gt !== undefined) {\r\n          optimizedQuery = optimizedQuery.where(field, '>', value.gt);\r\n        }\r\n        if (value.lt !== undefined) {\r\n          optimizedQuery = optimizedQuery.where(field, '<', value.lt);\r\n        }\r\n      } else {\r\n        // Handle simple equality\r\n        optimizedQuery = optimizedQuery.where(field, '==', value);\r\n      }\r\n    }\r\n\r\n    return optimizedQuery;\r\n  }\r\n\r\n  private async getFromCache(key: string): Promise<any[] | null> {\r\n    try {\r\n      return await cacheService.get<any[]>(key, 'firestore:');\r\n    } catch (error) {\r\n      logger.error('Error getting from cache', error as Error, {\r\n        metadata: { service: 'FirestoreOptimizationService', key }\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async setCache(key: string, data: any[]): Promise<void> {\r\n    try {\r\n      await cacheService.set(key, data, {\r\n        ttl: this.config.cacheTTL,\r\n        prefix: 'firestore:'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error setting cache', error as Error, {\r\n        metadata: { service: 'FirestoreOptimizationService', key }\r\n      });\r\n    }\r\n  }\r\n\r\n  private generateCacheKey(\r\n    collection: string,\r\n    filters: Record<string, any>,\r\n    options: any\r\n  ): string {\r\n    const filterString = JSON.stringify(filters);\r\n    const optionsString = JSON.stringify(options);\r\n    return `${collection}:${filterString}:${optionsString}`;\r\n  }\r\n\r\n  private checkIndexUsage(filters: Record<string, any>, orderBy?: any): boolean {\r\n    // Simple heuristic to check if indexes are likely being used\r\n    const filterCount = Object.keys(filters).length;\r\n    const hasOrdering = orderBy !== undefined;\r\n    \r\n    // If we have multiple filters or ordering, we likely need indexes\r\n    return filterCount > 1 || hasOrdering;\r\n  }\r\n\r\n  private estimateQueryCost(filters: Record<string, any>, options: any): number {\r\n    // Simple cost estimation based on query complexity\r\n    let cost = 1; // Base cost\r\n    \r\n    // Add cost for each filter\r\n    cost += Object.keys(filters).length * 0.5;\r\n    \r\n    // Add cost for ordering\r\n    if (options.orderBy) {\r\n      cost += 0.3;\r\n    }\r\n    \r\n    // Add cost for pagination\r\n    if (options.limit) {\r\n      cost += 0.2;\r\n    }\r\n    \r\n    return Math.round(cost * 100) / 100;\r\n  }\r\n\r\n  public async clearCache(prefix?: string): Promise<void> {\r\n    try {\r\n      await cacheService.clear(prefix || 'firestore:');\r\n      logger.info('Firestore cache cleared', {\r\n        metadata: { service: 'FirestoreOptimizationService', prefix }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error clearing cache', error as Error, {\r\n        metadata: { service: 'FirestoreOptimizationService' }\r\n      });\r\n    }\r\n  }\r\n\r\n  public getStats(): {\r\n    cacheSize: number;\r\n    activeQueries: number;\r\n    config: QueryOptimizationConfig;\r\n  } {\r\n    return {\r\n      cacheSize: this.queryCache.size,\r\n      activeQueries: this.activeQueries.size,\r\n      config: this.config\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const firestoreOptimizationService = FirestoreOptimizationService.getInstance(); "],"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","ignoreList":[]}