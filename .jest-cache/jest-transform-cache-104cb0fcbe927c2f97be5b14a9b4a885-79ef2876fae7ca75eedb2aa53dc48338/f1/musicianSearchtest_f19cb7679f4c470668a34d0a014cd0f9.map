{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\musicianSearch.test.ts","mappings":";;;;;;;;;;;AAIA,2BAA2B;AAC3B,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE,CAAC,CAAC;IACpC,EAAE,EAAE;QACF,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YACzB,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;gBACpB,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;oBACpB,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;wBACpB,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;4BACjC,IAAI,EAAE,EAAE;4BACR,KAAK,EAAE,IAAI;yBACZ,CAAC,CAAC;qBACJ,CAAC,CAAC;iBACJ,CAAC,CAAC;gBACH,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;oBACjC,IAAI,EAAE,EAAE;oBACR,KAAK,EAAE,IAAI;iBACZ,CAAC,CAAC;aACJ,CAAC,CAAC;YACH,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;gBAClB,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;oBACjC,MAAM,EAAE,KAAK;oBACb,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;iBACjB,CAAC,CAAC;aACJ,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;CACF,CAAC,CAAC,CAAC;AA9BJ,+CAA+C;AAC/C,6EAAkG;AA+BlG,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,MAAM,SAAS,GAAU;YACvB,EAAE,EAAE,cAAc;YAClB,IAAI,EAAE,uBAAuB;YAC7B,SAAS,EAAE,sBAAsB;YACjC,SAAS,EAAE,SAAS;YACpB,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,mBAAmB;YAC7B,QAAQ,EAAE,OAAO;YACjB,UAAU,EAAE,UAAU;YACtB,eAAe,EAAE,KAAK;YACtB,OAAO,EAAE,wCAAwC;YACjD,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,EAAE;YACZ,KAAK,EAAE,CAAC,gBAAgB,EAAE,WAAW,CAAC;YACtC,eAAe,EAAE,EAAE;YACnB,QAAQ,EAAE,EAAE;YACZ,MAAM,EAAE,kBAAkB;YAC1B,SAAS,EAAE,sBAAsB;YACjC,SAAS,EAAE,sBAAsB;SAClC,CAAC;QAEF,MAAM,YAAY,GAA2B;YAC3C,UAAU,EAAE,UAAU;YACtB,QAAQ,EAAE,mBAAmB;YAC7B,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,OAAO;YACjB,SAAS,EAAE,SAAS;YACpB,WAAW,EAAE,EAAE;SAChB,CAAC;QAEF,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACvC,IAAI,CAAC,uDAAuD,EAAE,GAAS,EAAE;gBACvE,MAAM,MAAM,GAAG,MAAM,6CAAqB,CAAC,uBAAuB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;gBAC5F,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC7B,CAAC,CAAA,CAAC,CAAC;YAEH,IAAI,CAAC,iCAAiC,EAAE,GAAS,EAAE;gBACjD,6BAA6B;gBAC7B,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,EAAE,CAAC;gBAC/C,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,EAAE;oBACxC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC;gBAEH,MAAM,MAAM,CACV,6CAAqB,CAAC,uBAAuB,CAAC,SAAS,EAAE,YAAY,CAAC,CACvE,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YACtC,CAAC,CAAA,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACvC,IAAI,CAAC,yCAAyC,EAAE,GAAS,EAAE;gBACzD,yCAAyC;gBACzC,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,EAAE,CAAC;gBAC/C,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;oBAC1C,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;wBAClB,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;4BACjC,MAAM,EAAE,KAAK;4BACb,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;yBACjB,CAAC,CAAC;qBACJ,CAAC,CAAC;iBACJ,CAAC,CAAC,CAAC;gBAEJ,MAAM,MAAM,CACV,6CAAqB,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,CACpE,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;YAC5C,CAAC,CAAA,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;YAC7B,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;gBAC3C,yCAAyC;gBACzC,MAAM,OAAO,GAAG,6CAA4B,CAAC;gBAE7C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,uBAAuB;gBACzE,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,kBAAkB;gBACnE,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa;gBAC9D,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,uBAAuB;YAC3E,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;gBACjD,MAAM,OAAO,GAAG,6CAA4B,CAAC;gBAE7C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,uBAAuB;YAC1E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;YACjC,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;gBACnD,MAAM,OAAO,GAAG,6CAA4B,CAAC;gBAE7C,MAAM,QAAQ,GAAG,OAAO,CAAC,iBAAiB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;gBACvE,MAAM,CAAC,OAAO,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACvC,MAAM,CAAC,QAAQ,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,QAAQ,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACrD,MAAM,QAAQ,GAA2B;gBACvC,UAAU,EAAE,OAAO;gBACnB,QAAQ,EAAE,cAAc;gBACxB,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,OAAO;gBACjB,SAAS,EAAE,SAAS;gBACpB,WAAW,EAAE,EAAE;aAChB,CAAC;YAEF,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAClD,MAAM,eAAe,GAA2B;gBAC9C,UAAU,EAAE,QAAQ;aACrB,CAAC;YAEF,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,aAAa,EAAE,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAChD,MAAM,UAAU,GAAG;gBACjB,SAAS,EAAE,sBAAsB;gBACjC,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,OAAO;gBACjB,WAAW,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;gBAClC,iBAAiB,EAAE,IAAI;gBACvB,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,IAAI;gBAChB,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,IAAI;gBACjB,MAAM,EAAE,GAAG;gBACX,UAAU,EAAE,EAAE;gBACd,YAAY,EAAE;oBACZ,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,EAAE;iBACd;aACF,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YAC1D,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACvD,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC7C,MAAM,WAAW,GAAG;gBAClB,EAAE,UAAU,EAAE,CAAC,EAAE;gBACjB,EAAE,UAAU,EAAE,EAAE,EAAE;gBAClB,EAAE,UAAU,EAAE,GAAG,EAAE;gBACnB,EAAE,UAAU,EAAE,EAAE,EAAE;aACnB,CAAC;YAEF,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC3B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACvD,4DAA4D;YAC5D,MAAM,eAAe,GAAG,EAAE,CAAC;YAC3B,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;YACpE,kEAAkE;YAClE,MAAM,iBAAiB,GAAG,IAAI,CAAC;YAC/B,MAAM,2BAA2B,GAAG,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/D,MAAM,CAAC,2BAA2B,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACvD,mEAAmE;YACnE,MAAM,UAAU,GAAG,CAAC,CAAC;YACrB,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YACrD,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACnD,8DAA8D;YAC9D,MAAM,MAAM,GAAG,GAAG,CAAC;YACnB,MAAM,WAAW,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEG,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACvD,gDAAgD;YAChD,MAAM,UAAU,GAAG,IAAI,CAAC;YACxB,MAAM,aAAa,GAAG,GAAG,CAAC,CAAC,qBAAqB;YAChD,MAAM,MAAM,GAAG,IAAI,CAAC;YAEpB,MAAM,UAAU,GAAG,UAAU,GAAG,aAAa,GAAG,EAAE,CAAC;YACnD,IAAI,WAAW,GAAG,CAAC,CAAC;YAEpB,IAAI,UAAU,IAAI,MAAM,EAAE,CAAC;gBACzB,WAAW,GAAG,EAAE,CAAC;YACnB,CAAC;iBAAM,IAAI,UAAU,IAAI,MAAM,GAAG,GAAG,EAAE,CAAC;gBACtC,WAAW,GAAG,CAAC,CAAC;YAClB,CAAC;YAED,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,8CAA8C;QAC7E,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAClD,gDAAgD;YAChD,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACnD,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAEjD,MAAM,gBAAgB,GAAG;gBACvB,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,OAAO;aAClB,CAAC;YAEF,MAAM,qBAAqB,GAAG,IAAI,IAAI,CAAC,GAAG,gBAAgB,CAAC,IAAI,IAAI,gBAAgB,CAAC,IAAI,EAAE,CAAC,CAAC;YAC5F,MAAM,mBAAmB,GAAG,IAAI,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,UAAU;YAEnG,yBAAyB;YACzB,MAAM,WAAW,GAAG,CAClB,CAAC,UAAU,IAAI,qBAAqB,IAAI,UAAU,GAAG,mBAAmB,CAAC;gBACzE,CAAC,QAAQ,GAAG,qBAAqB,IAAI,QAAQ,IAAI,mBAAmB,CAAC;gBACrE,CAAC,UAAU,IAAI,qBAAqB,IAAI,QAAQ,IAAI,mBAAmB,CAAC,CACzE,CAAC;YAEF,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAClE,oCAAoC;YACpC,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACnD,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAEjD,MAAM,mBAAmB,GAAG;gBAC1B,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,OAAO;aAClB,CAAC;YAEF,MAAM,wBAAwB,GAAG,IAAI,IAAI,CAAC,GAAG,mBAAmB,CAAC,IAAI,IAAI,mBAAmB,CAAC,IAAI,EAAE,CAAC,CAAC;YACrG,MAAM,sBAAsB,GAAG,IAAI,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;YAE9F,oCAAoC;YACpC,MAAM,WAAW,GAAG,CAClB,CAAC,UAAU,IAAI,wBAAwB,IAAI,UAAU,GAAG,sBAAsB,CAAC;gBAC/E,CAAC,QAAQ,GAAG,wBAAwB,IAAI,QAAQ,IAAI,sBAAsB,CAAC;gBAC3E,CAAC,UAAU,IAAI,wBAAwB,IAAI,QAAQ,IAAI,sBAAsB,CAAC,CAC/E,CAAC;YAEF,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\musicianSearch.test.ts"],"sourcesContent":["// Tests para el sistema de búsqueda de músicos\r\nimport { MusicianSearchService, MusicianSearchCriteria } from '../services/musicianSearchService';\r\nimport { Event } from '../utils/DataTypes';\r\n\r\n// Mock de la base de datos\r\njest.mock('../utils/firebase', () => ({\r\n  db: {\r\n    collection: jest.fn(() => ({\r\n      where: jest.fn(() => ({\r\n        where: jest.fn(() => ({\r\n          where: jest.fn(() => ({\r\n            get: jest.fn(() => Promise.resolve({\r\n              docs: [],\r\n              empty: true,\r\n            })),\r\n          })),\r\n        })),\r\n        get: jest.fn(() => Promise.resolve({\r\n          docs: [],\r\n          empty: true,\r\n        })),\r\n      })),\r\n      doc: jest.fn(() => ({\r\n        get: jest.fn(() => Promise.resolve({\r\n          exists: false,\r\n          data: () => null,\r\n        })),\r\n      })),\r\n    })),\r\n  },\r\n}));\r\n\r\ndescribe('Sistema de Búsqueda de Músicos', () => {\r\n  describe('MusicianSearchService', () => {\r\n    const mockEvent: Event = {\r\n      id: 'test-event-1',\r\n      user: 'organizer@example.com',\r\n      eventName: 'Fiesta de Cumpleaños',\r\n      eventType: 'private',\r\n      date: '2025-02-15',\r\n      time: '18:00',\r\n      location: 'Santo Domingo, RD',\r\n      duration: '03:00',\r\n      instrument: 'Guitarra',\r\n      bringInstrument: false,\r\n      comment: 'Necesito un guitarrista para mi fiesta',\r\n      budget: '5000',\r\n      flyerUrl: '',\r\n      songs: ['Happy Birthday', 'Despacito'],\r\n      recommendations: [],\r\n      mapsLink: '',\r\n      status: 'pending_musician',\r\n      createdAt: '2025-01-15T10:00:00Z',\r\n      updatedAt: '2025-01-15T10:00:00Z',\r\n    };\r\n\r\n    const mockCriteria: MusicianSearchCriteria = {\r\n      instrument: 'Guitarra',\r\n      location: 'Santo Domingo, RD',\r\n      budget: 5000,\r\n      date: '2025-02-15',\r\n      time: '18:00',\r\n      duration: '03:00',\r\n      eventType: 'private',\r\n      maxDistance: 50,\r\n    };\r\n\r\n    describe('searchMusiciansForEvent', () => {\r\n      test('should return empty array when no musicians available', async () => {\r\n        const result = await MusicianSearchService.searchMusiciansForEvent(mockEvent, mockCriteria);\r\n        expect(result).toEqual([]);\r\n      });\r\n\r\n      test('should handle errors gracefully', async () => {\r\n        // Mock para simular un error\r\n        const mockDb = require('../utils/firebase').db;\r\n        mockDb.collection.mockImplementation(() => {\r\n          throw new Error('Database error');\r\n        });\r\n\r\n        await expect(\r\n          MusicianSearchService.searchMusiciansForEvent(mockEvent, mockCriteria)\r\n        ).rejects.toThrow('Database error');\r\n      });\r\n    });\r\n\r\n    describe('getRecommendedMusicians', () => {\r\n      test('should throw error when event not found', async () => {\r\n        // Mock para simular evento no encontrado\r\n        const mockDb = require('../utils/firebase').db;\r\n        mockDb.collection.mockImplementation(() => ({\r\n          doc: jest.fn(() => ({\r\n            get: jest.fn(() => Promise.resolve({\r\n              exists: false,\r\n              data: () => null,\r\n            })),\r\n          })),\r\n        }));\r\n\r\n        await expect(\r\n          MusicianSearchService.getRecommendedMusicians('non-existent-event')\r\n        ).rejects.toThrow('Evento no encontrado');\r\n      });\r\n    });\r\n\r\n    describe('parseDuration', () => {\r\n      test('should parse duration correctly', () => {\r\n        // Acceder al método privado para testing\r\n        const service = MusicianSearchService as any;\r\n        \r\n        expect(service.parseDuration('02:30')).toBe(150); // 2h 30m = 150 minutos\r\n        expect(service.parseDuration('01:00')).toBe(60); // 1h = 60 minutos\r\n        expect(service.parseDuration('00:45')).toBe(45); // 45 minutos\r\n        expect(service.parseDuration('03:15')).toBe(195); // 3h 15m = 195 minutos\r\n      });\r\n\r\n      test('should handle invalid duration format', () => {\r\n        const service = MusicianSearchService as any;\r\n        \r\n        expect(service.parseDuration('invalid')).toBe(0);\r\n        expect(service.parseDuration('')).toBe(0);\r\n        expect(service.parseDuration('2:30')).toBe(150); // 2h 30m = 150 minutos\r\n      });\r\n    });\r\n\r\n    describe('calculateDistance', () => {\r\n      test('should return a number between 0 and 50', () => {\r\n        const service = MusicianSearchService as any;\r\n        \r\n        const distance = service.calculateDistance('Location A', 'Location B');\r\n        expect(typeof distance).toBe('number');\r\n        expect(distance).toBeGreaterThanOrEqual(0);\r\n        expect(distance).toBeLessThanOrEqual(50);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Criterios de Búsqueda', () => {\r\n    test('should validate search criteria structure', () => {\r\n      const criteria: MusicianSearchCriteria = {\r\n        instrument: 'Piano',\r\n        location: 'Santiago, RD',\r\n        budget: 3000,\r\n        date: '2025-03-20',\r\n        time: '20:00',\r\n        duration: '02:00',\r\n        eventType: 'wedding',\r\n        maxDistance: 30,\r\n      };\r\n\r\n      expect(criteria.instrument).toBe('Piano');\r\n      expect(criteria.budget).toBe(3000);\r\n      expect(criteria.maxDistance).toBe(30);\r\n    });\r\n\r\n    test('should handle optional criteria fields', () => {\r\n      const minimalCriteria: MusicianSearchCriteria = {\r\n        instrument: 'Violín',\r\n      };\r\n\r\n      expect(minimalCriteria.instrument).toBe('Violín');\r\n      expect(minimalCriteria.location).toBeUndefined();\r\n      expect(minimalCriteria.budget).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('Resultados de Búsqueda', () => {\r\n    test('should have correct result structure', () => {\r\n      const mockResult = {\r\n        userEmail: 'musician@example.com',\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        instruments: ['Guitarra', 'Piano'],\r\n        hasOwnInstruments: true,\r\n        experience: 5,\r\n        hourlyRate: 2000,\r\n        location: 'Santo Domingo, RD',\r\n        isAvailable: true,\r\n        rating: 4.5,\r\n        matchScore: 85,\r\n        availability: {\r\n          isAvailable: true,\r\n          conflicts: [],\r\n        },\r\n      };\r\n\r\n      expect(mockResult.userEmail).toBe('musician@example.com');\r\n      expect(mockResult.instruments).toContain('Guitarra');\r\n      expect(mockResult.matchScore).toBeGreaterThanOrEqual(0);\r\n      expect(mockResult.matchScore).toBeLessThanOrEqual(100);\r\n      expect(mockResult.availability.isAvailable).toBe(true);\r\n    });\r\n\r\n    test('should validate match score range', () => {\r\n      const mockResults = [\r\n        { matchScore: 0 },\r\n        { matchScore: 50 },\r\n        { matchScore: 100 },\r\n        { matchScore: 85 },\r\n      ];\r\n\r\n      mockResults.forEach(result => {\r\n        expect(result.matchScore).toBeGreaterThanOrEqual(0);\r\n        expect(result.matchScore).toBeLessThanOrEqual(100);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Algoritmo de Scoring', () => {\r\n    test('should calculate instrument score correctly', () => {\r\n      // Simular cálculo de puntuación por instrumento (40 puntos)\r\n      const instrumentScore = 40;\r\n      expect(instrumentScore).toBe(40);\r\n    });\r\n\r\n    test('should calculate instrument availability score correctly', () => {\r\n      // Simular cálculo de puntuación por disponibilidad de instrumento\r\n      const hasOwnInstruments = true;\r\n      const instrumentAvailabilityScore = hasOwnInstruments ? 15 : 5;\r\n      expect(instrumentAvailabilityScore).toBe(15);\r\n    });\r\n\r\n    test('should calculate experience score correctly', () => {\r\n      // Simular cálculo de puntuación por experiencia (máximo 20 puntos)\r\n      const experience = 8;\r\n      const experienceScore = Math.min(experience * 2, 20);\r\n      expect(experienceScore).toBe(16);\r\n    });\r\n\r\n    test('should calculate rating score correctly', () => {\r\n      // Simular cálculo de puntuación por rating (máximo 15 puntos)\r\n      const rating = 4.5;\r\n      const ratingScore = (rating / 5) * 15;\r\n      expect(ratingScore).toBe(13.5);\r\n    });\r\n\r\n          test('should calculate budget score correctly', () => {\r\n        // Simular cálculo de puntuación por presupuesto\r\n        const hourlyRate = 2000;\r\n        const eventDuration = 180; // 3 horas en minutos\r\n        const budget = 5000;\r\n        \r\n        const hourlyCost = hourlyRate * eventDuration / 60;\r\n        let budgetScore = 0;\r\n        \r\n        if (hourlyCost <= budget) {\r\n          budgetScore = 10;\r\n        } else if (hourlyCost <= budget * 1.2) {\r\n          budgetScore = 5;\r\n        }\r\n        \r\n        expect(budgetScore).toBe(5); // 6000 > 5000, pero 6000 <= 5000 * 1.2 = 6000\r\n      });\r\n  });\r\n\r\n  describe('Validación de Disponibilidad', () => {\r\n    test('should detect time conflicts correctly', () => {\r\n      // Simular verificación de conflictos de horario\r\n      const eventStart = new Date('2025-02-15T18:00:00');\r\n      const eventEnd = new Date('2025-02-15T21:00:00');\r\n      \r\n      const conflictingEvent = {\r\n        date: '2025-02-15',\r\n        time: '19:00',\r\n        duration: '02:00',\r\n      };\r\n      \r\n      const conflictingEventStart = new Date(`${conflictingEvent.date}T${conflictingEvent.time}`);\r\n      const conflictingEventEnd = new Date(conflictingEventStart.getTime() + 120 * 60 * 1000); // 2 horas\r\n      \r\n      // Verificar solapamiento\r\n      const hasConflict = (\r\n        (eventStart >= conflictingEventStart && eventStart < conflictingEventEnd) ||\r\n        (eventEnd > conflictingEventStart && eventEnd <= conflictingEventEnd) ||\r\n        (eventStart <= conflictingEventStart && eventEnd >= conflictingEventEnd)\r\n      );\r\n      \r\n      expect(hasConflict).toBe(true);\r\n    });\r\n\r\n    test('should not detect conflicts for non-overlapping events', () => {\r\n      // Simular eventos que no se solapan\r\n      const eventStart = new Date('2025-02-15T18:00:00');\r\n      const eventEnd = new Date('2025-02-15T21:00:00');\r\n      \r\n      const nonConflictingEvent = {\r\n        date: '2025-02-15',\r\n        time: '22:00',\r\n        duration: '02:00',\r\n      };\r\n      \r\n      const nonConflictingEventStart = new Date(`${nonConflictingEvent.date}T${nonConflictingEvent.time}`);\r\n      const nonConflictingEventEnd = new Date(nonConflictingEventStart.getTime() + 120 * 60 * 1000);\r\n      \r\n      // Verificar que no hay solapamiento\r\n      const hasConflict = (\r\n        (eventStart >= nonConflictingEventStart && eventStart < nonConflictingEventEnd) ||\r\n        (eventEnd > nonConflictingEventStart && eventEnd <= nonConflictingEventEnd) ||\r\n        (eventStart <= nonConflictingEventStart && eventEnd >= nonConflictingEventEnd)\r\n      );\r\n      \r\n      expect(hasConflict).toBe(false);\r\n    });\r\n  });\r\n}); "],"version":3}