{"version":3,"names":["express_1","cov_1itfmk3x2n","s","require","authMiddleware_1","requireRole_1","validationMiddleware_1","paymentController_1","dtos_1","router","Router","post","authMiddleware","validate","createPaymentMethodDTO","createPaymentMethodController","get","getPaymentMethodsController","put","setDefaultPaymentMethodController","createPaymentIntentDTO","createPaymentIntentController","getPaymentIntentsController","processPaymentDTO","processPaymentController","createInvoiceDTO","createInvoiceController","getInvoicesController","markInvoiceAsPaidController","processRefundDTO","processRefundController","requireRole","getPaymentStatsController","validatePaymentMethodDTO","validatePaymentMethodController","getPaymentGatewaysController","exports","default"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\paymentRoutes.ts"],"sourcesContent":["import { Router } from 'express';\r\nimport { authMiddleware } from '../middleware/authMiddleware';\r\nimport { requireRole } from '../middleware/requireRole';\r\nimport { validate } from '../middleware/validationMiddleware';\r\nimport {\r\n  createPaymentMethodController,\r\n  getPaymentMethodsController,\r\n  setDefaultPaymentMethodController,\r\n  createPaymentIntentController,\r\n  processPaymentController,\r\n  createInvoiceController,\r\n  getInvoicesController,\r\n  markInvoiceAsPaidController,\r\n  processRefundController,\r\n  getPaymentStatsController,\r\n  validatePaymentMethodController,\r\n  getPaymentGatewaysController,\r\n  getPaymentIntentsController,\r\n} from '../controllers/paymentController';\r\nimport {\r\n  createPaymentMethodDTO,\r\n  createPaymentIntentDTO,\r\n  createInvoiceDTO,\r\n  processPaymentDTO,\r\n  processRefundDTO,\r\n  validatePaymentMethodDTO,\r\n} from '../utils/dtos';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     PaymentMethod:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         userId:\r\n *           type: string\r\n *         type:\r\n *           type: string\r\n *           enum: [card, bank_account, paypal]\r\n *         last4:\r\n *           type: string\r\n *         brand:\r\n *           type: string\r\n *         isDefault:\r\n *           type: boolean\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *     PaymentIntent:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         userId:\r\n *           type: string\r\n *         amount:\r\n *           type: number\r\n *         currency:\r\n *           type: string\r\n *         status:\r\n *           type: string\r\n *           enum: [pending, processing, succeeded, failed, canceled]\r\n *         description:\r\n *           type: string\r\n *         metadata:\r\n *           type: object\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *     Invoice:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         userId:\r\n *           type: string\r\n *         items:\r\n *           type: array\r\n *           items:\r\n *             type: object\r\n *             properties:\r\n *               description:\r\n *                 type: string\r\n *               quantity:\r\n *                 type: number\r\n *               unitPrice:\r\n *                 type: number\r\n *               total:\r\n *                 type: number\r\n *         subtotal:\r\n *           type: number\r\n *         tax:\r\n *           type: number\r\n *         total:\r\n *           type: number\r\n *         status:\r\n *           type: string\r\n *           enum: [draft, sent, paid, overdue, canceled]\r\n *         dueDate:\r\n *           type: string\r\n *           format: date-time\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *     Refund:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         paymentIntentId:\r\n *           type: string\r\n *         amount:\r\n *           type: number\r\n *         reason:\r\n *           type: string\r\n *         status:\r\n *           type: string\r\n *           enum: [pending, succeeded, failed]\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/methods:\r\n *   post:\r\n *     summary: Crear método de pago\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/CreatePaymentMethodDTO'\r\n *     responses:\r\n *       201:\r\n *         description: Método de pago creado exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/PaymentMethod'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Datos inválidos\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.post(\r\n  '/methods',\r\n  authMiddleware,\r\n  validate(createPaymentMethodDTO),\r\n  createPaymentMethodController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/methods:\r\n *   get:\r\n *     summary: Obtener métodos de pago del usuario\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Métodos de pago obtenidos exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/PaymentMethod'\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.get('/methods', authMiddleware, getPaymentMethodsController);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/methods/{paymentMethodId}/default:\r\n *   put:\r\n *     summary: Establecer método de pago por defecto\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: paymentMethodId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID del método de pago\r\n *     responses:\r\n *       200:\r\n *         description: Método de pago por defecto actualizado exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Método de pago no encontrado\r\n */\r\nrouter.put(\r\n  '/methods/:paymentMethodId/default',\r\n  authMiddleware,\r\n  setDefaultPaymentMethodController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/intents:\r\n *   post:\r\n *     summary: Crear intent de pago\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/CreatePaymentIntentDTO'\r\n *     responses:\r\n *       201:\r\n *         description: Intent de pago creado exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/PaymentIntent'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Datos inválidos\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.post(\r\n  '/intents',\r\n  authMiddleware,\r\n  validate(createPaymentIntentDTO),\r\n  createPaymentIntentController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/intents:\r\n *   get:\r\n *     summary: Obtener intents de pago del usuario\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Intents de pago obtenidos exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/PaymentIntent'\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.get('/intents', authMiddleware, getPaymentIntentsController);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/process:\r\n *   post:\r\n *     summary: Procesar pago\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/ProcessPaymentDTO'\r\n *     responses:\r\n *       200:\r\n *         description: Pago procesado exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     success:\r\n *                       type: boolean\r\n *                     transactionId:\r\n *                       type: string\r\n *                     amount:\r\n *                       type: number\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Datos inválidos\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.post(\r\n  '/process',\r\n  authMiddleware,\r\n  validate(processPaymentDTO),\r\n  processPaymentController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/invoices:\r\n *   post:\r\n *     summary: Crear factura\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/CreateInvoiceDTO'\r\n *     responses:\r\n *       201:\r\n *         description: Factura creada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/Invoice'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Datos inválidos\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.post(\r\n  '/invoices',\r\n  authMiddleware,\r\n  validate(createInvoiceDTO),\r\n  createInvoiceController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/invoices:\r\n *   get:\r\n *     summary: Obtener facturas del usuario\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: status\r\n *         schema:\r\n *           type: string\r\n *           enum: [draft, sent, paid, overdue, canceled]\r\n *         description: Filtrar por estado\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           default: 10\r\n *         description: Número de resultados por página\r\n *       - in: query\r\n *         name: offset\r\n *         schema:\r\n *           type: integer\r\n *           default: 0\r\n *         description: Número de resultados a omitir\r\n *     responses:\r\n *       200:\r\n *         description: Facturas obtenidas exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/Invoice'\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.get('/invoices', authMiddleware, getInvoicesController);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/invoices/{invoiceId}/pay:\r\n *   post:\r\n *     summary: Marcar factura como pagada\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: invoiceId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID de la factura\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - paymentMethodId\r\n *             properties:\r\n *               paymentMethodId:\r\n *                 type: string\r\n *                 description: ID del método de pago a usar\r\n *     responses:\r\n *       200:\r\n *         description: Factura marcada como pagada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/PaymentIntent'\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Factura no encontrada\r\n */\r\nrouter.post(\r\n  '/invoices/:invoiceId/pay',\r\n  authMiddleware,\r\n  markInvoiceAsPaidController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/refunds:\r\n *   post:\r\n *     summary: Procesar reembolso\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/ProcessRefundDTO'\r\n *     responses:\r\n *       200:\r\n *         description: Reembolso procesado exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/Refund'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Datos inválidos\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.post(\r\n  '/refunds',\r\n  authMiddleware,\r\n  validate(processRefundDTO),\r\n  processRefundController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/stats:\r\n *   get:\r\n *     summary: Obtener estadísticas de pagos (solo admin)\r\n *     tags: [Payments]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: startDate\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Fecha de inicio (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: endDate\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Fecha de fin (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: groupBy\r\n *         schema:\r\n *           type: string\r\n *           enum: [day, week, month]\r\n *           default: day\r\n *         description: Agrupación de estadísticas\r\n *     responses:\r\n *       200:\r\n *         description: Estadísticas de pagos obtenidas exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     totalRevenue:\r\n *                       type: number\r\n *                     totalTransactions:\r\n *                       type: number\r\n *                     averageTransaction:\r\n *                       type: number\r\n *                     successRate:\r\n *                       type: number\r\n *                     trends:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           date:\r\n *                             type: string\r\n *                           revenue:\r\n *                             type: number\r\n *                           transactions:\r\n *                             type: number\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n *       403:\r\n *         description: Acceso denegado\r\n */\r\nrouter.get(\r\n  '/stats',\r\n  authMiddleware,\r\n  requireRole(['admin', 'superadmin']),\r\n  getPaymentStatsController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/validate:\r\n *   post:\r\n *     summary: Validar método de pago\r\n *     tags: [Payments]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/ValidatePaymentMethodDTO'\r\n *     responses:\r\n *       200:\r\n *         description: Validación completada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     isValid:\r\n *                       type: boolean\r\n *                     errors:\r\n *                       type: array\r\n *                       items:\r\n *                         type: string\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Datos inválidos\r\n */\r\nrouter.post(\r\n  '/validate',\r\n  validate(validatePaymentMethodDTO),\r\n  validatePaymentMethodController\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /api/payments/gateways:\r\n *   get:\r\n *     summary: Obtener gateways de pago disponibles\r\n *     tags: [Payments]\r\n *     responses:\r\n *       200:\r\n *         description: Gateways de pago obtenidos exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: array\r\n *                   items:\r\n *                     type: object\r\n *                     properties:\r\n *                       id:\r\n *                         type: string\r\n *                       name:\r\n *                         type: string\r\n *                       description:\r\n *                         type: string\r\n *                       supportedCurrencies:\r\n *                         type: array\r\n *                         items:\r\n *                           type: string\r\n *                       fees:\r\n *                         type: object\r\n *                       isActive:\r\n *                         type: boolean\r\n *                 message:\r\n *                   type: string\r\n */\r\nrouter.get('/gateways', getPaymentGatewaysController);\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]}