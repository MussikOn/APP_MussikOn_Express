559a8e8dc1406739a50ee747af3c2b53
"use strict";

/* istanbul ignore next */
function cov_25axm88b54() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\chatService.ts";
  var hash = "9df798bd24edb1a83bbc4828a753ec75e9410168";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\chatService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 51
        }
      },
      "14": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "15": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 55
        }
      },
      "16": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 60
        }
      },
      "17": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "19": {
        start: {
          line: 24,
          column: 41
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "20": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 32,
          column: 17
        }
      },
      "21": {
        start: {
          line: 26,
          column: 36
        },
        end: {
          line: 26,
          column: 100
        }
      },
      "22": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 31,
          column: 21
        }
      },
      "23": {
        start: {
          line: 28,
          column: 41
        },
        end: {
          line: 28,
          column: 55
        }
      },
      "24": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 30,
          column: 68
        }
      },
      "25": {
        start: {
          line: 33,
          column: 37
        },
        end: {
          line: 43,
          column: 17
        }
      },
      "26": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 47,
          column: 39
        }
      },
      "27": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 36
        }
      },
      "28": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 84
        }
      },
      "29": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 63
        }
      },
      "30": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      },
      "31": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "32": {
        start: {
          line: 62,
          column: 79
        },
        end: {
          line: 62,
          column: 86
        }
      },
      "33": {
        start: {
          line: 63,
          column: 30
        },
        end: {
          line: 68,
          column: 35
        }
      },
      "34": {
        start: {
          line: 69,
          column: 33
        },
        end: {
          line: 69,
          column: 50
        }
      },
      "35": {
        start: {
          line: 70,
          column: 38
        },
        end: {
          line: 70,
          column: 74
        }
      },
      "36": {
        start: {
          line: 70,
          column: 63
        },
        end: {
          line: 70,
          column: 73
        }
      },
      "37": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "38": {
        start: {
          line: 73,
          column: 52
        },
        end: {
          line: 76,
          column: 24
        }
      },
      "39": {
        start: {
          line: 73,
          column: 106
        },
        end: {
          line: 76,
          column: 22
        }
      },
      "40": {
        start: {
          line: 74,
          column: 44
        },
        end: {
          line: 74,
          column: 101
        }
      },
      "41": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 95
        }
      },
      "42": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 88
        }
      },
      "43": {
        start: {
          line: 77,
          column: 66
        },
        end: {
          line: 77,
          column: 86
        }
      },
      "44": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 37
        }
      },
      "45": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 88
        }
      },
      "46": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 67
        }
      },
      "47": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "48": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "49": {
        start: {
          line: 93,
          column: 30
        },
        end: {
          line: 99,
          column: 35
        }
      },
      "50": {
        start: {
          line: 100,
          column: 33
        },
        end: {
          line: 100,
          column: 50
        }
      },
      "51": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 60
        }
      },
      "52": {
        start: {
          line: 101,
          column: 48
        },
        end: {
          line: 101,
          column: 58
        }
      },
      "53": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 82
        }
      },
      "54": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 61
        }
      },
      "55": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "56": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "57": {
        start: {
          line: 116,
          column: 40
        },
        end: {
          line: 119,
          column: 26
        }
      },
      "58": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 122,
          column: 17
        }
      },
      "59": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 66
        }
      },
      "60": {
        start: {
          line: 124,
          column: 34
        },
        end: {
          line: 124,
          column: 93
        }
      },
      "61": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "62": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 71
        }
      },
      "63": {
        start: {
          line: 128,
          column: 35
        },
        end: {
          line: 128,
          column: 51
        }
      },
      "64": {
        start: {
          line: 129,
          column: 35
        },
        end: {
          line: 129,
          column: 78
        }
      },
      "65": {
        start: {
          line: 130,
          column: 32
        },
        end: {
          line: 144,
          column: 17
        }
      },
      "66": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 151,
          column: 34
        }
      },
      "67": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 157,
          column: 19
        }
      },
      "68": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 31
        }
      },
      "69": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 80
        }
      },
      "70": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 59
        }
      },
      "71": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "72": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "73": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 202,
          column: 17
        }
      },
      "74": {
        start: {
          line: 174,
          column: 34
        },
        end: {
          line: 174,
          column: 55
        }
      },
      "75": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 184,
          column: 21
        }
      },
      "76": {
        start: {
          line: 176,
          column: 43
        },
        end: {
          line: 180,
          column: 43
        }
      },
      "77": {
        start: {
          line: 181,
          column: 24
        },
        end: {
          line: 183,
          column: 27
        }
      },
      "78": {
        start: {
          line: 185,
          column: 20
        },
        end: {
          line: 185,
          column: 41
        }
      },
      "79": {
        start: {
          line: 189,
          column: 42
        },
        end: {
          line: 193,
          column: 62
        }
      },
      "80": {
        start: {
          line: 194,
          column: 37
        },
        end: {
          line: 194,
          column: 62
        }
      },
      "81": {
        start: {
          line: 195,
          column: 34
        },
        end: {
          line: 195,
          column: 55
        }
      },
      "82": {
        start: {
          line: 196,
          column: 20
        },
        end: {
          line: 200,
          column: 23
        }
      },
      "83": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 199,
          column: 27
        }
      },
      "84": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 41
        }
      },
      "85": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 93
        }
      },
      "86": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 72
        }
      },
      "87": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "88": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 227,
          column: 13
        }
      },
      "89": {
        start: {
          line: 216,
          column: 30
        },
        end: {
          line: 220,
          column: 58
        }
      },
      "90": {
        start: {
          line: 221,
          column: 33
        },
        end: {
          line: 221,
          column: 50
        }
      },
      "91": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 37
        }
      },
      "92": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 102
        }
      },
      "93": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 25
        }
      },
      "94": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "95": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "96": {
        start: {
          line: 236,
          column: 28
        },
        end: {
          line: 239,
          column: 26
        }
      },
      "97": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 242,
          column: 17
        }
      },
      "98": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 38
        }
      },
      "99": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 28
        }
      },
      "100": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 86
        }
      },
      "101": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 65
        }
      },
      "102": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 279,
          column: 11
        }
      },
      "103": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "104": {
        start: {
          line: 258,
          column: 38
        },
        end: {
          line: 261,
          column: 18
        }
      },
      "105": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 273,
          column: 19
        }
      },
      "106": {
        start: {
          line: 266,
          column: 45
        },
        end: {
          line: 266,
          column: 89
        }
      },
      "107": {
        start: {
          line: 267,
          column: 38
        },
        end: {
          line: 267,
          column: 122
        }
      },
      "108": {
        start: {
          line: 267,
          column: 68
        },
        end: {
          line: 267,
          column: 121
        }
      },
      "109": {
        start: {
          line: 269,
          column: 39
        },
        end: {
          line: 269,
          column: 157
        }
      },
      "110": {
        start: {
          line: 271,
          column: 41
        },
        end: {
          line: 271,
          column: 169
        }
      },
      "111": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 67
        }
      },
      "112": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 87
        }
      },
      "113": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 66
        }
      },
      "114": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 302,
          column: 11
        }
      },
      "115": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "116": {
        start: {
          line: 287,
          column: 30
        },
        end: {
          line: 292,
          column: 33
        }
      },
      "117": {
        start: {
          line: 293,
          column: 33
        },
        end: {
          line: 293,
          column: 50
        }
      },
      "118": {
        start: {
          line: 294,
          column: 33
        },
        end: {
          line: 294,
          column: 69
        }
      },
      "119": {
        start: {
          line: 294,
          column: 58
        },
        end: {
          line: 294,
          column: 68
        }
      },
      "120": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 296,
          column: 116
        }
      },
      "121": {
        start: {
          line: 296,
          column: 50
        },
        end: {
          line: 296,
          column: 114
        }
      },
      "122": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 81
        }
      },
      "123": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 60
        }
      },
      "124": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 335,
          column: 11
        }
      },
      "125": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 334,
          column: 13
        }
      },
      "126": {
        start: {
          line: 310,
          column: 35
        },
        end: {
          line: 315,
          column: 26
        }
      },
      "127": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 318,
          column: 17
        }
      },
      "128": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 317,
          column: 61
        }
      },
      "129": {
        start: {
          line: 319,
          column: 32
        },
        end: {
          line: 319,
          column: 49
        }
      },
      "130": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 323,
          column: 17
        }
      },
      "131": {
        start: {
          line: 322,
          column: 20
        },
        end: {
          line: 322,
          column: 80
        }
      },
      "132": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 329,
          column: 30
        }
      },
      "133": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 82
        }
      },
      "134": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 61
        }
      },
      "135": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 377,
          column: 11
        }
      },
      "136": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 376,
          column: 13
        }
      },
      "137": {
        start: {
          line: 343,
          column: 37
        },
        end: {
          line: 343,
          column: 83
        }
      },
      "138": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 346,
          column: 17
        }
      },
      "139": {
        start: {
          line: 345,
          column: 20
        },
        end: {
          line: 345,
          column: 66
        }
      },
      "140": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 349,
          column: 17
        }
      },
      "141": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 348,
          column: 102
        }
      },
      "142": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 352,
          column: 17
        }
      },
      "143": {
        start: {
          line: 351,
          column: 20
        },
        end: {
          line: 351,
          column: 99
        }
      },
      "144": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 355,
          column: 17
        }
      },
      "145": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 82
        }
      },
      "146": {
        start: {
          line: 357,
          column: 32
        },
        end: {
          line: 357,
          column: 96
        }
      },
      "147": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 360,
          column: 17
        }
      },
      "148": {
        start: {
          line: 359,
          column: 20
        },
        end: {
          line: 359,
          column: 61
        }
      },
      "149": {
        start: {
          line: 361,
          column: 33
        },
        end: {
          line: 361,
          column: 47
        }
      },
      "150": {
        start: {
          line: 362,
          column: 40
        },
        end: {
          line: 362,
          column: 79
        }
      },
      "151": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 371,
          column: 19
        }
      },
      "152": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 374,
          column: 86
        }
      },
      "153": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 65
        }
      },
      "154": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 412,
          column: 11
        }
      },
      "155": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 411,
          column: 13
        }
      },
      "156": {
        start: {
          line: 385,
          column: 37
        },
        end: {
          line: 385,
          column: 83
        }
      },
      "157": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 388,
          column: 17
        }
      },
      "158": {
        start: {
          line: 387,
          column: 20
        },
        end: {
          line: 387,
          column: 66
        }
      },
      "159": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 391,
          column: 17
        }
      },
      "160": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 390,
          column: 103
        }
      },
      "161": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 394,
          column: 17
        }
      },
      "162": {
        start: {
          line: 393,
          column: 20
        },
        end: {
          line: 393,
          column: 99
        }
      },
      "163": {
        start: {
          line: 395,
          column: 16
        },
        end: {
          line: 397,
          column: 17
        }
      },
      "164": {
        start: {
          line: 396,
          column: 20
        },
        end: {
          line: 396,
          column: 82
        }
      },
      "165": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 406,
          column: 19
        }
      },
      "166": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 86
        }
      },
      "167": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 410,
          column: 65
        }
      },
      "168": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 447,
          column: 11
        }
      },
      "169": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 446,
          column: 13
        }
      },
      "170": {
        start: {
          line: 420,
          column: 38
        },
        end: {
          line: 423,
          column: 18
        }
      },
      "171": {
        start: {
          line: 424,
          column: 36
        },
        end: {
          line: 424,
          column: 37
        }
      },
      "172": {
        start: {
          line: 425,
          column: 37
        },
        end: {
          line: 425,
          column: 38
        }
      },
      "173": {
        start: {
          line: 426,
          column: 42
        },
        end: {
          line: 426,
          column: 43
        }
      },
      "174": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 435,
          column: 17
        }
      },
      "175": {
        start: {
          line: 428,
          column: 41
        },
        end: {
          line: 428,
          column: 98
        }
      },
      "176": {
        start: {
          line: 429,
          column: 20
        },
        end: {
          line: 429,
          column: 57
        }
      },
      "177": {
        start: {
          line: 430,
          column: 40
        },
        end: {
          line: 430,
          column: 97
        }
      },
      "178": {
        start: {
          line: 431,
          column: 20
        },
        end: {
          line: 431,
          column: 50
        }
      },
      "179": {
        start: {
          line: 432,
          column: 20
        },
        end: {
          line: 434,
          column: 21
        }
      },
      "180": {
        start: {
          line: 433,
          column: 24
        },
        end: {
          line: 433,
          column: 46
        }
      },
      "181": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 441,
          column: 18
        }
      },
      "182": {
        start: {
          line: 444,
          column: 16
        },
        end: {
          line: 444,
          column: 94
        }
      },
      "183": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 445,
          column: 73
        }
      },
      "184": {
        start: {
          line: 450,
          column: 0
        },
        end: {
          line: 450,
          column: 34
        }
      },
      "185": {
        start: {
          line: 451,
          column: 0
        },
        end: {
          line: 451,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 39
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 21,
            column: 50
          },
          end: {
            line: 21,
            column: 51
          }
        },
        loc: {
          start: {
            line: 21,
            column: 115
          },
          end: {
            line: 54,
            column: 9
          }
        },
        line: 21
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 34
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 59
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 60,
            column: 47
          },
          end: {
            line: 60,
            column: 48
          }
        },
        loc: {
          start: {
            line: 60,
            column: 60
          },
          end: {
            line: 85,
            column: 9
          }
        },
        line: 60
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 70,
            column: 56
          },
          end: {
            line: 70,
            column: 57
          }
        },
        loc: {
          start: {
            line: 70,
            column: 63
          },
          end: {
            line: 70,
            column: 73
          }
        },
        line: 70
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 73,
            column: 88
          },
          end: {
            line: 73,
            column: 89
          }
        },
        loc: {
          start: {
            line: 73,
            column: 106
          },
          end: {
            line: 76,
            column: 22
          }
        },
        line: 73
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 73,
            column: 138
          },
          end: {
            line: 73,
            column: 139
          }
        },
        loc: {
          start: {
            line: 73,
            column: 151
          },
          end: {
            line: 76,
            column: 21
          }
        },
        line: 73
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 77,
            column: 58
          },
          end: {
            line: 77,
            column: 59
          }
        },
        loc: {
          start: {
            line: 77,
            column: 66
          },
          end: {
            line: 77,
            column: 86
          }
        },
        line: 77
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 46
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 90
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 91,
            column: 50
          },
          end: {
            line: 91,
            column: 51
          }
        },
        loc: {
          start: {
            line: 91,
            column: 101
          },
          end: {
            line: 107,
            column: 9
          }
        },
        line: 91
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 101,
            column: 41
          },
          end: {
            line: 101,
            column: 42
          }
        },
        loc: {
          start: {
            line: 101,
            column: 48
          },
          end: {
            line: 101,
            column: 58
          }
        },
        line: 101
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 57
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 112
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 113,
            column: 50
          },
          end: {
            line: 113,
            column: 51
          }
        },
        loc: {
          start: {
            line: 113,
            column: 121
          },
          end: {
            line: 164,
            column: 9
          }
        },
        line: 113
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 59
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 169
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 170,
            column: 47
          },
          end: {
            line: 170,
            column: 48
          }
        },
        loc: {
          start: {
            line: 170,
            column: 60
          },
          end: {
            line: 208,
            column: 9
          }
        },
        line: 170
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 196,
            column: 42
          },
          end: {
            line: 196,
            column: 43
          }
        },
        loc: {
          start: {
            line: 196,
            column: 49
          },
          end: {
            line: 200,
            column: 21
          }
        },
        line: 196
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 50
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 213
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 214,
            column: 47
          },
          end: {
            line: 214,
            column: 48
          }
        },
        loc: {
          start: {
            line: 214,
            column: 60
          },
          end: {
            line: 228,
            column: 9
          }
        },
        line: 214
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 40
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 233
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 234,
            column: 47
          },
          end: {
            line: 234,
            column: 48
          }
        },
        loc: {
          start: {
            line: 234,
            column: 60
          },
          end: {
            line: 249,
            column: 9
          }
        },
        line: 234
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 44
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 254
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 255,
            column: 47
          },
          end: {
            line: 255,
            column: 48
          }
        },
        loc: {
          start: {
            line: 255,
            column: 60
          },
          end: {
            line: 279,
            column: 9
          }
        },
        line: 255
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 263,
            column: 44
          },
          end: {
            line: 263,
            column: 45
          }
        },
        loc: {
          start: {
            line: 263,
            column: 60
          },
          end: {
            line: 273,
            column: 17
          }
        },
        line: 263
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 267,
            column: 60
          },
          end: {
            line: 267,
            column: 61
          }
        },
        loc: {
          start: {
            line: 267,
            column: 68
          },
          end: {
            line: 267,
            column: 121
          }
        },
        line: 267
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 51
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 284
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 285,
            column: 50
          },
          end: {
            line: 285,
            column: 51
          }
        },
        loc: {
          start: {
            line: 285,
            column: 101
          },
          end: {
            line: 302,
            column: 9
          }
        },
        line: 285
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 294,
            column: 51
          },
          end: {
            line: 294,
            column: 52
          }
        },
        loc: {
          start: {
            line: 294,
            column: 58
          },
          end: {
            line: 294,
            column: 68
          }
        },
        line: 294
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 296,
            column: 39
          },
          end: {
            line: 296,
            column: 40
          }
        },
        loc: {
          start: {
            line: 296,
            column: 50
          },
          end: {
            line: 296,
            column: 114
          }
        },
        line: 296
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 5
          }
        },
        loc: {
          start: {
            line: 307,
            column: 53
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 307
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 308,
            column: 47
          },
          end: {
            line: 308,
            column: 48
          }
        },
        loc: {
          start: {
            line: 308,
            column: 60
          },
          end: {
            line: 335,
            column: 9
          }
        },
        line: 308
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 66
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 340
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 341,
            column: 47
          },
          end: {
            line: 341,
            column: 48
          }
        },
        loc: {
          start: {
            line: 341,
            column: 60
          },
          end: {
            line: 377,
            column: 9
          }
        },
        line: 341
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 71
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 382
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 383,
            column: 47
          },
          end: {
            line: 383,
            column: 48
          }
        },
        loc: {
          start: {
            line: 383,
            column: 60
          },
          end: {
            line: 412,
            column: 9
          }
        },
        line: 383
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 417,
            column: 4
          },
          end: {
            line: 417,
            column: 5
          }
        },
        loc: {
          start: {
            line: 417,
            column: 25
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 417
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 418,
            column: 47
          },
          end: {
            line: 418,
            column: 48
          }
        },
        loc: {
          start: {
            line: 418,
            column: 60
          },
          end: {
            line: 447,
            column: 9
          }
        },
        line: 418
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 21,
            column: 75
          },
          end: {
            line: 21,
            column: 90
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 85
          },
          end: {
            line: 21,
            column: 90
          }
        }],
        line: 21
      },
      "6": {
        loc: {
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 31,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 31,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 32
          },
          end: {
            line: 62,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 40
          },
          end: {
            line: 62,
            column: 42
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 44
          },
          end: {
            line: 62,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 53
          },
          end: {
            line: 62,
            column: 54
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 62,
            column: 56
          },
          end: {
            line: 62,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 69
          },
          end: {
            line: 62,
            column: 74
          }
        }],
        line: 62
      },
      "10": {
        loc: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "11": {
        loc: {
          start: {
            line: 91,
            column: 77
          },
          end: {
            line: 91,
            column: 87
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 91,
            column: 85
          },
          end: {
            line: 91,
            column: 87
          }
        }],
        line: 91
      },
      "12": {
        loc: {
          start: {
            line: 91,
            column: 89
          },
          end: {
            line: 91,
            column: 99
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 91,
            column: 98
          },
          end: {
            line: 91,
            column: 99
          }
        }],
        line: 91
      },
      "13": {
        loc: {
          start: {
            line: 113,
            column: 96
          },
          end: {
            line: 113,
            column: 109
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 113,
            column: 103
          },
          end: {
            line: 113,
            column: 109
          }
        }],
        line: 113
      },
      "14": {
        loc: {
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "15": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "16": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 202,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 202,
            column: 17
          }
        }, {
          start: {
            line: 187,
            column: 21
          },
          end: {
            line: 202,
            column: 17
          }
        }],
        line: 172
      },
      "17": {
        loc: {
          start: {
            line: 172,
            column: 20
          },
          end: {
            line: 172,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 20
          },
          end: {
            line: 172,
            column: 30
          }
        }, {
          start: {
            line: 172,
            column: 34
          },
          end: {
            line: 172,
            column: 55
          }
        }],
        line: 172
      },
      "18": {
        loc: {
          start: {
            line: 240,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "19": {
        loc: {
          start: {
            line: 269,
            column: 39
          },
          end: {
            line: 269,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 97
          },
          end: {
            line: 269,
            column: 103
          }
        }, {
          start: {
            line: 269,
            column: 106
          },
          end: {
            line: 269,
            column: 157
          }
        }],
        line: 269
      },
      "20": {
        loc: {
          start: {
            line: 269,
            column: 39
          },
          end: {
            line: 269,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 269,
            column: 39
          },
          end: {
            line: 269,
            column: 77
          }
        }, {
          start: {
            line: 269,
            column: 81
          },
          end: {
            line: 269,
            column: 94
          }
        }],
        line: 269
      },
      "21": {
        loc: {
          start: {
            line: 271,
            column: 41
          },
          end: {
            line: 271,
            column: 169
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 271,
            column: 101
          },
          end: {
            line: 271,
            column: 107
          }
        }, {
          start: {
            line: 271,
            column: 110
          },
          end: {
            line: 271,
            column: 169
          }
        }],
        line: 271
      },
      "22": {
        loc: {
          start: {
            line: 271,
            column: 41
          },
          end: {
            line: 271,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 41
          },
          end: {
            line: 271,
            column: 81
          }
        }, {
          start: {
            line: 271,
            column: 85
          },
          end: {
            line: 271,
            column: 98
          }
        }],
        line: 271
      },
      "23": {
        loc: {
          start: {
            line: 272,
            column: 27
          },
          end: {
            line: 272,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 27
          },
          end: {
            line: 272,
            column: 36
          }
        }, {
          start: {
            line: 272,
            column: 40
          },
          end: {
            line: 272,
            column: 50
          }
        }, {
          start: {
            line: 272,
            column: 54
          },
          end: {
            line: 272,
            column: 66
          }
        }],
        line: 272
      },
      "24": {
        loc: {
          start: {
            line: 285,
            column: 89
          },
          end: {
            line: 285,
            column: 99
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 285,
            column: 97
          },
          end: {
            line: 285,
            column: 99
          }
        }],
        line: 285
      },
      "25": {
        loc: {
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 318,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 318,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "26": {
        loc: {
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 323,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 323,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "27": {
        loc: {
          start: {
            line: 344,
            column: 16
          },
          end: {
            line: 346,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 16
          },
          end: {
            line: 346,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "28": {
        loc: {
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 349,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 349,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "29": {
        loc: {
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 352,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 352,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "30": {
        loc: {
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 355,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 355,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "31": {
        loc: {
          start: {
            line: 358,
            column: 16
          },
          end: {
            line: 360,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 16
          },
          end: {
            line: 360,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      },
      "32": {
        loc: {
          start: {
            line: 386,
            column: 16
          },
          end: {
            line: 388,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 16
          },
          end: {
            line: 388,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "33": {
        loc: {
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 391,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 391,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "34": {
        loc: {
          start: {
            line: 392,
            column: 16
          },
          end: {
            line: 394,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 16
          },
          end: {
            line: 394,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "35": {
        loc: {
          start: {
            line: 395,
            column: 16
          },
          end: {
            line: 397,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 16
          },
          end: {
            line: 397,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "36": {
        loc: {
          start: {
            line: 432,
            column: 20
          },
          end: {
            line: 434,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 20
          },
          end: {
            line: 434,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0, 0],
      "11": [0],
      "12": [0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0],
      "24": [0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\chatService.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\chatService.ts"],
      sourcesContent: ["import { db } from '../utils/firebase';\r\nimport { User } from '../utils/DataTypes';\r\nimport { FieldValue } from 'firebase-admin/firestore';\r\nimport { logger } from '../services/loggerService';\r\n\r\nexport interface Message {\r\n  id: string;\r\n  conversationId: string;\r\n  senderId: string;\r\n  senderName: string;\r\n  content: string;\r\n  type: 'text' | 'image' | 'audio' | 'file';\r\n  timestamp: Date;\r\n  readBy: string[];\r\n  metadata?: {\r\n    fileUrl?: string;\r\n    fileName?: string;\r\n    fileSize?: number;\r\n    duration?: number;\r\n    thumbnail?: string;\r\n  };\r\n}\r\n\r\nexport interface Conversation {\r\n  id: string;\r\n  participants: string[];\r\n  participantNames: Record<string, string>;\r\n  lastMessage?: Message;\r\n  lastActivity: Date;\r\n  isGroup: boolean;\r\n  groupName?: string;\r\n  groupAdmin?: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface ChatFilters {\r\n  userId: string;\r\n  limit?: number;\r\n  offset?: number;\r\n  unreadOnly?: boolean;\r\n}\r\n\r\nexport class ChatService {\r\n  /**\r\n   * Crear una nueva conversaci\xF3n\r\n   */\r\n  async createConversation(\r\n    participants: string[],\r\n    isGroup: boolean = false,\r\n    groupName?: string,\r\n    groupAdmin?: string\r\n  ): Promise<Conversation> {\r\n    try {\r\n      // Obtener nombres de participantes\r\n      const participantNames: Record<string, string> = {};\r\n      for (const participantId of participants) {\r\n        const userDoc = await db.collection('users').doc(participantId).get();\r\n        if (userDoc.exists) {\r\n          const userData = userDoc.data() as User;\r\n          participantNames[participantId] =\r\n            `${userData.name} ${userData.lastName}`;\r\n        }\r\n      }\r\n\r\n      const conversation: Conversation = {\r\n        id: db.collection('conversations').doc().id,\r\n        participants,\r\n        participantNames,\r\n        lastActivity: new Date(),\r\n        isGroup,\r\n        groupName,\r\n        groupAdmin,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      };\r\n\r\n      await db\r\n        .collection('conversations')\r\n        .doc(conversation.id)\r\n        .set(conversation);\r\n\r\n      return conversation;\r\n    } catch (error) {\r\n      logger.error('Error al crear conversaci\xF3n:', error as Error);\r\n      throw new Error('Error al crear conversaci\xF3n');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener conversaciones de un usuario\r\n   */\r\n  async getUserConversations(filters: ChatFilters): Promise<Conversation[]> {\r\n    try {\r\n      const { userId, limit = 20, offset = 0, unreadOnly = false } = filters;\r\n\r\n      const query = db\r\n        .collection('conversations')\r\n        .where('participants', 'array-contains', userId)\r\n        .orderBy('lastActivity', 'desc')\r\n        .limit(limit)\r\n        .offset(offset);\r\n\r\n      const snapshot = await query.get();\r\n      const conversations = snapshot.docs.map(\r\n        doc => doc.data() as Conversation\r\n      );\r\n\r\n      // Filtrar por mensajes no le\xEDdos si se especifica\r\n      if (unreadOnly) {\r\n        const conversationsWithUnread = await Promise.all(\r\n          conversations.map(async conversation => {\r\n            const unreadCount = await this.getUnreadMessageCount(\r\n              conversation.id,\r\n              userId\r\n            );\r\n            return { ...conversation, unreadCount };\r\n          })\r\n        );\r\n        return conversationsWithUnread.filter(conv => conv.unreadCount > 0);\r\n      }\r\n\r\n      return conversations;\r\n    } catch (error) {\r\n      logger.error('Error al obtener conversaciones:', error as Error);\r\n      throw new Error('Error al obtener conversaciones');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener mensajes de una conversaci\xF3n\r\n   */\r\n  async getConversationMessages(\r\n    conversationId: string,\r\n    limit: number = 50,\r\n    offset: number = 0\r\n  ): Promise<Message[]> {\r\n    try {\r\n      const query = db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .collection('messages')\r\n        .orderBy('timestamp', 'desc')\r\n        .limit(limit)\r\n        .offset(offset);\r\n\r\n      const snapshot = await query.get();\r\n      return snapshot.docs.map(doc => doc.data() as Message);\r\n    } catch (error) {\r\n      logger.error('Error al obtener mensajes:', error as Error);\r\n      throw new Error('Error al obtener mensajes');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enviar un mensaje\r\n   */\r\n  async sendMessage(\r\n    conversationId: string,\r\n    senderId: string,\r\n    content: string,\r\n    type: 'text' | 'image' | 'audio' | 'file' = 'text',\r\n    metadata?: any\r\n  ): Promise<Message> {\r\n    try {\r\n      // Verificar que la conversaci\xF3n existe\r\n      const conversationDoc = await db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .get();\r\n      if (!conversationDoc.exists) {\r\n        throw new Error('Conversaci\xF3n no encontrada');\r\n      }\r\n\r\n      // Obtener informaci\xF3n del remitente\r\n      const senderDoc = await db.collection('users').doc(senderId).get();\r\n      if (!senderDoc.exists) {\r\n        throw new Error('Usuario remitente no encontrado');\r\n      }\r\n\r\n      const senderData = senderDoc.data() as User;\r\n      const senderName = `${senderData.name} ${senderData.lastName}`;\r\n\r\n      const message: Message = {\r\n        id: db\r\n          .collection('conversations')\r\n          .doc(conversationId)\r\n          .collection('messages')\r\n          .doc().id,\r\n        conversationId,\r\n        senderId,\r\n        senderName,\r\n        content,\r\n        type,\r\n        timestamp: new Date(),\r\n        readBy: [senderId], // El remitente ya ley\xF3 el mensaje\r\n        metadata,\r\n      };\r\n\r\n      // Guardar el mensaje\r\n      await db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .collection('messages')\r\n        .doc(message.id)\r\n        .set(message);\r\n\r\n      // Actualizar la conversaci\xF3n con el \xFAltimo mensaje\r\n      await db.collection('conversations').doc(conversationId).update({\r\n        lastMessage: message,\r\n        lastActivity: new Date(),\r\n        updatedAt: new Date(),\r\n      });\r\n\r\n      return message;\r\n    } catch (error) {\r\n      logger.error('Error al enviar mensaje:', error as Error);\r\n      throw new Error('Error al enviar mensaje');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marcar mensajes como le\xEDdos\r\n   */\r\n  async markMessagesAsRead(\r\n    conversationId: string,\r\n    userId: string,\r\n    messageIds?: string[]\r\n  ): Promise<void> {\r\n    try {\r\n      if (messageIds && messageIds.length > 0) {\r\n        // Marcar mensajes espec\xEDficos como le\xEDdos\r\n        const batch = db.batch();\r\n\r\n        for (const messageId of messageIds) {\r\n          const messageRef = db\r\n            .collection('conversations')\r\n            .doc(conversationId)\r\n            .collection('messages')\r\n            .doc(messageId);\r\n\r\n          batch.update(messageRef, {\r\n            readBy: FieldValue.arrayUnion(userId),\r\n          });\r\n        }\r\n\r\n        await batch.commit();\r\n      } else {\r\n        // Marcar todos los mensajes no le\xEDdos como le\xEDdos\r\n        const messagesQuery = db\r\n          .collection('conversations')\r\n          .doc(conversationId)\r\n          .collection('messages')\r\n          .where('readBy', 'not-in', [[userId]]);\r\n\r\n        const snapshot = await messagesQuery.get();\r\n        const batch = db.batch();\r\n\r\n        snapshot.docs.forEach(doc => {\r\n          batch.update(doc.ref, {\r\n            readBy: FieldValue.arrayUnion(userId),\r\n          });\r\n        });\r\n\r\n        await batch.commit();\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error al marcar mensajes como le\xEDdos:', error as Error);\r\n      throw new Error('Error al marcar mensajes como le\xEDdos');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener n\xFAmero de mensajes no le\xEDdos\r\n   */\r\n  async getUnreadMessageCount(\r\n    conversationId: string,\r\n    userId: string\r\n  ): Promise<number> {\r\n    try {\r\n      const query = db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .collection('messages')\r\n        .where('readBy', 'not-in', [[userId]]);\r\n\r\n      const snapshot = await query.get();\r\n      return snapshot.size;\r\n    } catch (error) {\r\n      logger.error('Error al obtener conteo de mensajes no le\xEDdos:', error as Error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener conversaci\xF3n por ID\r\n   */\r\n  async getConversationById(\r\n    conversationId: string\r\n  ): Promise<Conversation | null> {\r\n    try {\r\n      const doc = await db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .get();\r\n      if (doc.exists) {\r\n        return doc.data() as Conversation;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      logger.error('Error al obtener conversaci\xF3n:', error as Error);\r\n      throw new Error('Error al obtener conversaci\xF3n');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Buscar conversaciones\r\n   */\r\n  async searchConversations(\r\n    userId: string,\r\n    searchTerm: string\r\n  ): Promise<Conversation[]> {\r\n    try {\r\n      // Obtener todas las conversaciones del usuario\r\n      const conversations = await this.getUserConversations({\r\n        userId,\r\n        limit: 100,\r\n      });\r\n\r\n      // Filtrar por t\xE9rmino de b\xFAsqueda\r\n      return conversations.filter(conversation => {\r\n        // Buscar en nombres de participantes\r\n        const participantNames = Object.values(conversation.participantNames);\r\n        const nameMatch = participantNames.some(name =>\r\n          name.toLowerCase().includes(searchTerm.toLowerCase())\r\n        );\r\n\r\n        // Buscar en nombre del grupo\r\n        const groupMatch = conversation.groupName\r\n          ?.toLowerCase()\r\n          .includes(searchTerm.toLowerCase());\r\n\r\n        // Buscar en \xFAltimo mensaje\r\n        const messageMatch = conversation.lastMessage?.content\r\n          .toLowerCase()\r\n          .includes(searchTerm.toLowerCase());\r\n\r\n        return nameMatch || groupMatch || messageMatch;\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error al buscar conversaciones:', error as Error);\r\n      throw new Error('Error al buscar conversaciones');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Buscar mensajes\r\n   */\r\n  async searchMessages(\r\n    conversationId: string,\r\n    searchTerm: string,\r\n    limit: number = 20\r\n  ): Promise<Message[]> {\r\n    try {\r\n      const query = db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .collection('messages')\r\n        .orderBy('timestamp', 'desc')\r\n        .limit(limit);\r\n\r\n      const snapshot = await query.get();\r\n      const messages = snapshot.docs.map(doc => doc.data() as Message);\r\n\r\n      // Filtrar por t\xE9rmino de b\xFAsqueda\r\n      return messages.filter(message =>\r\n        message.content.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    } catch (error) {\r\n      logger.error('Error al buscar mensajes:', error as Error);\r\n      throw new Error('Error al buscar mensajes');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Eliminar mensaje\r\n   */\r\n  async deleteMessage(\r\n    conversationId: string,\r\n    messageId: string,\r\n    userId: string\r\n  ): Promise<void> {\r\n    try {\r\n      const messageDoc = await db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .collection('messages')\r\n        .doc(messageId)\r\n        .get();\r\n\r\n      if (!messageDoc.exists) {\r\n        throw new Error('Mensaje no encontrado');\r\n      }\r\n\r\n      const message = messageDoc.data() as Message;\r\n\r\n      // Solo el remitente puede eliminar el mensaje\r\n      if (message.senderId !== userId) {\r\n        throw new Error('No autorizado para eliminar este mensaje');\r\n      }\r\n\r\n      await db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .collection('messages')\r\n        .doc(messageId)\r\n        .delete();\r\n    } catch (error) {\r\n      logger.error('Error al eliminar mensaje:', error as Error);\r\n      throw new Error('Error al eliminar mensaje');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Agregar participante a conversaci\xF3n grupal\r\n   */\r\n  async addParticipantToGroup(\r\n    conversationId: string,\r\n    participantId: string,\r\n    adminId: string\r\n  ): Promise<void> {\r\n    try {\r\n      const conversation = await this.getConversationById(conversationId);\r\n      if (!conversation) {\r\n        throw new Error('Conversaci\xF3n no encontrada');\r\n      }\r\n\r\n      if (!conversation.isGroup) {\r\n        throw new Error(\r\n          'Solo se pueden agregar participantes a conversaciones grupales'\r\n        );\r\n      }\r\n\r\n      if (conversation.groupAdmin !== adminId) {\r\n        throw new Error(\r\n          'Solo el administrador del grupo puede agregar participantes'\r\n        );\r\n      }\r\n\r\n      if (conversation.participants.includes(participantId)) {\r\n        throw new Error('El participante ya est\xE1 en la conversaci\xF3n');\r\n      }\r\n\r\n      // Obtener nombre del nuevo participante\r\n      const userDoc = await db.collection('users').doc(participantId).get();\r\n      if (!userDoc.exists) {\r\n        throw new Error('Usuario no encontrado');\r\n      }\r\n\r\n      const userData = userDoc.data() as User;\r\n      const participantName = `${userData.name} ${userData.lastName}`;\r\n\r\n      // Actualizar conversaci\xF3n\r\n      await db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .update({\r\n          participants: FieldValue.arrayUnion(participantId),\r\n          [`participantNames.${participantId}`]: participantName,\r\n          updatedAt: new Date(),\r\n        });\r\n    } catch (error) {\r\n      logger.error('Error al agregar participante:', error as Error);\r\n      throw new Error('Error al agregar participante');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remover participante de conversaci\xF3n grupal\r\n   */\r\n  async removeParticipantFromGroup(\r\n    conversationId: string,\r\n    participantId: string,\r\n    adminId: string\r\n  ): Promise<void> {\r\n    try {\r\n      const conversation = await this.getConversationById(conversationId);\r\n      if (!conversation) {\r\n        throw new Error('Conversaci\xF3n no encontrada');\r\n      }\r\n\r\n      if (!conversation.isGroup) {\r\n        throw new Error(\r\n          'Solo se pueden remover participantes de conversaciones grupales'\r\n        );\r\n      }\r\n\r\n      if (conversation.groupAdmin !== adminId) {\r\n        throw new Error(\r\n          'Solo el administrador del grupo puede remover participantes'\r\n        );\r\n      }\r\n\r\n      if (!conversation.participants.includes(participantId)) {\r\n        throw new Error('El participante no est\xE1 en la conversaci\xF3n');\r\n      }\r\n\r\n      // Actualizar conversaci\xF3n\r\n      await db\r\n        .collection('conversations')\r\n        .doc(conversationId)\r\n        .update({\r\n          participants: FieldValue.arrayRemove(participantId),\r\n          [`participantNames.${participantId}`]: FieldValue.delete(),\r\n          updatedAt: new Date(),\r\n        });\r\n    } catch (error) {\r\n      logger.error('Error al remover participante:', error as Error);\r\n      throw new Error('Error al remover participante');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener estad\xEDsticas de chat\r\n   */\r\n  async getChatStats(userId: string): Promise<{\r\n    totalConversations: number;\r\n    totalMessages: number;\r\n    unreadMessages: number;\r\n    activeConversations: number;\r\n  }> {\r\n    try {\r\n      const conversations = await this.getUserConversations({\r\n        userId,\r\n        limit: 100,\r\n      });\r\n\r\n      let totalMessages = 0;\r\n      let unreadMessages = 0;\r\n      let activeConversations = 0;\r\n\r\n      for (const conversation of conversations) {\r\n        const messageCount = await this.getConversationMessages(\r\n          conversation.id,\r\n          1000\r\n        );\r\n        totalMessages += messageCount.length;\r\n\r\n        const unreadCount = await this.getUnreadMessageCount(\r\n          conversation.id,\r\n          userId\r\n        );\r\n        unreadMessages += unreadCount;\r\n\r\n        if (unreadCount > 0) {\r\n          activeConversations++;\r\n        }\r\n      }\r\n\r\n      return {\r\n        totalConversations: conversations.length,\r\n        totalMessages,\r\n        unreadMessages,\r\n        activeConversations,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error al obtener estad\xEDsticas de chat:', error as Error);\r\n      throw new Error('Error al obtener estad\xEDsticas de chat');\r\n    }\r\n  }\r\n}\r\n\r\nexport const chatService = new ChatService();\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9df798bd24edb1a83bbc4828a753ec75e9410168"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25axm88b54 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25axm88b54();
var __awaiter =
/* istanbul ignore next */
(cov_25axm88b54().s[0]++,
/* istanbul ignore next */
(cov_25axm88b54().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_25axm88b54().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_25axm88b54().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_25axm88b54().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_25axm88b54().f[1]++;
    cov_25axm88b54().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_25axm88b54().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_25axm88b54().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_25axm88b54().f[2]++;
      cov_25axm88b54().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_25axm88b54().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_25axm88b54().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_25axm88b54().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_25axm88b54().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_25axm88b54().f[4]++;
      cov_25axm88b54().s[4]++;
      try {
        /* istanbul ignore next */
        cov_25axm88b54().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_25axm88b54().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_25axm88b54().f[5]++;
      cov_25axm88b54().s[7]++;
      try {
        /* istanbul ignore next */
        cov_25axm88b54().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_25axm88b54().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_25axm88b54().f[6]++;
      cov_25axm88b54().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_25axm88b54().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_25axm88b54().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_25axm88b54().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_25axm88b54().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_25axm88b54().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_25axm88b54().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_25axm88b54().s[13]++;
exports.chatService = exports.ChatService = void 0;
const firebase_1 =
/* istanbul ignore next */
(cov_25axm88b54().s[14]++, require("../utils/firebase"));
const firestore_1 =
/* istanbul ignore next */
(cov_25axm88b54().s[15]++, require("firebase-admin/firestore"));
const loggerService_1 =
/* istanbul ignore next */
(cov_25axm88b54().s[16]++, require("../services/loggerService"));
class ChatService {
  /**
   * Crear una nueva conversación
   */
  createConversation(participants_1) {
    /* istanbul ignore next */
    cov_25axm88b54().f[7]++;
    cov_25axm88b54().s[17]++;
    return __awaiter(this, arguments, void 0, function* (participants, isGroup =
    /* istanbul ignore next */
    (cov_25axm88b54().b[5][0]++, false), groupName, groupAdmin) {
      /* istanbul ignore next */
      cov_25axm88b54().f[8]++;
      cov_25axm88b54().s[18]++;
      try {
        // Obtener nombres de participantes
        const participantNames =
        /* istanbul ignore next */
        (cov_25axm88b54().s[19]++, {});
        /* istanbul ignore next */
        cov_25axm88b54().s[20]++;
        for (const participantId of participants) {
          const userDoc =
          /* istanbul ignore next */
          (cov_25axm88b54().s[21]++, yield firebase_1.db.collection('users').doc(participantId).get());
          /* istanbul ignore next */
          cov_25axm88b54().s[22]++;
          if (userDoc.exists) {
            /* istanbul ignore next */
            cov_25axm88b54().b[6][0]++;
            const userData =
            /* istanbul ignore next */
            (cov_25axm88b54().s[23]++, userDoc.data());
            /* istanbul ignore next */
            cov_25axm88b54().s[24]++;
            participantNames[participantId] = `${userData.name} ${userData.lastName}`;
          } else
          /* istanbul ignore next */
          {
            cov_25axm88b54().b[6][1]++;
          }
        }
        const conversation =
        /* istanbul ignore next */
        (cov_25axm88b54().s[25]++, {
          id: firebase_1.db.collection('conversations').doc().id,
          participants,
          participantNames,
          lastActivity: new Date(),
          isGroup,
          groupName,
          groupAdmin,
          createdAt: new Date(),
          updatedAt: new Date()
        });
        /* istanbul ignore next */
        cov_25axm88b54().s[26]++;
        yield firebase_1.db.collection('conversations').doc(conversation.id).set(conversation);
        /* istanbul ignore next */
        cov_25axm88b54().s[27]++;
        return conversation;
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[28]++;
        loggerService_1.logger.error('Error al crear conversación:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[29]++;
        throw new Error('Error al crear conversación');
      }
    });
  }
  /**
   * Obtener conversaciones de un usuario
   */
  getUserConversations(filters) {
    /* istanbul ignore next */
    cov_25axm88b54().f[9]++;
    cov_25axm88b54().s[30]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_25axm88b54().f[10]++;
      cov_25axm88b54().s[31]++;
      try {
        const {
          userId,
          limit =
          /* istanbul ignore next */
          (cov_25axm88b54().b[7][0]++, 20),
          offset =
          /* istanbul ignore next */
          (cov_25axm88b54().b[8][0]++, 0),
          unreadOnly =
          /* istanbul ignore next */
          (cov_25axm88b54().b[9][0]++, false)
        } =
        /* istanbul ignore next */
        (cov_25axm88b54().s[32]++, filters);
        const query =
        /* istanbul ignore next */
        (cov_25axm88b54().s[33]++, firebase_1.db.collection('conversations').where('participants', 'array-contains', userId).orderBy('lastActivity', 'desc').limit(limit).offset(offset));
        const snapshot =
        /* istanbul ignore next */
        (cov_25axm88b54().s[34]++, yield query.get());
        const conversations =
        /* istanbul ignore next */
        (cov_25axm88b54().s[35]++, snapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_25axm88b54().f[11]++;
          cov_25axm88b54().s[36]++;
          return doc.data();
        }));
        // Filtrar por mensajes no leídos si se especifica
        /* istanbul ignore next */
        cov_25axm88b54().s[37]++;
        if (unreadOnly) {
          /* istanbul ignore next */
          cov_25axm88b54().b[10][0]++;
          const conversationsWithUnread =
          /* istanbul ignore next */
          (cov_25axm88b54().s[38]++, yield Promise.all(conversations.map(conversation => {
            /* istanbul ignore next */
            cov_25axm88b54().f[12]++;
            cov_25axm88b54().s[39]++;
            return __awaiter(this, void 0, void 0, function* () {
              /* istanbul ignore next */
              cov_25axm88b54().f[13]++;
              const unreadCount =
              /* istanbul ignore next */
              (cov_25axm88b54().s[40]++, yield this.getUnreadMessageCount(conversation.id, userId));
              /* istanbul ignore next */
              cov_25axm88b54().s[41]++;
              return Object.assign(Object.assign({}, conversation), {
                unreadCount
              });
            });
          })));
          /* istanbul ignore next */
          cov_25axm88b54().s[42]++;
          return conversationsWithUnread.filter(conv => {
            /* istanbul ignore next */
            cov_25axm88b54().f[14]++;
            cov_25axm88b54().s[43]++;
            return conv.unreadCount > 0;
          });
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[10][1]++;
        }
        cov_25axm88b54().s[44]++;
        return conversations;
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[45]++;
        loggerService_1.logger.error('Error al obtener conversaciones:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[46]++;
        throw new Error('Error al obtener conversaciones');
      }
    });
  }
  /**
   * Obtener mensajes de una conversación
   */
  getConversationMessages(conversationId_1) {
    /* istanbul ignore next */
    cov_25axm88b54().f[15]++;
    cov_25axm88b54().s[47]++;
    return __awaiter(this, arguments, void 0, function* (conversationId, limit =
    /* istanbul ignore next */
    (cov_25axm88b54().b[11][0]++, 50), offset =
    /* istanbul ignore next */
    (cov_25axm88b54().b[12][0]++, 0)) {
      /* istanbul ignore next */
      cov_25axm88b54().f[16]++;
      cov_25axm88b54().s[48]++;
      try {
        const query =
        /* istanbul ignore next */
        (cov_25axm88b54().s[49]++, firebase_1.db.collection('conversations').doc(conversationId).collection('messages').orderBy('timestamp', 'desc').limit(limit).offset(offset));
        const snapshot =
        /* istanbul ignore next */
        (cov_25axm88b54().s[50]++, yield query.get());
        /* istanbul ignore next */
        cov_25axm88b54().s[51]++;
        return snapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_25axm88b54().f[17]++;
          cov_25axm88b54().s[52]++;
          return doc.data();
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[53]++;
        loggerService_1.logger.error('Error al obtener mensajes:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[54]++;
        throw new Error('Error al obtener mensajes');
      }
    });
  }
  /**
   * Enviar un mensaje
   */
  sendMessage(conversationId_1, senderId_1, content_1) {
    /* istanbul ignore next */
    cov_25axm88b54().f[18]++;
    cov_25axm88b54().s[55]++;
    return __awaiter(this, arguments, void 0, function* (conversationId, senderId, content, type =
    /* istanbul ignore next */
    (cov_25axm88b54().b[13][0]++, 'text'), metadata) {
      /* istanbul ignore next */
      cov_25axm88b54().f[19]++;
      cov_25axm88b54().s[56]++;
      try {
        // Verificar que la conversación existe
        const conversationDoc =
        /* istanbul ignore next */
        (cov_25axm88b54().s[57]++, yield firebase_1.db.collection('conversations').doc(conversationId).get());
        /* istanbul ignore next */
        cov_25axm88b54().s[58]++;
        if (!conversationDoc.exists) {
          /* istanbul ignore next */
          cov_25axm88b54().b[14][0]++;
          cov_25axm88b54().s[59]++;
          throw new Error('Conversación no encontrada');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[14][1]++;
        }
        // Obtener información del remitente
        const senderDoc =
        /* istanbul ignore next */
        (cov_25axm88b54().s[60]++, yield firebase_1.db.collection('users').doc(senderId).get());
        /* istanbul ignore next */
        cov_25axm88b54().s[61]++;
        if (!senderDoc.exists) {
          /* istanbul ignore next */
          cov_25axm88b54().b[15][0]++;
          cov_25axm88b54().s[62]++;
          throw new Error('Usuario remitente no encontrado');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[15][1]++;
        }
        const senderData =
        /* istanbul ignore next */
        (cov_25axm88b54().s[63]++, senderDoc.data());
        const senderName =
        /* istanbul ignore next */
        (cov_25axm88b54().s[64]++, `${senderData.name} ${senderData.lastName}`);
        const message =
        /* istanbul ignore next */
        (cov_25axm88b54().s[65]++, {
          id: firebase_1.db.collection('conversations').doc(conversationId).collection('messages').doc().id,
          conversationId,
          senderId,
          senderName,
          content,
          type,
          timestamp: new Date(),
          readBy: [senderId],
          // El remitente ya leyó el mensaje
          metadata
        });
        // Guardar el mensaje
        /* istanbul ignore next */
        cov_25axm88b54().s[66]++;
        yield firebase_1.db.collection('conversations').doc(conversationId).collection('messages').doc(message.id).set(message);
        // Actualizar la conversación con el último mensaje
        /* istanbul ignore next */
        cov_25axm88b54().s[67]++;
        yield firebase_1.db.collection('conversations').doc(conversationId).update({
          lastMessage: message,
          lastActivity: new Date(),
          updatedAt: new Date()
        });
        /* istanbul ignore next */
        cov_25axm88b54().s[68]++;
        return message;
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[69]++;
        loggerService_1.logger.error('Error al enviar mensaje:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[70]++;
        throw new Error('Error al enviar mensaje');
      }
    });
  }
  /**
   * Marcar mensajes como leídos
   */
  markMessagesAsRead(conversationId, userId, messageIds) {
    /* istanbul ignore next */
    cov_25axm88b54().f[20]++;
    cov_25axm88b54().s[71]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_25axm88b54().f[21]++;
      cov_25axm88b54().s[72]++;
      try {
        /* istanbul ignore next */
        cov_25axm88b54().s[73]++;
        if (
        /* istanbul ignore next */
        (cov_25axm88b54().b[17][0]++, messageIds) &&
        /* istanbul ignore next */
        (cov_25axm88b54().b[17][1]++, messageIds.length > 0)) {
          /* istanbul ignore next */
          cov_25axm88b54().b[16][0]++;
          // Marcar mensajes específicos como leídos
          const batch =
          /* istanbul ignore next */
          (cov_25axm88b54().s[74]++, firebase_1.db.batch());
          /* istanbul ignore next */
          cov_25axm88b54().s[75]++;
          for (const messageId of messageIds) {
            const messageRef =
            /* istanbul ignore next */
            (cov_25axm88b54().s[76]++, firebase_1.db.collection('conversations').doc(conversationId).collection('messages').doc(messageId));
            /* istanbul ignore next */
            cov_25axm88b54().s[77]++;
            batch.update(messageRef, {
              readBy: firestore_1.FieldValue.arrayUnion(userId)
            });
          }
          /* istanbul ignore next */
          cov_25axm88b54().s[78]++;
          yield batch.commit();
        } else {
          /* istanbul ignore next */
          cov_25axm88b54().b[16][1]++;
          // Marcar todos los mensajes no leídos como leídos
          const messagesQuery =
          /* istanbul ignore next */
          (cov_25axm88b54().s[79]++, firebase_1.db.collection('conversations').doc(conversationId).collection('messages').where('readBy', 'not-in', [[userId]]));
          const snapshot =
          /* istanbul ignore next */
          (cov_25axm88b54().s[80]++, yield messagesQuery.get());
          const batch =
          /* istanbul ignore next */
          (cov_25axm88b54().s[81]++, firebase_1.db.batch());
          /* istanbul ignore next */
          cov_25axm88b54().s[82]++;
          snapshot.docs.forEach(doc => {
            /* istanbul ignore next */
            cov_25axm88b54().f[22]++;
            cov_25axm88b54().s[83]++;
            batch.update(doc.ref, {
              readBy: firestore_1.FieldValue.arrayUnion(userId)
            });
          });
          /* istanbul ignore next */
          cov_25axm88b54().s[84]++;
          yield batch.commit();
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[85]++;
        loggerService_1.logger.error('Error al marcar mensajes como leídos:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[86]++;
        throw new Error('Error al marcar mensajes como leídos');
      }
    });
  }
  /**
   * Obtener número de mensajes no leídos
   */
  getUnreadMessageCount(conversationId, userId) {
    /* istanbul ignore next */
    cov_25axm88b54().f[23]++;
    cov_25axm88b54().s[87]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_25axm88b54().f[24]++;
      cov_25axm88b54().s[88]++;
      try {
        const query =
        /* istanbul ignore next */
        (cov_25axm88b54().s[89]++, firebase_1.db.collection('conversations').doc(conversationId).collection('messages').where('readBy', 'not-in', [[userId]]));
        const snapshot =
        /* istanbul ignore next */
        (cov_25axm88b54().s[90]++, yield query.get());
        /* istanbul ignore next */
        cov_25axm88b54().s[91]++;
        return snapshot.size;
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[92]++;
        loggerService_1.logger.error('Error al obtener conteo de mensajes no leídos:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[93]++;
        return 0;
      }
    });
  }
  /**
   * Obtener conversación por ID
   */
  getConversationById(conversationId) {
    /* istanbul ignore next */
    cov_25axm88b54().f[25]++;
    cov_25axm88b54().s[94]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_25axm88b54().f[26]++;
      cov_25axm88b54().s[95]++;
      try {
        const doc =
        /* istanbul ignore next */
        (cov_25axm88b54().s[96]++, yield firebase_1.db.collection('conversations').doc(conversationId).get());
        /* istanbul ignore next */
        cov_25axm88b54().s[97]++;
        if (doc.exists) {
          /* istanbul ignore next */
          cov_25axm88b54().b[18][0]++;
          cov_25axm88b54().s[98]++;
          return doc.data();
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[18][1]++;
        }
        cov_25axm88b54().s[99]++;
        return null;
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[100]++;
        loggerService_1.logger.error('Error al obtener conversación:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[101]++;
        throw new Error('Error al obtener conversación');
      }
    });
  }
  /**
   * Buscar conversaciones
   */
  searchConversations(userId, searchTerm) {
    /* istanbul ignore next */
    cov_25axm88b54().f[27]++;
    cov_25axm88b54().s[102]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_25axm88b54().f[28]++;
      cov_25axm88b54().s[103]++;
      try {
        // Obtener todas las conversaciones del usuario
        const conversations =
        /* istanbul ignore next */
        (cov_25axm88b54().s[104]++, yield this.getUserConversations({
          userId,
          limit: 100
        }));
        // Filtrar por término de búsqueda
        /* istanbul ignore next */
        cov_25axm88b54().s[105]++;
        return conversations.filter(conversation => {
          /* istanbul ignore next */
          cov_25axm88b54().f[29]++;
          var _a, _b;
          // Buscar en nombres de participantes
          const participantNames =
          /* istanbul ignore next */
          (cov_25axm88b54().s[106]++, Object.values(conversation.participantNames));
          const nameMatch =
          /* istanbul ignore next */
          (cov_25axm88b54().s[107]++, participantNames.some(name => {
            /* istanbul ignore next */
            cov_25axm88b54().f[30]++;
            cov_25axm88b54().s[108]++;
            return name.toLowerCase().includes(searchTerm.toLowerCase());
          }));
          // Buscar en nombre del grupo
          const groupMatch =
          /* istanbul ignore next */
          (cov_25axm88b54().s[109]++,
          /* istanbul ignore next */
          (cov_25axm88b54().b[20][0]++, (_a = conversation.groupName) === null) ||
          /* istanbul ignore next */
          (cov_25axm88b54().b[20][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_25axm88b54().b[19][0]++, void 0) :
          /* istanbul ignore next */
          (cov_25axm88b54().b[19][1]++, _a.toLowerCase().includes(searchTerm.toLowerCase())));
          // Buscar en último mensaje
          const messageMatch =
          /* istanbul ignore next */
          (cov_25axm88b54().s[110]++,
          /* istanbul ignore next */
          (cov_25axm88b54().b[22][0]++, (_b = conversation.lastMessage) === null) ||
          /* istanbul ignore next */
          (cov_25axm88b54().b[22][1]++, _b === void 0) ?
          /* istanbul ignore next */
          (cov_25axm88b54().b[21][0]++, void 0) :
          /* istanbul ignore next */
          (cov_25axm88b54().b[21][1]++, _b.content.toLowerCase().includes(searchTerm.toLowerCase())));
          /* istanbul ignore next */
          cov_25axm88b54().s[111]++;
          return /* istanbul ignore next */(cov_25axm88b54().b[23][0]++, nameMatch) ||
          /* istanbul ignore next */
          (cov_25axm88b54().b[23][1]++, groupMatch) ||
          /* istanbul ignore next */
          (cov_25axm88b54().b[23][2]++, messageMatch);
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[112]++;
        loggerService_1.logger.error('Error al buscar conversaciones:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[113]++;
        throw new Error('Error al buscar conversaciones');
      }
    });
  }
  /**
   * Buscar mensajes
   */
  searchMessages(conversationId_1, searchTerm_1) {
    /* istanbul ignore next */
    cov_25axm88b54().f[31]++;
    cov_25axm88b54().s[114]++;
    return __awaiter(this, arguments, void 0, function* (conversationId, searchTerm, limit =
    /* istanbul ignore next */
    (cov_25axm88b54().b[24][0]++, 20)) {
      /* istanbul ignore next */
      cov_25axm88b54().f[32]++;
      cov_25axm88b54().s[115]++;
      try {
        const query =
        /* istanbul ignore next */
        (cov_25axm88b54().s[116]++, firebase_1.db.collection('conversations').doc(conversationId).collection('messages').orderBy('timestamp', 'desc').limit(limit));
        const snapshot =
        /* istanbul ignore next */
        (cov_25axm88b54().s[117]++, yield query.get());
        const messages =
        /* istanbul ignore next */
        (cov_25axm88b54().s[118]++, snapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_25axm88b54().f[33]++;
          cov_25axm88b54().s[119]++;
          return doc.data();
        }));
        // Filtrar por término de búsqueda
        /* istanbul ignore next */
        cov_25axm88b54().s[120]++;
        return messages.filter(message => {
          /* istanbul ignore next */
          cov_25axm88b54().f[34]++;
          cov_25axm88b54().s[121]++;
          return message.content.toLowerCase().includes(searchTerm.toLowerCase());
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[122]++;
        loggerService_1.logger.error('Error al buscar mensajes:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[123]++;
        throw new Error('Error al buscar mensajes');
      }
    });
  }
  /**
   * Eliminar mensaje
   */
  deleteMessage(conversationId, messageId, userId) {
    /* istanbul ignore next */
    cov_25axm88b54().f[35]++;
    cov_25axm88b54().s[124]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_25axm88b54().f[36]++;
      cov_25axm88b54().s[125]++;
      try {
        const messageDoc =
        /* istanbul ignore next */
        (cov_25axm88b54().s[126]++, yield firebase_1.db.collection('conversations').doc(conversationId).collection('messages').doc(messageId).get());
        /* istanbul ignore next */
        cov_25axm88b54().s[127]++;
        if (!messageDoc.exists) {
          /* istanbul ignore next */
          cov_25axm88b54().b[25][0]++;
          cov_25axm88b54().s[128]++;
          throw new Error('Mensaje no encontrado');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[25][1]++;
        }
        const message =
        /* istanbul ignore next */
        (cov_25axm88b54().s[129]++, messageDoc.data());
        // Solo el remitente puede eliminar el mensaje
        /* istanbul ignore next */
        cov_25axm88b54().s[130]++;
        if (message.senderId !== userId) {
          /* istanbul ignore next */
          cov_25axm88b54().b[26][0]++;
          cov_25axm88b54().s[131]++;
          throw new Error('No autorizado para eliminar este mensaje');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[26][1]++;
        }
        cov_25axm88b54().s[132]++;
        yield firebase_1.db.collection('conversations').doc(conversationId).collection('messages').doc(messageId).delete();
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[133]++;
        loggerService_1.logger.error('Error al eliminar mensaje:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[134]++;
        throw new Error('Error al eliminar mensaje');
      }
    });
  }
  /**
   * Agregar participante a conversación grupal
   */
  addParticipantToGroup(conversationId, participantId, adminId) {
    /* istanbul ignore next */
    cov_25axm88b54().f[37]++;
    cov_25axm88b54().s[135]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_25axm88b54().f[38]++;
      cov_25axm88b54().s[136]++;
      try {
        const conversation =
        /* istanbul ignore next */
        (cov_25axm88b54().s[137]++, yield this.getConversationById(conversationId));
        /* istanbul ignore next */
        cov_25axm88b54().s[138]++;
        if (!conversation) {
          /* istanbul ignore next */
          cov_25axm88b54().b[27][0]++;
          cov_25axm88b54().s[139]++;
          throw new Error('Conversación no encontrada');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[27][1]++;
        }
        cov_25axm88b54().s[140]++;
        if (!conversation.isGroup) {
          /* istanbul ignore next */
          cov_25axm88b54().b[28][0]++;
          cov_25axm88b54().s[141]++;
          throw new Error('Solo se pueden agregar participantes a conversaciones grupales');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[28][1]++;
        }
        cov_25axm88b54().s[142]++;
        if (conversation.groupAdmin !== adminId) {
          /* istanbul ignore next */
          cov_25axm88b54().b[29][0]++;
          cov_25axm88b54().s[143]++;
          throw new Error('Solo el administrador del grupo puede agregar participantes');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[29][1]++;
        }
        cov_25axm88b54().s[144]++;
        if (conversation.participants.includes(participantId)) {
          /* istanbul ignore next */
          cov_25axm88b54().b[30][0]++;
          cov_25axm88b54().s[145]++;
          throw new Error('El participante ya está en la conversación');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[30][1]++;
        }
        // Obtener nombre del nuevo participante
        const userDoc =
        /* istanbul ignore next */
        (cov_25axm88b54().s[146]++, yield firebase_1.db.collection('users').doc(participantId).get());
        /* istanbul ignore next */
        cov_25axm88b54().s[147]++;
        if (!userDoc.exists) {
          /* istanbul ignore next */
          cov_25axm88b54().b[31][0]++;
          cov_25axm88b54().s[148]++;
          throw new Error('Usuario no encontrado');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[31][1]++;
        }
        const userData =
        /* istanbul ignore next */
        (cov_25axm88b54().s[149]++, userDoc.data());
        const participantName =
        /* istanbul ignore next */
        (cov_25axm88b54().s[150]++, `${userData.name} ${userData.lastName}`);
        // Actualizar conversación
        /* istanbul ignore next */
        cov_25axm88b54().s[151]++;
        yield firebase_1.db.collection('conversations').doc(conversationId).update({
          participants: firestore_1.FieldValue.arrayUnion(participantId),
          [`participantNames.${participantId}`]: participantName,
          updatedAt: new Date()
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[152]++;
        loggerService_1.logger.error('Error al agregar participante:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[153]++;
        throw new Error('Error al agregar participante');
      }
    });
  }
  /**
   * Remover participante de conversación grupal
   */
  removeParticipantFromGroup(conversationId, participantId, adminId) {
    /* istanbul ignore next */
    cov_25axm88b54().f[39]++;
    cov_25axm88b54().s[154]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_25axm88b54().f[40]++;
      cov_25axm88b54().s[155]++;
      try {
        const conversation =
        /* istanbul ignore next */
        (cov_25axm88b54().s[156]++, yield this.getConversationById(conversationId));
        /* istanbul ignore next */
        cov_25axm88b54().s[157]++;
        if (!conversation) {
          /* istanbul ignore next */
          cov_25axm88b54().b[32][0]++;
          cov_25axm88b54().s[158]++;
          throw new Error('Conversación no encontrada');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[32][1]++;
        }
        cov_25axm88b54().s[159]++;
        if (!conversation.isGroup) {
          /* istanbul ignore next */
          cov_25axm88b54().b[33][0]++;
          cov_25axm88b54().s[160]++;
          throw new Error('Solo se pueden remover participantes de conversaciones grupales');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[33][1]++;
        }
        cov_25axm88b54().s[161]++;
        if (conversation.groupAdmin !== adminId) {
          /* istanbul ignore next */
          cov_25axm88b54().b[34][0]++;
          cov_25axm88b54().s[162]++;
          throw new Error('Solo el administrador del grupo puede remover participantes');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[34][1]++;
        }
        cov_25axm88b54().s[163]++;
        if (!conversation.participants.includes(participantId)) {
          /* istanbul ignore next */
          cov_25axm88b54().b[35][0]++;
          cov_25axm88b54().s[164]++;
          throw new Error('El participante no está en la conversación');
        } else
        /* istanbul ignore next */
        {
          cov_25axm88b54().b[35][1]++;
        }
        // Actualizar conversación
        cov_25axm88b54().s[165]++;
        yield firebase_1.db.collection('conversations').doc(conversationId).update({
          participants: firestore_1.FieldValue.arrayRemove(participantId),
          [`participantNames.${participantId}`]: firestore_1.FieldValue.delete(),
          updatedAt: new Date()
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[166]++;
        loggerService_1.logger.error('Error al remover participante:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[167]++;
        throw new Error('Error al remover participante');
      }
    });
  }
  /**
   * Obtener estadísticas de chat
   */
  getChatStats(userId) {
    /* istanbul ignore next */
    cov_25axm88b54().f[41]++;
    cov_25axm88b54().s[168]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_25axm88b54().f[42]++;
      cov_25axm88b54().s[169]++;
      try {
        const conversations =
        /* istanbul ignore next */
        (cov_25axm88b54().s[170]++, yield this.getUserConversations({
          userId,
          limit: 100
        }));
        let totalMessages =
        /* istanbul ignore next */
        (cov_25axm88b54().s[171]++, 0);
        let unreadMessages =
        /* istanbul ignore next */
        (cov_25axm88b54().s[172]++, 0);
        let activeConversations =
        /* istanbul ignore next */
        (cov_25axm88b54().s[173]++, 0);
        /* istanbul ignore next */
        cov_25axm88b54().s[174]++;
        for (const conversation of conversations) {
          const messageCount =
          /* istanbul ignore next */
          (cov_25axm88b54().s[175]++, yield this.getConversationMessages(conversation.id, 1000));
          /* istanbul ignore next */
          cov_25axm88b54().s[176]++;
          totalMessages += messageCount.length;
          const unreadCount =
          /* istanbul ignore next */
          (cov_25axm88b54().s[177]++, yield this.getUnreadMessageCount(conversation.id, userId));
          /* istanbul ignore next */
          cov_25axm88b54().s[178]++;
          unreadMessages += unreadCount;
          /* istanbul ignore next */
          cov_25axm88b54().s[179]++;
          if (unreadCount > 0) {
            /* istanbul ignore next */
            cov_25axm88b54().b[36][0]++;
            cov_25axm88b54().s[180]++;
            activeConversations++;
          } else
          /* istanbul ignore next */
          {
            cov_25axm88b54().b[36][1]++;
          }
        }
        /* istanbul ignore next */
        cov_25axm88b54().s[181]++;
        return {
          totalConversations: conversations.length,
          totalMessages,
          unreadMessages,
          activeConversations
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_25axm88b54().s[182]++;
        loggerService_1.logger.error('Error al obtener estadísticas de chat:', error);
        /* istanbul ignore next */
        cov_25axm88b54().s[183]++;
        throw new Error('Error al obtener estadísticas de chat');
      }
    });
  }
}
/* istanbul ignore next */
cov_25axm88b54().s[184]++;
exports.ChatService = ChatService;
/* istanbul ignore next */
cov_25axm88b54().s[185]++;
exports.chatService = new ChatService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,