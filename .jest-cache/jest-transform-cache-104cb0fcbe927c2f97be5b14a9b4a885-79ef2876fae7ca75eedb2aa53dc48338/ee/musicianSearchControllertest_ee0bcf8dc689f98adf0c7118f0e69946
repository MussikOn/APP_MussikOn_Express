7a9787dbcff1852b5b052824a29993a8
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock de las dependencias
jest.mock('../models/eventModel', () => ({
    getEventByIdModel: jest.fn()
}));
jest.mock('../services/musicianSearchService', () => ({
    MusicianSearchService: {
        searchMusiciansForEvent: jest.fn(),
        getRecommendedMusicians: jest.fn()
    }
}));
const musicianSearchController_1 = require("../controllers/musicianSearchController");
// Importar los mocks
const eventModel_1 = require("../models/eventModel");
const musicianSearchService_1 = require("../services/musicianSearchService");
describe('MusicianSearchController', () => {
    let mockRequest;
    let mockResponse;
    let mockJson;
    let mockStatus;
    beforeEach(() => {
        mockJson = jest.fn();
        mockStatus = jest.fn().mockReturnValue({ json: mockJson });
        mockResponse = {
            status: mockStatus,
            json: mockJson
        };
        // Reset de todos los mocks
        jest.clearAllMocks();
    });
    describe('searchMusiciansForEvent', () => {
        beforeEach(() => {
            mockRequest = {
                user: {
                    userId: 'user123',
                    email: 'user@example.com',
                    role: 'eventCreator',
                    name: 'Test User',
                    userEmail: 'user@example.com',
                    roll: 'eventCreator'
                },
                body: {
                    eventId: 'event123',
                    criteria: {
                        instrument: 'guitarra',
                        location: 'Madrid',
                        budget: 500,
                        date: '2024-12-25',
                        time: '20:00',
                        duration: 120,
                        eventType: 'wedding',
                        maxDistance: 50
                    }
                }
            };
        });
        it('should search musicians for event successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock del evento
            const mockEvent = {
                id: 'event123',
                user: 'user@example.com',
                eventName: 'Boda de María',
                instrument: 'guitarra',
                location: 'Madrid',
                budget: '500',
                date: '2024-12-25',
                time: '20:00',
                duration: '120',
                eventType: 'wedding'
            };
            // Mock de músicos encontrados
            const mockMusicians = [
                {
                    id: 'musician1',
                    name: 'Juan Pérez',
                    instrument: 'guitarra',
                    rating: 4.5,
                    rate: 150
                }
            ];
            // Configurar mocks
            eventModel_1.getEventByIdModel.mockResolvedValue(mockEvent);
            musicianSearchService_1.MusicianSearchService.searchMusiciansForEvent.mockResolvedValue(mockMusicians);
            yield musicianSearchController_1.MusicianSearchController.searchMusiciansForEvent(mockRequest, mockResponse);
            expect(mockJson).toHaveBeenCalledWith(expect.objectContaining({
                success: true,
                message: 'Búsqueda de músicos completada exitosamente',
                data: expect.objectContaining({
                    eventId: 'event123',
                    totalMusicians: 1,
                    musicians: mockMusicians
                })
            }));
        }));
        it('should return error when user is not event creator', () => __awaiter(void 0, void 0, void 0, function* () {
            mockRequest.user = {
                userId: 'user123',
                email: 'user@example.com',
                role: 'musico',
                name: 'Test User',
                userEmail: 'user@example.com',
                roll: 'musico'
            };
            yield musicianSearchController_1.MusicianSearchController.searchMusiciansForEvent(mockRequest, mockResponse);
            expect(mockStatus).toHaveBeenCalledWith(403);
            expect(mockJson).toHaveBeenCalledWith({
                success: false,
                message: 'Solo los creadores de eventos pueden buscar músicos'
            });
        }));
    });
    describe('getRecommendedMusicians', () => {
        beforeEach(() => {
            mockRequest = {
                user: {
                    userId: 'user123',
                    email: 'user@example.com',
                    role: 'eventCreator',
                    name: 'Test User',
                    userEmail: 'user@example.com',
                    roll: 'eventCreator'
                },
                params: {
                    eventId: 'event123'
                }
            };
        });
        it('should get recommended musicians successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock de músicos recomendados
            const mockMusicians = [
                {
                    id: 'musician1',
                    name: 'Juan Pérez',
                    instrument: 'guitarra',
                    rating: 4.5,
                    rate: 150
                }
            ];
            // Configurar mocks
            musicianSearchService_1.MusicianSearchService.getRecommendedMusicians.mockResolvedValue(mockMusicians);
            yield musicianSearchController_1.MusicianSearchController.getRecommendedMusicians(mockRequest, mockResponse);
            expect(mockJson).toHaveBeenCalledWith(expect.objectContaining({
                success: true,
                message: 'Recomendaciones obtenidas exitosamente',
                data: expect.objectContaining({
                    eventId: 'event123',
                    recommendations: mockMusicians,
                    totalRecommendations: 1
                })
            }));
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXHNyY1xcQVBQX011c3Npa09uXFxBUFBfTXVzc2lrT25fRXhwcmVzc1xcc3JjXFxfX3Rlc3RzX19cXG11c2ljaWFuU2VhcmNoQ29udHJvbGxlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBR0EsMkJBQTJCO0FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN2QyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQzdCLENBQUMsQ0FBQyxDQUFDO0FBRUosSUFBSSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELHFCQUFxQixFQUFFO1FBQ3JCLHVCQUF1QixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDbEMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNuQztDQUNGLENBQUMsQ0FBQyxDQUFDO0FBWkosc0ZBQW1GO0FBY25GLHFCQUFxQjtBQUNyQixxREFBeUQ7QUFDekQsNkVBQTBFO0FBRTFFLFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsSUFBSSxXQUE2QixDQUFDO0lBQ2xDLElBQUksWUFBK0IsQ0FBQztJQUNwQyxJQUFJLFFBQW1CLENBQUM7SUFDeEIsSUFBSSxVQUFxQixDQUFDO0lBRTFCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3JCLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFM0QsWUFBWSxHQUFHO1lBQ2IsTUFBTSxFQUFFLFVBQVU7WUFDbEIsSUFBSSxFQUFFLFFBQVE7U0FDZixDQUFDO1FBRUYsMkJBQTJCO1FBQzNCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFB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b0JBQ25CLGVBQWUsRUFBRSxhQUFhO29CQUM5QixvQkFBb0IsRUFBRSxDQUFDO2lCQUN4QixDQUFDO2FBQ0gsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcc3JjXFxBUFBfTXVzc2lrT25cXEFQUF9NdXNzaWtPbl9FeHByZXNzXFxzcmNcXF9fdGVzdHNfX1xcbXVzaWNpYW5TZWFyY2hDb250cm9sbGVyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcclxuaW1wb3J0IHsgTXVzaWNpYW5TZWFyY2hDb250cm9sbGVyIH0gZnJvbSAnLi4vY29udHJvbGxlcnMvbXVzaWNpYW5TZWFyY2hDb250cm9sbGVyJztcclxuXHJcbi8vIE1vY2sgZGUgbGFzIGRlcGVuZGVuY2lhc1xyXG5qZXN0Lm1vY2soJy4uL21vZGVscy9ldmVudE1vZGVsJywgKCkgPT4gKHtcclxuICBnZXRFdmVudEJ5SWRNb2RlbDogamVzdC5mbigpXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygnLi4vc2VydmljZXMvbXVzaWNpYW5TZWFyY2hTZXJ2aWNlJywgKCkgPT4gKHtcclxuICBNdXNpY2lhblNlYXJjaFNlcnZpY2U6IHtcclxuICAgIHNlYXJjaE11c2ljaWFuc0ZvckV2ZW50OiBqZXN0LmZuKCksXHJcbiAgICBnZXRSZWNvbW1lbmRlZE11c2ljaWFuczogamVzdC5mbigpXHJcbiAgfVxyXG59KSk7XHJcblxyXG4vLyBJbXBvcnRhciBsb3MgbW9ja3NcclxuaW1wb3J0IHsgZ2V0RXZlbnRCeUlkTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvZXZlbnRNb2RlbCc7XHJcbmltcG9ydCB7IE11c2ljaWFuU2VhcmNoU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL211c2ljaWFuU2VhcmNoU2VydmljZSc7XHJcblxyXG5kZXNjcmliZSgnTXVzaWNpYW5TZWFyY2hDb250cm9sbGVyJywgKCkgPT4ge1xyXG4gIGxldCBtb2NrUmVxdWVzdDogUGFydGlhbDxSZXF1ZXN0PjtcclxuICBsZXQgbW9ja1Jlc3BvbnNlOiBQYXJ0aWFsPFJlc3BvbnNlPjtcclxuICBsZXQgbW9ja0pzb246IGplc3QuTW9jaztcclxuICBsZXQgbW9ja1N0YXR1czogamVzdC5Nb2NrO1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIG1vY2tKc29uID0gamVzdC5mbigpO1xyXG4gICAgbW9ja1N0YXR1cyA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoeyBqc29uOiBtb2NrSnNvbiB9KTtcclxuICAgIFxyXG4gICAgbW9ja1Jlc3BvbnNlID0ge1xyXG4gICAgICBzdGF0dXM6IG1vY2tTdGF0dXMsXHJcbiAgICAgIGpzb246IG1vY2tKc29uXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFJlc2V0IGRlIHRvZG9zIGxvcyBtb2Nrc1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdzZWFyY2hNdXNpY2lhbnNGb3JFdmVudCcsICgpID0+IHtcclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICBtb2NrUmVxdWVzdCA9IHtcclxuICAgICAgICB1c2VyOiB7XHJcbiAgICAgICAgICB1c2VySWQ6ICd1c2VyMTIzJyxcclxuICAgICAgICAgIGVtYWlsOiAndXNlckBleGFtcGxlLmNvbScsXHJcbiAgICAgICAgICByb2xlOiAnZXZlbnRDcmVhdG9yJyxcclxuICAgICAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxyXG4gICAgICAgICAgdXNlckVtYWlsOiAndXNlckBleGFtcGxlLmNvbScsXHJcbiAgICAgICAgICByb2xsOiAnZXZlbnRDcmVhdG9yJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgZXZlbnRJZDogJ2V2ZW50MTIzJyxcclxuICAgICAgICAgIGNyaXRlcmlhOiB7XHJcbiAgICAgICAgICAgIGluc3RydW1lbnQ6ICdndWl0YXJyYScsXHJcbiAgICAgICAgICAgIGxvY2F0aW9uOiAnTWFkcmlkJyxcclxuICAgICAgICAgICAgYnVkZ2V0OiA1MDAsXHJcbiAgICAgICAgICAgIGRhdGU6ICcyMDI0LTEyLTI1JyxcclxuICAgICAgICAgICAgdGltZTogJzIwOjAwJyxcclxuICAgICAgICAgICAgZHVyYXRpb246IDEyMCxcclxuICAgICAgICAgICAgZXZlbnRUeXBlOiAnd2VkZGluZycsXHJcbiAgICAgICAgICAgIG1heERpc3RhbmNlOiA1MFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgc2VhcmNoIG11c2ljaWFucyBmb3IgZXZlbnQgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBNb2NrIGRlbCBldmVudG9cclxuICAgICAgY29uc3QgbW9ja0V2ZW50ID0ge1xyXG4gICAgICAgIGlkOiAnZXZlbnQxMjMnLFxyXG4gICAgICAgIHVzZXI6ICd1c2VyQGV4YW1wbGUuY29tJyxcclxuICAgICAgICBldmVudE5hbWU6ICdCb2RhIGRlIE1hcsOtYScsXHJcbiAgICAgICAgaW5zdHJ1bWVudDogJ2d1aXRhcnJhJyxcclxuICAgICAgICBsb2NhdGlvbjogJ01hZHJpZCcsXHJcbiAgICAgICAgYnVkZ2V0OiAnNTAwJyxcclxuICAgICAgICBkYXRlOiAnMjAyNC0xMi0yNScsXHJcbiAgICAgICAgdGltZTogJzIwOjAwJyxcclxuICAgICAgICBkdXJhdGlvbjogJzEyMCcsXHJcbiAgICAgICAgZXZlbnRUeXBlOiAnd2VkZGluZydcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIE1vY2sgZGUgbcO6c2ljb3MgZW5jb250cmFkb3NcclxuICAgICAgY29uc3QgbW9ja011c2ljaWFucyA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJ211c2ljaWFuMScsXHJcbiAgICAgICAgICBuYW1lOiAnSnVhbiBQw6lyZXonLFxyXG4gICAgICAgICAgaW5zdHJ1bWVudDogJ2d1aXRhcnJhJyxcclxuICAgICAgICAgIHJhdGluZzogNC41LFxyXG4gICAgICAgICAgcmF0ZTogMTUwXHJcbiAgICAgICAgfVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgLy8gQ29uZmlndXJhciBtb2Nrc1xyXG4gICAgICAoZ2V0RXZlbnRCeUlkTW9kZWwgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRXZlbnQpO1xyXG4gICAgICAoTXVzaWNpYW5TZWFyY2hTZXJ2aWNlLnNlYXJjaE11c2ljaWFuc0ZvckV2ZW50IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUobW9ja011c2ljaWFucyk7XHJcblxyXG4gICAgICBhd2FpdCBNdXNpY2lhblNlYXJjaENvbnRyb2xsZXIuc2VhcmNoTXVzaWNpYW5zRm9yRXZlbnQobW9ja1JlcXVlc3QgYXMgUmVxdWVzdCwgbW9ja1Jlc3BvbnNlIGFzIFJlc3BvbnNlKTtcclxuXHJcbiAgICAgIGV4cGVjdChtb2NrSnNvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIG1lc3NhZ2U6ICdCw7pzcXVlZGEgZGUgbcO6c2ljb3MgY29tcGxldGFkYSBleGl0b3NhbWVudGUnLFxyXG4gICAgICAgICAgZGF0YTogZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgICAgICBldmVudElkOiAnZXZlbnQxMjMnLFxyXG4gICAgICAgICAgICB0b3RhbE11c2ljaWFuczogMSxcclxuICAgICAgICAgICAgbXVzaWNpYW5zOiBtb2NrTXVzaWNpYW5zXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHJldHVybiBlcnJvciB3aGVuIHVzZXIgaXMgbm90IGV2ZW50IGNyZWF0b3InLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIG1vY2tSZXF1ZXN0LnVzZXIgPSB7XHJcbiAgICAgICAgdXNlcklkOiAndXNlcjEyMycsXHJcbiAgICAgICAgZW1haWw6ICd1c2VyQGV4YW1wbGUuY29tJyxcclxuICAgICAgICByb2xlOiAnbXVzaWNvJyxcclxuICAgICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcclxuICAgICAgICB1c2VyRW1haWw6ICd1c2VyQGV4YW1wbGUuY29tJyxcclxuICAgICAgICByb2xsOiAnbXVzaWNvJ1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgYXdhaXQgTXVzaWNpYW5TZWFyY2hDb250cm9sbGVyLnNlYXJjaE11c2ljaWFuc0ZvckV2ZW50KG1vY2tSZXF1ZXN0IGFzIFJlcXVlc3QsIG1vY2tSZXNwb25zZSBhcyBSZXNwb25zZSk7XHJcblxyXG4gICAgICBleHBlY3QobW9ja1N0YXR1cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoNDAzKTtcclxuICAgICAgZXhwZWN0KG1vY2tKc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgbWVzc2FnZTogJ1NvbG8gbG9zIGNyZWFkb3JlcyBkZSBldmVudG9zIHB1ZWRlbiBidXNjYXIgbcO6c2ljb3MnXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdnZXRSZWNvbW1lbmRlZE11c2ljaWFucycsICgpID0+IHtcclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICBtb2NrUmVxdWVzdCA9IHtcclxuICAgICAgICB1c2VyOiB7XHJcbiAgICAgICAgICB1c2VySWQ6ICd1c2VyMTIzJyxcclxuICAgICAgICAgIGVtYWlsOiAndXNlckBleGFtcGxlLmNvbScsXHJcbiAgICAgICAgICByb2xlOiAnZXZlbnRDcmVhdG9yJyxcclxuICAgICAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxyXG4gICAgICAgICAgdXNlckVtYWlsOiAndXNlckBleGFtcGxlLmNvbScsXHJcbiAgICAgICAgICByb2xsOiAnZXZlbnRDcmVhdG9yJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICBldmVudElkOiAnZXZlbnQxMjMnXHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBnZXQgcmVjb21tZW5kZWQgbXVzaWNpYW5zIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcclxuICAgICAgLy8gTW9jayBkZSBtw7pzaWNvcyByZWNvbWVuZGFkb3NcclxuICAgICAgY29uc3QgbW9ja011c2ljaWFucyA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJ211c2ljaWFuMScsXHJcbiAgICAgICAgICBuYW1lOiAnSnVhbiBQw6lyZXonLFxyXG4gICAgICAgICAgaW5zdHJ1bWVudDogJ2d1aXRhcnJhJyxcclxuICAgICAgICAgIHJhdGluZzogNC41LFxyXG4gICAgICAgICAgcmF0ZTogMTUwXHJcbiAgICAgICAgfVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgLy8gQ29uZmlndXJhciBtb2Nrc1xyXG4gICAgICAoTXVzaWNpYW5TZWFyY2hTZXJ2aWNlLmdldFJlY29tbWVuZGVkTXVzaWNpYW5zIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUobW9ja011c2ljaWFucyk7XHJcblxyXG4gICAgICBhd2FpdCBNdXNpY2lhblNlYXJjaENvbnRyb2xsZXIuZ2V0UmVjb21tZW5kZWRNdXNpY2lhbnMobW9ja1JlcXVlc3QgYXMgUmVxdWVzdCwgbW9ja1Jlc3BvbnNlIGFzIFJlc3BvbnNlKTtcclxuXHJcbiAgICAgIGV4cGVjdChtb2NrSnNvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIG1lc3NhZ2U6ICdSZWNvbWVuZGFjaW9uZXMgb2J0ZW5pZGFzIGV4aXRvc2FtZW50ZScsXHJcbiAgICAgICAgICBkYXRhOiBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgICAgIGV2ZW50SWQ6ICdldmVudDEyMycsXHJcbiAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogbW9ja011c2ljaWFucyxcclxuICAgICAgICAgICAgdG90YWxSZWNvbW1lbmRhdGlvbnM6IDFcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTsgIl0sInZlcnNpb24iOjN9