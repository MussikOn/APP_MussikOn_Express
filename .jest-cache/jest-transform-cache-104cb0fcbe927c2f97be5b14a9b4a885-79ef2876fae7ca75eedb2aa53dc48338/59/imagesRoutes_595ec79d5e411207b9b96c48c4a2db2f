5dcff420ec50268bda63afae0f38fe19
"use strict";

/* istanbul ignore next */
function cov_2nmsv7vez6() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\imagesRoutes.ts";
  var hash = "7b40ed45d62c7f7684edaac048eb4934017da1e6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\imagesRoutes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 25
        },
        end: {
          line: 4,
          column: 64
        }
      },
      "3": {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "4": {
        start: {
          line: 6,
          column: 27
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "5": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 69
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 99,
          column: 0
        },
        end: {
          line: 99,
          column: 184
        }
      },
      "8": {
        start: {
          line: 104,
          column: 0
        },
        end: {
          line: 104,
          column: 57
        }
      },
      "9": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 109,
          column: 67
        }
      },
      "10": {
        start: {
          line: 114,
          column: 0
        },
        end: {
          line: 114,
          column: 99
        }
      },
      "11": {
        start: {
          line: 119,
          column: 0
        },
        end: {
          line: 119,
          column: 102
        }
      },
      "12": {
        start: {
          line: 125,
          column: 0
        },
        end: {
          line: 125,
          column: 82
        }
      },
      "13": {
        start: {
          line: 130,
          column: 0
        },
        end: {
          line: 130,
          column: 65
        }
      },
      "14": {
        start: {
          line: 135,
          column: 0
        },
        end: {
          line: 135,
          column: 67
        }
      },
      "15": {
        start: {
          line: 141,
          column: 0
        },
        end: {
          line: 141,
          column: 121
        }
      },
      "16": {
        start: {
          line: 146,
          column: 0
        },
        end: {
          line: 146,
          column: 131
        }
      },
      "17": {
        start: {
          line: 152,
          column: 0
        },
        end: {
          line: 152,
          column: 68
        }
      },
      "18": {
        start: {
          line: 157,
          column: 0
        },
        end: {
          line: 157,
          column: 66
        }
      },
      "19": {
        start: {
          line: 158,
          column: 0
        },
        end: {
          line: 158,
          column: 25
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\imagesRoutes.ts",
      mappings: ";;AAAA,qCAAiC;AACjC,iEAA8D;AAC9D,uDAAoD;AACpD,qEAIwC;AACxC,sEAcyC;AAEzC,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoFG;AAEH,8DAA8D;AAE9D;;;GAGG;AACH,MAAM,CAAC,IAAI,CACT,SAAS,EACT,+BAAc,EACd,8BAAW,CAAC,MAAM,CAAC,OAAO,CAAC,EAC3B,oCAAiB,EACjB,wCAAqB,CACtB,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,uCAAoB,CAAC,CAAC;AAEtC;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,yCAAsB,CAAC,CAAC;AAEhD;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,+BAAc,EAAE,wCAAqB,CAAC,CAAC;AAE/D;;;GAGG;AACH,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,+BAAc,EAAE,wCAAqB,CAAC,CAAC;AAElE,8DAA8D;AAE9D;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,iDAA8B,CAAC,CAAC;AAE/D;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,0CAAuB,CAAC,CAAC;AAE9C;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,2CAAwB,CAAC,CAAC;AAEhD,oEAAoE;AAEpE;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,+BAAc,EAAE,qBAAS,EAAE,0CAAuB,CAAC,CAAC;AAEzE;;;GAGG;AACH,MAAM,CAAC,IAAI,CACT,UAAU,EACV,+BAAc,EACd,qBAAS,EACT,iDAA8B,CAC/B,CAAC;AAEF,0EAA0E;AAE1E;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,yCAAsB,CAAC,CAAC;AAEjD;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,wCAAqB,CAAC,CAAC;AAE/C,kBAAe,MAAM,CAAC",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\imagesRoutes.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { authMiddleware } from '../middleware/authMiddleware';\nimport { adminOnly } from '../middleware/adminOnly';\nimport {\n  imageUpload,\n  handleMulterError,\n  validateImageFile,\n} from '../middleware/uploadMiddleware';\nimport {\n  uploadImageController,\n  getImageByIdController,\n  listImagesController,\n  updateImageController,\n  deleteImageController,\n  getImageStatsController,\n  getUserProfileImagesController,\n  getPostImagesController,\n  getEventImagesController,\n  cleanupExpiredImagesController,\n  // Controladores legacy para compatibilidad\n  getAllImagesController,\n  getImageUrlController,\n} from '../controllers/imagesController';\n\nconst router = Router();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Image:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *           description: ID \xFAnico de la imagen\n *         key:\n *           type: string\n *           description: Clave en S3\n *         url:\n *           type: string\n *           description: URL firmada de la imagen\n *         originalName:\n *           type: string\n *           description: Nombre original del archivo\n *         fileName:\n *           type: string\n *           description: Nombre del archivo en el sistema\n *         size:\n *           type: number\n *           description: Tama\xF1o del archivo en bytes\n *         mimetype:\n *           type: string\n *           description: Tipo MIME del archivo\n *         category:\n *           type: string\n *           enum: [profile, post, event, gallery, admin]\n *           description: Categor\xEDa de la imagen\n *         userId:\n *           type: string\n *           description: Email del propietario\n *         description:\n *           type: string\n *           description: Descripci\xF3n de la imagen\n *         tags:\n *           type: array\n *           items:\n *             type: string\n *           description: Etiquetas de la imagen\n *         metadata:\n *           type: object\n *           description: Metadatos adicionales\n *         isPublic:\n *           type: boolean\n *           description: Si la imagen es p\xFAblica\n *         isActive:\n *           type: boolean\n *           description: Si la imagen est\xE1 activa\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: Fecha de creaci\xF3n\n *         updatedAt:\n *           type: string\n *           format: date-time\n *           description: Fecha de \xFAltima actualizaci\xF3n\n *         expiresAt:\n *           type: string\n *           format: date-time\n *           description: Fecha de expiraci\xF3n (para URLs temporales)\n *     ImageStats:\n *       type: object\n *       properties:\n *         totalImages:\n *           type: number\n *           description: Total de im\xE1genes\n *         totalSize:\n *           type: number\n *           description: Tama\xF1o total en bytes\n *         imagesByCategory:\n *           type: object\n *           description: Conteo de im\xE1genes por categor\xEDa\n *         imagesByUser:\n *           type: object\n *           description: Conteo de im\xE1genes por usuario\n *         recentUploads:\n *           type: array\n *           items:\n *             $ref: '#/components/schemas/Image'\n *           description: Im\xE1genes subidas recientemente\n */\n\n// ==================== RUTAS PRINCIPALES ====================\n\n/**\n * POST /images/upload\n * Subir una nueva imagen\n */\nrouter.post(\n  '/upload',\n  authMiddleware,\n  imageUpload.single('image'),\n  validateImageFile,\n  uploadImageController\n);\n\n/**\n * GET /images\n * Listar im\xE1genes con filtros\n */\nrouter.get('/', listImagesController);\n\n/**\n * GET /images/:imageId\n * Obtener imagen por ID\n */\nrouter.get('/:imageId', getImageByIdController);\n\n/**\n * PUT /images/:imageId\n * Actualizar imagen\n */\nrouter.put('/:imageId', authMiddleware, updateImageController);\n\n/**\n * DELETE /images/:imageId\n * Eliminar imagen\n */\nrouter.delete('/:imageId', authMiddleware, deleteImageController);\n\n// ==================== RUTAS ESPEC\xCDFICAS ====================\n\n/**\n * GET /images/profile/:userId\n * Obtener im\xE1genes de perfil de un usuario\n */\nrouter.get('/profile/:userId', getUserProfileImagesController);\n\n/**\n * GET /images/posts\n * Obtener im\xE1genes de posts\n */\nrouter.get('/posts', getPostImagesController);\n\n/**\n * GET /images/events\n * Obtener im\xE1genes de eventos\n */\nrouter.get('/events', getEventImagesController);\n\n// ==================== RUTAS DE ADMINISTRACI\xD3N ====================\n\n/**\n * GET /images/stats\n * Obtener estad\xEDsticas de im\xE1genes (Solo administradores)\n */\nrouter.get('/stats', authMiddleware, adminOnly, getImageStatsController);\n\n/**\n * POST /images/cleanup\n * Limpiar im\xE1genes expiradas (Solo administradores senior)\n */\nrouter.post(\n  '/cleanup',\n  authMiddleware,\n  adminOnly,\n  cleanupExpiredImagesController\n);\n\n// ==================== RUTAS LEGACY (COMPATIBILIDAD) ====================\n\n/**\n * GET /imgs/getAllImg\n * Obtener galer\xEDa de im\xE1genes (Legacy)\n */\nrouter.get('/getAllImg', getAllImagesController);\n\n/**\n * GET /imgs/url/:key\n * Obtener URL de imagen por clave (Legacy)\n */\nrouter.get('/url/:key', getImageUrlController);\n\nexport default router;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7b40ed45d62c7f7684edaac048eb4934017da1e6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nmsv7vez6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nmsv7vez6();
cov_2nmsv7vez6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_2nmsv7vez6().s[1]++, require("express"));
const authMiddleware_1 =
/* istanbul ignore next */
(cov_2nmsv7vez6().s[2]++, require("../middleware/authMiddleware"));
const adminOnly_1 =
/* istanbul ignore next */
(cov_2nmsv7vez6().s[3]++, require("../middleware/adminOnly"));
const uploadMiddleware_1 =
/* istanbul ignore next */
(cov_2nmsv7vez6().s[4]++, require("../middleware/uploadMiddleware"));
const imagesController_1 =
/* istanbul ignore next */
(cov_2nmsv7vez6().s[5]++, require("../controllers/imagesController"));
const router =
/* istanbul ignore next */
(cov_2nmsv7vez6().s[6]++, (0, express_1.Router)());
/**
 * @swagger
 * components:
 *   schemas:
 *     Image:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           description: ID único de la imagen
 *         key:
 *           type: string
 *           description: Clave en S3
 *         url:
 *           type: string
 *           description: URL firmada de la imagen
 *         originalName:
 *           type: string
 *           description: Nombre original del archivo
 *         fileName:
 *           type: string
 *           description: Nombre del archivo en el sistema
 *         size:
 *           type: number
 *           description: Tamaño del archivo en bytes
 *         mimetype:
 *           type: string
 *           description: Tipo MIME del archivo
 *         category:
 *           type: string
 *           enum: [profile, post, event, gallery, admin]
 *           description: Categoría de la imagen
 *         userId:
 *           type: string
 *           description: Email del propietario
 *         description:
 *           type: string
 *           description: Descripción de la imagen
 *         tags:
 *           type: array
 *           items:
 *             type: string
 *           description: Etiquetas de la imagen
 *         metadata:
 *           type: object
 *           description: Metadatos adicionales
 *         isPublic:
 *           type: boolean
 *           description: Si la imagen es pública
 *         isActive:
 *           type: boolean
 *           description: Si la imagen está activa
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: Fecha de creación
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: Fecha de última actualización
 *         expiresAt:
 *           type: string
 *           format: date-time
 *           description: Fecha de expiración (para URLs temporales)
 *     ImageStats:
 *       type: object
 *       properties:
 *         totalImages:
 *           type: number
 *           description: Total de imágenes
 *         totalSize:
 *           type: number
 *           description: Tamaño total en bytes
 *         imagesByCategory:
 *           type: object
 *           description: Conteo de imágenes por categoría
 *         imagesByUser:
 *           type: object
 *           description: Conteo de imágenes por usuario
 *         recentUploads:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Image'
 *           description: Imágenes subidas recientemente
 */
// ==================== RUTAS PRINCIPALES ====================
/**
 * POST /images/upload
 * Subir una nueva imagen
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[7]++;
router.post('/upload', authMiddleware_1.authMiddleware, uploadMiddleware_1.imageUpload.single('image'), uploadMiddleware_1.validateImageFile, imagesController_1.uploadImageController);
/**
 * GET /images
 * Listar imágenes con filtros
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[8]++;
router.get('/', imagesController_1.listImagesController);
/**
 * GET /images/:imageId
 * Obtener imagen por ID
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[9]++;
router.get('/:imageId', imagesController_1.getImageByIdController);
/**
 * PUT /images/:imageId
 * Actualizar imagen
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[10]++;
router.put('/:imageId', authMiddleware_1.authMiddleware, imagesController_1.updateImageController);
/**
 * DELETE /images/:imageId
 * Eliminar imagen
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[11]++;
router.delete('/:imageId', authMiddleware_1.authMiddleware, imagesController_1.deleteImageController);
// ==================== RUTAS ESPECÍFICAS ====================
/**
 * GET /images/profile/:userId
 * Obtener imágenes de perfil de un usuario
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[12]++;
router.get('/profile/:userId', imagesController_1.getUserProfileImagesController);
/**
 * GET /images/posts
 * Obtener imágenes de posts
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[13]++;
router.get('/posts', imagesController_1.getPostImagesController);
/**
 * GET /images/events
 * Obtener imágenes de eventos
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[14]++;
router.get('/events', imagesController_1.getEventImagesController);
// ==================== RUTAS DE ADMINISTRACIÓN ====================
/**
 * GET /images/stats
 * Obtener estadísticas de imágenes (Solo administradores)
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[15]++;
router.get('/stats', authMiddleware_1.authMiddleware, adminOnly_1.adminOnly, imagesController_1.getImageStatsController);
/**
 * POST /images/cleanup
 * Limpiar imágenes expiradas (Solo administradores senior)
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[16]++;
router.post('/cleanup', authMiddleware_1.authMiddleware, adminOnly_1.adminOnly, imagesController_1.cleanupExpiredImagesController);
// ==================== RUTAS LEGACY (COMPATIBILIDAD) ====================
/**
 * GET /imgs/getAllImg
 * Obtener galería de imágenes (Legacy)
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[17]++;
router.get('/getAllImg', imagesController_1.getAllImagesController);
/**
 * GET /imgs/url/:key
 * Obtener URL de imagen por clave (Legacy)
 */
/* istanbul ignore next */
cov_2nmsv7vez6().s[18]++;
router.get('/url/:key', imagesController_1.getImageUrlController);
/* istanbul ignore next */
cov_2nmsv7vez6().s[19]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzXzEiLCJjb3ZfMm5tc3Y3dmV6NiIsInMiLCJyZXF1aXJlIiwiYXV0aE1pZGRsZXdhcmVfMSIsImFkbWluT25seV8xIiwidXBsb2FkTWlkZGxld2FyZV8xIiwiaW1hZ2VzQ29udHJvbGxlcl8xIiwicm91dGVyIiwiUm91dGVyIiwicG9zdCIsImF1dGhNaWRkbGV3YXJlIiwiaW1hZ2VVcGxvYWQiLCJzaW5nbGUiLCJ2YWxpZGF0ZUltYWdlRmlsZSIsInVwbG9hZEltYWdlQ29udHJvbGxlciIsImdldCIsImxpc3RJbWFnZXNDb250cm9sbGVyIiwiZ2V0SW1hZ2VCeUlkQ29udHJvbGxlciIsInB1dCIsInVwZGF0ZUltYWdlQ29udHJvbGxlciIsImRlbGV0ZSIsImRlbGV0ZUltYWdlQ29udHJvbGxlciIsImdldFVzZXJQcm9maWxlSW1hZ2VzQ29udHJvbGxlciIsImdldFBvc3RJbWFnZXNDb250cm9sbGVyIiwiZ2V0RXZlbnRJbWFnZXNDb250cm9sbGVyIiwiYWRtaW5Pbmx5IiwiZ2V0SW1hZ2VTdGF0c0NvbnRyb2xsZXIiLCJjbGVhbnVwRXhwaXJlZEltYWdlc0NvbnRyb2xsZXIiLCJnZXRBbGxJbWFnZXNDb250cm9sbGVyIiwiZ2V0SW1hZ2VVcmxDb250cm9sbGVyIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJDOlxcc3JjXFxBUFBfTXVzc2lrT25cXEFQUF9NdXNzaWtPbl9FeHByZXNzXFxzcmNcXHJvdXRlc1xcaW1hZ2VzUm91dGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgYXV0aE1pZGRsZXdhcmUgfSBmcm9tICcuLi9taWRkbGV3YXJlL2F1dGhNaWRkbGV3YXJlJztcbmltcG9ydCB7IGFkbWluT25seSB9IGZyb20gJy4uL21pZGRsZXdhcmUvYWRtaW5Pbmx5JztcbmltcG9ydCB7XG4gIGltYWdlVXBsb2FkLFxuICBoYW5kbGVNdWx0ZXJFcnJvcixcbiAgdmFsaWRhdGVJbWFnZUZpbGUsXG59IGZyb20gJy4uL21pZGRsZXdhcmUvdXBsb2FkTWlkZGxld2FyZSc7XG5pbXBvcnQge1xuICB1cGxvYWRJbWFnZUNvbnRyb2xsZXIsXG4gIGdldEltYWdlQnlJZENvbnRyb2xsZXIsXG4gIGxpc3RJbWFnZXNDb250cm9sbGVyLFxuICB1cGRhdGVJbWFnZUNvbnRyb2xsZXIsXG4gIGRlbGV0ZUltYWdlQ29udHJvbGxlcixcbiAgZ2V0SW1hZ2VTdGF0c0NvbnRyb2xsZXIsXG4gIGdldFVzZXJQcm9maWxlSW1hZ2VzQ29udHJvbGxlcixcbiAgZ2V0UG9zdEltYWdlc0NvbnRyb2xsZXIsXG4gIGdldEV2ZW50SW1hZ2VzQ29udHJvbGxlcixcbiAgY2xlYW51cEV4cGlyZWRJbWFnZXNDb250cm9sbGVyLFxuICAvLyBDb250cm9sYWRvcmVzIGxlZ2FjeSBwYXJhIGNvbXBhdGliaWxpZGFkXG4gIGdldEFsbEltYWdlc0NvbnRyb2xsZXIsXG4gIGdldEltYWdlVXJsQ29udHJvbGxlcixcbn0gZnJvbSAnLi4vY29udHJvbGxlcnMvaW1hZ2VzQ29udHJvbGxlcic7XG5cbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xuXG4vKipcbiAqIEBzd2FnZ2VyXG4gKiBjb21wb25lbnRzOlxuICogICBzY2hlbWFzOlxuICogICAgIEltYWdlOlxuICogICAgICAgdHlwZTogb2JqZWN0XG4gKiAgICAgICBwcm9wZXJ0aWVzOlxuICogICAgICAgICBpZDpcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogSUQgw7puaWNvIGRlIGxhIGltYWdlblxuICogICAgICAgICBrZXk6XG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IENsYXZlIGVuIFMzXG4gKiAgICAgICAgIHVybDpcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogVVJMIGZpcm1hZGEgZGUgbGEgaW1hZ2VuXG4gKiAgICAgICAgIG9yaWdpbmFsTmFtZTpcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogTm9tYnJlIG9yaWdpbmFsIGRlbCBhcmNoaXZvXG4gKiAgICAgICAgIGZpbGVOYW1lOlxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb21icmUgZGVsIGFyY2hpdm8gZW4gZWwgc2lzdGVtYVxuICogICAgICAgICBzaXplOlxuICogICAgICAgICAgIHR5cGU6IG51bWJlclxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBUYW1hw7FvIGRlbCBhcmNoaXZvIGVuIGJ5dGVzXG4gKiAgICAgICAgIG1pbWV0eXBlOlxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaXBvIE1JTUUgZGVsIGFyY2hpdm9cbiAqICAgICAgICAgY2F0ZWdvcnk6XG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgZW51bTogW3Byb2ZpbGUsIHBvc3QsIGV2ZW50LCBnYWxsZXJ5LCBhZG1pbl1cbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogQ2F0ZWdvcsOtYSBkZSBsYSBpbWFnZW5cbiAqICAgICAgICAgdXNlcklkOlxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBFbWFpbCBkZWwgcHJvcGlldGFyaW9cbiAqICAgICAgICAgZGVzY3JpcHRpb246XG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IERlc2NyaXBjacOzbiBkZSBsYSBpbWFnZW5cbiAqICAgICAgICAgdGFnczpcbiAqICAgICAgICAgICB0eXBlOiBhcnJheVxuICogICAgICAgICAgIGl0ZW1zOlxuICogICAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IEV0aXF1ZXRhcyBkZSBsYSBpbWFnZW5cbiAqICAgICAgICAgbWV0YWRhdGE6XG4gKiAgICAgICAgICAgdHlwZTogb2JqZWN0XG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IE1ldGFkYXRvcyBhZGljaW9uYWxlc1xuICogICAgICAgICBpc1B1YmxpYzpcbiAqICAgICAgICAgICB0eXBlOiBib29sZWFuXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IFNpIGxhIGltYWdlbiBlcyBww7pibGljYVxuICogICAgICAgICBpc0FjdGl2ZTpcbiAqICAgICAgICAgICB0eXBlOiBib29sZWFuXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IFNpIGxhIGltYWdlbiBlc3TDoSBhY3RpdmFcbiAqICAgICAgICAgY3JlYXRlZEF0OlxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IEZlY2hhIGRlIGNyZWFjacOzblxuICogICAgICAgICB1cGRhdGVkQXQ6XG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgZm9ybWF0OiBkYXRlLXRpbWVcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogRmVjaGEgZGUgw7psdGltYSBhY3R1YWxpemFjacOzblxuICogICAgICAgICBleHBpcmVzQXQ6XG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgZm9ybWF0OiBkYXRlLXRpbWVcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogRmVjaGEgZGUgZXhwaXJhY2nDs24gKHBhcmEgVVJMcyB0ZW1wb3JhbGVzKVxuICogICAgIEltYWdlU3RhdHM6XG4gKiAgICAgICB0eXBlOiBvYmplY3RcbiAqICAgICAgIHByb3BlcnRpZXM6XG4gKiAgICAgICAgIHRvdGFsSW1hZ2VzOlxuICogICAgICAgICAgIHR5cGU6IG51bWJlclxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBUb3RhbCBkZSBpbcOhZ2VuZXNcbiAqICAgICAgICAgdG90YWxTaXplOlxuICogICAgICAgICAgIHR5cGU6IG51bWJlclxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBUYW1hw7FvIHRvdGFsIGVuIGJ5dGVzXG4gKiAgICAgICAgIGltYWdlc0J5Q2F0ZWdvcnk6XG4gKiAgICAgICAgICAgdHlwZTogb2JqZWN0XG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IENvbnRlbyBkZSBpbcOhZ2VuZXMgcG9yIGNhdGVnb3LDrWFcbiAqICAgICAgICAgaW1hZ2VzQnlVc2VyOlxuICogICAgICAgICAgIHR5cGU6IG9iamVjdFxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBDb250ZW8gZGUgaW3DoWdlbmVzIHBvciB1c3VhcmlvXG4gKiAgICAgICAgIHJlY2VudFVwbG9hZHM6XG4gKiAgICAgICAgICAgdHlwZTogYXJyYXlcbiAqICAgICAgICAgICBpdGVtczpcbiAqICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9JbWFnZSdcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogSW3DoWdlbmVzIHN1YmlkYXMgcmVjaWVudGVtZW50ZVxuICovXG5cbi8vID09PT09PT09PT09PT09PT09PT09IFJVVEFTIFBSSU5DSVBBTEVTID09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogUE9TVCAvaW1hZ2VzL3VwbG9hZFxuICogU3ViaXIgdW5hIG51ZXZhIGltYWdlblxuICovXG5yb3V0ZXIucG9zdChcbiAgJy91cGxvYWQnLFxuICBhdXRoTWlkZGxld2FyZSxcbiAgaW1hZ2VVcGxvYWQuc2luZ2xlKCdpbWFnZScpLFxuICB2YWxpZGF0ZUltYWdlRmlsZSxcbiAgdXBsb2FkSW1hZ2VDb250cm9sbGVyXG4pO1xuXG4vKipcbiAqIEdFVCAvaW1hZ2VzXG4gKiBMaXN0YXIgaW3DoWdlbmVzIGNvbiBmaWx0cm9zXG4gKi9cbnJvdXRlci5nZXQoJy8nLCBsaXN0SW1hZ2VzQ29udHJvbGxlcik7XG5cbi8qKlxuICogR0VUIC9pbWFnZXMvOmltYWdlSWRcbiAqIE9idGVuZXIgaW1hZ2VuIHBvciBJRFxuICovXG5yb3V0ZXIuZ2V0KCcvOmltYWdlSWQnLCBnZXRJbWFnZUJ5SWRDb250cm9sbGVyKTtcblxuLyoqXG4gKiBQVVQgL2ltYWdlcy86aW1hZ2VJZFxuICogQWN0dWFsaXphciBpbWFnZW5cbiAqL1xucm91dGVyLnB1dCgnLzppbWFnZUlkJywgYXV0aE1pZGRsZXdhcmUsIHVwZGF0ZUltYWdlQ29udHJvbGxlcik7XG5cbi8qKlxuICogREVMRVRFIC9pbWFnZXMvOmltYWdlSWRcbiAqIEVsaW1pbmFyIGltYWdlblxuICovXG5yb3V0ZXIuZGVsZXRlKCcvOmltYWdlSWQnLCBhdXRoTWlkZGxld2FyZSwgZGVsZXRlSW1hZ2VDb250cm9sbGVyKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT0gUlVUQVMgRVNQRUPDjUZJQ0FTID09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogR0VUIC9pbWFnZXMvcHJvZmlsZS86dXNlcklkXG4gKiBPYnRlbmVyIGltw6FnZW5lcyBkZSBwZXJmaWwgZGUgdW4gdXN1YXJpb1xuICovXG5yb3V0ZXIuZ2V0KCcvcHJvZmlsZS86dXNlcklkJywgZ2V0VXNlclByb2ZpbGVJbWFnZXNDb250cm9sbGVyKTtcblxuLyoqXG4gKiBHRVQgL2ltYWdlcy9wb3N0c1xuICogT2J0ZW5lciBpbcOhZ2VuZXMgZGUgcG9zdHNcbiAqL1xucm91dGVyLmdldCgnL3Bvc3RzJywgZ2V0UG9zdEltYWdlc0NvbnRyb2xsZXIpO1xuXG4vKipcbiAqIEdFVCAvaW1hZ2VzL2V2ZW50c1xuICogT2J0ZW5lciBpbcOhZ2VuZXMgZGUgZXZlbnRvc1xuICovXG5yb3V0ZXIuZ2V0KCcvZXZlbnRzJywgZ2V0RXZlbnRJbWFnZXNDb250cm9sbGVyKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT0gUlVUQVMgREUgQURNSU5JU1RSQUNJw5NOID09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogR0VUIC9pbWFnZXMvc3RhdHNcbiAqIE9idGVuZXIgZXN0YWTDrXN0aWNhcyBkZSBpbcOhZ2VuZXMgKFNvbG8gYWRtaW5pc3RyYWRvcmVzKVxuICovXG5yb3V0ZXIuZ2V0KCcvc3RhdHMnLCBhdXRoTWlkZGxld2FyZSwgYWRtaW5Pbmx5LCBnZXRJbWFnZVN0YXRzQ29udHJvbGxlcik7XG5cbi8qKlxuICogUE9TVCAvaW1hZ2VzL2NsZWFudXBcbiAqIExpbXBpYXIgaW3DoWdlbmVzIGV4cGlyYWRhcyAoU29sbyBhZG1pbmlzdHJhZG9yZXMgc2VuaW9yKVxuICovXG5yb3V0ZXIucG9zdChcbiAgJy9jbGVhbnVwJyxcbiAgYXV0aE1pZGRsZXdhcmUsXG4gIGFkbWluT25seSxcbiAgY2xlYW51cEV4cGlyZWRJbWFnZXNDb250cm9sbGVyXG4pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PSBSVVRBUyBMRUdBQ1kgKENPTVBBVElCSUxJREFEKSA9PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIEdFVCAvaW1ncy9nZXRBbGxJbWdcbiAqIE9idGVuZXIgZ2FsZXLDrWEgZGUgaW3DoWdlbmVzIChMZWdhY3kpXG4gKi9cbnJvdXRlci5nZXQoJy9nZXRBbGxJbWcnLCBnZXRBbGxJbWFnZXNDb250cm9sbGVyKTtcblxuLyoqXG4gKiBHRVQgL2ltZ3MvdXJsLzprZXlcbiAqIE9idGVuZXIgVVJMIGRlIGltYWdlbiBwb3IgY2xhdmUgKExlZ2FjeSlcbiAqL1xucm91dGVyLmdldCgnL3VybC86a2V5JywgZ2V0SW1hZ2VVcmxDb250cm9sbGVyKTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxNQUFBQSxTQUFBO0FBQUE7QUFBQSxDQUFBQyxjQUFBLEdBQUFDLENBQUEsT0FBQUMsT0FBQTtBQUNBLE1BQUFDLGdCQUFBO0FBQUE7QUFBQSxDQUFBSCxjQUFBLEdBQUFDLENBQUEsT0FBQUMsT0FBQTtBQUNBLE1BQUFFLFdBQUE7QUFBQTtBQUFBLENBQUFKLGNBQUEsR0FBQUMsQ0FBQSxPQUFBQyxPQUFBO0FBQ0EsTUFBQUcsa0JBQUE7QUFBQTtBQUFBLENBQUFMLGNBQUEsR0FBQUMsQ0FBQSxPQUFBQyxPQUFBO0FBS0EsTUFBQUksa0JBQUE7QUFBQTtBQUFBLENBQUFOLGNBQUEsR0FBQUMsQ0FBQSxPQUFBQyxPQUFBO0FBZ0JBLE1BQU1LLE1BQU07QUFBQTtBQUFBLENBQUFQLGNBQUEsR0FBQUMsQ0FBQSxPQUFHLElBQUFGLFNBQUEsQ0FBQVMsTUFBTSxHQUFFO0FBRXZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0ZBO0FBRUE7Ozs7QUFBQTtBQUFBUixjQUFBLEdBQUFDLENBQUE7QUFJQU0sTUFBTSxDQUFDRSxJQUFJLENBQ1QsU0FBUyxFQUNUTixnQkFBQSxDQUFBTyxjQUFjLEVBQ2RMLGtCQUFBLENBQUFNLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUMzQlAsa0JBQUEsQ0FBQVEsaUJBQWlCLEVBQ2pCUCxrQkFBQSxDQUFBUSxxQkFBcUIsQ0FDdEI7QUFFRDs7OztBQUFBO0FBQUFkLGNBQUEsR0FBQUMsQ0FBQTtBQUlBTSxNQUFNLENBQUNRLEdBQUcsQ0FBQyxHQUFHLEVBQUVULGtCQUFBLENBQUFVLG9CQUFvQixDQUFDO0FBRXJDOzs7O0FBQUE7QUFBQWhCLGNBQUEsR0FBQUMsQ0FBQTtBQUlBTSxNQUFNLENBQUNRLEdBQUcsQ0FBQyxXQUFXLEVBQUVULGtCQUFBLENBQUFXLHNCQUFzQixDQUFDO0FBRS9DOzs7O0FBQUE7QUFBQWpCLGNBQUEsR0FBQUMsQ0FBQTtBQUlBTSxNQUFNLENBQUNXLEdBQUcsQ0FBQyxXQUFXLEVBQUVmLGdCQUFBLENBQUFPLGNBQWMsRUFBRUosa0JBQUEsQ0FBQWEscUJBQXFCLENBQUM7QUFFOUQ7Ozs7QUFBQTtBQUFBbkIsY0FBQSxHQUFBQyxDQUFBO0FBSUFNLE1BQU0sQ0FBQ2EsTUFBTSxDQUFDLFdBQVcsRUFBRWpCLGdCQUFBLENBQUFPLGNBQWMsRUFBRUosa0JBQUEsQ0FBQWUscUJBQXFCLENBQUM7QUFFakU7QUFFQTs7OztBQUFBO0FBQUFyQixjQUFBLEdBQUFDLENBQUE7QUFJQU0sTUFBTSxDQUFDUSxHQUFHLENBQUMsa0JBQWtCLEVBQUVULGtCQUFBLENBQUFnQiw4QkFBOEIsQ0FBQztBQUU5RDs7OztBQUFBO0FBQUF0QixjQUFBLEdBQUFDLENBQUE7QUFJQU0sTUFBTSxDQUFDUSxHQUFHLENBQUMsUUFBUSxFQUFFVCxrQkFBQSxDQUFBaUIsdUJBQXVCLENBQUM7QUFFN0M7Ozs7QUFBQTtBQUFBdkIsY0FBQSxHQUFBQyxDQUFBO0FBSUFNLE1BQU0sQ0FBQ1EsR0FBRyxDQUFDLFNBQVMsRUFBRVQsa0JBQUEsQ0FBQWtCLHdCQUF3QixDQUFDO0FBRS9DO0FBRUE7Ozs7QUFBQTtBQUFBeEIsY0FBQSxHQUFBQyxDQUFBO0FBSUFNLE1BQU0sQ0FBQ1EsR0FBRyxDQUFDLFFBQVEsRUFBRVosZ0JBQUEsQ0FBQU8sY0FBYyxFQUFFTixXQUFBLENBQUFxQixTQUFTLEVBQUVuQixrQkFBQSxDQUFBb0IsdUJBQXVCLENBQUM7QUFFeEU7Ozs7QUFBQTtBQUFBMUIsY0FBQSxHQUFBQyxDQUFBO0FBSUFNLE1BQU0sQ0FBQ0UsSUFBSSxDQUNULFVBQVUsRUFDVk4sZ0JBQUEsQ0FBQU8sY0FBYyxFQUNkTixXQUFBLENBQUFxQixTQUFTLEVBQ1RuQixrQkFBQSxDQUFBcUIsOEJBQThCLENBQy9CO0FBRUQ7QUFFQTs7OztBQUFBO0FBQUEzQixjQUFBLEdBQUFDLENBQUE7QUFJQU0sTUFBTSxDQUFDUSxHQUFHLENBQUMsWUFBWSxFQUFFVCxrQkFBQSxDQUFBc0Isc0JBQXNCLENBQUM7QUFFaEQ7Ozs7QUFBQTtBQUFBNUIsY0FBQSxHQUFBQyxDQUFBO0FBSUFNLE1BQU0sQ0FBQ1EsR0FBRyxDQUFDLFdBQVcsRUFBRVQsa0JBQUEsQ0FBQXVCLHFCQUFxQixDQUFDO0FBQUM7QUFBQTdCLGNBQUEsR0FBQUMsQ0FBQTtBQUUvQzZCLE9BQUEsQ0FBQUMsT0FBQSxHQUFleEIsTUFBTSIsImlnbm9yZUxpc3QiOltdfQ==