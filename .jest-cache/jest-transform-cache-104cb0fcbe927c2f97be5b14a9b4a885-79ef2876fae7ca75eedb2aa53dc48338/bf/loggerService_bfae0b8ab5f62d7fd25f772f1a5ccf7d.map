{"version":3,"names":["cov_n19wyc78","actualCoverage","s","LogLevel","f","b","exports","LoggerService","constructor","isDevelopment","process","env","NODE_ENV","formatLog","entry","base","timestamp","level","toUpperCase","message","context","user","userId","request","requestId","duration","log","options","Object","assign","Date","toISOString","formattedLog","ERROR","console","error","stack","WARN","warn","INFO","info","DEBUG","debug","logRequest","req","res","_a","userEmail","headers","method","url","originalUrl","ip","userAgent","get","metadata","statusCode","contentLength","logError","logAuth","logEvent","eventId","logImage","imageId","logChat","conversationId","logAdmin","adminId","action","logger"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\loggerService.ts"],"sourcesContent":["import { Request, Response } from 'express';\n\nexport enum LogLevel {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'info',\n  DEBUG = 'debug',\n}\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  message: string;\n  context?: string;\n  userId?: string;\n  requestId?: string;\n  method?: string;\n  url?: string;\n  ip?: string;\n  userAgent?: string;\n  duration?: number;\n  error?: Error;\n  metadata?: Record<string, any>;\n}\n\nclass LoggerService {\n  private isDevelopment = process.env.NODE_ENV === 'development';\n\n  private formatLog(entry: LogEntry): string {\n    const base = `[${entry.timestamp}] ${entry.level.toUpperCase()}: ${entry.message}`;\n    const context = entry.context ? ` [${entry.context}]` : '';\n    const user = entry.userId ? ` [User: ${entry.userId}]` : '';\n    const request = entry.requestId ? ` [Request: ${entry.requestId}]` : '';\n    const duration = entry.duration ? ` [${entry.duration}ms]` : '';\n\n    return `${base}${context}${user}${request}${duration}`;\n  }\n\n  private log(\n    level: LogLevel,\n    message: string,\n    options: Partial<LogEntry> = {}\n  ): void {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      ...options,\n    };\n\n    const formattedLog = this.formatLog(entry);\n\n    switch (level) {\n      case LogLevel.ERROR:\n        console.error(formattedLog);\n        if (entry.error) {\n          console.error('Stack:', entry.error.stack);\n        }\n        break;\n      case LogLevel.WARN:\n        console.warn(formattedLog);\n        break;\n      case LogLevel.INFO:\n        console.info(formattedLog);\n        break;\n      case LogLevel.DEBUG:\n        if (this.isDevelopment) {\n          console.debug(formattedLog);\n        }\n        break;\n    }\n\n    // En producción, aquí se podría enviar a un servicio de logging externo\n    // como Winston, Pino, o un servicio cloud como CloudWatch, Loggly, etc.\n  }\n\n  error(message: string, error?: Error, options: Partial<LogEntry> = {}): void {\n    this.log(LogLevel.ERROR, message, { ...options, error });\n  }\n\n  warn(message: string, options: Partial<LogEntry> = {}): void {\n    this.log(LogLevel.WARN, message, options);\n  }\n\n  info(message: string, options: Partial<LogEntry> = {}): void {\n    this.log(LogLevel.INFO, message, options);\n  }\n\n  debug(message: string, options: Partial<LogEntry> = {}): void {\n    this.log(LogLevel.DEBUG, message, options);\n  }\n\n  // Métodos específicos para logging de requests\n  logRequest(req: Request, res: Response, duration: number): void {\n    const userId = (req as any).user?.userEmail || 'anonymous';\n    const requestId = (req.headers['x-request-id'] as string) || 'unknown';\n\n    this.info('Request completed', {\n      context: 'HTTP',\n      userId,\n      requestId,\n      method: req.method,\n      url: req.originalUrl,\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      duration,\n      metadata: {\n        statusCode: res.statusCode,\n        contentLength: res.get('Content-Length'),\n      },\n    });\n  }\n\n  logError(error: Error, req?: Request, context?: string): void {\n    const userId = req\n      ? (req as any).user?.userEmail || 'anonymous'\n      : 'unknown';\n    const requestId = req\n      ? (req.headers['x-request-id'] as string) || 'unknown'\n      : 'unknown';\n\n    this.error(error.message, error, {\n      context: context || 'Application',\n      userId,\n      requestId,\n      method: req?.method,\n      url: req?.originalUrl,\n      ip: req?.ip,\n      userAgent: req?.get('User-Agent'),\n    });\n  }\n\n  // Métodos específicos para diferentes contextos\n  logAuth(\n    message: string,\n    userId?: string,\n    options: Partial<LogEntry> = {}\n  ): void {\n    this.info(message, { context: 'Auth', userId, ...options });\n  }\n\n  logEvent(\n    message: string,\n    eventId?: string,\n    userId?: string,\n    options: Partial<LogEntry> = {}\n  ): void {\n    this.info(message, {\n      context: 'Event',\n      userId,\n      metadata: { eventId, ...options.metadata },\n      ...options,\n    });\n  }\n\n  logImage(\n    message: string,\n    imageId?: string,\n    userId?: string,\n    options: Partial<LogEntry> = {}\n  ): void {\n    this.info(message, {\n      context: 'Image',\n      userId,\n      metadata: { imageId, ...options.metadata },\n      ...options,\n    });\n  }\n\n  logChat(\n    message: string,\n    conversationId?: string,\n    userId?: string,\n    options: Partial<LogEntry> = {}\n  ): void {\n    this.info(message, {\n      context: 'Chat',\n      userId,\n      metadata: { conversationId, ...options.metadata },\n      ...options,\n    });\n  }\n\n  logAdmin(\n    message: string,\n    adminId?: string,\n    action?: string,\n    options: Partial<LogEntry> = {}\n  ): void {\n    this.info(message, {\n      context: 'Admin',\n      userId: adminId,\n      metadata: { action, ...options.metadata },\n      ...options,\n    });\n  }\n}\n\n// Exportar una instancia singleton\nexport const logger = new LoggerService();\n"],"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","ignoreList":[]}