{"version":3,"names":["exports","registerController","cov_1ebl7we1os","s","loginController","bcrypt","__importStar","require","authModel_1","validatios_1","jwt_1","mailer_1","functions_1","firebase_1","req","res","f","name","lastName","roll","userEmail","userPassword","status","body","console","log","b","json","msg","validarPassword","validarEmail","pass","hash","userStatus","saved","registerModel","token","createToken","user","getUserByEmailModel","data","error","info","isMatch","compare","updateUserByEmailController","__awaiter","dataUsers","params","toLocaleLowerCase","updateValidation","updateUserByEmailModel","emailRegisterController","numRandon","numberRandon","toString","numParam","html","querySnapshot","db","collection","where","get","empty","sendEmail","err","validNumberGetByEmail","numBack","vaildNumber","addEventToUserController","eventData","result","addEventToUserModel","requestEmailVerificationController","success","message","includes","existingUser","verificationCode","hashedCode","tempUserData","toLowerCase","expiresAt","Date","now","verificationCodes","set","code","userData","expiresIn","Error","verifyAndCompleteRegistrationController","storedData","delete","isCodeValid","deleteUserByEmailController","deleteUserByEmailModel","Map","generateVerificationCode","Math","floor","random","cleanupExpiredCodes","email","entries","process","env","NODE_ENV","setInterval","forgotPasswordController","emailError","verifyCodeController","resetPasswordController","newPassword","hashedPassword","updateData","update_at","updateResult"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\authController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport * as bcrypt from 'bcrypt';\nimport {\n  getUserByEmailModel,\n  registerModel,\n  updateUserByEmailModel,\n  addEventToUserModel,\n  deleteUserByEmailModel,\n} from '../models/authModel';\nimport { authUserRegister } from '../utils/DataTypes';\nimport { validarEmail, validarPassword } from '../utils/validatios';\nimport { createToken } from '../utils/jwt';\nimport { sendEmail } from '../utils/mailer';\nimport { numberRandon } from '../utils/functions';\nimport { db } from '../utils/firebase';\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     AuthUserRegister:\n *       type: object\n *       properties:\n *         name:\n *           type: string\n *         lastName:\n *           type: string\n *         roll:\n *           type: string\n *         userEmail:\n *           type: string\n *         userPassword:\n *           type: string\n *     Event:\n *       type: object\n *       properties:\n *         id:\n *           type: integer\n *         user:\n *           type: string\n *         eventName:\n *           type: string\n *         requesterName:\n *           type: string\n *         location:\n *           type: string\n *         date:\n *           type: string\n *         time:\n *           type: string\n *         duration:\n *           type: string\n *         instrument:\n *           type: string\n *         bringInstrument:\n *           type: boolean\n *         comment:\n *           type: string\n *         budget:\n *           type: string\n *         eventType:\n *           type: string\n *         flyerUrl:\n *           type: string\n *         songs:\n *           type: array\n *           items:\n *             type: string\n *         recommendations:\n *           type: array\n *           items:\n *             type: string\n *         mapsLink:\n *           type: string\n */\nexport async function registerController(req: Request, res: Response) {\n  try {\n    const {\n      name,\n      lastName,\n      roll,\n      userEmail,\n      userPassword,\n      status,\n    }: authUserRegister = req.body;\n    console.log(\n      '[src/controllers/authController.ts:72] Datos de registro recibidos:',\n      req.body\n    );\n    if (!name || !lastName || !roll || !userEmail || !userPassword) {\n      res.status(400).json({\n        msg: 'Error al registrarse, todos los campos deben de ser llenados',\n      });\n      return;\n    }\n    if (!validarPassword(userPassword)) {\n      res.status(400).json({\n        msg: 'La contraseña no cumple con los requisitos, debe de contener Mayúsculas, Minúsculas, Números y Carácteres especiales \\n\\n\\nEjemplo: Tunombre*55 .',\n      });\n      return;\n    }\n    if (!validarEmail(userEmail)) {\n      res.status(400).json({ msg: 'Correo Electrónico inválido.' });\n      return;\n    }\n    const pass = await bcrypt.hash(userPassword, 10);\n    // status por defecto true si no se envía\n    const userStatus = typeof status === 'boolean' ? status : true;\n    const saved = await registerModel(\n      name,\n      lastName,\n      roll,\n      userEmail,\n      pass,\n      userStatus\n    );\n    if (!saved) {\n      const token = createToken(name, lastName, userEmail, roll);\n      const user = await getUserByEmailModel(userEmail);\n      res\n        .status(200)\n        .json({ msg: 'Usuario Registrado con éxito.', token, user });\n      return;\n    } else if (saved === 'Hay campos que no han sido llenados') {\n      res\n        .status(409)\n        .json({ msg: 'Hay campos que no han sido llenados', data: saved });\n      return;\n    } else if (saved === 'El usuario ya Existe.') {\n      res.status(409).json({\n        msg: 'Ya hay un usuario con esta direccion de correo electrónico.',\n        data: saved,\n      });\n      return;\n    }\n  } catch (error) {\n    console.info(\n      `[src/controllers/authController.ts:95] Hubo un error al intentar registar un Usuario: ${error}`\n    );\n    res.status(400).json({ msg: 'Error al registrarse.', error });\n    return;\n  }\n}\n\nexport async function loginController(req: Request, res: Response) {\n  try {\n    const { userEmail, userPassword } = req.body;\n    if (!userEmail || !userPassword) {\n      res.status(400).json({ msg: 'Todos los campos deben de ser llenados.' });\n      return;\n    }\n    if (!validarEmail(userEmail)) {\n      res\n        .status(400)\n        .json({ msg: 'Dirección de correo electrónico no válido.' });\n      return;\n    }\n    const data = await getUserByEmailModel(userEmail);\n    if (!data) {\n      res.status(401).json({\n        msg: 'Verifique su dirección de correo electrónico o regístrese si no tiene una cuenta.',\n      });\n      return;\n    }\n    const name = data.name;\n    const lastName = data.lastName;\n    const roll = data.roll;\n    const pass = data.userPassword;\n    const isMatch = await bcrypt.compare(userPassword, pass);\n    if (!isMatch) {\n      res.status(401).json({ msg: 'Contraseña incorrecta.' });\n      return;\n    }\n    const token = createToken(name, lastName, userEmail, roll);\n    res.status(200).json({ msg: 'Login Exitoso', token, user: data });\n  } catch (error) {\n    res\n      .status(401)\n      .json({ msg: 'Error en la petición, Inténtelo mas tarde.', error });\n    return;\n  }\n}\n\nexport const updateUserByEmailController = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const dataUsers = req.body;\n    const userEmail = req.params.userEmail.toLocaleLowerCase();\n    if (!dataUsers || !userEmail) {\n      res.status(401).json({ msg: 'No hay Datos para actualizar' });\n    }\n    if (!validarEmail(userEmail)) {\n      res\n        .status(400)\n        .json({ msg: 'Dirección de correo electrónico no válido.' });\n      return;\n    }\n    // status por defecto true si no se envía\n    if (typeof dataUsers.status !== 'boolean') {\n      dataUsers.status = true;\n    }\n    const updateValidation = await updateUserByEmailModel(userEmail, dataUsers);\n    if (updateValidation) {\n      console.info('Resultado de updateUserByEmailModel');\n      console.info(updateValidation);\n      res.status(401).json({ msg: updateValidation });\n    }\n    res.status(200).json({ msg: 'Consulta éxitosa' });\n  } catch (error) {\n    console.info('Error al actualizar los datos.');\n    res.status(401).json({ msg: 'Error al actualizar el usuario.' });\n  }\n};\n\nexport const emailRegisterController = async (req: Request, res: Response) => {\n  const numRandon = numberRandon().toString();\n  const numParam = await bcrypt.hash(numRandon, 10);\n  const html = `<!DOCTYPE html>\n  <html lang=\"es\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    <title>Verifica tu correo - MusikOn</title>\n  </head>\n  <body style=\"margin: 0; padding: 0; background-color: #f4f4f4; font-family: 'Segoe UI', sans-serif;\">\n    <table align=\"center\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #f4f4f4; padding: 20px;\">\n      <tr>\n        <td align=\"center\">\n          <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #004aad; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 12px rgba(0,0,0,0.1);\">\n            <!-- Logo -->\n            <tr>\n              <td style=\"padding: 30px 0; text-align: center; background-color: #ffffff;\">\n                <img src=\"https://lh3.googleusercontent.com/a/ACg8ocLSs4B7UmP4bKLb26G-puyYjCURVh0Qnf9yHD_zxbCfRJTd3DFOovBly95OzJTWk34hnBf1RhigsdCnM0Wwg3TKCgsJ3rs=s288-c-no\" alt=\"MusikOn Logo\" width=\"120\" style=\"border-radius: 50%;\" />\n              </td>\n            </tr>\n\n            <!-- Título -->\n            <tr>\n              <td style=\"padding: 30px; text-align: center;\">\n                <h2 style=\"margin: 0; font-size: 26px; color: #fff;\">¡Bienvenido a <span style=\"color: #f1f1f1;\">MusikOn</span>!</h2>\n                <p style=\"font-size: 16px; color: hsl(246, 100%, 92%);\">Gracias por registrarte. Solo falta un paso para activar tu cuenta.</p>\n              </td>\n            </tr>\n\n            <!-- Botón -->\n            <tr>\n              <td style=\"text-align: center; padding: 20px;\">\n                <h1 style=\"display: inline-block; padding: 15px 30px; background-color: #004aad; color: #fff; text-decoration: none; font-weight: bold; border-radius: 8px; font-size: 50px;\">\n                  ${numRandon}\n                </h1>\n              </td>\n            </tr>\n\n            <!-- Mensaje de soporte -->\n            <tr>\n              <td style=\"padding: 20px 40px; text-align: center; font-size: 14px; color: #b6c9ff;\">\n                Si no creaste esta cuenta, puedes ignorar este mensaje. Si tienes dudas, contáctanos en <a href=\"mailto:appmusikon@gmail.com\" style=\"color: hsl(214, 100%, 77%);\">appmusikon@gmail.com</a>\n              </td>\n            </tr>\n\n            <!-- Footer -->\n            <tr>\n              <td style=\"text-align: center; padding: 30px; background-color: #f0f0f0; font-size: 12px; color: #0041f3;\">\n                &copy; 2025 MusikOn. Todos los derechos reservados.\n              </td>\n            </tr>\n          </table>\n        </td>\n      </tr>\n    </table>\n  </body>\n  </html>`;\n  try {\n    const userEmail = req.body.userEmail.toLocaleLowerCase();\n    if (!userEmail) {\n      res.status(400).json({ msg: 'Todos los campos deben de ser llenados.' });\n      return;\n    }\n    if (!validarEmail(userEmail)) {\n      res\n        .status(402)\n        .json({ msg: 'Dirección de correo electrónico no válido.' });\n      return;\n    }\n    const querySnapshot = await db\n      .collection('users')\n      .where('userEmail', '==', userEmail)\n      .get();\n    if (!querySnapshot.empty) {\n      res.status(409).json({\n        msg: 'Ya hay un usuario con esta dirección de correo electrónico.',\n      });\n      return;\n    } else {\n      await sendEmail(userEmail, 'Verifica tu cuenta en MusikOn', html);\n      res.status(200).json({ msg: 'Email recibido con exito!', numParam });\n    }\n  } catch (err) {\n    res\n      .status(400)\n      .json({ msg: 'Verifique bien su dirección de correo electrónico.', err });\n    return;\n  }\n};\n\nexport const validNumberGetByEmail = async (req: Request, res: Response) => {\n  try {\n    const numBack = req.body.vaildNumber.toString();\n    const numParam = req.params.vaildNumber.toString();\n    if (numBack === '' || numParam === '') {\n      res.status(402).json({ msg: 'Faltan datos requeridos.' });\n      return;\n    }\n    const isMatch = await bcrypt.compare(numParam, numBack);\n    if (!isMatch) {\n      console.info(`Son Iguales: ${numBack},${numParam}.`);\n      res.status(402).json({ msg: 'Codigo Incorrecto.' });\n      return;\n    }\n    console.info(`Numero del Body: ${numBack}`);\n    console.info(`Numero del Parametros: ${numParam}`);\n    res.status(200).json({ msg: 'Bien hecho!' });\n  } catch (err) {\n    res.status(402).json({ msg: 'Fallo el proceso!' });\n  }\n};\n\nexport const addEventToUserController = async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    if (!user || !user.userEmail) {\n      res.status(401).json({ msg: 'Usuario no autenticado.' });\n      return;\n    }\n    const eventData = req.body;\n    if (!eventData) {\n      res\n        .status(400)\n        .json({ msg: 'No se proporcionó información del evento.' });\n      return;\n    }\n    const result = await addEventToUserModel(user.userEmail, eventData);\n    if (!result) {\n      res.status(200).json({ msg: 'Evento guardado exitosamente.' });\n    } else {\n      res.status(400).json({ msg: result });\n    }\n  } catch (error) {\n    res.status(500).json({ msg: 'Error al guardar el evento.', error });\n  }\n};\n\n// Controlador para solicitar verificación de email (para músicos y creadores de eventos)\nexport const requestEmailVerificationController = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const { name, lastName, userEmail, userPassword, roll }: {\n      name: string;\n      lastName: string;\n      userEmail: string;\n      userPassword: string;\n      roll: 'musico' | 'eventCreator';\n    } = req.body;\n\n    console.log(\n      '[src/controllers/authController.ts:356] Solicitud de verificación recibida:',\n      { name, lastName, userEmail, roll }\n    );\n\n    // Validar campos requeridos\n    if (!name || !lastName || !userEmail || !userPassword || !roll) {\n      return res.status(400).json({\n        success: false,\n        message: 'Todos los campos son requeridos: name, lastName, userEmail, userPassword, roll',\n      });\n    }\n\n    // Validar email\n    if (!validarEmail(userEmail)) {\n      return res.status(400).json({\n        success: false,\n        message: 'El formato del email no es válido',\n      });\n    }\n\n    // Validar contraseña\n    if (!validarPassword(userPassword)) {\n      return res.status(400).json({\n        success: false,\n        message: 'La contraseña debe contener mayúsculas, minúsculas, números y caracteres especiales',\n      });\n    }\n\n    // Validar rol\n    if (!['musico', 'eventCreator'].includes(roll)) {\n      return res.status(400).json({\n        success: false,\n        message: 'El rol debe ser \"musico\" o \"eventCreator\"',\n      });\n    }\n\n    // Verificar si el usuario ya existe\n    const existingUser = await getUserByEmailModel(userEmail);\n    if (existingUser) {\n      return res.status(409).json({\n        success: false,\n        message: 'Ya existe un usuario con este email',\n      });\n    }\n\n    // Generar código de verificación\n    const verificationCode = numberRandon().toString();\n    const hashedCode = await bcrypt.hash(verificationCode, 10);\n\n    // Guardar datos temporalmente (se guardarán en la base de datos después de la verificación)\n    const tempUserData = {\n      name,\n      lastName,\n      userEmail: userEmail.toLowerCase(),\n      userPassword,\n      roll,\n      verificationCode: hashedCode,\n      expiresAt: Date.now() + 15 * 60 * 1000, // 15 minutos\n    };\n\n    // Guardar en memoria temporal (en producción usar Redis)\n    verificationCodes.set(userEmail.toLowerCase(), {\n      code: verificationCode,\n      userData: tempUserData,\n      expiresAt: Date.now() + 15 * 60 * 1000,\n    });\n\n    // Enviar email de verificación\n    const html = `<!DOCTYPE html>\n    <html lang=\"es\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n      <title>Verifica tu cuenta - MusikOn</title>\n    </head>\n    <body style=\"margin: 0; padding: 0; background-color: #f4f4f4; font-family: 'Segoe UI', sans-serif;\">\n      <table align=\"center\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #f4f4f4; padding: 20px;\">\n        <tr>\n          <td align=\"center\">\n            <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #004aad; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 12px rgba(0,0,0,0.1);\">\n              <!-- Logo -->\n              <tr>\n                <td style=\"padding: 30px 0; text-align: center; background-color: #ffffff;\">\n                  <img src=\"https://lh3.googleusercontent.com/a/ACg8ocLSs4B7UmP4bKLb26G-puyYjCURVh0Qnf9yHD_zxbCfRJTd3DFOovBly95OzJTWk34hnBf1RhigsdCnM0Wwg3TKCgsJ3rs=s288-c-no\" alt=\"MusikOn Logo\" width=\"120\" style=\"border-radius: 50%;\" />\n                </td>\n              </tr>\n\n              <!-- Título -->\n              <tr>\n                <td style=\"padding: 30px; text-align: center;\">\n                  <h2 style=\"margin: 0; font-size: 26px; color: #fff;\">¡Bienvenido a <span style=\"color: #f1f1f1;\">MusikOn</span>!</h2>\n                  <p style=\"font-size: 16px; color: hsl(246, 100%, 92%);\">Gracias por registrarte como ${roll === 'musico' ? 'músico' : 'creador de eventos'}. Solo falta un paso para activar tu cuenta.</p>\n                </td>\n              </tr>\n\n              <!-- Código -->\n              <tr>\n                <td style=\"text-align: center; padding: 20px;\">\n                  <h1 style=\"display: inline-block; padding: 15px 30px; background-color: #004aad; color: #fff; text-decoration: none; font-weight: bold; border-radius: 8px; font-size: 50px;\">\n                    ${verificationCode}\n                  </h1>\n                </td>\n              </tr>\n\n              <!-- Instrucciones -->\n              <tr>\n                <td style=\"padding: 20px 40px; text-align: center; font-size: 14px; color: #b6c9ff;\">\n                  <p>Ingresa este código en la aplicación para completar tu registro.</p>\n                  <p>Este código expira en 15 minutos.</p>\n                </td>\n              </tr>\n\n              <!-- Mensaje de soporte -->\n              <tr>\n                <td style=\"padding: 20px 40px; text-align: center; font-size: 14px; color: #b6c9ff;\">\n                  Si no creaste esta cuenta, puedes ignorar este mensaje. Si tienes dudas, contáctanos en <a href=\"mailto:appmusikon@gmail.com\" style=\"color: hsl(214, 100%, 77%);\">appmusikon@gmail.com</a>\n                </td>\n              </tr>\n\n              <!-- Footer -->\n              <tr>\n                <td style=\"text-align: center; padding: 30px; background-color: #f0f0f0; font-size: 12px; color: #0041f3;\">\n                  &copy; 2025 MusikOn. Todos los derechos reservados.\n                </td>\n              </tr>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </body>\n    </html>`;\n\n    await sendEmail(userEmail, 'Verifica tu cuenta en MusikOn', html);\n\n    console.log(\n      '[src/controllers/authController.ts:420] Email de verificación enviado:',\n      userEmail\n    );\n\n    return res.status(200).json({\n      success: true,\n      message: 'Email de verificación enviado exitosamente. Revisa tu bandeja de entrada.',\n      data: {\n        userEmail,\n        roll,\n        expiresIn: '15 minutos',\n      },\n    });\n  } catch (error) {\n    console.error(\n      '[src/controllers/authController.ts:440] Error en requestEmailVerificationController:',\n      error\n    );\n    return res.status(500).json({\n      success: false,\n      message: 'Error interno del servidor',\n      error: error instanceof Error ? error.message : 'Error desconocido',\n    });\n  }\n};\n\n// Controlador para verificar código y completar registro\nexport const verifyAndCompleteRegistrationController = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const { userEmail, code }: {\n      userEmail: string;\n      code: string;\n    } = req.body;\n\n    console.log(\n      '[src/controllers/authController.ts:450] Verificación de código recibida:',\n      { userEmail, code }\n    );\n\n    // Validar campos requeridos\n    if (!userEmail || !code) {\n      return res.status(400).json({\n        success: false,\n        message: 'Email y código son requeridos',\n      });\n    }\n\n    // Validar email\n    if (!validarEmail(userEmail)) {\n      return res.status(400).json({\n        success: false,\n        message: 'Email inválido',\n      });\n    }\n\n    // Buscar datos temporales\n    const storedData = verificationCodes.get(userEmail.toLowerCase());\n    if (!storedData) {\n      return res.status(400).json({\n        success: false,\n        message: 'Código no encontrado o expirado',\n      });\n    }\n\n    // Verificar expiración\n    if (storedData.expiresAt < Date.now()) {\n      verificationCodes.delete(userEmail.toLowerCase());\n      return res.status(400).json({\n        success: false,\n        message: 'Código expirado',\n      });\n    }\n\n    // Verificar que existan los datos del usuario\n    if (!storedData.userData) {\n      return res.status(400).json({\n        success: false,\n        message: 'Datos de registro no encontrados',\n      });\n    }\n\n    // Verificar código\n    const isCodeValid = await bcrypt.compare(code, storedData.userData.verificationCode);\n    if (!isCodeValid) {\n      return res.status(400).json({\n        success: false,\n        message: 'Código inválido',\n      });\n    }\n\n    // Registrar usuario en la base de datos\n    const { name, lastName, userPassword, roll } = storedData.userData;\n    const result = await registerModel(name, lastName, roll, userEmail, userPassword, true);\n\n    if (result === false) {\n      // Limpiar datos temporales\n      verificationCodes.delete(userEmail.toLowerCase());\n\n      // Generar token JWT\n      const token = createToken(name, lastName, userEmail, roll);\n\n      console.log(\n        '[src/controllers/authController.ts:500] Usuario registrado exitosamente:',\n        userEmail\n      );\n\n      return res.status(201).json({\n        success: true,\n        message: roll === 'musico' \n          ? 'Músico registrado exitosamente. Su perfil será completado por un administrador.'\n          : 'Creador de eventos registrado exitosamente.',\n        data: {\n          userEmail,\n          name,\n          lastName,\n          roll,\n          status: roll === 'musico' ? 'pending_approval' : 'active',\n          token,\n        },\n      });\n    } else {\n      return res.status(400).json({\n        success: false,\n        message: 'Error al registrar el usuario',\n        error: result,\n      });\n    }\n  } catch (error) {\n    console.error(\n      '[src/controllers/authController.ts:520] Error en verifyAndCompleteRegistrationController:',\n      error\n    );\n    return res.status(500).json({\n      success: false,\n      message: 'Error interno del servidor',\n      error: error instanceof Error ? error.message : 'Error desconocido',\n    });\n  }\n};\n\nexport const deleteUserByEmailController = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const { userEmail } = req.body;\n    console.log(\n      '[src/controllers/authController.ts:270] [DELETE] userEmail recibido:',\n      userEmail\n    ); // LOG de depuración\n    if (!userEmail) {\n      res.status(400).json({ message: 'Falta el email' });\n      return;\n    }\n    const result = await deleteUserByEmailModel(userEmail);\n    console.log(\n      '[src/controllers/authController.ts:276] Resultado de deleteUserByEmailModel:',\n      result\n    );\n    console.log(\n      '[src/controllers/authController.ts:277] [DELETE] Resultado de deleteUserByEmailModel:',\n      result\n    ); // LOG de depuración\n    if (result === false) {\n      res.json({ message: 'Usuario eliminado correctamente' });\n    } else if (result === 'Falta el email') {\n      res.status(400).json({ message: 'Falta el email' });\n    } else if (result === 'not_found') {\n      res\n        .status(404)\n        .json({ message: 'El usuario no existe o ya fue eliminado' });\n    } else {\n      res.status(500).json({ message: result });\n    }\n  } catch (error) {\n    console.log(\n      '[src/controllers/authController.ts:288] Error en deleteUserByEmailController'\n    );\n    console.error(\n      '[src/controllers/authController.ts:289] [DELETE] Error al eliminar usuario:',\n      error\n    ); // LOG de error\n    res.status(500).json({\n      message: 'Error al eliminar usuario',\n      error: (error as Error).message,\n    });\n  }\n};\n\n/**\n * @swagger\n * /auth/forgot-password:\n *   post:\n *     summary: Solicitar recuperación de contraseña (solo superadmin)\n *     tags: [Auth]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               userEmail:\n *                 type: string\n *     responses:\n *       200:\n *         description: Código de verificación enviado\n *       404:\n *         description: Usuario no encontrado\n *       403:\n *         description: Solo superadmin puede recuperar contraseña\n *\n * /auth/verify-code:\n *   post:\n *     summary: Verificar código de recuperación\n *     tags: [Auth]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               userEmail:\n *                 type: string\n *               code:\n *                 type: string\n *     responses:\n *       200:\n *         description: Código verificado correctamente\n *       400:\n *         description: Código inválido o expirado\n *\n * /auth/reset-password:\n *   post:\n *     summary: Restablecer contraseña\n *     tags: [Auth]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               userEmail:\n *                 type: string\n *               code:\n *                 type: string\n *               newPassword:\n *                 type: string\n *     responses:\n *       200:\n *         description: Contraseña actualizada correctamente\n *       400:\n *         description: Código inválido o contraseña débil\n */\n\n// Almacén temporal para códigos de verificación (en producción usar Redis)\nconst verificationCodes = new Map<\n  string,\n  { \n    code: string; \n    expiresAt: number;\n    userData?: {\n      name: string;\n      lastName: string;\n      userEmail: string;\n      userPassword: string;\n      roll: string;\n      verificationCode: string;\n      expiresAt: number;\n    };\n  }\n>();\n\n// Función para generar código de verificación\nfunction generateVerificationCode(): string {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}\n\n// Función para limpiar códigos expirados\nfunction cleanupExpiredCodes() {\n  const now = Date.now();\n  for (const [email, data] of verificationCodes.entries()) {\n    if (data.expiresAt < now) {\n      verificationCodes.delete(email);\n    }\n  }\n}\n\n// Ejecutar limpieza cada 5 minutos solo en producción\nif (process.env.NODE_ENV === 'production') {\n  setInterval(cleanupExpiredCodes, 5 * 60 * 1000);\n}\n\n// Solicitar recuperación de contraseña (solo superadmin)\nexport const forgotPasswordController = async (req: Request, res: Response) => {\n  try {\n    const { userEmail } = req.body;\n\n    if (!userEmail) {\n      res.status(400).json({ msg: 'Email es requerido' });\n      return;\n    }\n\n    if (!validarEmail(userEmail)) {\n      res.status(400).json({ msg: 'Email inválido' });\n      return;\n    }\n\n    // Buscar usuario\n    const user = await getUserByEmailModel(userEmail);\n    if (!user) {\n      res.status(404).json({ msg: 'Usuario no encontrado' });\n      return;\n    }\n\n    // Verificar que sea superadmin\n    if (user.roll !== 'superadmin') {\n      res\n        .status(403)\n        .json({ msg: 'Solo superadmin puede recuperar contraseña' });\n      return;\n    }\n\n    // Generar código de verificación\n    const verificationCode = generateVerificationCode();\n    const expiresAt = Date.now() + 10 * 60 * 1000; // 10 minutos\n\n    // Guardar código temporalmente\n    verificationCodes.set(userEmail.toLowerCase(), {\n      code: verificationCode,\n      expiresAt,\n    });\n\n    // Enviar email con código\n    const html = `<!DOCTYPE html>\n    <html lang=\"es\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n      <title>Recuperar Contraseña - MusikOn</title>\n    </head>\n    <body style=\"margin: 0; padding: 0; background-color: #f4f4f4; font-family: 'Segoe UI', sans-serif;\">\n      <table align=\"center\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #f4f4f4; padding: 20px;\">\n        <tr>\n          <td align=\"center\">\n            <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #004aad; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 12px rgba(0,0,0,0.1);\">\n              <!-- Logo -->\n              <tr>\n                <td style=\"padding: 30px 0; text-align: center; background-color: #ffffff;\">\n                  <img src=\"https://lh3.googleusercontent.com/a/ACg8ocLSs4B7UmP4bKLb26G-puyYjCURVh0Qnf9yHD_zxbCfRJTd3DFOovBly95OzJTWk34hnBf1RhigsdCnM0Wwg3TKCgsJ3rs=s288-c-no\" alt=\"MusikOn Logo\" width=\"120\" style=\"border-radius: 50%;\" />\n                </td>\n              </tr>\n\n              <!-- Título -->\n              <tr>\n                <td style=\"padding: 30px; text-align: center;\">\n                  <h2 style=\"margin: 0; font-size: 26px; color: #fff;\">Recuperar Contraseña</h2>\n                  <p style=\"font-size: 16px; color: hsl(246, 100%, 92%);\">Hola ${user.name}, has solicitado restablecer tu contraseña.</p>\n                </td>\n              </tr>\n\n              <!-- Código de Verificación -->\n              <tr>\n                <td style=\"text-align: center; padding: 20px;\">\n                  <h1 style=\"display: inline-block; padding: 15px 30px; background-color: #004aad; color: #fff; text-decoration: none; font-weight: bold; border-radius: 8px; font-size: 50px;\">\n                    ${verificationCode}\n                  </h1>\n                </td>\n              </tr>\n\n              <!-- Instrucciones -->\n              <tr>\n                <td style=\"padding: 20px 40px; text-align: center;\">\n                  <p style=\"font-size: 16px; color: #fff; margin-bottom: 10px;\">\n                    <strong>Instrucciones:</strong>\n                  </p>\n                  <p style=\"font-size: 14px; color: #b6c9ff; margin: 5px 0;\">\n                    1. Copia el código de 6 dígitos de arriba\n                  </p>\n                  <p style=\"font-size: 14px; color: #b6c9ff; margin: 5px 0;\">\n                    2. Ve a la página de recuperación de contraseña\n                  </p>\n                  <p style=\"font-size: 14px; color: #b6c9ff; margin: 5px 0;\">\n                    3. Ingresa el código y tu nueva contraseña\n                  </p>\n                  <p style=\"font-size: 14px; color: #b6c9ff; margin: 5px 0;\">\n                    4. El código expira en 10 minutos\n                  </p>\n                </td>\n              </tr>\n\n              <!-- Mensaje de seguridad -->\n              <tr>\n                <td style=\"padding: 20px 40px; text-align: center; font-size: 14px; color: #b6c9ff;\">\n                  <p style=\"margin: 0;\">\n                    <strong>⚠️ Importante:</strong> Si no solicitaste este cambio, puedes ignorar este mensaje. \n                    Tu contraseña actual permanecerá sin cambios.\n                  </p>\n                </td>\n              </tr>\n\n              <!-- Footer -->\n              <tr>\n                <td style=\"text-align: center; padding: 30px; background-color: #f0f0f0; font-size: 12px; color: #0041f3;\">\n                  &copy; 2025 MusikOn. Todos los derechos reservados.\n                </td>\n              </tr>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </body>\n    </html>`;\n\n    try {\n      await sendEmail(userEmail, 'Recuperar Contraseña - MusikOn', html);\n\n      res.status(200).json({\n        msg: 'Código de verificación enviado al email',\n        userEmail: userEmail,\n      });\n    } catch (emailError) {\n      console.error('Error al enviar email:', emailError);\n      res.status(500).json({ msg: 'Error al enviar email de verificación' });\n    }\n  } catch (error) {\n    console.error('Error en forgotPasswordController:', error);\n    res.status(500).json({ msg: 'Error interno del servidor' });\n  }\n};\n\n// Verificar código de recuperación\nexport const verifyCodeController = async (req: Request, res: Response) => {\n  try {\n    const { userEmail, code } = req.body;\n\n    if (!userEmail || !code) {\n      res.status(400).json({ msg: 'Email y código son requeridos' });\n      return;\n    }\n\n    if (!validarEmail(userEmail)) {\n      res.status(400).json({ msg: 'Email inválido' });\n      return;\n    }\n\n    // Buscar usuario\n    const user = await getUserByEmailModel(userEmail);\n    if (!user) {\n      res.status(404).json({ msg: 'Usuario no encontrado' });\n      return;\n    }\n\n    // Verificar que sea superadmin\n    if (user.roll !== 'superadmin') {\n      res\n        .status(403)\n        .json({ msg: 'Solo superadmin puede recuperar contraseña' });\n      return;\n    }\n\n    // Verificar código\n    const storedData = verificationCodes.get(userEmail.toLowerCase());\n    if (!storedData) {\n      res.status(400).json({ msg: 'Código no encontrado o expirado' });\n      return;\n    }\n\n    if (storedData.expiresAt < Date.now()) {\n      verificationCodes.delete(userEmail.toLowerCase());\n      res.status(400).json({ msg: 'Código expirado' });\n      return;\n    }\n\n    if (storedData.code !== code) {\n      res.status(400).json({ msg: 'Código inválido' });\n      return;\n    }\n\n    res.status(200).json({\n      msg: 'Código verificado correctamente',\n      userEmail: userEmail,\n    });\n  } catch (error) {\n    console.error('Error en verifyCodeController:', error);\n    res.status(500).json({ msg: 'Error interno del servidor' });\n  }\n};\n\n// Restablecer contraseña\nexport const resetPasswordController = async (req: Request, res: Response) => {\n  try {\n    const { userEmail, code, newPassword } = req.body;\n\n    if (!userEmail || !code || !newPassword) {\n      res\n        .status(400)\n        .json({ msg: 'Email, código y nueva contraseña son requeridos' });\n      return;\n    }\n\n    if (!validarEmail(userEmail)) {\n      res.status(400).json({ msg: 'Email inválido' });\n      return;\n    }\n\n    if (!validarPassword(newPassword)) {\n      res.status(400).json({\n        msg: 'La contraseña no cumple con los requisitos, debe de contener Mayúsculas, Minúsculas, Números y Carácteres especiales',\n      });\n      return;\n    }\n\n    // Buscar usuario\n    const user = await getUserByEmailModel(userEmail);\n    if (!user) {\n      res.status(404).json({ msg: 'Usuario no encontrado' });\n      return;\n    }\n\n    // Verificar que sea superadmin\n    if (user.roll !== 'superadmin') {\n      res\n        .status(403)\n        .json({ msg: 'Solo superadmin puede recuperar contraseña' });\n      return;\n    }\n\n    // Verificar código\n    const storedData = verificationCodes.get(userEmail.toLowerCase());\n    if (!storedData) {\n      res.status(400).json({ msg: 'Código no encontrado o expirado' });\n      return;\n    }\n\n    if (storedData.expiresAt < Date.now()) {\n      verificationCodes.delete(userEmail.toLowerCase());\n      res.status(400).json({ msg: 'Código expirado' });\n      return;\n    }\n\n    if (storedData.code !== code) {\n      res.status(400).json({ msg: 'Código inválido' });\n      return;\n    }\n\n    // Hashear nueva contraseña\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n    // Actualizar contraseña en la base de datos\n    const updateData = {\n      userPassword: hashedPassword,\n      update_at: new Date().toString(),\n    };\n\n    const updateResult = await updateUserByEmailModel(userEmail, updateData);\n    if (updateResult) {\n      res.status(400).json({ msg: updateResult });\n      return;\n    }\n\n    // Eliminar código usado\n    verificationCodes.delete(userEmail.toLowerCase());\n\n    res.status(200).json({\n      msg: 'Contraseña actualizada correctamente',\n      userEmail: userEmail,\n    });\n  } catch (error) {\n    console.error('Error en resetPasswordController:', error);\n    res.status(500).json({ msg: 'Error interno del servidor' });\n  }\n};\n"],"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","ignoreList":[]}