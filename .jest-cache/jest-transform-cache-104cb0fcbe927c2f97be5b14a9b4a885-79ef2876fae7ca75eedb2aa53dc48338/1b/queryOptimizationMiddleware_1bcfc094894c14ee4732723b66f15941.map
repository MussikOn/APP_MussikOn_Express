{"version":3,"names":["cov_130enqvl0g","actualCoverage","s","loggerService_1","require","QueryOptimizationMiddleware","constructor","options","b","f","Object","assign","maxLimit","defaultLimit","maxPageSize","enableCache","cacheTTL","getInstance","instance","middleware","req","res","next","optimizedQuery","optimizeQuery","query","setHeader","limit","toString","page","logger","debug","metadata","service","originalQuery","error","optimized","offset","filters","fields","parseInt","Math","max","min","pageSize","sortBy","sortOrder","order","toLowerCase","search","Array","isArray","map","excludeParams","key","value","entries","includes","addPaginationHeaders","data","total","totalPages","ceil","hasNext","hasPrev","baseUrl","originalUrl","split","params","URLSearchParams","links","set","prev","rel","url","join","optimizeFirestoreQuery","optimizedQueryBuilder","field","values","v","trim","where","orderBy","getQueryStats","startTime","queryStartTime","Date","now","queryTime","resultCount","cacheHit","optimizationApplied","headers","exports","queryOptimizationMiddleware"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\queryOptimizationMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { logger } from '../services/loggerService';\r\n\r\nexport interface QueryOptimizationOptions {\r\n  maxLimit?: number;\r\n  defaultLimit?: number;\r\n  maxPageSize?: number;\r\n  enableCache?: boolean;\r\n  cacheTTL?: number;\r\n}\r\n\r\nexport interface OptimizedQuery {\r\n  limit: number;\r\n  offset: number;\r\n  page: number;\r\n  sortBy?: string;\r\n  sortOrder?: 'asc' | 'desc';\r\n  filters?: Record<string, any>;\r\n  search?: string;\r\n  fields?: string[];\r\n}\r\n\r\nexport class QueryOptimizationMiddleware {\r\n  private static instance: QueryOptimizationMiddleware;\r\n  private options: QueryOptimizationOptions;\r\n\r\n  private constructor(options: QueryOptimizationOptions = {}) {\r\n    this.options = {\r\n      maxLimit: 100,\r\n      defaultLimit: 20,\r\n      maxPageSize: 50,\r\n      enableCache: true,\r\n      cacheTTL: 300, // 5 minutes\r\n      ...options\r\n    };\r\n  }\r\n\r\n  public static getInstance(options?: QueryOptimizationOptions): QueryOptimizationMiddleware {\r\n    if (!QueryOptimizationMiddleware.instance) {\r\n      QueryOptimizationMiddleware.instance = new QueryOptimizationMiddleware(options);\r\n    }\r\n    return QueryOptimizationMiddleware.instance;\r\n  }\r\n\r\n  public middleware() {\r\n    return (req: Request, res: Response, next: NextFunction) => {\r\n      try {\r\n        // Optimize query parameters\r\n        const optimizedQuery = this.optimizeQuery(req.query);\r\n        \r\n        // Add optimized query to request\r\n        (req as any).optimizedQuery = optimizedQuery;\r\n        \r\n        // Add query optimization headers\r\n        res.setHeader('X-Query-Optimized', 'true');\r\n        res.setHeader('X-Page-Size', optimizedQuery.limit.toString());\r\n        res.setHeader('X-Current-Page', optimizedQuery.page.toString());\r\n\r\n        logger.debug('Query optimized successfully', { \r\n          metadata: { \r\n            service: 'QueryOptimizationMiddleware',\r\n            originalQuery: req.query,\r\n            optimizedQuery \r\n          } \r\n        });\r\n\r\n        next();\r\n      } catch (error) {\r\n        logger.error('Error optimizing query', error as Error, { \r\n          metadata: { service: 'QueryOptimizationMiddleware' } \r\n        });\r\n        next();\r\n      }\r\n    };\r\n  }\r\n\r\n  private optimizeQuery(query: any): OptimizedQuery {\r\n    const optimized: OptimizedQuery = {\r\n      limit: this.options.defaultLimit!,\r\n      offset: 0,\r\n      page: 1,\r\n      filters: {},\r\n      fields: []\r\n    };\r\n\r\n    // Handle pagination\r\n    if (query.page) {\r\n      const page = parseInt(query.page as string) || 1;\r\n      optimized.page = Math.max(1, page);\r\n    }\r\n\r\n    if (query.limit) {\r\n      const limit = parseInt(query.limit as string) || this.options.defaultLimit!;\r\n      optimized.limit = Math.min(limit, this.options.maxLimit!);\r\n    }\r\n\r\n    if (query.pageSize) {\r\n      const pageSize = parseInt(query.pageSize as string) || this.options.defaultLimit!;\r\n      optimized.limit = Math.min(pageSize, this.options.maxPageSize!);\r\n    }\r\n\r\n    // Calculate offset\r\n    optimized.offset = (optimized.page - 1) * optimized.limit;\r\n\r\n    // Handle sorting\r\n    if (query.sortBy) {\r\n      optimized.sortBy = query.sortBy as string;\r\n    }\r\n\r\n    if (query.sortOrder) {\r\n      const order = (query.sortOrder as string).toLowerCase();\r\n      optimized.sortOrder = order === 'desc' ? 'desc' : 'asc';\r\n    }\r\n\r\n    // Handle search\r\n    if (query.search) {\r\n      optimized.search = query.search as string;\r\n    }\r\n\r\n    // Handle field selection\r\n    if (query.fields) {\r\n      const fields = Array.isArray(query.fields) ? query.fields : [query.fields];\r\n      optimized.fields = fields.map((f: any) => f.toString());\r\n    }\r\n\r\n    // Handle filters (exclude pagination and sorting params)\r\n    const excludeParams = ['page', 'limit', 'pageSize', 'sortBy', 'sortOrder', 'search', 'fields'];\r\n    for (const [key, value] of Object.entries(query)) {\r\n      if (!excludeParams.includes(key)) {\r\n        optimized.filters![key] = value;\r\n      }\r\n    }\r\n\r\n    return optimized;\r\n  }\r\n\r\n  public static addPaginationHeaders(res: Response, data: any[], total: number, query: OptimizedQuery): void {\r\n    const totalPages = Math.ceil(total / query.limit);\r\n    const hasNext = query.page < totalPages;\r\n    const hasPrev = query.page > 1;\r\n\r\n    res.setHeader('X-Total-Count', total.toString());\r\n    res.setHeader('X-Total-Pages', totalPages.toString());\r\n    res.setHeader('X-Has-Next', hasNext.toString());\r\n    res.setHeader('X-Has-Prev', hasPrev.toString());\r\n    res.setHeader('X-Current-Page', query.page.toString());\r\n    res.setHeader('X-Page-Size', query.limit.toString());\r\n\r\n    // Add pagination links\r\n    const baseUrl = res.req.originalUrl.split('?')[0];\r\n    const params = new URLSearchParams(res.req.query as any);\r\n    \r\n    const links: Record<string, string> = {};\r\n    \r\n    if (hasPrev) {\r\n      params.set('page', (query.page - 1).toString());\r\n      links.prev = `${baseUrl}?${params.toString()}`;\r\n    }\r\n    \r\n    if (hasNext) {\r\n      params.set('page', (query.page + 1).toString());\r\n      links.next = `${baseUrl}?${params.toString()}`;\r\n    }\r\n\r\n    res.setHeader('Link', Object.entries(links)\r\n      .map(([rel, url]) => `<${url}>; rel=\"${rel}\"`)\r\n      .join(', '));\r\n  }\r\n\r\n  public static optimizeFirestoreQuery(query: any, optimizedQuery: OptimizedQuery): any {\r\n    try {\r\n      let optimizedQueryBuilder = query;\r\n\r\n      // Apply filters\r\n      if (optimizedQuery.filters) {\r\n        for (const [field, value] of Object.entries(optimizedQuery.filters)) {\r\n          if (typeof value === 'string' && value.includes(',')) {\r\n            // Handle array filters\r\n            const values = value.split(',').map(v => v.trim());\r\n            optimizedQueryBuilder = optimizedQueryBuilder.where(field, 'in', values);\r\n          } else {\r\n            optimizedQueryBuilder = optimizedQueryBuilder.where(field, '==', value);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Apply search (if supported)\r\n      if (optimizedQuery.search) {\r\n        // This would need to be implemented based on your search strategy\r\n        // For now, we'll just log it\r\n        logger.debug('Search query detected', { \r\n          metadata: { \r\n            service: 'QueryOptimizationMiddleware',\r\n            search: optimizedQuery.search \r\n          } \r\n        });\r\n      }\r\n\r\n      // Apply sorting\r\n      if (optimizedQuery.sortBy) {\r\n        optimizedQueryBuilder = optimizedQueryBuilder.orderBy(\r\n          optimizedQuery.sortBy, \r\n          optimizedQuery.sortOrder || 'asc'\r\n        );\r\n      }\r\n\r\n      // Apply pagination\r\n      optimizedQueryBuilder = optimizedQueryBuilder\r\n        .limit(optimizedQuery.limit)\r\n        .offset(optimizedQuery.offset);\r\n\r\n      return optimizedQueryBuilder;\r\n    } catch (error) {\r\n      logger.error('Error optimizing Firestore query', error as Error, { \r\n        metadata: { service: 'QueryOptimizationMiddleware' } \r\n      });\r\n      return query;\r\n    }\r\n  }\r\n\r\n  public static getQueryStats(req: Request): {\r\n    queryTime: number;\r\n    resultCount: number;\r\n    cacheHit: boolean;\r\n    optimizationApplied: boolean;\r\n  } {\r\n    const startTime = (req as any).queryStartTime || Date.now();\r\n    const queryTime = Date.now() - startTime;\r\n    const resultCount = (req as any).resultCount || 0;\r\n    const cacheHit = (req as any).cacheHit || false;\r\n    const optimizationApplied = req.headers['x-query-optimized'] === 'true';\r\n\r\n    return {\r\n      queryTime,\r\n      resultCount,\r\n      cacheHit,\r\n      optimizationApplied\r\n    };\r\n  }\r\n}\r\n\r\n// Export middleware function\r\nexport const queryOptimizationMiddleware = QueryOptimizationMiddleware.getInstance().middleware(); "],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AA5CJ,MAAAC,eAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAqBA,MAAaC,2BAA2B;EAItCC,YAAoBC,OAAA;EAAA;EAAA,CAAAP,cAAA,GAAAQ,CAAA,UAAoC,EAAE;IAAA;IAAAR,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAE,CAAA;IACxD,IAAI,CAACK,OAAO,GAAAG,MAAA,CAAAC,MAAA;MACVC,QAAQ,EAAE,GAAG;MACbC,YAAY,EAAE,EAAE;MAChBC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,IAAI;MACjBC,QAAQ,EAAE;IAAG,GACVT,OAAO,CACX;EACH;EAEO,OAAOU,WAAWA,CAACV,OAAkC;IAAA;IAAAP,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAACG,2BAA2B,CAACa,QAAQ,EAAE;MAAA;MAAAlB,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MACzCG,2BAA2B,CAACa,QAAQ,GAAG,IAAIb,2BAA2B,CAACE,OAAO,CAAC;IACjF,CAAC;IAAA;IAAA;MAAAP,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IACD,OAAOG,2BAA2B,CAACa,QAAQ;EAC7C;EAEOC,UAAUA,CAAA;IAAA;IAAAnB,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAE,CAAA;IACf,OAAO,CAACkB,GAAY,EAAEC,GAAa,EAAEC,IAAkB,KAAI;MAAA;MAAAtB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACzD,IAAI;QACF;QACA,MAAMqB,cAAc;QAAA;QAAA,CAAAvB,cAAA,GAAAE,CAAA,OAAG,IAAI,CAACsB,aAAa,CAACJ,GAAG,CAACK,KAAK,CAAC;QAEpD;QAAA;QAAAzB,cAAA,GAAAE,CAAA;QACCkB,GAAW,CAACG,cAAc,GAAGA,cAAc;QAE5C;QAAA;QAAAvB,cAAA,GAAAE,CAAA;QACAmB,GAAG,CAACK,SAAS,CAAC,mBAAmB,EAAE,MAAM,CAAC;QAAC;QAAA1B,cAAA,GAAAE,CAAA;QAC3CmB,GAAG,CAACK,SAAS,CAAC,aAAa,EAAEH,cAAc,CAACI,KAAK,CAACC,QAAQ,EAAE,CAAC;QAAC;QAAA5B,cAAA,GAAAE,CAAA;QAC9DmB,GAAG,CAACK,SAAS,CAAC,gBAAgB,EAAEH,cAAc,CAACM,IAAI,CAACD,QAAQ,EAAE,CAAC;QAAC;QAAA5B,cAAA,GAAAE,CAAA;QAEhEC,eAAA,CAAA2B,MAAM,CAACC,KAAK,CAAC,8BAA8B,EAAE;UAC3CC,QAAQ,EAAE;YACRC,OAAO,EAAE,6BAA6B;YACtCC,aAAa,EAAEd,GAAG,CAACK,KAAK;YACxBF;;SAEH,CAAC;QAAC;QAAAvB,cAAA,GAAAE,CAAA;QAEHoB,IAAI,EAAE;MACR,CAAC,CAAC,OAAOa,KAAK,EAAE;QAAA;QAAAnC,cAAA,GAAAE,CAAA;QACdC,eAAA,CAAA2B,MAAM,CAACK,KAAK,CAAC,wBAAwB,EAAEA,KAAc,EAAE;UACrDH,QAAQ,EAAE;YAAEC,OAAO,EAAE;UAA6B;SACnD,CAAC;QAAC;QAAAjC,cAAA,GAAAE,CAAA;QACHoB,IAAI,EAAE;MACR;IACF,CAAC;EACH;EAEQE,aAAaA,CAACC,KAAU;IAAA;IAAAzB,cAAA,GAAAS,CAAA;IAC9B,MAAM2B,SAAS;IAAA;IAAA,CAAApC,cAAA,GAAAE,CAAA,QAAmB;MAChCyB,KAAK,EAAE,IAAI,CAACpB,OAAO,CAACM,YAAa;MACjCwB,MAAM,EAAE,CAAC;MACTR,IAAI,EAAE,CAAC;MACPS,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE;KACT;IAED;IAAA;IAAAvC,cAAA,GAAAE,CAAA;IACA,IAAIuB,KAAK,CAACI,IAAI,EAAE;MAAA;MAAA7B,cAAA,GAAAQ,CAAA;MACd,MAAMqB,IAAI;MAAA;MAAA,CAAA7B,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAQ,CAAA,UAAAgC,QAAQ,CAACf,KAAK,CAACI,IAAc,CAAC;MAAA;MAAA,CAAA7B,cAAA,GAAAQ,CAAA,UAAI,CAAC;MAAC;MAAAR,cAAA,GAAAE,CAAA;MACjDkC,SAAS,CAACP,IAAI,GAAGY,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEb,IAAI,CAAC;IACpC,CAAC;IAAA;IAAA;MAAA7B,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAED,IAAIuB,KAAK,CAACE,KAAK,EAAE;MAAA;MAAA3B,cAAA,GAAAQ,CAAA;MACf,MAAMmB,KAAK;MAAA;MAAA,CAAA3B,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAQ,CAAA,UAAAgC,QAAQ,CAACf,KAAK,CAACE,KAAe,CAAC;MAAA;MAAA,CAAA3B,cAAA,GAAAQ,CAAA,UAAI,IAAI,CAACD,OAAO,CAACM,YAAa;MAAC;MAAAb,cAAA,GAAAE,CAAA;MAC5EkC,SAAS,CAACT,KAAK,GAAGc,IAAI,CAACE,GAAG,CAAChB,KAAK,EAAE,IAAI,CAACpB,OAAO,CAACK,QAAS,CAAC;IAC3D,CAAC;IAAA;IAAA;MAAAZ,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAED,IAAIuB,KAAK,CAACmB,QAAQ,EAAE;MAAA;MAAA5C,cAAA,GAAAQ,CAAA;MAClB,MAAMoC,QAAQ;MAAA;MAAA,CAAA5C,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAQ,CAAA,UAAAgC,QAAQ,CAACf,KAAK,CAACmB,QAAkB,CAAC;MAAA;MAAA,CAAA5C,cAAA,GAAAQ,CAAA,UAAI,IAAI,CAACD,OAAO,CAACM,YAAa;MAAC;MAAAb,cAAA,GAAAE,CAAA;MAClFkC,SAAS,CAACT,KAAK,GAAGc,IAAI,CAACE,GAAG,CAACC,QAAQ,EAAE,IAAI,CAACrC,OAAO,CAACO,WAAY,CAAC;IACjE,CAAC;IAAA;IAAA;MAAAd,cAAA,GAAAQ,CAAA;IAAA;IAED;IAAAR,cAAA,GAAAE,CAAA;IACAkC,SAAS,CAACC,MAAM,GAAG,CAACD,SAAS,CAACP,IAAI,GAAG,CAAC,IAAIO,SAAS,CAACT,KAAK;IAEzD;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IACA,IAAIuB,KAAK,CAACoB,MAAM,EAAE;MAAA;MAAA7C,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAChBkC,SAAS,CAACS,MAAM,GAAGpB,KAAK,CAACoB,MAAgB;IAC3C,CAAC;IAAA;IAAA;MAAA7C,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAED,IAAIuB,KAAK,CAACqB,SAAS,EAAE;MAAA;MAAA9C,cAAA,GAAAQ,CAAA;MACnB,MAAMuC,KAAK;MAAA;MAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAIuB,KAAK,CAACqB,SAAoB,CAACE,WAAW,EAAE;MAAC;MAAAhD,cAAA,GAAAE,CAAA;MACxDkC,SAAS,CAACU,SAAS,GAAGC,KAAK,KAAK,MAAM;MAAA;MAAA,CAAA/C,cAAA,GAAAQ,CAAA,WAAG,MAAM;MAAA;MAAA,CAAAR,cAAA,GAAAQ,CAAA,WAAG,KAAK;IACzD,CAAC;IAAA;IAAA;MAAAR,cAAA,GAAAQ,CAAA;IAAA;IAED;IAAAR,cAAA,GAAAE,CAAA;IACA,IAAIuB,KAAK,CAACwB,MAAM,EAAE;MAAA;MAAAjD,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAChBkC,SAAS,CAACa,MAAM,GAAGxB,KAAK,CAACwB,MAAgB;IAC3C,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAAQ,CAAA;IAAA;IAED;IAAAR,cAAA,GAAAE,CAAA;IACA,IAAIuB,KAAK,CAACc,MAAM,EAAE;MAAA;MAAAvC,cAAA,GAAAQ,CAAA;MAChB,MAAM+B,MAAM;MAAA;MAAA,CAAAvC,cAAA,GAAAE,CAAA,QAAGgD,KAAK,CAACC,OAAO,CAAC1B,KAAK,CAACc,MAAM,CAAC;MAAA;MAAA,CAAAvC,cAAA,GAAAQ,CAAA,WAAGiB,KAAK,CAACc,MAAM;MAAA;MAAA,CAAAvC,cAAA,GAAAQ,CAAA,WAAG,CAACiB,KAAK,CAACc,MAAM,CAAC;MAAC;MAAAvC,cAAA,GAAAE,CAAA;MAC3EkC,SAAS,CAACG,MAAM,GAAGA,MAAM,CAACa,GAAG,CAAE3C,CAAM,IAAK;QAAA;QAAAT,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAAA,OAAAO,CAAC,CAACmB,QAAQ,EAAE;MAAF,CAAE,CAAC;IACzD,CAAC;IAAA;IAAA;MAAA5B,cAAA,GAAAQ,CAAA;IAAA;IAED;IACA,MAAM6C,aAAa;IAAA;IAAA,CAAArD,cAAA,GAAAE,CAAA,QAAG,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAAC;IAAAF,cAAA,GAAAE,CAAA;IAC/F,KAAK,MAAM,CAACoD,GAAG,EAAEC,KAAK,CAAC,IAAI7C,MAAM,CAAC8C,OAAO,CAAC/B,KAAK,CAAC,EAAE;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MAChD,IAAI,CAACmD,aAAa,CAACI,QAAQ,CAACH,GAAG,CAAC,EAAE;QAAA;QAAAtD,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QAChCkC,SAAS,CAACE,OAAQ,CAACgB,GAAG,CAAC,GAAGC,KAAK;MACjC,CAAC;MAAA;MAAA;QAAAvD,cAAA,GAAAQ,CAAA;MAAA;IACH;IAAC;IAAAR,cAAA,GAAAE,CAAA;IAED,OAAOkC,SAAS;EAClB;EAEO,OAAOsB,oBAAoBA,CAACrC,GAAa,EAAEsC,IAAW,EAAEC,KAAa,EAAEnC,KAAqB;IAAA;IAAAzB,cAAA,GAAAS,CAAA;IACjG,MAAMoD,UAAU;IAAA;IAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAGuC,IAAI,CAACqB,IAAI,CAACF,KAAK,GAAGnC,KAAK,CAACE,KAAK,CAAC;IACjD,MAAMoC,OAAO;IAAA;IAAA,CAAA/D,cAAA,GAAAE,CAAA,QAAGuB,KAAK,CAACI,IAAI,GAAGgC,UAAU;IACvC,MAAMG,OAAO;IAAA;IAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAGuB,KAAK,CAACI,IAAI,GAAG,CAAC;IAAC;IAAA7B,cAAA,GAAAE,CAAA;IAE/BmB,GAAG,CAACK,SAAS,CAAC,eAAe,EAAEkC,KAAK,CAAChC,QAAQ,EAAE,CAAC;IAAC;IAAA5B,cAAA,GAAAE,CAAA;IACjDmB,GAAG,CAACK,SAAS,CAAC,eAAe,EAAEmC,UAAU,CAACjC,QAAQ,EAAE,CAAC;IAAC;IAAA5B,cAAA,GAAAE,CAAA;IACtDmB,GAAG,CAACK,SAAS,CAAC,YAAY,EAAEqC,OAAO,CAACnC,QAAQ,EAAE,CAAC;IAAC;IAAA5B,cAAA,GAAAE,CAAA;IAChDmB,GAAG,CAACK,SAAS,CAAC,YAAY,EAAEsC,OAAO,CAACpC,QAAQ,EAAE,CAAC;IAAC;IAAA5B,cAAA,GAAAE,CAAA;IAChDmB,GAAG,CAACK,SAAS,CAAC,gBAAgB,EAAED,KAAK,CAACI,IAAI,CAACD,QAAQ,EAAE,CAAC;IAAC;IAAA5B,cAAA,GAAAE,CAAA;IACvDmB,GAAG,CAACK,SAAS,CAAC,aAAa,EAAED,KAAK,CAACE,KAAK,CAACC,QAAQ,EAAE,CAAC;IAEpD;IACA,MAAMqC,OAAO;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAGmB,GAAG,CAACD,GAAG,CAAC8C,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACjD,MAAMC,MAAM;IAAA;IAAA,CAAApE,cAAA,GAAAE,CAAA,QAAG,IAAImE,eAAe,CAAChD,GAAG,CAACD,GAAG,CAACK,KAAY,CAAC;IAExD,MAAM6C,KAAK;IAAA;IAAA,CAAAtE,cAAA,GAAAE,CAAA,QAA2B,EAAE;IAAC;IAAAF,cAAA,GAAAE,CAAA;IAEzC,IAAI8D,OAAO,EAAE;MAAA;MAAAhE,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MACXkE,MAAM,CAACG,GAAG,CAAC,MAAM,EAAE,CAAC9C,KAAK,CAACI,IAAI,GAAG,CAAC,EAAED,QAAQ,EAAE,CAAC;MAAC;MAAA5B,cAAA,GAAAE,CAAA;MAChDoE,KAAK,CAACE,IAAI,GAAG,GAAGP,OAAO,IAAIG,MAAM,CAACxC,QAAQ,EAAE,EAAE;IAChD,CAAC;IAAA;IAAA;MAAA5B,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAED,IAAI6D,OAAO,EAAE;MAAA;MAAA/D,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MACXkE,MAAM,CAACG,GAAG,CAAC,MAAM,EAAE,CAAC9C,KAAK,CAACI,IAAI,GAAG,CAAC,EAAED,QAAQ,EAAE,CAAC;MAAC;MAAA5B,cAAA,GAAAE,CAAA;MAChDoE,KAAK,CAAChD,IAAI,GAAG,GAAG2C,OAAO,IAAIG,MAAM,CAACxC,QAAQ,EAAE,EAAE;IAChD,CAAC;IAAA;IAAA;MAAA5B,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAEDmB,GAAG,CAACK,SAAS,CAAC,MAAM,EAAEhB,MAAM,CAAC8C,OAAO,CAACc,KAAK,CAAC,CACxClB,GAAG,CAAC,CAAC,CAACqB,GAAG,EAAEC,GAAG,CAAC,KAAK;MAAA;MAAA1E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,WAAIwE,GAAG,WAAWD,GAAG,GAAG;IAAH,CAAG,CAAC,CAC7CE,IAAI,CAAC,IAAI,CAAC,CAAC;EAChB;EAEO,OAAOC,sBAAsBA,CAACnD,KAAU,EAAEF,cAA8B;IAAA;IAAAvB,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAE,CAAA;IAC7E,IAAI;MACF,IAAI2E,qBAAqB;MAAA;MAAA,CAAA7E,cAAA,GAAAE,CAAA,QAAGuB,KAAK;MAEjC;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACA,IAAIqB,cAAc,CAACe,OAAO,EAAE;QAAA;QAAAtC,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QAC1B,KAAK,MAAM,CAAC4E,KAAK,EAAEvB,KAAK,CAAC,IAAI7C,MAAM,CAAC8C,OAAO,CAACjC,cAAc,CAACe,OAAO,CAAC,EAAE;UAAA;UAAAtC,cAAA,GAAAE,CAAA;UACnE;UAAI;UAAA,CAAAF,cAAA,GAAAQ,CAAA,kBAAO+C,KAAK,KAAK,QAAQ;UAAA;UAAA,CAAAvD,cAAA,GAAAQ,CAAA,WAAI+C,KAAK,CAACE,QAAQ,CAAC,GAAG,CAAC,GAAE;YAAA;YAAAzD,cAAA,GAAAQ,CAAA;YACpD;YACA,MAAMuE,MAAM;YAAA;YAAA,CAAA/E,cAAA,GAAAE,CAAA,QAAGqD,KAAK,CAACY,KAAK,CAAC,GAAG,CAAC,CAACf,GAAG,CAAC4B,CAAC,IAAI;cAAA;cAAAhF,cAAA,GAAAS,CAAA;cAAAT,cAAA,GAAAE,CAAA;cAAA,OAAA8E,CAAC,CAACC,IAAI,EAAE;YAAF,CAAE,CAAC;YAAC;YAAAjF,cAAA,GAAAE,CAAA;YACnD2E,qBAAqB,GAAGA,qBAAqB,CAACK,KAAK,CAACJ,KAAK,EAAE,IAAI,EAAEC,MAAM,CAAC;UAC1E,CAAC,MAAM;YAAA;YAAA/E,cAAA,GAAAQ,CAAA;YAAAR,cAAA,GAAAE,CAAA;YACL2E,qBAAqB,GAAGA,qBAAqB,CAACK,KAAK,CAACJ,KAAK,EAAE,IAAI,EAAEvB,KAAK,CAAC;UACzE;QACF;MACF,CAAC;MAAA;MAAA;QAAAvD,cAAA,GAAAQ,CAAA;MAAA;MAED;MAAAR,cAAA,GAAAE,CAAA;MACA,IAAIqB,cAAc,CAAC0B,MAAM,EAAE;QAAA;QAAAjD,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QACzB;QACA;QACAC,eAAA,CAAA2B,MAAM,CAACC,KAAK,CAAC,uBAAuB,EAAE;UACpCC,QAAQ,EAAE;YACRC,OAAO,EAAE,6BAA6B;YACtCgB,MAAM,EAAE1B,cAAc,CAAC0B;;SAE1B,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAjD,cAAA,GAAAQ,CAAA;MAAA;MAED;MAAAR,cAAA,GAAAE,CAAA;MACA,IAAIqB,cAAc,CAACsB,MAAM,EAAE;QAAA;QAAA7C,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QACzB2E,qBAAqB,GAAGA,qBAAqB,CAACM,OAAO,CACnD5D,cAAc,CAACsB,MAAM;QACrB;QAAA,CAAA7C,cAAA,GAAAQ,CAAA,WAAAe,cAAc,CAACuB,SAAS;QAAA;QAAA,CAAA9C,cAAA,GAAAQ,CAAA,WAAI,KAAK,EAClC;MACH,CAAC;MAAA;MAAA;QAAAR,cAAA,GAAAQ,CAAA;MAAA;MAED;MAAAR,cAAA,GAAAE,CAAA;MACA2E,qBAAqB,GAAGA,qBAAqB,CAC1ClD,KAAK,CAACJ,cAAc,CAACI,KAAK,CAAC,CAC3BU,MAAM,CAACd,cAAc,CAACc,MAAM,CAAC;MAAC;MAAArC,cAAA,GAAAE,CAAA;MAEjC,OAAO2E,qBAAqB;IAC9B,CAAC,CAAC,OAAO1C,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACdC,eAAA,CAAA2B,MAAM,CAACK,KAAK,CAAC,kCAAkC,EAAEA,KAAc,EAAE;QAC/DH,QAAQ,EAAE;UAAEC,OAAO,EAAE;QAA6B;OACnD,CAAC;MAAC;MAAAjC,cAAA,GAAAE,CAAA;MACH,OAAOuB,KAAK;IACd;EACF;EAEO,OAAO2D,aAAaA,CAAChE,GAAY;IAAA;IAAApB,cAAA,GAAAS,CAAA;IAMtC,MAAM4E,SAAS;IAAA;IAAA,CAAArF,cAAA,GAAAE,CAAA;IAAI;IAAA,CAAAF,cAAA,GAAAQ,CAAA,WAAAY,GAAW,CAACkE,cAAc;IAAA;IAAA,CAAAtF,cAAA,GAAAQ,CAAA,WAAI+E,IAAI,CAACC,GAAG,EAAE;IAC3D,MAAMC,SAAS;IAAA;IAAA,CAAAzF,cAAA,GAAAE,CAAA,QAAGqF,IAAI,CAACC,GAAG,EAAE,GAAGH,SAAS;IACxC,MAAMK,WAAW;IAAA;IAAA,CAAA1F,cAAA,GAAAE,CAAA;IAAI;IAAA,CAAAF,cAAA,GAAAQ,CAAA,WAAAY,GAAW,CAACsE,WAAW;IAAA;IAAA,CAAA1F,cAAA,GAAAQ,CAAA,WAAI,CAAC;IACjD,MAAMmF,QAAQ;IAAA;IAAA,CAAA3F,cAAA,GAAAE,CAAA;IAAI;IAAA,CAAAF,cAAA,GAAAQ,CAAA,WAAAY,GAAW,CAACuE,QAAQ;IAAA;IAAA,CAAA3F,cAAA,GAAAQ,CAAA,WAAI,KAAK;IAC/C,MAAMoF,mBAAmB;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,QAAGkB,GAAG,CAACyE,OAAO,CAAC,mBAAmB,CAAC,KAAK,MAAM;IAAC;IAAA7F,cAAA,GAAAE,CAAA;IAExE,OAAO;MACLuF,SAAS;MACTC,WAAW;MACXC,QAAQ;MACRC;KACD;EACH;;AACD;AAAA5F,cAAA,GAAAE,CAAA;AAzND4F,OAAA,CAAAzF,2BAAA,GAAAA,2BAAA;AA2NA;AAAA;AAAAL,cAAA,GAAAE,CAAA;AACa4F,OAAA,CAAAC,2BAA2B,GAAG1F,2BAA2B,CAACY,WAAW,EAAE,CAACE,UAAU,EAAE","ignoreList":[]}