const fs = require('fs');
const path = require('path');

console.log('üîç AN√ÅLISIS EXHAUSTIVO DE CONSULTAS INFINITAS - VERSI√ìN 4');
console.log('================================================================\n');

// Analizar el archivo images-admin.html
const htmlPath = path.join(__dirname, '../public/images-admin.html');

if (!fs.existsSync(htmlPath)) {
    console.log('‚ùå No se encontr√≥ el archivo images-admin.html');
    process.exit(1);
}

const htmlContent = fs.readFileSync(htmlPath, 'utf8');

console.log('üìã PASO 1: An√°lisis del c√≥digo JavaScript...');
console.log('===========================================\n');

// Buscar patrones problem√°ticos
const patterns = {
    'setInterval': (htmlContent.match(/setInterval/g) || []).length,
    'setTimeout': (htmlContent.match(/setTimeout/g) || []).length,
    'fetch(': (htmlContent.match(/fetch\(/g) || []).length,
    'onerror': (htmlContent.match(/onerror/g) || []).length,
    'DOMContentLoaded': (htmlContent.match(/DOMContentLoaded/g) || []).length,
    'loadImageStatistics': (htmlContent.match(/loadImageStatistics/g) || []).length,
    'loadImages': (htmlContent.match(/loadImages/g) || []).length,
    'addEventListener': (htmlContent.match(/addEventListener/g) || []).length,
    'MutationObserver': (htmlContent.match(/MutationObserver/g) || []).length,
    'window.onload': (htmlContent.match(/window\.onload/g) || []).length,
    'window.onresize': (htmlContent.match(/window\.onresize/g) || []).length,
    'window.onscroll': (htmlContent.match(/window\.onscroll/g) || []).length
};

console.log('üîç PATRONES ENCONTRADOS EN EL C√ìDIGO:');
console.log('=====================================');
Object.entries(patterns).forEach(([pattern, count]) => {
    const icon = count > 0 ? 'üî¥' : '‚úÖ';
    console.log(`${icon} ${pattern}: ${count} ocurrencias`);
});

console.log('\nüìã PASO 2: An√°lisis de posibles causas...');
console.log('==========================================\n');

// Analizar el DOMContentLoaded
const domContentLoadedMatch = htmlContent.match(/document\.addEventListener\('DOMContentLoaded',[^}]+}/gs);
if (domContentLoadedMatch) {
    console.log('üîç AN√ÅLISIS DEL DOMContentLoaded:');
    console.log('================================');
    const content = domContentLoadedMatch[0];
    
    if (content.includes('loadImageStatistics()')) {
        console.log('‚ö†Ô∏è  DOMContentLoaded llama a loadImageStatistics()');
    }
    if (content.includes('loadImages()')) {
        console.log('‚ö†Ô∏è  DOMContentLoaded llama a loadImages()');
    }
    if (content.includes('setTimeout')) {
        console.log('‚ö†Ô∏è  DOMContentLoaded contiene setTimeout');
    }
    if (content.includes('setInterval')) {
        console.log('‚ö†Ô∏è  DOMContentLoaded contiene setInterval');
    }
}

// Analizar las funciones de carga
console.log('\nüîç AN√ÅLISIS DE FUNCIONES DE CARGA:');
console.log('==================================');

const loadImageStatisticsMatch = htmlContent.match(/async function loadImageStatistics\(\)[^}]+}/gs);
if (loadImageStatisticsMatch) {
    console.log('üìä Funci√≥n loadImageStatistics encontrada');
    const content = loadImageStatisticsMatch[0];
    
    if (content.includes('fetch(')) {
        console.log('   - Hace llamadas fetch');
    }
    if (content.includes('updateStatistics')) {
        console.log('   - Llama a updateStatistics()');
    }
}

const loadImagesMatch = htmlContent.match(/async function loadImages\(\)[^}]+}/gs);
if (loadImagesMatch) {
    console.log('üñºÔ∏è  Funci√≥n loadImages encontrada');
    const content = loadImagesMatch[0];
    
    if (content.includes('fetch(')) {
        console.log('   - Hace llamadas fetch');
    }
    if (content.includes('renderImages')) {
        console.log('   - Llama a renderImages()');
    }
}

// Analizar createImageCard
const createImageCardMatch = htmlContent.match(/function createImageCard\([^}]+}/gs);
if (createImageCardMatch) {
    console.log('\nüñºÔ∏è  Funci√≥n createImageCard encontrada');
    const content = createImageCardMatch[0];
    
    if (content.includes('onerror')) {
        console.log('‚ö†Ô∏è  CONTIENE onerror - POSIBLE CAUSA DEL PROBLEMA');
        console.log('   - El onerror puede causar bucles infinitos si la imagen de fallback tambi√©n falla');
    }
}

console.log('\nüìã PASO 3: Identificaci√≥n de causas m√°s probables...');
console.log('===================================================\n');

console.log('üéØ CAUSAS M√ÅS PROBABLES (en orden de probabilidad):');
console.log('===================================================');

console.log('\n1Ô∏è‚É£ ONERROR EN IM√ÅGENES (M√ÅS PROBABLE):');
console.log('   - El atributo onerror="this.src=\'/placeholder-image.jpg\'"');
console.log('   - Si /placeholder-image.jpg no existe o falla, puede causar bucle infinito');
console.log('   - SOLUCI√ìN: Ya comentado en el c√≥digo');

console.log('\n2Ô∏è‚É£ EVENTOS DE DOM REPETIDOS:');
console.log('   - DOMContentLoaded puede dispararse m√∫ltiples veces');
console.log('   - Event listeners pueden acumularse');
console.log('   - SOLUCI√ìN: Verificar si hay m√∫ltiples event listeners');

console.log('\n3Ô∏è‚É£ PROMESAS RECHAZADAS:');
console.log('   - Errores en fetch que causan re-intentos');
console.log('   - Manejo de errores que re-ejecuta las funciones');
console.log('   - SOLUCI√ìN: Verificar el manejo de errores');

console.log('\n4Ô∏è‚É£ CACH√â DEL NAVEGADOR:');
console.log('   - El navegador puede estar re-ejecutando scripts');
console.log('   - SOLUCI√ìN: Hard refresh (Ctrl+F5)');

console.log('\nüìã PASO 4: Soluciones implementadas...');
console.log('=====================================\n');

console.log('‚úÖ SOLUCIONES YA IMPLEMENTADAS:');
console.log('==============================');
console.log('1. ‚úÖ Auto-refresh completamente deshabilitado');
console.log('2. ‚úÖ Contadores de ejecuci√≥n agregados');
console.log('3. ‚úÖ Logs detallados con stack traces');
console.log('4. ‚úÖ onerror modificado para solo hacer console.warn');
console.log('5. ‚úÖ Archivo placeholder-image.jpg creado');

console.log('\nüìã PASO 5: Instrucciones para el usuario...');
console.log('=========================================\n');

console.log('üîß INSTRUCCIONES PARA DEBUGGING:');
console.log('================================');

console.log('\n1Ô∏è‚É£ ABRIR HERRAMIENTAS DE DESARROLLADOR:');
console.log('   - Presiona F12 o Ctrl+Shift+I');
console.log('   - Ve a la pesta√±a "Console"');

console.log('\n2Ô∏è‚É£ BUSCAR LOS LOGS DE DEBUGGING:');
console.log('   - Busca mensajes que empiecen con "üìä" y "üñºÔ∏è"');
console.log('   - Ejemplo: "üìä [10:30:15] Cargando estad√≠sticas... (Ejecuci√≥n #1)"');
console.log('   - Si ves n√∫meros que aumentan r√°pidamente, hay un bucle');

console.log('\n3Ô∏è‚É£ REVISAR LA PESTA√ëA NETWORK:');
console.log('   - Ve a la pesta√±a "Network"');
console.log('   - Filtra por "Fetch/XHR"');
console.log('   - Observa qu√© requests se repiten');
console.log('   - Verifica el timing entre requests');

console.log('\n4Ô∏è‚É£ EJECUTAR MONITOREO EN TIEMPO REAL:');
console.log('   - En la consola del navegador, ejecuta:');
console.log(`
let requestCount = 0;
const originalFetch = window.fetch;
window.fetch = function(...args) {
    requestCount++;
    console.log(\`üåê Request #\${requestCount}: \${args[0]} - \${new Date().toLocaleTimeString()}\`);
    return originalFetch.apply(this, args);
};
`);

console.log('\n5Ô∏è‚É£ VERIFICAR SI EL PROBLEMA PERSISTE:');
console.log('   - Recarga la p√°gina (Ctrl+F5)');
console.log('   - Observa si las consultas infinitas contin√∫an');
console.log('   - Si contin√∫an, comparte los logs de la consola');

console.log('\nüìä RESUMEN DEL AN√ÅLISIS:');
console.log('========================');
console.log('‚úÖ C√≥digo analizado exhaustivamente');
console.log('‚úÖ Soluciones implementadas para las causas m√°s probables');
console.log('üîç El problema puede estar en:');
console.log('   - Eventos de DOM que se disparan m√∫ltiples veces');
console.log('   - Promesas rechazadas que causan re-intentos');
console.log('   - Cach√© del navegador');
console.log('üí° Pr√≥ximo paso: Seguir las instrucciones de debugging');

console.log('\nüìû INFORMACI√ìN PARA COMPARTIR:');
console.log('=============================');
console.log('Si el problema persiste, comparte:');
console.log('1. Los logs de la consola del navegador');
console.log('2. Una captura de la pesta√±a Network');
console.log('3. El n√∫mero de requests por segundo que observas');
console.log('4. Si el problema se resuelve con Ctrl+F5 (hard refresh)'); 