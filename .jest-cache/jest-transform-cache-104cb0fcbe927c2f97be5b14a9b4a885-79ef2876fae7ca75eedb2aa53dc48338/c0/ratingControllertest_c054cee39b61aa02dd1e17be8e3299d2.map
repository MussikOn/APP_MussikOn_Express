{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\ratingController.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\ratingController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { RatingController } from '../controllers/ratingController';\r\nimport { ratingService } from '../services/ratingService';\r\n\r\n// Mock the rating service\r\njest.mock('../services/ratingService');\r\njest.mock('../services/loggerService', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    error: jest.fn(),\r\n    warn: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('RatingController', () => {\r\n  let ratingController: RatingController;\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockStatus: jest.Mock;\r\n  let mockJson: jest.Mock;\r\n  let mockRatingService: jest.Mocked<typeof ratingService>;\r\n\r\n  beforeEach(() => {\r\n    mockStatus = jest.fn().mockReturnThis();\r\n    mockJson = jest.fn().mockReturnThis();\r\n    mockResponse = {\r\n      status: mockStatus,\r\n      json: mockJson\r\n    };\r\n\r\n    ratingController = new RatingController();\r\n    mockRatingService = ratingService as jest.Mocked<typeof ratingService>;\r\n\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  // Helper function para crear usuario mock válido\r\n  const createValidUser = (overrides = {}) => ({\r\n    id: 'user123',\r\n    userId: 'user123',\r\n    userEmail: 'user@example.com',\r\n    email: 'user@example.com',\r\n    role: 'user',\r\n    name: 'Test User',\r\n    ...overrides\r\n  });\r\n\r\n  // Helper function para crear rating data válido\r\n  const createValidRatingData = (overrides = {}) => ({\r\n    eventId: 'event123',\r\n    musicianId: 'musician123',\r\n    rating: 5,\r\n    review: 'Excellent performance!',\r\n    category: 'musician' as const,\r\n    ...overrides\r\n  });\r\n\r\n  describe('createRating', () => {\r\n    it('should create rating successfully', async () => {\r\n      // Arrange\r\n      const ratingData = createValidRatingData();\r\n      const mockRating = {\r\n        id: 'rating123',\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        rating: 5,\r\n        review: 'Excellent performance!',\r\n        category: 'musician' as const,\r\n        isVerified: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        helpfulCount: 0,\r\n        reportedCount: 0,\r\n        isActive: true\r\n      };\r\n\r\n      mockRequest = {\r\n        user: createValidUser(),\r\n        body: ratingData\r\n      };\r\n\r\n      mockRatingService.createRating.mockResolvedValue(mockRating);\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.createRating).toHaveBeenCalledWith({\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        rating: 5,\r\n        review: 'Excellent performance!',\r\n        category: 'musician',\r\n        isVerified: false\r\n      });\r\n      expect(mockStatus).toHaveBeenCalledWith(201);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Rating creado exitosamente',\r\n        rating: mockRating\r\n      });\r\n    });\r\n\r\n    it('should return error when user is not authenticated', async () => {\r\n      // Arrange\r\n      const ratingData = createValidRatingData();\r\n      mockRequest = {\r\n        user: undefined,\r\n        body: ratingData\r\n      };\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(401);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Usuario no autenticado'\r\n      });\r\n    });\r\n\r\n    it('should return error when required fields are missing', async () => {\r\n      // Arrange\r\n      const ratingData = {\r\n        eventId: 'event123',\r\n        // Missing musicianId, rating, category\r\n        review: 'Excellent performance!'\r\n      };\r\n\r\n      mockRequest = {\r\n        user: createValidUser(),\r\n        body: ratingData\r\n      };\r\n\r\n      // Act\r\n      await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Faltan campos requeridos: eventId, musicianId, rating, category'\r\n      });\r\n    });\r\n\r\n    // 🆕 TESTS MEJORADOS: Casos edge para rating\r\n    describe('rating validation edge cases', () => {\r\n      it.each([\r\n        { rating: 0, description: 'rating cero' },\r\n        { rating: -1, description: 'rating negativo' },\r\n        { rating: 6, description: 'rating mayor a 5' },\r\n        { rating: 5.5, description: 'rating decimal' },\r\n        { rating: NaN, description: 'rating NaN' },\r\n        { rating: Infinity, description: 'rating infinito' },\r\n        { rating: -Infinity, description: 'rating infinito negativo' }\r\n      ])('should return error for $description', async ({ rating }) => {\r\n        // Arrange\r\n        const ratingData = createValidRatingData({ rating });\r\n        mockRequest = {\r\n          user: createValidUser(),\r\n          body: ratingData\r\n        };\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockStatus).toHaveBeenCalledWith(400);\r\n        expect(mockJson).toHaveBeenCalledWith({\r\n          success: false,\r\n          message: 'El rating debe estar entre 1 y 5 estrellas'\r\n        });\r\n      });\r\n\r\n      it.each([\r\n        { rating: 1, description: 'rating mínimo válido' },\r\n        { rating: 2, description: 'rating válido' },\r\n        { rating: 3, description: 'rating válido' },\r\n        { rating: 4, description: 'rating válido' },\r\n        { rating: 5, description: 'rating máximo válido' }\r\n      ])('should accept $description', async ({ rating }) => {\r\n        // Arrange\r\n        const ratingData = createValidRatingData({ rating });\r\n        const mockRating = {\r\n          id: 'rating123',\r\n          eventId: 'event123',\r\n          musicianId: 'musician123',\r\n          eventCreatorId: 'user123',\r\n          rating,\r\n          review: 'Excellent performance!',\r\n          category: 'musician' as const,\r\n          isVerified: false,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          helpfulCount: 0,\r\n          reportedCount: 0,\r\n          isActive: true\r\n        };\r\n\r\n        mockRequest = {\r\n          user: createValidUser(),\r\n          body: ratingData\r\n        };\r\n\r\n        mockRatingService.createRating.mockResolvedValue(mockRating);\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockRatingService.createRating).toHaveBeenCalledWith(\r\n          expect.objectContaining({ rating })\r\n        );\r\n        expect(mockStatus).toHaveBeenCalledWith(201);\r\n      });\r\n    });\r\n\r\n    // 🆕 TESTS MEJORADOS: Validación de categorías\r\n    describe('category validation', () => {\r\n      it.each([\r\n        'invalid',\r\n        'musician_',\r\n        '_musician',\r\n        'MUSICIAN',\r\n        'Musician',\r\n        '',\r\n        null,\r\n        undefined\r\n      ])('should return error for invalid category: %s', async (category) => {\r\n        // Arrange\r\n        const ratingData = createValidRatingData({ category });\r\n        mockRequest = {\r\n          user: createValidUser(),\r\n          body: ratingData\r\n        };\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockStatus).toHaveBeenCalledWith(400);\r\n        expect(mockJson).toHaveBeenCalledWith({\r\n          success: false,\r\n          message: 'Categoría debe ser \"musician\" o \"event_creator\"'\r\n        });\r\n      });\r\n\r\n      it.each(['musician', 'event_creator'])('should accept valid category: %s', async (category) => {\r\n        // Arrange\r\n        const ratingData = createValidRatingData({ category });\r\n        const mockRating = {\r\n          id: 'rating123',\r\n          eventId: 'event123',\r\n          musicianId: 'musician123',\r\n          eventCreatorId: 'user123',\r\n          rating: 5,\r\n          review: 'Excellent performance!',\r\n          category: category as 'musician' | 'event_creator',\r\n          isVerified: false,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          helpfulCount: 0,\r\n          reportedCount: 0,\r\n          isActive: true\r\n        };\r\n\r\n        mockRequest = {\r\n          user: createValidUser(),\r\n          body: ratingData\r\n        };\r\n\r\n        mockRatingService.createRating.mockResolvedValue(mockRating);\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockRatingService.createRating).toHaveBeenCalledWith(\r\n          expect.objectContaining({ category })\r\n        );\r\n        expect(mockStatus).toHaveBeenCalledWith(201);\r\n      });\r\n    });\r\n\r\n    // 🆕 TESTS MEJORADOS: Validación de IDs\r\n    describe('ID validation', () => {\r\n      it.each([\r\n        { field: 'eventId', value: '', description: 'eventId vacío' },\r\n        { field: 'eventId', value: null, description: 'eventId null' },\r\n        { field: 'eventId', value: undefined, description: 'eventId undefined' },\r\n        { field: 'musicianId', value: '', description: 'musicianId vacío' },\r\n        { field: 'musicianId', value: null, description: 'musicianId null' },\r\n        { field: 'musicianId', value: undefined, description: 'musicianId undefined' }\r\n      ])('should return error for $description', async ({ field, value }) => {\r\n        // Arrange\r\n        const ratingData = createValidRatingData({ [field]: value });\r\n        mockRequest = {\r\n          user: createValidUser(),\r\n          body: ratingData\r\n        };\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockStatus).toHaveBeenCalledWith(400);\r\n        expect(mockJson).toHaveBeenCalledWith({\r\n          success: false,\r\n          message: 'Faltan campos requeridos: eventId, musicianId, rating, category'\r\n        });\r\n      });\r\n    });\r\n\r\n    // 🆕 TESTS MEJORADOS: Casos de error del servicio\r\n    describe('service error handling', () => {\r\n      it('should handle service throwing error', async () => {\r\n        // Arrange\r\n        const ratingData = createValidRatingData();\r\n        const serviceError = new Error('Database connection failed');\r\n        \r\n        mockRequest = {\r\n          user: createValidUser(),\r\n          body: ratingData\r\n        };\r\n\r\n        mockRatingService.createRating.mockRejectedValue(serviceError);\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockStatus).toHaveBeenCalledWith(500);\r\n        expect(mockJson).toHaveBeenCalledWith({\r\n          success: false,\r\n          message: 'Database connection failed'\r\n        });\r\n      });\r\n\r\n      it('should handle unknown error type', async () => {\r\n        // Arrange\r\n        const ratingData = createValidRatingData();\r\n        \r\n        mockRequest = {\r\n          user: createValidUser(),\r\n          body: ratingData\r\n        };\r\n\r\n        mockRatingService.createRating.mockRejectedValue('String error');\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockStatus).toHaveBeenCalledWith(500);\r\n        expect(mockJson).toHaveBeenCalledWith({\r\n          success: false,\r\n          message: 'Error interno del servidor'\r\n        });\r\n      });\r\n    });\r\n\r\n    // 🆕 TESTS MEJORADOS: Validación de review\r\n    describe('review validation', () => {\r\n      it('should accept review with special characters', async () => {\r\n        // Arrange\r\n        const review = '¡Excelente presentación! 🎵🎶 Muy profesional.';\r\n        const ratingData = createValidRatingData({ review });\r\n        const mockRating = {\r\n          id: 'rating123',\r\n          eventId: 'event123',\r\n          musicianId: 'musician123',\r\n          eventCreatorId: 'user123',\r\n          rating: 5,\r\n          review,\r\n          category: 'musician' as const,\r\n          isVerified: false,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          helpfulCount: 0,\r\n          reportedCount: 0,\r\n          isActive: true\r\n        };\r\n\r\n        mockRequest = {\r\n          user: createValidUser(),\r\n          body: ratingData\r\n        };\r\n\r\n        mockRatingService.createRating.mockResolvedValue(mockRating);\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockRatingService.createRating).toHaveBeenCalledWith(\r\n          expect.objectContaining({ review })\r\n        );\r\n        expect(mockStatus).toHaveBeenCalledWith(201);\r\n      });\r\n\r\n      it('should accept empty review', async () => {\r\n        // Arrange\r\n        const ratingData = createValidRatingData({ review: '' });\r\n        const mockRating = {\r\n          id: 'rating123',\r\n          eventId: 'event123',\r\n          musicianId: 'musician123',\r\n          eventCreatorId: 'user123',\r\n          rating: 5,\r\n          review: '',\r\n          category: 'musician' as const,\r\n          isVerified: false,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          helpfulCount: 0,\r\n          reportedCount: 0,\r\n          isActive: true\r\n        };\r\n\r\n        mockRequest = {\r\n          user: createValidUser(),\r\n          body: ratingData\r\n        };\r\n\r\n        mockRatingService.createRating.mockResolvedValue(mockRating);\r\n\r\n        // Act\r\n        await ratingController.createRating(mockRequest as Request, mockResponse as Response);\r\n\r\n        // Assert\r\n        expect(mockRatingService.createRating).toHaveBeenCalledWith(\r\n          expect.objectContaining({ review: '' })\r\n        );\r\n        expect(mockStatus).toHaveBeenCalledWith(201);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getUserRatings', () => {\r\n    it('should return user ratings successfully', async () => {\r\n      // Arrange\r\n      const userId = 'user123';\r\n      const category = 'musician';\r\n      const mockRatings = [\r\n        {\r\n          id: 'rating1',\r\n          eventId: 'event1',\r\n          musicianId: 'musician1',\r\n          eventCreatorId: 'user123',\r\n          rating: 5,\r\n          review: 'Great performance',\r\n          category: 'musician' as const,\r\n          isVerified: true,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          helpfulCount: 0,\r\n          reportedCount: 0,\r\n          isActive: true\r\n        }\r\n      ];\r\n\r\n      mockRequest = {\r\n        params: { userId, category },\r\n        query: {\r\n          minRating: '4',\r\n          maxRating: '5',\r\n          isVerified: 'true'\r\n        }\r\n      };\r\n\r\n      mockRatingService.getUserRatings.mockResolvedValue(mockRatings);\r\n\r\n      // Act\r\n      await ratingController.getUserRatings(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.getUserRatings).toHaveBeenCalledWith(userId, category, {\r\n        minRating: 4,\r\n        maxRating: 5,\r\n        isVerified: true,\r\n        dateFrom: undefined,\r\n        dateTo: undefined\r\n      });\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Ratings obtenidos exitosamente',\r\n        ratings: mockRatings,\r\n        count: mockRatings.length\r\n      });\r\n    });\r\n\r\n    it('should return error when required parameters are missing', async () => {\r\n      // Arrange\r\n      mockRequest = {\r\n        params: { userId: 'user123' }, // Missing category\r\n        query: {}\r\n      };\r\n\r\n      // Act\r\n      await ratingController.getUserRatings(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Faltan parámetros requeridos: userId, category'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getUserRatingStats', () => {\r\n    it('should return user rating stats successfully', async () => {\r\n      // Arrange\r\n      const userId = 'user123';\r\n      const category = 'musician';\r\n      const mockStats = {\r\n        totalRatings: 10,\r\n        averageRating: 4.5,\r\n        ratingDistribution: {\r\n          1: 0,\r\n          2: 1,\r\n          3: 2,\r\n          4: 4,\r\n          5: 3\r\n        },\r\n        verifiedRatings: 8,\r\n        totalReviews: 7,\r\n        recentRatings: [],\r\n        responseRate: 85.5\r\n      };\r\n\r\n      mockRequest = {\r\n        params: { userId, category }\r\n      };\r\n\r\n      mockRatingService.getUserRatingStats.mockResolvedValue(mockStats);\r\n\r\n      // Act\r\n      await ratingController.getUserRatingStats(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.getUserRatingStats).toHaveBeenCalledWith(userId, category);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Estadísticas obtenidas exitosamente',\r\n        stats: mockStats\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('updateRating', () => {\r\n    it('should update rating successfully', async () => {\r\n      // Arrange\r\n      const ratingId = 'rating123';\r\n      const updateData = {\r\n        rating: 4,\r\n        review: 'Updated review'\r\n      };\r\n\r\n      const mockUpdatedRating = {\r\n        id: ratingId,\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        rating: 4,\r\n        review: 'Updated review',\r\n        category: 'musician' as const,\r\n        isVerified: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        helpfulCount: 0,\r\n        reportedCount: 0,\r\n        isActive: true\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { ratingId },\r\n        body: updateData\r\n      };\r\n\r\n      mockRatingService.getRatingById.mockResolvedValue({\r\n        id: ratingId,\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        rating: 3,\r\n        review: 'Original review',\r\n        category: 'musician',\r\n        isActive: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        isVerified: false,\r\n        helpfulCount: 0,\r\n        reportedCount: 0\r\n      });\r\n      mockRatingService.updateRating.mockResolvedValue(mockUpdatedRating);\r\n\r\n      // Act\r\n      await ratingController.updateRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.updateRating).toHaveBeenCalledWith(ratingId, updateData);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Rating actualizado exitosamente',\r\n        rating: mockUpdatedRating\r\n      });\r\n    });\r\n\r\n    it('should return error when rating is out of range', async () => {\r\n      // Arrange\r\n      const ratingId = 'rating123';\r\n      const updateData = {\r\n        rating: 6, // Invalid rating\r\n        review: 'Updated review'\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { ratingId },\r\n        body: updateData\r\n      };\r\n\r\n      // Act\r\n      await ratingController.updateRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'El rating debe estar entre 1 y 5 estrellas'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('markRatingAsHelpful', () => {\r\n    it('should mark rating as helpful successfully', async () => {\r\n      // Arrange\r\n      const ratingId = 'rating123';\r\n      const mockUpdatedRating = {\r\n        id: ratingId,\r\n        helpfulCount: 5,\r\n        isHelpful: true\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { ratingId }\r\n      };\r\n\r\n      mockRatingService.markRatingAsHelpful.mockResolvedValue();\r\n\r\n      // Act\r\n      await ratingController.markRatingAsHelpful(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.markRatingAsHelpful).toHaveBeenCalledWith(ratingId);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Rating marcado como útil exitosamente'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('reportRating', () => {\r\n    it('should report rating successfully', async () => {\r\n      // Arrange\r\n      const ratingId = 'rating123';\r\n      const reportData = {\r\n        reason: 'inappropriate_content',\r\n        description: 'This rating contains inappropriate content'\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { ratingId },\r\n        body: reportData\r\n      };\r\n\r\n      mockRatingService.reportRating.mockResolvedValue(undefined);\r\n\r\n      // Act\r\n      await ratingController.reportRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.reportRating).toHaveBeenCalledWith(ratingId, 'inappropriate_content');\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Rating reportado exitosamente'\r\n      });\r\n    });\r\n\r\n    it('should return error when reason is missing', async () => {\r\n      // Arrange\r\n      const ratingId = 'rating123';\r\n      const reportData = {\r\n        description: 'This rating contains inappropriate content'\r\n        // Missing reason\r\n      };\r\n\r\n      mockRequest = {\r\n        user: {\r\n          id: 'user123',\r\n          userId: 'user123',\r\n          userEmail: 'user@example.com',\r\n          email: 'user@example.com',\r\n          role: 'user',\r\n          name: 'Test User'\r\n        },\r\n        params: { ratingId },\r\n        body: reportData\r\n      };\r\n\r\n      // Act\r\n      await ratingController.reportRating(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'ID de rating y razón requeridos'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getEventRatings', () => {\r\n    it('should return event ratings successfully', async () => {\r\n      // Arrange\r\n      const eventId = 'event123';\r\n      const mockRatings = [\r\n        {\r\n          id: 'rating1',\r\n          eventId: 'event123',\r\n          musicianId: 'musician1',\r\n          eventCreatorId: 'user123',\r\n          rating: 5,\r\n          review: 'Great performance',\r\n          category: 'musician' as const,\r\n          isVerified: true,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          helpfulCount: 0,\r\n          reportedCount: 0,\r\n          isActive: true\r\n        }\r\n      ];\r\n\r\n      mockRequest = {\r\n        params: { eventId },\r\n        query: {\r\n          category: 'musician',\r\n          minRating: '4'\r\n        }\r\n      };\r\n\r\n      mockRatingService.getEventRatings.mockResolvedValue(mockRatings);\r\n\r\n      // Act\r\n      await ratingController.getEventRatings(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.getEventRatings).toHaveBeenCalledWith(eventId);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Ratings del evento obtenidos exitosamente',\r\n        ratings: mockRatings,\r\n        count: mockRatings.length\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getTopRatedMusicians', () => {\r\n    it('should return top rated musicians successfully', async () => {\r\n      // Arrange\r\n      const mockMusicians = [\r\n        {\r\n          userId: 'musician1',\r\n          stats: {\r\n            averageRating: 4.8,\r\n            totalRatings: 50,\r\n            ratingDistribution: { 1: 0, 2: 1, 3: 2, 4: 15, 5: 32 },\r\n            recentRatings: [],\r\n            verifiedRatings: 45,\r\n            responseRate: 90.0\r\n          }\r\n        }\r\n      ];\r\n\r\n      mockRequest = {\r\n        query: {\r\n          limit: '10',\r\n          minRatings: '5'\r\n        }\r\n      };\r\n\r\n      mockRatingService.getTopRatedMusicians.mockResolvedValue(mockMusicians);\r\n\r\n      // Act\r\n      await ratingController.getTopRatedMusicians(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.getTopRatedMusicians).toHaveBeenCalledWith(10, 5);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Top músicos obtenidos exitosamente',\r\n        musicians: mockMusicians,\r\n        count: mockMusicians.length\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getRatingTrends', () => {\r\n    it('should return rating trends successfully', async () => {\r\n      // Arrange\r\n      const mockTrends = {\r\n        averageRatingByDay: {\r\n          '2024-01-01': 4.2,\r\n          '2024-01-02': 4.5\r\n        },\r\n        totalRatingsByDay: {\r\n          '2024-01-01': 25,\r\n          '2024-01-02': 30\r\n        },\r\n        categoryDistribution: {\r\n          'musician': 60,\r\n          'event_creator': 40\r\n        }\r\n      };\r\n\r\n      mockRequest = {\r\n        query: {\r\n          period: 'monthly',\r\n          userId: 'user123'\r\n        }\r\n      };\r\n\r\n      mockRatingService.getRatingTrends.mockResolvedValue(mockTrends);\r\n\r\n      // Act\r\n      await ratingController.getRatingTrends(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.getRatingTrends).toHaveBeenCalledWith(30);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Tendencias de rating obtenidas exitosamente',\r\n        trends: mockTrends\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getMostHelpfulRatings', () => {\r\n    it('should return most helpful ratings successfully', async () => {\r\n      // Arrange\r\n      const mockRatings = [\r\n        {\r\n          id: 'rating1',\r\n          eventId: 'event1',\r\n          musicianId: 'musician1',\r\n          eventCreatorId: 'user123',\r\n          rating: 5,\r\n          review: 'Very helpful review',\r\n          category: 'musician' as const,\r\n          helpfulCount: 10,\r\n          isVerified: true,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          reportedCount: 0,\r\n          isActive: true\r\n        }\r\n      ];\r\n\r\n      mockRequest = {\r\n        params: {\r\n          userId: 'user123',\r\n          category: 'musician'\r\n        },\r\n        query: {\r\n          limit: '5'\r\n        }\r\n      };\r\n\r\n      mockRatingService.getMostHelpfulRatings.mockResolvedValue(mockRatings);\r\n\r\n      // Act\r\n      await ratingController.getMostHelpfulRatings(mockRequest as Request, mockResponse as Response);\r\n\r\n      // Assert\r\n      expect(mockRatingService.getMostHelpfulRatings).toHaveBeenCalledWith('user123', 'musician', 5);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Ratings más útiles obtenidos exitosamente',\r\n        ratings: mockRatings,\r\n        count: mockRatings.length\r\n      });\r\n    });\r\n  });\r\n}); "],"version":3}