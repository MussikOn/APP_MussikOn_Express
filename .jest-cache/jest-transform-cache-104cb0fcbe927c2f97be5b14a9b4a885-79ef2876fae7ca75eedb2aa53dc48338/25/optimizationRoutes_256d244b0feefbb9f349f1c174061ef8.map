{"version":3,"names":["cov_2ehtsxl308","actualCoverage","express_1","s","require","optimizationController_1","authMiddleware_1","requireRole_1","router","Router","optimizationController","OptimizationController","get","authMiddleware","requireRole","req","res","f","__awaiter","getCacheStats","delete","clearCache","post","analyzeQueryPerformance","createCompositeIndex","getOptimizationStats","optimizeQuery","batchOperations","healthCheck","exports","default"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\optimizationRoutes.ts"],"sourcesContent":["import { Router } from 'express';\r\nimport { OptimizationController } from '../controllers/optimizationController';\r\nimport { authMiddleware } from '../middleware/authMiddleware';\r\nimport { requireRole } from '../middleware/requireRole';\r\n\r\nconst router = Router();\r\nconst optimizationController = new OptimizationController();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     CacheStats:\r\n *       type: object\r\n *       properties:\r\n *         hits:\r\n *           type: number\r\n *           description: Number of cache hits\r\n *         misses:\r\n *           type: number\r\n *           description: Number of cache misses\r\n *         keys:\r\n *           type: number\r\n *           description: Number of cached keys\r\n *         hitRate:\r\n *           type: number\r\n *           description: Cache hit rate percentage\r\n *     OptimizationStats:\r\n *       type: object\r\n *       properties:\r\n *         cache:\r\n *           $ref: '#/components/schemas/CacheStats'\r\n *         firestore:\r\n *           type: object\r\n *           properties:\r\n *             cacheSize:\r\n *               type: number\r\n *             activeQueries:\r\n *               type: number\r\n *         query:\r\n *           type: object\r\n *           properties:\r\n *             queryTime:\r\n *               type: number\r\n *             resultCount:\r\n *               type: number\r\n *             cacheHit:\r\n *               type: boolean\r\n *             optimizationApplied:\r\n *               type: boolean\r\n *     QueryAnalysis:\r\n *       type: object\r\n *       properties:\r\n *         recommendedIndexes:\r\n *           type: array\r\n *           items:\r\n *             type: string\r\n *         estimatedCost:\r\n *           type: number\r\n *         optimizationSuggestions:\r\n *           type: array\r\n *           items:\r\n *             type: string\r\n *     BatchOperation:\r\n *       type: object\r\n *       properties:\r\n *         type:\r\n *           type: string\r\n *           enum: [create, update, delete]\r\n *         collection:\r\n *           type: string\r\n *         document:\r\n *           type: string\r\n *         data:\r\n *           type: object\r\n *     HealthStatus:\r\n *       type: object\r\n *       properties:\r\n *         status:\r\n *           type: string\r\n *           enum: [healthy, degraded, unhealthy]\r\n *         services:\r\n *           type: object\r\n *           properties:\r\n *             cache:\r\n *               type: string\r\n *             firestore:\r\n *               type: string\r\n *             memory:\r\n *               type: string\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /optimization/cache/stats:\r\n *   get:\r\n *     summary: Get cache statistics\r\n *     description: Retrieve comprehensive cache performance statistics\r\n *     tags: [Optimization]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Cache statistics retrieved successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     cache:\r\n *                       $ref: '#/components/schemas/CacheStats'\r\n *                     firestore:\r\n *                       type: object\r\n *                     timestamp:\r\n *                       type: string\r\n *       401:\r\n *         description: Unauthorized\r\n *       500:\r\n *         description: Internal server error\r\n */\r\nrouter.get('/cache/stats', \r\n  authMiddleware, \r\n  requireRole(['admin', 'superadmin']),\r\n  async (req, res) => { await optimizationController.getCacheStats(req, res); }\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /optimization/cache/clear:\r\n *   delete:\r\n *     summary: Clear cache\r\n *     description: Clear all cache or cache with specific prefix\r\n *     tags: [Optimization]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: prefix\r\n *         schema:\r\n *           type: string\r\n *         description: Cache prefix to clear (optional)\r\n *     responses:\r\n *       200:\r\n *         description: Cache cleared successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *       401:\r\n *         description: Unauthorized\r\n *       500:\r\n *         description: Internal server error\r\n */\r\nrouter.delete('/cache/clear', \r\n  authMiddleware, \r\n  requireRole(['admin', 'superadmin']),\r\n  async (req, res) => { await optimizationController.clearCache(req, res); }\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /optimization/query/analyze:\r\n *   post:\r\n *     summary: Analyze query performance\r\n *     description: Analyze and provide recommendations for query optimization\r\n *     tags: [Optimization]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - collection\r\n *             properties:\r\n *               collection:\r\n *                 type: string\r\n *                 description: Firestore collection name\r\n *               filters:\r\n *                 type: object\r\n *                 description: Query filters\r\n *               options:\r\n *                 type: object\r\n *                 description: Query options\r\n *     responses:\r\n *       200:\r\n *         description: Query analysis completed\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     collection:\r\n *                       type: string\r\n *                     analysis:\r\n *                       $ref: '#/components/schemas/QueryAnalysis'\r\n *       400:\r\n *         description: Bad request\r\n *       401:\r\n *         description: Unauthorized\r\n *       500:\r\n *         description: Internal server error\r\n */\r\nrouter.post('/query/analyze', \r\n  authMiddleware, \r\n  requireRole(['admin', 'superadmin']),\r\n  async (req, res) => { await optimizationController.analyzeQueryPerformance(req, res); }\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /optimization/index/create:\r\n *   post:\r\n *     summary: Create composite index\r\n *     description: Request creation of a composite index for better query performance\r\n *     tags: [Optimization]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - collection\r\n *               - fields\r\n *             properties:\r\n *               collection:\r\n *                 type: string\r\n *                 description: Firestore collection name\r\n *               fields:\r\n *                 type: array\r\n *                 items:\r\n *                   type: string\r\n *                 description: Fields to include in the index\r\n *               queryScopes:\r\n *                 type: array\r\n *                 items:\r\n *                   type: string\r\n *                 description: Query scopes for the index\r\n *     responses:\r\n *       200:\r\n *         description: Composite index creation requested\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *       400:\r\n *         description: Bad request\r\n *       401:\r\n *         description: Unauthorized\r\n *       500:\r\n *         description: Internal server error\r\n */\r\nrouter.post('/index/create', \r\n  authMiddleware, \r\n  requireRole(['admin', 'superadmin']),\r\n  async (req, res) => { await optimizationController.createCompositeIndex(req, res); }\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /optimization/stats:\r\n *   get:\r\n *     summary: Get optimization statistics\r\n *     description: Retrieve comprehensive optimization performance statistics\r\n *     tags: [Optimization]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Optimization statistics retrieved successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/OptimizationStats'\r\n *       401:\r\n *         description: Unauthorized\r\n *       500:\r\n *         description: Internal server error\r\n */\r\nrouter.get('/stats', \r\n  authMiddleware, \r\n  requireRole(['admin', 'superadmin']),\r\n  async (req, res) => { await optimizationController.getOptimizationStats(req, res); }\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /optimization/query/execute:\r\n *   post:\r\n *     summary: Execute optimized query\r\n *     description: Execute a query with optimization applied\r\n *     tags: [Optimization]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - collection\r\n *             properties:\r\n *               collection:\r\n *                 type: string\r\n *                 description: Firestore collection name\r\n *               filters:\r\n *                 type: object\r\n *                 description: Query filters\r\n *               options:\r\n *                 type: object\r\n *                 description: Query options\r\n *     responses:\r\n *       200:\r\n *         description: Optimized query executed successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     collection:\r\n *                       type: string\r\n *                     results:\r\n *                       type: array\r\n *                     metrics:\r\n *                       type: object\r\n *       400:\r\n *         description: Bad request\r\n *       401:\r\n *         description: Unauthorized\r\n *       500:\r\n *         description: Internal server error\r\n */\r\nrouter.post('/query/execute', \r\n  authMiddleware, \r\n  requireRole(['admin', 'superadmin']),\r\n  async (req, res) => { await optimizationController.optimizeQuery(req, res); }\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /optimization/batch:\r\n *   post:\r\n *     summary: Execute batch operations\r\n *     description: Execute multiple Firestore operations in batches for better performance\r\n *     tags: [Optimization]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - operations\r\n *             properties:\r\n *               operations:\r\n *                 type: array\r\n *                 items:\r\n *                   $ref: '#/components/schemas/BatchOperation'\r\n *     responses:\r\n *       200:\r\n *         description: Batch operations completed successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     totalOperations:\r\n *                       type: number\r\n *                     successfulResults:\r\n *                       type: number\r\n *                     errors:\r\n *                       type: array\r\n *       207:\r\n *         description: Some batch operations failed\r\n *       400:\r\n *         description: Bad request\r\n *       401:\r\n *         description: Unauthorized\r\n *       500:\r\n *         description: Internal server error\r\n */\r\nrouter.post('/batch', \r\n  authMiddleware, \r\n  requireRole(['admin', 'superadmin']),\r\n  async (req, res) => { await optimizationController.batchOperations(req, res); }\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /optimization/health:\r\n *   get:\r\n *     summary: Health check\r\n *     description: Check the health status of optimization services\r\n *     tags: [Optimization]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Health check completed\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/HealthStatus'\r\n *       500:\r\n *         description: Health check failed\r\n */\r\nrouter.get('/health', \r\n  authMiddleware, \r\n  requireRole(['admin', 'superadmin']),\r\n  async (req, res) => { await optimizationController.healthCheck(req, res); }\r\n);\r\n\r\nexport default router; "],"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","ignoreList":[]}