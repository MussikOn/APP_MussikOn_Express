{"version":3,"names":["express_1","cov_xbbxu3ym6","s","__importDefault","require","authMiddleware_1","requireRole_1","pushNotificationController_1","router","default","Router","post","authMiddleware","savePushSubscription","get","getUserPushSubscriptions","delete","deletePushSubscription","requireRole","sendNotificationToUser","sendBulkNotification","createNotificationTemplate","getActiveTemplates","getNotificationTemplate","put","updateNotificationTemplate","deleteNotificationTemplate","getNotificationStats","getVapidPublicKey","testPushNotification","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\pushNotificationRoutes.ts"],"sourcesContent":["import express from 'express';\r\nimport { authMiddleware } from '../middleware/authMiddleware';\r\nimport { requireRole } from '../middleware/requireRole';\r\nimport {\r\n  savePushSubscription,\r\n  getUserPushSubscriptions,\r\n  deletePushSubscription,\r\n  sendNotificationToUser,\r\n  sendBulkNotification,\r\n  createNotificationTemplate,\r\n  getNotificationTemplate,\r\n  getActiveTemplates,\r\n  updateNotificationTemplate,\r\n  deleteNotificationTemplate,\r\n  getNotificationStats,\r\n  getVapidPublicKey,\r\n  testPushNotification,\r\n} from '../controllers/pushNotificationController';\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     PushSubscription:\r\n *       type: object\r\n *       required:\r\n *         - endpoint\r\n *         - keys\r\n *       properties:\r\n *         endpoint:\r\n *           type: string\r\n *           description: URL del endpoint de la suscripción push\r\n *         keys:\r\n *           type: object\r\n *           properties:\r\n *             p256dh:\r\n *               type: string\r\n *               description: Clave pública P-256\r\n *             auth:\r\n *               type: string\r\n *               description: Clave de autenticación\r\n *     PushNotification:\r\n *       type: object\r\n *       required:\r\n *         - title\r\n *         - body\r\n *       properties:\r\n *         title:\r\n *           type: string\r\n *           description: Título de la notificación\r\n *         body:\r\n *           type: string\r\n *           description: Cuerpo de la notificación\r\n *         icon:\r\n *           type: string\r\n *           description: URL del icono de la notificación\r\n *         badge:\r\n *           type: string\r\n *           description: URL del badge de la notificación\r\n *         image:\r\n *           type: string\r\n *           description: URL de la imagen de la notificación\r\n *         tag:\r\n *           type: string\r\n *           description: Tag para agrupar notificaciones\r\n *         data:\r\n *           type: object\r\n *           description: Datos adicionales de la notificación\r\n *         actions:\r\n *           type: array\r\n *           items:\r\n *             type: object\r\n *             properties:\r\n *               action:\r\n *                 type: string\r\n *               title:\r\n *                 type: string\r\n *               icon:\r\n *                 type: string\r\n *         requireInteraction:\r\n *           type: boolean\r\n *           description: Si la notificación requiere interacción\r\n *         silent:\r\n *           type: boolean\r\n *           description: Si la notificación es silenciosa\r\n *         priority:\r\n *           type: string\r\n *           enum: [high, normal, low]\r\n *           description: Prioridad de la notificación\r\n *         ttl:\r\n *           type: number\r\n *           description: Tiempo de vida de la notificación en segundos\r\n *     NotificationTemplate:\r\n *       type: object\r\n *       required:\r\n *         - name\r\n *         - title\r\n *         - body\r\n *       properties:\r\n *         name:\r\n *           type: string\r\n *           description: Nombre del template\r\n *         title:\r\n *           type: string\r\n *           description: Título del template\r\n *         body:\r\n *           type: string\r\n *           description: Cuerpo del template\r\n *         icon:\r\n *           type: string\r\n *           description: URL del icono\r\n *         badge:\r\n *           type: string\r\n *           description: URL del badge\r\n *         image:\r\n *           type: string\r\n *           description: URL de la imagen\r\n *         tag:\r\n *           type: string\r\n *           description: Tag del template\r\n *         data:\r\n *           type: object\r\n *           description: Datos adicionales\r\n *         actions:\r\n *           type: array\r\n *           items:\r\n *             type: object\r\n *         requireInteraction:\r\n *           type: boolean\r\n *         silent:\r\n *           type: boolean\r\n *         priority:\r\n *           type: string\r\n *           enum: [high, normal, low]\r\n *         ttl:\r\n *           type: number\r\n *         isActive:\r\n *           type: boolean\r\n *           description: Si el template está activo\r\n *     BulkNotificationRequest:\r\n *       type: object\r\n *       properties:\r\n *         userIds:\r\n *           type: array\r\n *           items:\r\n *             type: string\r\n *           description: IDs de usuarios específicos\r\n *         userRoles:\r\n *           type: array\r\n *           items:\r\n *             type: string\r\n *           description: Roles de usuarios\r\n *         templateId:\r\n *           type: string\r\n *           description: ID del template a usar\r\n *         customNotification:\r\n *           $ref: '#/components/schemas/PushNotification'\r\n *         scheduledAt:\r\n *           type: string\r\n *           format: date-time\r\n *           description: Fecha programada para envío\r\n *         expiresAt:\r\n *           type: string\r\n *           format: date-time\r\n *           description: Fecha de expiración\r\n */\r\n\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: Push Notifications\r\n *   description: API para gestión de notificaciones push\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/subscription:\r\n *   post:\r\n *     summary: Guardar suscripción push de un usuario\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - endpoint\r\n *               - keys\r\n *             properties:\r\n *               endpoint:\r\n *                 type: string\r\n *               keys:\r\n *                 type: object\r\n *                 properties:\r\n *                   p256dh:\r\n *                     type: string\r\n *                   auth:\r\n *                     type: string\r\n *     responses:\r\n *       201:\r\n *         description: Suscripción guardada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/PushSubscription'\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n *       400:\r\n *         description: Datos inválidos\r\n */\r\nrouter.post('/subscription', authMiddleware, savePushSubscription);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/subscriptions:\r\n *   get:\r\n *     summary: Obtener suscripciones push del usuario\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Suscripciones obtenidas exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/PushSubscription'\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.get('/subscriptions', authMiddleware, getUserPushSubscriptions);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/subscription/{subscriptionId}:\r\n *   delete:\r\n *     summary: Eliminar suscripción push\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: subscriptionId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID de la suscripción\r\n *     responses:\r\n *       200:\r\n *         description: Suscripción eliminada exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Suscripción no encontrada\r\n */\r\nrouter.delete(\r\n  '/subscription/:subscriptionId',\r\n  authMiddleware,\r\n  deletePushSubscription\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/send/{userId}:\r\n *   post:\r\n *     summary: Enviar notificación push a un usuario específico\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: userId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID del usuario\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/PushNotification'\r\n *     responses:\r\n *       200:\r\n *         description: Notificación enviada exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n *       400:\r\n *         description: Datos inválidos\r\n */\r\nrouter.post(\r\n  '/send/:userId',\r\n  authMiddleware,\r\n  requireRole(['admin', 'superadmin']),\r\n  sendNotificationToUser\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/bulk:\r\n *   post:\r\n *     summary: Enviar notificación masiva\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/BulkNotificationRequest'\r\n *     responses:\r\n *       200:\r\n *         description: Notificación masiva enviada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     success:\r\n *                       type: number\r\n *                     failed:\r\n *                       type: number\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n *       400:\r\n *         description: Datos inválidos\r\n */\r\nrouter.post(\r\n  '/bulk',\r\n  authMiddleware,\r\n  requireRole(['admin', 'superadmin']),\r\n  sendBulkNotification\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/templates:\r\n *   post:\r\n *     summary: Crear template de notificación\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/NotificationTemplate'\r\n *     responses:\r\n *       201:\r\n *         description: Template creado exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n *       400:\r\n *         description: Datos inválidos\r\n */\r\nrouter.post(\r\n  '/templates',\r\n  authMiddleware,\r\n  requireRole(['admin', 'superadmin']),\r\n  createNotificationTemplate\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/templates:\r\n *   get:\r\n *     summary: Obtener templates activos\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Templates obtenidos exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/NotificationTemplate'\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.get('/templates', authMiddleware, getActiveTemplates);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/templates/{templateId}:\r\n *   get:\r\n *     summary: Obtener template específico\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: templateId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID del template\r\n *     responses:\r\n *       200:\r\n *         description: Template obtenido exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Template no encontrado\r\n */\r\nrouter.get('/templates/:templateId', authMiddleware, getNotificationTemplate);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/templates/{templateId}:\r\n *   put:\r\n *     summary: Actualizar template de notificación\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: templateId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID del template\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/NotificationTemplate'\r\n *     responses:\r\n *       200:\r\n *         description: Template actualizado exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Template no encontrado\r\n */\r\nrouter.put(\r\n  '/templates/:templateId',\r\n  authMiddleware,\r\n  requireRole(['admin', 'superadmin']),\r\n  updateNotificationTemplate\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/templates/{templateId}:\r\n *   delete:\r\n *     summary: Eliminar template de notificación\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: templateId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID del template\r\n *     responses:\r\n *       200:\r\n *         description: Template eliminado exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Template no encontrado\r\n */\r\nrouter.delete(\r\n  '/templates/:templateId',\r\n  authMiddleware,\r\n  requireRole(['admin', 'superadmin']),\r\n  deleteNotificationTemplate\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/stats:\r\n *   get:\r\n *     summary: Obtener estadísticas de notificaciones\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Estadísticas obtenidas exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     totalSubscriptions:\r\n *                       type: number\r\n *                     activeSubscriptions:\r\n *                       type: number\r\n *                     totalTemplates:\r\n *                       type: number\r\n *                     activeTemplates:\r\n *                       type: number\r\n *                     notificationsSentToday:\r\n *                       type: number\r\n *                     notificationsSentThisWeek:\r\n *                       type: number\r\n *                     notificationsSentThisMonth:\r\n *                       type: number\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.get(\r\n  '/stats',\r\n  authMiddleware,\r\n  requireRole(['admin', 'superadmin']),\r\n  getNotificationStats\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/vapid-key:\r\n *   get:\r\n *     summary: Obtener VAPID public key\r\n *     tags: [Push Notifications]\r\n *     responses:\r\n *       200:\r\n *         description: VAPID public key obtenida exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     publicKey:\r\n *                       type: string\r\n *                 message:\r\n *                   type: string\r\n */\r\nrouter.get('/vapid-key', getVapidPublicKey);\r\n\r\n/**\r\n * @swagger\r\n * /push-notifications/test:\r\n *   post:\r\n *     summary: Probar notificación push (solo desarrollo)\r\n *     tags: [Push Notifications]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Notificación de prueba enviada exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n */\r\nrouter.post('/test', authMiddleware, testPushNotification);\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]}