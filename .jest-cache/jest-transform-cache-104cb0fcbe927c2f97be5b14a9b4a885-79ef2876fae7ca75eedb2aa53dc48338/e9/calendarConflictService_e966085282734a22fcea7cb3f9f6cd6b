496a5eb493ccd9b00ab93ed45ede1594
"use strict";

/* istanbul ignore next */
function cov_248gatbjmu() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\calendarConflictService.ts";
  var hash = "e2a1ba91237dc37e73cae9f9664f8f1960c33d05";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\calendarConflictService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "14": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "15": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 14,
          column: 50
        }
      },
      "16": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 44
        }
      },
      "17": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 38
        }
      },
      "18": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "19": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "20": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "21": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 132
        }
      },
      "22": {
        start: {
          line: 28,
          column: 147
        },
        end: {
          line: 28,
          column: 154
        }
      },
      "23": {
        start: {
          line: 30,
          column: 31
        },
        end: {
          line: 30,
          column: 91
        }
      },
      "24": {
        start: {
          line: 32,
          column: 38
        },
        end: {
          line: 32,
          column: 111
        }
      },
      "25": {
        start: {
          line: 34,
          column: 34
        },
        end: {
          line: 34,
          column: 104
        }
      },
      "26": {
        start: {
          line: 36,
          column: 37
        },
        end: {
          line: 36,
          column: 39
        }
      },
      "27": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 41,
          column: 17
        }
      },
      "28": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 104
        }
      },
      "29": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 87
        }
      },
      "30": {
        start: {
          line: 42,
          column: 31
        },
        end: {
          line: 47,
          column: 17
        }
      },
      "31": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 55,
          column: 19
        }
      },
      "32": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 30
        }
      },
      "33": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "34": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 28
        }
      },
      "35": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "36": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "37": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 123
        }
      },
      "38": {
        start: {
          line: 73,
          column: 28
        },
        end: {
          line: 73,
          column: 38
        }
      },
      "39": {
        start: {
          line: 74,
          column: 33
        },
        end: {
          line: 74,
          column: 80
        }
      },
      "40": {
        start: {
          line: 75,
          column: 33
        },
        end: {
          line: 75,
          column: 125
        }
      },
      "41": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 45
        }
      },
      "42": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 79,
          column: 19
        }
      },
      "43": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 32
        }
      },
      "44": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 85,
          column: 19
        }
      },
      "45": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 28
        }
      },
      "46": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "47": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "48": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 122
        }
      },
      "49": {
        start: {
          line: 97,
          column: 33
        },
        end: {
          line: 97,
          column: 87
        }
      },
      "50": {
        start: {
          line: 98,
          column: 28
        },
        end: {
          line: 98,
          column: 48
        }
      },
      "51": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 101,
          column: 17
        }
      },
      "52": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 100,
          column: 75
        }
      },
      "53": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 108
        }
      },
      "54": {
        start: {
          line: 103,
          column: 35
        },
        end: {
          line: 103,
          column: 55
        }
      },
      "55": {
        start: {
          line: 104,
          column: 37
        },
        end: {
          line: 104,
          column: 54
        }
      },
      "56": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 107,
          column: 19
        }
      },
      "57": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 36
        }
      },
      "58": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 113,
          column: 19
        }
      },
      "59": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 28
        }
      },
      "60": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "61": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "62": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 120
        }
      },
      "63": {
        start: {
          line: 125,
          column: 33
        },
        end: {
          line: 125,
          column: 87
        }
      },
      "64": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 40
        }
      },
      "65": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 129,
          column: 19
        }
      },
      "66": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 134,
          column: 19
        }
      },
      "67": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 28
        }
      },
      "68": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "69": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "70": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 120
        }
      },
      "71": {
        start: {
          line: 146,
          column: 30
        },
        end: {
          line: 150,
          column: 54
        }
      },
      "72": {
        start: {
          line: 151,
          column: 33
        },
        end: {
          line: 151,
          column: 50
        }
      },
      "73": {
        start: {
          line: 152,
          column: 31
        },
        end: {
          line: 155,
          column: 18
        }
      },
      "74": {
        start: {
          line: 153,
          column: 33
        },
        end: {
          line: 153,
          column: 43
        }
      },
      "75": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 210
        }
      },
      "76": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 30
        }
      },
      "77": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 161,
          column: 19
        }
      },
      "78": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 28
        }
      },
      "79": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "80": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "81": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 134
        }
      },
      "82": {
        start: {
          line: 173,
          column: 35
        },
        end: {
          line: 173,
          column: 49
        }
      },
      "83": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 48
        }
      },
      "84": {
        start: {
          line: 175,
          column: 33
        },
        end: {
          line: 175,
          column: 47
        }
      },
      "85": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 51
        }
      },
      "86": {
        start: {
          line: 177,
          column: 31
        },
        end: {
          line: 177,
          column: 93
        }
      },
      "87": {
        start: {
          line: 179,
          column: 39
        },
        end: {
          line: 179,
          column: 97
        }
      },
      "88": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 184,
          column: 18
        }
      },
      "89": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 189,
          column: 19
        }
      },
      "90": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 28
        }
      },
      "91": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "92": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 233,
          column: 13
        }
      },
      "93": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 125
        }
      },
      "94": {
        start: {
          line: 201,
          column: 32
        },
        end: {
          line: 209,
          column: 20
        }
      },
      "95": {
        start: {
          line: 201,
          column: 82
        },
        end: {
          line: 209,
          column: 18
        }
      },
      "96": {
        start: {
          line: 202,
          column: 35
        },
        end: {
          line: 207,
          column: 22
        }
      },
      "97": {
        start: {
          line: 208,
          column: 20
        },
        end: {
          line: 208,
          column: 50
        }
      },
      "98": {
        start: {
          line: 210,
          column: 43
        },
        end: {
          line: 210,
          column: 45
        }
      },
      "99": {
        start: {
          line: 211,
          column: 45
        },
        end: {
          line: 211,
          column: 47
        }
      },
      "100": {
        start: {
          line: 212,
          column: 34
        },
        end: {
          line: 212,
          column: 36
        }
      },
      "101": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 221,
          column: 19
        }
      },
      "102": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 220,
          column: 21
        }
      },
      "103": {
        start: {
          line: 215,
          column: 24
        },
        end: {
          line: 215,
          column: 62
        }
      },
      "104": {
        start: {
          line: 216,
          column: 24
        },
        end: {
          line: 216,
          column: 65
        }
      },
      "105": {
        start: {
          line: 219,
          column: 24
        },
        end: {
          line: 219,
          column: 60
        }
      },
      "106": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 226,
          column: 18
        }
      },
      "107": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 231,
          column: 19
        }
      },
      "108": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 28
        }
      },
      "109": {
        start: {
          line: 240,
          column: 26
        },
        end: {
          line: 240,
          column: 28
        }
      },
      "110": {
        start: {
          line: 242,
          column: 34
        },
        end: {
          line: 242,
          column: 99
        }
      },
      "111": {
        start: {
          line: 243,
          column: 32
        },
        end: {
          line: 243,
          column: 95
        }
      },
      "112": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 250,
          column: 11
        }
      },
      "113": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "114": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 38
        }
      },
      "115": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 25
        }
      },
      "116": {
        start: {
          line: 257,
          column: 22
        },
        end: {
          line: 257,
          column: 24
        }
      },
      "117": {
        start: {
          line: 259,
          column: 29
        },
        end: {
          line: 259,
          column: 102
        }
      },
      "118": {
        start: {
          line: 259,
          column: 56
        },
        end: {
          line: 259,
          column: 101
        }
      },
      "119": {
        start: {
          line: 260,
          column: 26
        },
        end: {
          line: 260,
          column: 45
        }
      },
      "120": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 272,
          column: 11
        }
      },
      "121": {
        start: {
          line: 262,
          column: 35
        },
        end: {
          line: 262,
          column: 84
        }
      },
      "122": {
        start: {
          line: 263,
          column: 38
        },
        end: {
          line: 263,
          column: 60
        }
      },
      "123": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 270,
          column: 13
        }
      },
      "124": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 269,
          column: 19
        }
      },
      "125": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 93
        }
      },
      "126": {
        start: {
          line: 274,
          column: 35
        },
        end: {
          line: 274,
          column: 76
        }
      },
      "127": {
        start: {
          line: 275,
          column: 34
        },
        end: {
          line: 275,
          column: 60
        }
      },
      "128": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "129": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 281,
          column: 15
        }
      },
      "130": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 21
        }
      },
      "131": {
        start: {
          line: 289,
          column: 22
        },
        end: {
          line: 289,
          column: 24
        }
      },
      "132": {
        start: {
          line: 291,
          column: 29
        },
        end: {
          line: 291,
          column: 102
        }
      },
      "133": {
        start: {
          line: 291,
          column: 56
        },
        end: {
          line: 291,
          column: 101
        }
      },
      "134": {
        start: {
          line: 292,
          column: 26
        },
        end: {
          line: 292,
          column: 46
        }
      },
      "135": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 305,
          column: 11
        }
      },
      "136": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "137": {
        start: {
          line: 295,
          column: 33
        },
        end: {
          line: 295,
          column: 92
        }
      },
      "138": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 302,
          column: 17
        }
      },
      "139": {
        start: {
          line: 297,
          column: 20
        },
        end: {
          line: 301,
          column: 23
        }
      },
      "140": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 93
        }
      },
      "141": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "142": {
        start: {
          line: 308,
          column: 29
        },
        end: {
          line: 308,
          column: 81
        }
      },
      "143": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 315,
          column: 13
        }
      },
      "144": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 314,
          column: 19
        }
      },
      "145": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 21
        }
      },
      "146": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 324,
          column: 29
        }
      },
      "147": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 29
        }
      },
      "148": {
        start: {
          line: 326,
          column: 23
        },
        end: {
          line: 326,
          column: 31
        }
      },
      "149": {
        start: {
          line: 327,
          column: 28
        },
        end: {
          line: 327,
          column: 92
        }
      },
      "150": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 334,
          column: 11
        }
      },
      "151": {
        start: {
          line: 329,
          column: 31
        },
        end: {
          line: 329,
          column: 91
        }
      },
      "152": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 333,
          column: 13
        }
      },
      "153": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 43
        }
      },
      "154": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 32
        }
      },
      "155": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 34
        }
      },
      "156": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 65
        }
      },
      "157": {
        start: {
          line: 344,
          column: 0
        },
        end: {
          line: 344,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 16
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 24
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 25,
            column: 47
          },
          end: {
            line: 25,
            column: 48
          }
        },
        loc: {
          start: {
            line: 25,
            column: 60
          },
          end: {
            line: 64,
            column: 9
          }
        },
        line: 25
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 20
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 69
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 70,
            column: 47
          },
          end: {
            line: 70,
            column: 48
          }
        },
        loc: {
          start: {
            line: 70,
            column: 60
          },
          end: {
            line: 88,
            column: 9
          }
        },
        line: 70
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 34
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 93
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 94,
            column: 47
          },
          end: {
            line: 94,
            column: 48
          }
        },
        loc: {
          start: {
            line: 94,
            column: 60
          },
          end: {
            line: 116,
            column: 9
          }
        },
        line: 94
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 25
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 121
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 122,
            column: 47
          },
          end: {
            line: 122,
            column: 48
          }
        },
        loc: {
          start: {
            line: 122,
            column: 60
          },
          end: {
            line: 137,
            column: 9
          }
        },
        line: 122
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 54
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 142
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 143,
            column: 47
          },
          end: {
            line: 143,
            column: 48
          }
        },
        loc: {
          start: {
            line: 143,
            column: 60
          },
          end: {
            line: 164,
            column: 9
          }
        },
        line: 143
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 152,
            column: 49
          },
          end: {
            line: 152,
            column: 50
          }
        },
        loc: {
          start: {
            line: 152,
            column: 56
          },
          end: {
            line: 155,
            column: 17
          }
        },
        line: 152
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 43
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 169
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 170,
            column: 47
          },
          end: {
            line: 170,
            column: 48
          }
        },
        loc: {
          start: {
            line: 170,
            column: 60
          },
          end: {
            line: 192,
            column: 9
          }
        },
        line: 170
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 72
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 197
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 198,
            column: 47
          },
          end: {
            line: 198,
            column: 48
          }
        },
        loc: {
          start: {
            line: 198,
            column: 60
          },
          end: {
            line: 234,
            column: 9
          }
        },
        line: 198
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 201,
            column: 66
          },
          end: {
            line: 201,
            column: 67
          }
        },
        loc: {
          start: {
            line: 201,
            column: 82
          },
          end: {
            line: 209,
            column: 18
          }
        },
        line: 201
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 201,
            column: 114
          },
          end: {
            line: 201,
            column: 115
          }
        },
        loc: {
          start: {
            line: 201,
            column: 127
          },
          end: {
            line: 209,
            column: 17
          }
        },
        line: 201
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 213,
            column: 32
          },
          end: {
            line: 213,
            column: 33
          }
        },
        loc: {
          start: {
            line: 213,
            column: 60
          },
          end: {
            line: 221,
            column: 17
          }
        },
        line: 213
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 70
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 239
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 244,
            column: 23
          },
          end: {
            line: 244,
            column: 24
          }
        },
        loc: {
          start: {
            line: 244,
            column: 32
          },
          end: {
            line: 250,
            column: 9
          }
        },
        line: 244
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 69
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 256
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 259,
            column: 46
          },
          end: {
            line: 259,
            column: 47
          }
        },
        loc: {
          start: {
            line: 259,
            column: 56
          },
          end: {
            line: 259,
            column: 101
          }
        },
        line: 259
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 261,
            column: 29
          },
          end: {
            line: 261,
            column: 30
          }
        },
        loc: {
          start: {
            line: 261,
            column: 38
          },
          end: {
            line: 272,
            column: 9
          }
        },
        line: 261
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 58
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 288
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 291,
            column: 46
          },
          end: {
            line: 291,
            column: 47
          }
        },
        loc: {
          start: {
            line: 291,
            column: 56
          },
          end: {
            line: 291,
            column: 101
          }
        },
        line: 291
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 293,
            column: 29
          },
          end: {
            line: 293,
            column: 30
          }
        },
        loc: {
          start: {
            line: 293,
            column: 38
          },
          end: {
            line: 305,
            column: 9
          }
        },
        line: 293
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 43
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 322
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 328,
            column: 22
          },
          end: {
            line: 328,
            column: 23
          }
        },
        loc: {
          start: {
            line: 328,
            column: 30
          },
          end: {
            line: 334,
            column: 9
          }
        },
        line: 328
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 47
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 340
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 28,
            column: 66
          },
          end: {
            line: 28,
            column: 103
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 28,
            column: 79
          },
          end: {
            line: 28,
            column: 103
          }
        }],
        line: 28
      },
      "6": {
        loc: {
          start: {
            line: 28,
            column: 105
          },
          end: {
            line: 28,
            column: 142
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 28,
            column: 118
          },
          end: {
            line: 28,
            column: 142
          }
        }],
        line: 28
      },
      "7": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 41,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 41,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "8": {
        loc: {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "9": {
        loc: {
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 220,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 220,
            column: 21
          }
        }, {
          start: {
            line: 218,
            column: 25
          },
          end: {
            line: 220,
            column: 21
          }
        }],
        line: 214
      },
      "10": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 249,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 249,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "11": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 247,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 17
          },
          end: {
            line: 246,
            column: 50
          }
        }, {
          start: {
            line: 246,
            column: 54
          },
          end: {
            line: 246,
            column: 87
          }
        }, {
          start: {
            line: 247,
            column: 17
          },
          end: {
            line: 247,
            column: 50
          }
        }, {
          start: {
            line: 247,
            column: 54
          },
          end: {
            line: 247,
            column: 87
          }
        }],
        line: 246
      },
      "12": {
        loc: {
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "13": {
        loc: {
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "14": {
        loc: {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "15": {
        loc: {
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "16": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "17": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 315,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 315,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "18": {
        loc: {
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 324,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 324,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "19": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\calendarConflictService.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\calendarConflictService.ts"],
      sourcesContent: ["import { db } from '../utils/firebase';\nimport { logger } from './loggerService';\nimport { Event } from '../utils/DataTypes';\n\nexport interface CalendarEvent {\n  id: string;\n  musicianId: string;\n  eventId: string;\n  startTime: Date;\n  endTime: Date;\n  location: string;\n  status: 'confirmed' | 'pending' | 'cancelled';\n  travelTime?: number; // minutos\n  bufferTime?: number; // minutos de margen\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ConflictCheckResult {\n  hasConflict: boolean;\n  conflicts: CalendarEvent[];\n  availableSlots: {\n    startTime: Date;\n    endTime: Date;\n    duration: number; // minutos\n  }[];\n  recommendedTime?: Date;\n}\n\nexport interface AvailabilityRequest {\n  musicianId: string;\n  startTime: Date;\n  endTime: Date;\n  location: string;\n  travelTime?: number;\n  bufferTime?: number;\n}\n\nexport class CalendarConflictService {\n  private readonly COLLECTION = 'calendar_events';\n  private readonly DEFAULT_BUFFER_TIME = 60; // 1 hora en minutos\n  private readonly DEFAULT_TRAVEL_TIME = 30; // 30 minutos\n\n  /**\n   * Verificar conflictos de calendario para un m\xFAsico\n   */\n  async checkConflicts(request: AvailabilityRequest): Promise<ConflictCheckResult> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:45] Verificando conflictos para m\xFAsico:', request.musicianId);\n      \n      const { musicianId, startTime, endTime, location, travelTime = this.DEFAULT_TRAVEL_TIME, bufferTime = this.DEFAULT_BUFFER_TIME } = request;\n\n      // Obtener eventos del m\xFAsico en el rango de tiempo\n      const events = await this.getMusicianEvents(musicianId, startTime, endTime);\n      \n      // Calcular tiempo total necesario (evento + viaje + buffer)\n      const totalDuration = this.calculateEventDuration(startTime, endTime) + travelTime + bufferTime;\n      \n      // Verificar conflictos\n      const conflicts = this.findConflicts(events, startTime, endTime, travelTime, bufferTime);\n      \n      // Si hay conflictos, encontrar slots disponibles\n      let availableSlots: ConflictCheckResult['availableSlots'] = [];\n      let recommendedTime: Date | undefined;\n\n      if (conflicts.length > 0) {\n        availableSlots = this.findAvailableSlots(events, startTime, endTime, totalDuration);\n        recommendedTime = this.findBestTimeSlot(availableSlots, startTime);\n      }\n\n      const result: ConflictCheckResult = {\n        hasConflict: conflicts.length > 0,\n        conflicts,\n        availableSlots,\n        recommendedTime\n      };\n\n      logger.info('Verificaci\xF3n de conflictos completada', {\n        metadata: {\n          musicianId,\n          hasConflict: result.hasConflict,\n          conflictsCount: conflicts.length,\n          availableSlotsCount: availableSlots.length\n        }\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('Error verificando conflictos de calendario', error as Error, { \n        metadata: { request }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Agregar evento al calendario\n   */\n  async addEvent(event: Omit<CalendarEvent, 'id' | 'createdAt' | 'updatedAt'>): Promise<CalendarEvent> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:85] Agregando evento al calendario:', event.eventId);\n      \n      const now = new Date();\n      const eventRef = db.collection(this.COLLECTION).doc();\n      \n      const newEvent: CalendarEvent = {\n        ...event,\n        id: eventRef.id,\n        createdAt: now,\n        updatedAt: now\n      };\n\n      await eventRef.set(newEvent);\n      \n      logger.info('Evento agregado al calendario', { \n        metadata: { eventId: event.eventId, musicianId: event.musicianId }\n      });\n      return newEvent;\n    } catch (error) {\n      logger.error('Error agregando evento al calendario', error as Error, { \n        metadata: { event }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Actualizar evento del calendario\n   */\n  async updateEvent(eventId: string, updates: Partial<CalendarEvent>): Promise<CalendarEvent> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:105] Actualizando evento del calendario:', eventId);\n      \n      const eventRef = db.collection(this.COLLECTION).doc(eventId);\n      const doc = await eventRef.get();\n      \n      if (!doc.exists) {\n        throw new Error('Evento del calendario no encontrado');\n      }\n\n      await eventRef.update({\n        ...updates,\n        updatedAt: new Date()\n      });\n\n      const updatedDoc = await eventRef.get();\n      const updatedEvent = updatedDoc.data() as CalendarEvent;\n      \n      logger.info('Evento del calendario actualizado', { \n        metadata: { eventId, updates }\n      });\n      return updatedEvent;\n    } catch (error) {\n      logger.error('Error actualizando evento del calendario', error as Error, { \n        metadata: { eventId }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Eliminar evento del calendario\n   */\n  async removeEvent(eventId: string): Promise<void> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:130] Eliminando evento del calendario:', eventId);\n      \n      const eventRef = db.collection(this.COLLECTION).doc(eventId);\n      await eventRef.delete();\n      \n      logger.info('Evento eliminado del calendario', { \n        metadata: { eventId }\n      });\n    } catch (error) {\n      logger.error('Error eliminando evento del calendario', error as Error, { \n        metadata: { eventId }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Obtener eventos de un m\xFAsico en un rango de tiempo\n   */\n  async getMusicianEvents(musicianId: string, startTime: Date, endTime: Date): Promise<CalendarEvent[]> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:145] Obteniendo eventos del m\xFAsico:', musicianId);\n      \n      const query = db.collection(this.COLLECTION)\n        .where('musicianId', '==', musicianId)\n        .where('status', 'in', ['confirmed', 'pending'])\n        .where('startTime', '<=', endTime)\n        .where('endTime', '>=', startTime);\n\n      const snapshot = await query.get();\n      const events = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          ...data,\n          startTime: data.startTime.toDate(),\n          endTime: data.endTime.toDate(),\n          createdAt: data.createdAt.toDate(),\n          updatedAt: data.updatedAt.toDate()\n        } as CalendarEvent;\n      });\n\n      return events;\n    } catch (error) {\n      logger.error('Error obteniendo eventos del m\xFAsico', error as Error, { \n        metadata: { musicianId }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Obtener disponibilidad de un m\xFAsico para un d\xEDa espec\xEDfico\n   */\n  async getDailyAvailability(musicianId: string, date: Date): Promise<{\n    date: Date;\n    busySlots: CalendarEvent[];\n    availableSlots: { startTime: Date; endTime: Date; duration: number }[];\n  }> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:175] Obteniendo disponibilidad diaria del m\xFAsico:', musicianId);\n      \n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      \n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n\n      const events = await this.getMusicianEvents(musicianId, startOfDay, endOfDay);\n      \n      // Encontrar slots disponibles\n      const availableSlots = this.findAvailableSlotsInDay(events, startOfDay, endOfDay);\n\n      return {\n        date,\n        busySlots: events,\n        availableSlots\n      };\n    } catch (error) {\n      logger.error('Error obteniendo disponibilidad diaria', error as Error, { \n        metadata: { musicianId, date }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Verificar disponibilidad de m\xFAltiples m\xFAsicos\n   */\n  async checkMultipleMusiciansAvailability(\n    musicianIds: string[],\n    startTime: Date,\n    endTime: Date\n  ): Promise<{\n    availableMusicians: string[];\n    unavailableMusicians: string[];\n    conflicts: Record<string, CalendarEvent[]>;\n  }> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:205] Verificando disponibilidad de m\xFAltiples m\xFAsicos');\n      \n      const results = await Promise.all(\n        musicianIds.map(async (musicianId) => {\n          const result = await this.checkConflicts({\n            musicianId,\n            startTime,\n            endTime,\n            location: ''\n          });\n          return { musicianId, result };\n        })\n      );\n\n      const availableMusicians: string[] = [];\n      const unavailableMusicians: string[] = [];\n      const conflicts: Record<string, CalendarEvent[]> = {};\n\n      results.forEach(({ musicianId, result }) => {\n        if (result.hasConflict) {\n          unavailableMusicians.push(musicianId);\n          conflicts[musicianId] = result.conflicts;\n        } else {\n          availableMusicians.push(musicianId);\n        }\n      });\n\n      return {\n        availableMusicians,\n        unavailableMusicians,\n        conflicts\n      };\n    } catch (error) {\n      logger.error('Error verificando disponibilidad de m\xFAltiples m\xFAsicos', error as Error, { \n        metadata: { musicianIds }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Encontrar conflictos en eventos existentes\n   */\n  private findConflicts(\n    events: CalendarEvent[],\n    startTime: Date,\n    endTime: Date,\n    travelTime: number,\n    bufferTime: number\n  ): CalendarEvent[] {\n    const conflicts: CalendarEvent[] = [];\n    \n    // Expandir el rango de tiempo para incluir viaje y buffer\n    const expandedStartTime = new Date(startTime.getTime() - (travelTime + bufferTime) * 60000);\n    const expandedEndTime = new Date(endTime.getTime() + (travelTime + bufferTime) * 60000);\n\n    events.forEach(event => {\n      // Verificar si hay solapamiento\n      if (\n        (event.startTime < expandedEndTime && event.endTime > expandedStartTime) ||\n        (expandedStartTime < event.endTime && expandedEndTime > event.startTime)\n      ) {\n        conflicts.push(event);\n      }\n    });\n\n    return conflicts;\n  }\n\n  /**\n   * Encontrar slots disponibles\n   */\n  private findAvailableSlots(\n    events: CalendarEvent[],\n    startTime: Date,\n    endTime: Date,\n    requiredDuration: number\n  ): { startTime: Date; endTime: Date; duration: number }[] {\n    const slots: { startTime: Date; endTime: Date; duration: number }[] = [];\n    \n    // Ordenar eventos por hora de inicio\n    const sortedEvents = [...events].sort((a, b) => a.startTime.getTime() - b.startTime.getTime());\n    \n    let currentTime = new Date(startTime);\n    \n    sortedEvents.forEach(event => {\n      const timeUntilEvent = event.startTime.getTime() - currentTime.getTime();\n      const availableDuration = timeUntilEvent / 60000; // convertir a minutos\n      \n      if (availableDuration >= requiredDuration) {\n        slots.push({\n          startTime: new Date(currentTime),\n          endTime: new Date(event.startTime),\n          duration: availableDuration\n        });\n      }\n      \n      currentTime = new Date(Math.max(currentTime.getTime(), event.endTime.getTime()));\n    });\n    \n    // Verificar si hay tiempo disponible despu\xE9s del \xFAltimo evento\n    const timeAfterLastEvent = endTime.getTime() - currentTime.getTime();\n    const availableDuration = timeAfterLastEvent / 60000;\n    \n    if (availableDuration >= requiredDuration) {\n      slots.push({\n        startTime: new Date(currentTime),\n        endTime: new Date(endTime),\n        duration: availableDuration\n      });\n    }\n    \n    return slots;\n  }\n\n  /**\n   * Encontrar slots disponibles en un d\xEDa completo\n   */\n  private findAvailableSlotsInDay(\n    events: CalendarEvent[],\n    startOfDay: Date,\n    endOfDay: Date\n  ): { startTime: Date; endTime: Date; duration: number }[] {\n    const slots: { startTime: Date; endTime: Date; duration: number }[] = [];\n    \n    // Ordenar eventos por hora de inicio\n    const sortedEvents = [...events].sort((a, b) => a.startTime.getTime() - b.startTime.getTime());\n    \n    let currentTime = new Date(startOfDay);\n    \n    sortedEvents.forEach(event => {\n      if (event.startTime > currentTime) {\n        const duration = (event.startTime.getTime() - currentTime.getTime()) / 60000;\n        if (duration >= 30) { // M\xEDnimo 30 minutos\n          slots.push({\n            startTime: new Date(currentTime),\n            endTime: new Date(event.startTime),\n            duration\n          });\n        }\n      }\n      currentTime = new Date(Math.max(currentTime.getTime(), event.endTime.getTime()));\n    });\n    \n    // Verificar tiempo despu\xE9s del \xFAltimo evento\n    if (currentTime < endOfDay) {\n      const duration = (endOfDay.getTime() - currentTime.getTime()) / 60000;\n      if (duration >= 30) {\n        slots.push({\n          startTime: new Date(currentTime),\n          endTime: new Date(endOfDay),\n          duration\n        });\n      }\n    }\n    \n    return slots;\n  }\n\n  /**\n   * Encontrar el mejor slot de tiempo\n   */\n  private findBestTimeSlot(\n    slots: { startTime: Date; endTime: Date; duration: number }[],\n    preferredTime: Date\n  ): Date | undefined {\n    if (slots.length === 0) return undefined;\n    \n    // Encontrar el slot m\xE1s cercano al tiempo preferido\n    let bestSlot = slots[0];\n    let minDifference = Math.abs(slots[0].startTime.getTime() - preferredTime.getTime());\n    \n    slots.forEach(slot => {\n      const difference = Math.abs(slot.startTime.getTime() - preferredTime.getTime());\n      if (difference < minDifference) {\n        minDifference = difference;\n        bestSlot = slot;\n      }\n    });\n    \n    return bestSlot.startTime;\n  }\n\n  /**\n   * Calcular duraci\xF3n de un evento en minutos\n   */\n  private calculateEventDuration(startTime: Date, endTime: Date): number {\n    return (endTime.getTime() - startTime.getTime()) / 60000;\n  }\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e2a1ba91237dc37e73cae9f9664f8f1960c33d05"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_248gatbjmu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_248gatbjmu();
var __awaiter =
/* istanbul ignore next */
(cov_248gatbjmu().s[0]++,
/* istanbul ignore next */
(cov_248gatbjmu().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_248gatbjmu().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_248gatbjmu().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_248gatbjmu().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[1]++;
    cov_248gatbjmu().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_248gatbjmu().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_248gatbjmu().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_248gatbjmu().f[2]++;
      cov_248gatbjmu().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_248gatbjmu().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_248gatbjmu().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_248gatbjmu().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_248gatbjmu().f[4]++;
      cov_248gatbjmu().s[4]++;
      try {
        /* istanbul ignore next */
        cov_248gatbjmu().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_248gatbjmu().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_248gatbjmu().f[5]++;
      cov_248gatbjmu().s[7]++;
      try {
        /* istanbul ignore next */
        cov_248gatbjmu().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_248gatbjmu().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_248gatbjmu().f[6]++;
      cov_248gatbjmu().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_248gatbjmu().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_248gatbjmu().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_248gatbjmu().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_248gatbjmu().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_248gatbjmu().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_248gatbjmu().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_248gatbjmu().s[13]++;
exports.CalendarConflictService = void 0;
const firebase_1 =
/* istanbul ignore next */
(cov_248gatbjmu().s[14]++, require("../utils/firebase"));
const loggerService_1 =
/* istanbul ignore next */
(cov_248gatbjmu().s[15]++, require("./loggerService"));
class CalendarConflictService {
  constructor() {
    /* istanbul ignore next */
    cov_248gatbjmu().f[7]++;
    cov_248gatbjmu().s[16]++;
    this.COLLECTION = 'calendar_events';
    /* istanbul ignore next */
    cov_248gatbjmu().s[17]++;
    this.DEFAULT_BUFFER_TIME = 60; // 1 hora en minutos
    /* istanbul ignore next */
    cov_248gatbjmu().s[18]++;
    this.DEFAULT_TRAVEL_TIME = 30; // 30 minutos
  }
  /**
   * Verificar conflictos de calendario para un músico
   */
  checkConflicts(request) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[8]++;
    cov_248gatbjmu().s[19]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_248gatbjmu().f[9]++;
      cov_248gatbjmu().s[20]++;
      try {
        /* istanbul ignore next */
        cov_248gatbjmu().s[21]++;
        console.log('[src/services/calendarConflictService.ts:45] Verificando conflictos para músico:', request.musicianId);
        const {
          musicianId,
          startTime,
          endTime,
          location,
          travelTime =
          /* istanbul ignore next */
          (cov_248gatbjmu().b[5][0]++, this.DEFAULT_TRAVEL_TIME),
          bufferTime =
          /* istanbul ignore next */
          (cov_248gatbjmu().b[6][0]++, this.DEFAULT_BUFFER_TIME)
        } =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[22]++, request);
        // Obtener eventos del músico en el rango de tiempo
        const events =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[23]++, yield this.getMusicianEvents(musicianId, startTime, endTime));
        // Calcular tiempo total necesario (evento + viaje + buffer)
        const totalDuration =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[24]++, this.calculateEventDuration(startTime, endTime) + travelTime + bufferTime);
        // Verificar conflictos
        const conflicts =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[25]++, this.findConflicts(events, startTime, endTime, travelTime, bufferTime));
        // Si hay conflictos, encontrar slots disponibles
        let availableSlots =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[26]++, []);
        let recommendedTime;
        /* istanbul ignore next */
        cov_248gatbjmu().s[27]++;
        if (conflicts.length > 0) {
          /* istanbul ignore next */
          cov_248gatbjmu().b[7][0]++;
          cov_248gatbjmu().s[28]++;
          availableSlots = this.findAvailableSlots(events, startTime, endTime, totalDuration);
          /* istanbul ignore next */
          cov_248gatbjmu().s[29]++;
          recommendedTime = this.findBestTimeSlot(availableSlots, startTime);
        } else
        /* istanbul ignore next */
        {
          cov_248gatbjmu().b[7][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[30]++, {
          hasConflict: conflicts.length > 0,
          conflicts,
          availableSlots,
          recommendedTime
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[31]++;
        loggerService_1.logger.info('Verificación de conflictos completada', {
          metadata: {
            musicianId,
            hasConflict: result.hasConflict,
            conflictsCount: conflicts.length,
            availableSlotsCount: availableSlots.length
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[32]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_248gatbjmu().s[33]++;
        loggerService_1.logger.error('Error verificando conflictos de calendario', error, {
          metadata: {
            request
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[34]++;
        throw error;
      }
    });
  }
  /**
   * Agregar evento al calendario
   */
  addEvent(event) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[10]++;
    cov_248gatbjmu().s[35]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_248gatbjmu().f[11]++;
      cov_248gatbjmu().s[36]++;
      try {
        /* istanbul ignore next */
        cov_248gatbjmu().s[37]++;
        console.log('[src/services/calendarConflictService.ts:85] Agregando evento al calendario:', event.eventId);
        const now =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[38]++, new Date());
        const eventRef =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[39]++, firebase_1.db.collection(this.COLLECTION).doc());
        const newEvent =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[40]++, Object.assign(Object.assign({}, event), {
          id: eventRef.id,
          createdAt: now,
          updatedAt: now
        }));
        /* istanbul ignore next */
        cov_248gatbjmu().s[41]++;
        yield eventRef.set(newEvent);
        /* istanbul ignore next */
        cov_248gatbjmu().s[42]++;
        loggerService_1.logger.info('Evento agregado al calendario', {
          metadata: {
            eventId: event.eventId,
            musicianId: event.musicianId
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[43]++;
        return newEvent;
      } catch (error) {
        /* istanbul ignore next */
        cov_248gatbjmu().s[44]++;
        loggerService_1.logger.error('Error agregando evento al calendario', error, {
          metadata: {
            event
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[45]++;
        throw error;
      }
    });
  }
  /**
   * Actualizar evento del calendario
   */
  updateEvent(eventId, updates) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[12]++;
    cov_248gatbjmu().s[46]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_248gatbjmu().f[13]++;
      cov_248gatbjmu().s[47]++;
      try {
        /* istanbul ignore next */
        cov_248gatbjmu().s[48]++;
        console.log('[src/services/calendarConflictService.ts:105] Actualizando evento del calendario:', eventId);
        const eventRef =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[49]++, firebase_1.db.collection(this.COLLECTION).doc(eventId));
        const doc =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[50]++, yield eventRef.get());
        /* istanbul ignore next */
        cov_248gatbjmu().s[51]++;
        if (!doc.exists) {
          /* istanbul ignore next */
          cov_248gatbjmu().b[8][0]++;
          cov_248gatbjmu().s[52]++;
          throw new Error('Evento del calendario no encontrado');
        } else
        /* istanbul ignore next */
        {
          cov_248gatbjmu().b[8][1]++;
        }
        cov_248gatbjmu().s[53]++;
        yield eventRef.update(Object.assign(Object.assign({}, updates), {
          updatedAt: new Date()
        }));
        const updatedDoc =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[54]++, yield eventRef.get());
        const updatedEvent =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[55]++, updatedDoc.data());
        /* istanbul ignore next */
        cov_248gatbjmu().s[56]++;
        loggerService_1.logger.info('Evento del calendario actualizado', {
          metadata: {
            eventId,
            updates
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[57]++;
        return updatedEvent;
      } catch (error) {
        /* istanbul ignore next */
        cov_248gatbjmu().s[58]++;
        loggerService_1.logger.error('Error actualizando evento del calendario', error, {
          metadata: {
            eventId
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[59]++;
        throw error;
      }
    });
  }
  /**
   * Eliminar evento del calendario
   */
  removeEvent(eventId) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[14]++;
    cov_248gatbjmu().s[60]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_248gatbjmu().f[15]++;
      cov_248gatbjmu().s[61]++;
      try {
        /* istanbul ignore next */
        cov_248gatbjmu().s[62]++;
        console.log('[src/services/calendarConflictService.ts:130] Eliminando evento del calendario:', eventId);
        const eventRef =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[63]++, firebase_1.db.collection(this.COLLECTION).doc(eventId));
        /* istanbul ignore next */
        cov_248gatbjmu().s[64]++;
        yield eventRef.delete();
        /* istanbul ignore next */
        cov_248gatbjmu().s[65]++;
        loggerService_1.logger.info('Evento eliminado del calendario', {
          metadata: {
            eventId
          }
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_248gatbjmu().s[66]++;
        loggerService_1.logger.error('Error eliminando evento del calendario', error, {
          metadata: {
            eventId
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[67]++;
        throw error;
      }
    });
  }
  /**
   * Obtener eventos de un músico en un rango de tiempo
   */
  getMusicianEvents(musicianId, startTime, endTime) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[16]++;
    cov_248gatbjmu().s[68]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_248gatbjmu().f[17]++;
      cov_248gatbjmu().s[69]++;
      try {
        /* istanbul ignore next */
        cov_248gatbjmu().s[70]++;
        console.log('[src/services/calendarConflictService.ts:145] Obteniendo eventos del músico:', musicianId);
        const query =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[71]++, firebase_1.db.collection(this.COLLECTION).where('musicianId', '==', musicianId).where('status', 'in', ['confirmed', 'pending']).where('startTime', '<=', endTime).where('endTime', '>=', startTime));
        const snapshot =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[72]++, yield query.get());
        const events =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[73]++, snapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_248gatbjmu().f[18]++;
          const data =
          /* istanbul ignore next */
          (cov_248gatbjmu().s[74]++, doc.data());
          /* istanbul ignore next */
          cov_248gatbjmu().s[75]++;
          return Object.assign(Object.assign({}, data), {
            startTime: data.startTime.toDate(),
            endTime: data.endTime.toDate(),
            createdAt: data.createdAt.toDate(),
            updatedAt: data.updatedAt.toDate()
          });
        }));
        /* istanbul ignore next */
        cov_248gatbjmu().s[76]++;
        return events;
      } catch (error) {
        /* istanbul ignore next */
        cov_248gatbjmu().s[77]++;
        loggerService_1.logger.error('Error obteniendo eventos del músico', error, {
          metadata: {
            musicianId
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[78]++;
        throw error;
      }
    });
  }
  /**
   * Obtener disponibilidad de un músico para un día específico
   */
  getDailyAvailability(musicianId, date) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[19]++;
    cov_248gatbjmu().s[79]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_248gatbjmu().f[20]++;
      cov_248gatbjmu().s[80]++;
      try {
        /* istanbul ignore next */
        cov_248gatbjmu().s[81]++;
        console.log('[src/services/calendarConflictService.ts:175] Obteniendo disponibilidad diaria del músico:', musicianId);
        const startOfDay =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[82]++, new Date(date));
        /* istanbul ignore next */
        cov_248gatbjmu().s[83]++;
        startOfDay.setHours(0, 0, 0, 0);
        const endOfDay =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[84]++, new Date(date));
        /* istanbul ignore next */
        cov_248gatbjmu().s[85]++;
        endOfDay.setHours(23, 59, 59, 999);
        const events =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[86]++, yield this.getMusicianEvents(musicianId, startOfDay, endOfDay));
        // Encontrar slots disponibles
        const availableSlots =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[87]++, this.findAvailableSlotsInDay(events, startOfDay, endOfDay));
        /* istanbul ignore next */
        cov_248gatbjmu().s[88]++;
        return {
          date,
          busySlots: events,
          availableSlots
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_248gatbjmu().s[89]++;
        loggerService_1.logger.error('Error obteniendo disponibilidad diaria', error, {
          metadata: {
            musicianId,
            date
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[90]++;
        throw error;
      }
    });
  }
  /**
   * Verificar disponibilidad de múltiples músicos
   */
  checkMultipleMusiciansAvailability(musicianIds, startTime, endTime) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[21]++;
    cov_248gatbjmu().s[91]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_248gatbjmu().f[22]++;
      cov_248gatbjmu().s[92]++;
      try {
        /* istanbul ignore next */
        cov_248gatbjmu().s[93]++;
        console.log('[src/services/calendarConflictService.ts:205] Verificando disponibilidad de múltiples músicos');
        const results =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[94]++, yield Promise.all(musicianIds.map(musicianId => {
          /* istanbul ignore next */
          cov_248gatbjmu().f[23]++;
          cov_248gatbjmu().s[95]++;
          return __awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            cov_248gatbjmu().f[24]++;
            const result =
            /* istanbul ignore next */
            (cov_248gatbjmu().s[96]++, yield this.checkConflicts({
              musicianId,
              startTime,
              endTime,
              location: ''
            }));
            /* istanbul ignore next */
            cov_248gatbjmu().s[97]++;
            return {
              musicianId,
              result
            };
          });
        })));
        const availableMusicians =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[98]++, []);
        const unavailableMusicians =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[99]++, []);
        const conflicts =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[100]++, {});
        /* istanbul ignore next */
        cov_248gatbjmu().s[101]++;
        results.forEach(({
          musicianId,
          result
        }) => {
          /* istanbul ignore next */
          cov_248gatbjmu().f[25]++;
          cov_248gatbjmu().s[102]++;
          if (result.hasConflict) {
            /* istanbul ignore next */
            cov_248gatbjmu().b[9][0]++;
            cov_248gatbjmu().s[103]++;
            unavailableMusicians.push(musicianId);
            /* istanbul ignore next */
            cov_248gatbjmu().s[104]++;
            conflicts[musicianId] = result.conflicts;
          } else {
            /* istanbul ignore next */
            cov_248gatbjmu().b[9][1]++;
            cov_248gatbjmu().s[105]++;
            availableMusicians.push(musicianId);
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[106]++;
        return {
          availableMusicians,
          unavailableMusicians,
          conflicts
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_248gatbjmu().s[107]++;
        loggerService_1.logger.error('Error verificando disponibilidad de múltiples músicos', error, {
          metadata: {
            musicianIds
          }
        });
        /* istanbul ignore next */
        cov_248gatbjmu().s[108]++;
        throw error;
      }
    });
  }
  /**
   * Encontrar conflictos en eventos existentes
   */
  findConflicts(events, startTime, endTime, travelTime, bufferTime) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[26]++;
    const conflicts =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[109]++, []);
    // Expandir el rango de tiempo para incluir viaje y buffer
    const expandedStartTime =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[110]++, new Date(startTime.getTime() - (travelTime + bufferTime) * 60000));
    const expandedEndTime =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[111]++, new Date(endTime.getTime() + (travelTime + bufferTime) * 60000));
    /* istanbul ignore next */
    cov_248gatbjmu().s[112]++;
    events.forEach(event => {
      /* istanbul ignore next */
      cov_248gatbjmu().f[27]++;
      cov_248gatbjmu().s[113]++;
      // Verificar si hay solapamiento
      if (
      /* istanbul ignore next */
      (cov_248gatbjmu().b[11][0]++, event.startTime < expandedEndTime) &&
      /* istanbul ignore next */
      (cov_248gatbjmu().b[11][1]++, event.endTime > expandedStartTime) ||
      /* istanbul ignore next */
      (cov_248gatbjmu().b[11][2]++, expandedStartTime < event.endTime) &&
      /* istanbul ignore next */
      (cov_248gatbjmu().b[11][3]++, expandedEndTime > event.startTime)) {
        /* istanbul ignore next */
        cov_248gatbjmu().b[10][0]++;
        cov_248gatbjmu().s[114]++;
        conflicts.push(event);
      } else
      /* istanbul ignore next */
      {
        cov_248gatbjmu().b[10][1]++;
      }
    });
    /* istanbul ignore next */
    cov_248gatbjmu().s[115]++;
    return conflicts;
  }
  /**
   * Encontrar slots disponibles
   */
  findAvailableSlots(events, startTime, endTime, requiredDuration) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[28]++;
    const slots =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[116]++, []);
    // Ordenar eventos por hora de inicio
    const sortedEvents =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[117]++, [...events].sort((a, b) => {
      /* istanbul ignore next */
      cov_248gatbjmu().f[29]++;
      cov_248gatbjmu().s[118]++;
      return a.startTime.getTime() - b.startTime.getTime();
    }));
    let currentTime =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[119]++, new Date(startTime));
    /* istanbul ignore next */
    cov_248gatbjmu().s[120]++;
    sortedEvents.forEach(event => {
      /* istanbul ignore next */
      cov_248gatbjmu().f[30]++;
      const timeUntilEvent =
      /* istanbul ignore next */
      (cov_248gatbjmu().s[121]++, event.startTime.getTime() - currentTime.getTime());
      const availableDuration =
      /* istanbul ignore next */
      (cov_248gatbjmu().s[122]++, timeUntilEvent / 60000); // convertir a minutos
      /* istanbul ignore next */
      cov_248gatbjmu().s[123]++;
      if (availableDuration >= requiredDuration) {
        /* istanbul ignore next */
        cov_248gatbjmu().b[12][0]++;
        cov_248gatbjmu().s[124]++;
        slots.push({
          startTime: new Date(currentTime),
          endTime: new Date(event.startTime),
          duration: availableDuration
        });
      } else
      /* istanbul ignore next */
      {
        cov_248gatbjmu().b[12][1]++;
      }
      cov_248gatbjmu().s[125]++;
      currentTime = new Date(Math.max(currentTime.getTime(), event.endTime.getTime()));
    });
    // Verificar si hay tiempo disponible después del último evento
    const timeAfterLastEvent =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[126]++, endTime.getTime() - currentTime.getTime());
    const availableDuration =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[127]++, timeAfterLastEvent / 60000);
    /* istanbul ignore next */
    cov_248gatbjmu().s[128]++;
    if (availableDuration >= requiredDuration) {
      /* istanbul ignore next */
      cov_248gatbjmu().b[13][0]++;
      cov_248gatbjmu().s[129]++;
      slots.push({
        startTime: new Date(currentTime),
        endTime: new Date(endTime),
        duration: availableDuration
      });
    } else
    /* istanbul ignore next */
    {
      cov_248gatbjmu().b[13][1]++;
    }
    cov_248gatbjmu().s[130]++;
    return slots;
  }
  /**
   * Encontrar slots disponibles en un día completo
   */
  findAvailableSlotsInDay(events, startOfDay, endOfDay) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[31]++;
    const slots =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[131]++, []);
    // Ordenar eventos por hora de inicio
    const sortedEvents =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[132]++, [...events].sort((a, b) => {
      /* istanbul ignore next */
      cov_248gatbjmu().f[32]++;
      cov_248gatbjmu().s[133]++;
      return a.startTime.getTime() - b.startTime.getTime();
    }));
    let currentTime =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[134]++, new Date(startOfDay));
    /* istanbul ignore next */
    cov_248gatbjmu().s[135]++;
    sortedEvents.forEach(event => {
      /* istanbul ignore next */
      cov_248gatbjmu().f[33]++;
      cov_248gatbjmu().s[136]++;
      if (event.startTime > currentTime) {
        /* istanbul ignore next */
        cov_248gatbjmu().b[14][0]++;
        const duration =
        /* istanbul ignore next */
        (cov_248gatbjmu().s[137]++, (event.startTime.getTime() - currentTime.getTime()) / 60000);
        /* istanbul ignore next */
        cov_248gatbjmu().s[138]++;
        if (duration >= 30) {
          /* istanbul ignore next */
          cov_248gatbjmu().b[15][0]++;
          cov_248gatbjmu().s[139]++;
          // Mínimo 30 minutos
          slots.push({
            startTime: new Date(currentTime),
            endTime: new Date(event.startTime),
            duration
          });
        } else
        /* istanbul ignore next */
        {
          cov_248gatbjmu().b[15][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_248gatbjmu().b[14][1]++;
      }
      cov_248gatbjmu().s[140]++;
      currentTime = new Date(Math.max(currentTime.getTime(), event.endTime.getTime()));
    });
    // Verificar tiempo después del último evento
    /* istanbul ignore next */
    cov_248gatbjmu().s[141]++;
    if (currentTime < endOfDay) {
      /* istanbul ignore next */
      cov_248gatbjmu().b[16][0]++;
      const duration =
      /* istanbul ignore next */
      (cov_248gatbjmu().s[142]++, (endOfDay.getTime() - currentTime.getTime()) / 60000);
      /* istanbul ignore next */
      cov_248gatbjmu().s[143]++;
      if (duration >= 30) {
        /* istanbul ignore next */
        cov_248gatbjmu().b[17][0]++;
        cov_248gatbjmu().s[144]++;
        slots.push({
          startTime: new Date(currentTime),
          endTime: new Date(endOfDay),
          duration
        });
      } else
      /* istanbul ignore next */
      {
        cov_248gatbjmu().b[17][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_248gatbjmu().b[16][1]++;
    }
    cov_248gatbjmu().s[145]++;
    return slots;
  }
  /**
   * Encontrar el mejor slot de tiempo
   */
  findBestTimeSlot(slots, preferredTime) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[34]++;
    cov_248gatbjmu().s[146]++;
    if (slots.length === 0) {
      /* istanbul ignore next */
      cov_248gatbjmu().b[18][0]++;
      cov_248gatbjmu().s[147]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_248gatbjmu().b[18][1]++;
    }
    // Encontrar el slot más cercano al tiempo preferido
    let bestSlot =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[148]++, slots[0]);
    let minDifference =
    /* istanbul ignore next */
    (cov_248gatbjmu().s[149]++, Math.abs(slots[0].startTime.getTime() - preferredTime.getTime()));
    /* istanbul ignore next */
    cov_248gatbjmu().s[150]++;
    slots.forEach(slot => {
      /* istanbul ignore next */
      cov_248gatbjmu().f[35]++;
      const difference =
      /* istanbul ignore next */
      (cov_248gatbjmu().s[151]++, Math.abs(slot.startTime.getTime() - preferredTime.getTime()));
      /* istanbul ignore next */
      cov_248gatbjmu().s[152]++;
      if (difference < minDifference) {
        /* istanbul ignore next */
        cov_248gatbjmu().b[19][0]++;
        cov_248gatbjmu().s[153]++;
        minDifference = difference;
        /* istanbul ignore next */
        cov_248gatbjmu().s[154]++;
        bestSlot = slot;
      } else
      /* istanbul ignore next */
      {
        cov_248gatbjmu().b[19][1]++;
      }
    });
    /* istanbul ignore next */
    cov_248gatbjmu().s[155]++;
    return bestSlot.startTime;
  }
  /**
   * Calcular duración de un evento en minutos
   */
  calculateEventDuration(startTime, endTime) {
    /* istanbul ignore next */
    cov_248gatbjmu().f[36]++;
    cov_248gatbjmu().s[156]++;
    return (endTime.getTime() - startTime.getTime()) / 60000;
  }
}
/* istanbul ignore next */
cov_248gatbjmu().s[157]++;
exports.CalendarConflictService = CalendarConflictService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjQ4Z2F0YmptdSIsImFjdHVhbENvdmVyYWdlIiwiZmlyZWJhc2VfMSIsInMiLCJyZXF1aXJlIiwibG9nZ2VyU2VydmljZV8xIiwiQ2FsZW5kYXJDb25mbGljdFNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImYiLCJDT0xMRUNUSU9OIiwiREVGQVVMVF9CVUZGRVJfVElNRSIsIkRFRkFVTFRfVFJBVkVMX1RJTUUiLCJjaGVja0NvbmZsaWN0cyIsInJlcXVlc3QiLCJjb25zb2xlIiwibG9nIiwibXVzaWNpYW5JZCIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJsb2NhdGlvbiIsInRyYXZlbFRpbWUiLCJiIiwiYnVmZmVyVGltZSIsImV2ZW50cyIsImdldE11c2ljaWFuRXZlbnRzIiwidG90YWxEdXJhdGlvbiIsImNhbGN1bGF0ZUV2ZW50RHVyYXRpb24iLCJjb25mbGljdHMiLCJmaW5kQ29uZmxpY3RzIiwiYXZhaWxhYmxlU2xvdHMiLCJyZWNvbW1lbmRlZFRpbWUiLCJsZW5ndGgiLCJmaW5kQXZhaWxhYmxlU2xvdHMiLCJmaW5kQmVzdFRpbWVTbG90IiwicmVzdWx0IiwiaGFzQ29uZmxpY3QiLCJsb2dnZXIiLCJpbmZvIiwibWV0YWRhdGEiLCJjb25mbGljdHNDb3VudCIsImF2YWlsYWJsZVNsb3RzQ291bnQiLCJlcnJvciIsImFkZEV2ZW50IiwiZXZlbnQiLCJldmVudElkIiwibm93IiwiRGF0ZSIsImV2ZW50UmVmIiwiZGIiLCJjb2xsZWN0aW9uIiwiZG9jIiwibmV3RXZlbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJpZCIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsInNldCIsInVwZGF0ZUV2ZW50IiwidXBkYXRlcyIsImdldCIsImV4aXN0cyIsIkVycm9yIiwidXBkYXRlIiwidXBkYXRlZERvYyIsInVwZGF0ZWRFdmVudCIsImRhdGEiLCJyZW1vdmVFdmVudCIsImRlbGV0ZSIsInF1ZXJ5Iiwid2hlcmUiLCJzbmFwc2hvdCIsImRvY3MiLCJtYXAiLCJ0b0RhdGUiLCJnZXREYWlseUF2YWlsYWJpbGl0eSIsImRhdGUiLCJzdGFydE9mRGF5Iiwic2V0SG91cnMiLCJlbmRPZkRheSIsImZpbmRBdmFpbGFibGVTbG90c0luRGF5IiwiYnVzeVNsb3RzIiwiY2hlY2tNdWx0aXBsZU11c2ljaWFuc0F2YWlsYWJpbGl0eSIsIm11c2ljaWFuSWRzIiwicmVzdWx0cyIsIlByb21pc2UiLCJhbGwiLCJfX2F3YWl0ZXIiLCJhdmFpbGFibGVNdXNpY2lhbnMiLCJ1bmF2YWlsYWJsZU11c2ljaWFucyIsImZvckVhY2giLCJwdXNoIiwiZXhwYW5kZWRTdGFydFRpbWUiLCJnZXRUaW1lIiwiZXhwYW5kZWRFbmRUaW1lIiwicmVxdWlyZWREdXJhdGlvbiIsInNsb3RzIiwic29ydGVkRXZlbnRzIiwic29ydCIsImEiLCJjdXJyZW50VGltZSIsInRpbWVVbnRpbEV2ZW50IiwiYXZhaWxhYmxlRHVyYXRpb24iLCJkdXJhdGlvbiIsIk1hdGgiLCJtYXgiLCJ0aW1lQWZ0ZXJMYXN0RXZlbnQiLCJwcmVmZXJyZWRUaW1lIiwidW5kZWZpbmVkIiwiYmVzdFNsb3QiLCJtaW5EaWZmZXJlbmNlIiwiYWJzIiwic2xvdCIsImRpZmZlcmVuY2UiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQzpcXHNyY1xcQVBQX011c3Npa09uXFxBUFBfTXVzc2lrT25fRXhwcmVzc1xcc3JjXFxzZXJ2aWNlc1xcY2FsZW5kYXJDb25mbGljdFNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGIgfSBmcm9tICcuLi91dGlscy9maXJlYmFzZSc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlclNlcnZpY2UnO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuLi91dGlscy9EYXRhVHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENhbGVuZGFyRXZlbnQge1xuICBpZDogc3RyaW5nO1xuICBtdXNpY2lhbklkOiBzdHJpbmc7XG4gIGV2ZW50SWQ6IHN0cmluZztcbiAgc3RhcnRUaW1lOiBEYXRlO1xuICBlbmRUaW1lOiBEYXRlO1xuICBsb2NhdGlvbjogc3RyaW5nO1xuICBzdGF0dXM6ICdjb25maXJtZWQnIHwgJ3BlbmRpbmcnIHwgJ2NhbmNlbGxlZCc7XG4gIHRyYXZlbFRpbWU/OiBudW1iZXI7IC8vIG1pbnV0b3NcbiAgYnVmZmVyVGltZT86IG51bWJlcjsgLy8gbWludXRvcyBkZSBtYXJnZW5cbiAgY3JlYXRlZEF0OiBEYXRlO1xuICB1cGRhdGVkQXQ6IERhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmxpY3RDaGVja1Jlc3VsdCB7XG4gIGhhc0NvbmZsaWN0OiBib29sZWFuO1xuICBjb25mbGljdHM6IENhbGVuZGFyRXZlbnRbXTtcbiAgYXZhaWxhYmxlU2xvdHM6IHtcbiAgICBzdGFydFRpbWU6IERhdGU7XG4gICAgZW5kVGltZTogRGF0ZTtcbiAgICBkdXJhdGlvbjogbnVtYmVyOyAvLyBtaW51dG9zXG4gIH1bXTtcbiAgcmVjb21tZW5kZWRUaW1lPzogRGF0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdmFpbGFiaWxpdHlSZXF1ZXN0IHtcbiAgbXVzaWNpYW5JZDogc3RyaW5nO1xuICBzdGFydFRpbWU6IERhdGU7XG4gIGVuZFRpbWU6IERhdGU7XG4gIGxvY2F0aW9uOiBzdHJpbmc7XG4gIHRyYXZlbFRpbWU/OiBudW1iZXI7XG4gIGJ1ZmZlclRpbWU/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBDYWxlbmRhckNvbmZsaWN0U2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgQ09MTEVDVElPTiA9ICdjYWxlbmRhcl9ldmVudHMnO1xuICBwcml2YXRlIHJlYWRvbmx5IERFRkFVTFRfQlVGRkVSX1RJTUUgPSA2MDsgLy8gMSBob3JhIGVuIG1pbnV0b3NcbiAgcHJpdmF0ZSByZWFkb25seSBERUZBVUxUX1RSQVZFTF9USU1FID0gMzA7IC8vIDMwIG1pbnV0b3NcblxuICAvKipcbiAgICogVmVyaWZpY2FyIGNvbmZsaWN0b3MgZGUgY2FsZW5kYXJpbyBwYXJhIHVuIG3DunNpY29cbiAgICovXG4gIGFzeW5jIGNoZWNrQ29uZmxpY3RzKHJlcXVlc3Q6IEF2YWlsYWJpbGl0eVJlcXVlc3QpOiBQcm9taXNlPENvbmZsaWN0Q2hlY2tSZXN1bHQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ1tzcmMvc2VydmljZXMvY2FsZW5kYXJDb25mbGljdFNlcnZpY2UudHM6NDVdIFZlcmlmaWNhbmRvIGNvbmZsaWN0b3MgcGFyYSBtw7pzaWNvOicsIHJlcXVlc3QubXVzaWNpYW5JZCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHsgbXVzaWNpYW5JZCwgc3RhcnRUaW1lLCBlbmRUaW1lLCBsb2NhdGlvbiwgdHJhdmVsVGltZSA9IHRoaXMuREVGQVVMVF9UUkFWRUxfVElNRSwgYnVmZmVyVGltZSA9IHRoaXMuREVGQVVMVF9CVUZGRVJfVElNRSB9ID0gcmVxdWVzdDtcblxuICAgICAgLy8gT2J0ZW5lciBldmVudG9zIGRlbCBtw7pzaWNvIGVuIGVsIHJhbmdvIGRlIHRpZW1wb1xuICAgICAgY29uc3QgZXZlbnRzID0gYXdhaXQgdGhpcy5nZXRNdXNpY2lhbkV2ZW50cyhtdXNpY2lhbklkLCBzdGFydFRpbWUsIGVuZFRpbWUpO1xuICAgICAgXG4gICAgICAvLyBDYWxjdWxhciB0aWVtcG8gdG90YWwgbmVjZXNhcmlvIChldmVudG8gKyB2aWFqZSArIGJ1ZmZlcilcbiAgICAgIGNvbnN0IHRvdGFsRHVyYXRpb24gPSB0aGlzLmNhbGN1bGF0ZUV2ZW50RHVyYXRpb24oc3RhcnRUaW1lLCBlbmRUaW1lKSArIHRyYXZlbFRpbWUgKyBidWZmZXJUaW1lO1xuICAgICAgXG4gICAgICAvLyBWZXJpZmljYXIgY29uZmxpY3Rvc1xuICAgICAgY29uc3QgY29uZmxpY3RzID0gdGhpcy5maW5kQ29uZmxpY3RzKGV2ZW50cywgc3RhcnRUaW1lLCBlbmRUaW1lLCB0cmF2ZWxUaW1lLCBidWZmZXJUaW1lKTtcbiAgICAgIFxuICAgICAgLy8gU2kgaGF5IGNvbmZsaWN0b3MsIGVuY29udHJhciBzbG90cyBkaXNwb25pYmxlc1xuICAgICAgbGV0IGF2YWlsYWJsZVNsb3RzOiBDb25mbGljdENoZWNrUmVzdWx0WydhdmFpbGFibGVTbG90cyddID0gW107XG4gICAgICBsZXQgcmVjb21tZW5kZWRUaW1lOiBEYXRlIHwgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoY29uZmxpY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYXZhaWxhYmxlU2xvdHMgPSB0aGlzLmZpbmRBdmFpbGFibGVTbG90cyhldmVudHMsIHN0YXJ0VGltZSwgZW5kVGltZSwgdG90YWxEdXJhdGlvbik7XG4gICAgICAgIHJlY29tbWVuZGVkVGltZSA9IHRoaXMuZmluZEJlc3RUaW1lU2xvdChhdmFpbGFibGVTbG90cywgc3RhcnRUaW1lKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdWx0OiBDb25mbGljdENoZWNrUmVzdWx0ID0ge1xuICAgICAgICBoYXNDb25mbGljdDogY29uZmxpY3RzLmxlbmd0aCA+IDAsXG4gICAgICAgIGNvbmZsaWN0cyxcbiAgICAgICAgYXZhaWxhYmxlU2xvdHMsXG4gICAgICAgIHJlY29tbWVuZGVkVGltZVxuICAgICAgfTtcblxuICAgICAgbG9nZ2VyLmluZm8oJ1ZlcmlmaWNhY2nDs24gZGUgY29uZmxpY3RvcyBjb21wbGV0YWRhJywge1xuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIG11c2ljaWFuSWQsXG4gICAgICAgICAgaGFzQ29uZmxpY3Q6IHJlc3VsdC5oYXNDb25mbGljdCxcbiAgICAgICAgICBjb25mbGljdHNDb3VudDogY29uZmxpY3RzLmxlbmd0aCxcbiAgICAgICAgICBhdmFpbGFibGVTbG90c0NvdW50OiBhdmFpbGFibGVTbG90cy5sZW5ndGhcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgdmVyaWZpY2FuZG8gY29uZmxpY3RvcyBkZSBjYWxlbmRhcmlvJywgZXJyb3IgYXMgRXJyb3IsIHsgXG4gICAgICAgIG1ldGFkYXRhOiB7IHJlcXVlc3QgfVxuICAgICAgfSk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWdyZWdhciBldmVudG8gYWwgY2FsZW5kYXJpb1xuICAgKi9cbiAgYXN5bmMgYWRkRXZlbnQoZXZlbnQ6IE9taXQ8Q2FsZW5kYXJFdmVudCwgJ2lkJyB8ICdjcmVhdGVkQXQnIHwgJ3VwZGF0ZWRBdCc+KTogUHJvbWlzZTxDYWxlbmRhckV2ZW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdbc3JjL3NlcnZpY2VzL2NhbGVuZGFyQ29uZmxpY3RTZXJ2aWNlLnRzOjg1XSBBZ3JlZ2FuZG8gZXZlbnRvIGFsIGNhbGVuZGFyaW86JywgZXZlbnQuZXZlbnRJZCk7XG4gICAgICBcbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBldmVudFJlZiA9IGRiLmNvbGxlY3Rpb24odGhpcy5DT0xMRUNUSU9OKS5kb2MoKTtcbiAgICAgIFxuICAgICAgY29uc3QgbmV3RXZlbnQ6IENhbGVuZGFyRXZlbnQgPSB7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICBpZDogZXZlbnRSZWYuaWQsXG4gICAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgICB1cGRhdGVkQXQ6IG5vd1xuICAgICAgfTtcblxuICAgICAgYXdhaXQgZXZlbnRSZWYuc2V0KG5ld0V2ZW50KTtcbiAgICAgIFxuICAgICAgbG9nZ2VyLmluZm8oJ0V2ZW50byBhZ3JlZ2FkbyBhbCBjYWxlbmRhcmlvJywgeyBcbiAgICAgICAgbWV0YWRhdGE6IHsgZXZlbnRJZDogZXZlbnQuZXZlbnRJZCwgbXVzaWNpYW5JZDogZXZlbnQubXVzaWNpYW5JZCB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXdFdmVudDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBhZ3JlZ2FuZG8gZXZlbnRvIGFsIGNhbGVuZGFyaW8nLCBlcnJvciBhcyBFcnJvciwgeyBcbiAgICAgICAgbWV0YWRhdGE6IHsgZXZlbnQgfVxuICAgICAgfSk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWN0dWFsaXphciBldmVudG8gZGVsIGNhbGVuZGFyaW9cbiAgICovXG4gIGFzeW5jIHVwZGF0ZUV2ZW50KGV2ZW50SWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxDYWxlbmRhckV2ZW50Pik6IFByb21pc2U8Q2FsZW5kYXJFdmVudD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnW3NyYy9zZXJ2aWNlcy9jYWxlbmRhckNvbmZsaWN0U2VydmljZS50czoxMDVdIEFjdHVhbGl6YW5kbyBldmVudG8gZGVsIGNhbGVuZGFyaW86JywgZXZlbnRJZCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGV2ZW50UmVmID0gZGIuY29sbGVjdGlvbih0aGlzLkNPTExFQ1RJT04pLmRvYyhldmVudElkKTtcbiAgICAgIGNvbnN0IGRvYyA9IGF3YWl0IGV2ZW50UmVmLmdldCgpO1xuICAgICAgXG4gICAgICBpZiAoIWRvYy5leGlzdHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudG8gZGVsIGNhbGVuZGFyaW8gbm8gZW5jb250cmFkbycpO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBldmVudFJlZi51cGRhdGUoe1xuICAgICAgICAuLi51cGRhdGVzLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgZXZlbnRSZWYuZ2V0KCk7XG4gICAgICBjb25zdCB1cGRhdGVkRXZlbnQgPSB1cGRhdGVkRG9jLmRhdGEoKSBhcyBDYWxlbmRhckV2ZW50O1xuICAgICAgXG4gICAgICBsb2dnZXIuaW5mbygnRXZlbnRvIGRlbCBjYWxlbmRhcmlvIGFjdHVhbGl6YWRvJywgeyBcbiAgICAgICAgbWV0YWRhdGE6IHsgZXZlbnRJZCwgdXBkYXRlcyB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB1cGRhdGVkRXZlbnQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgYWN0dWFsaXphbmRvIGV2ZW50byBkZWwgY2FsZW5kYXJpbycsIGVycm9yIGFzIEVycm9yLCB7IFxuICAgICAgICBtZXRhZGF0YTogeyBldmVudElkIH1cbiAgICAgIH0pO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVsaW1pbmFyIGV2ZW50byBkZWwgY2FsZW5kYXJpb1xuICAgKi9cbiAgYXN5bmMgcmVtb3ZlRXZlbnQoZXZlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdbc3JjL3NlcnZpY2VzL2NhbGVuZGFyQ29uZmxpY3RTZXJ2aWNlLnRzOjEzMF0gRWxpbWluYW5kbyBldmVudG8gZGVsIGNhbGVuZGFyaW86JywgZXZlbnRJZCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGV2ZW50UmVmID0gZGIuY29sbGVjdGlvbih0aGlzLkNPTExFQ1RJT04pLmRvYyhldmVudElkKTtcbiAgICAgIGF3YWl0IGV2ZW50UmVmLmRlbGV0ZSgpO1xuICAgICAgXG4gICAgICBsb2dnZXIuaW5mbygnRXZlbnRvIGVsaW1pbmFkbyBkZWwgY2FsZW5kYXJpbycsIHsgXG4gICAgICAgIG1ldGFkYXRhOiB7IGV2ZW50SWQgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgZWxpbWluYW5kbyBldmVudG8gZGVsIGNhbGVuZGFyaW8nLCBlcnJvciBhcyBFcnJvciwgeyBcbiAgICAgICAgbWV0YWRhdGE6IHsgZXZlbnRJZCB9XG4gICAgICB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRlbmVyIGV2ZW50b3MgZGUgdW4gbcO6c2ljbyBlbiB1biByYW5nbyBkZSB0aWVtcG9cbiAgICovXG4gIGFzeW5jIGdldE11c2ljaWFuRXZlbnRzKG11c2ljaWFuSWQ6IHN0cmluZywgc3RhcnRUaW1lOiBEYXRlLCBlbmRUaW1lOiBEYXRlKTogUHJvbWlzZTxDYWxlbmRhckV2ZW50W10+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ1tzcmMvc2VydmljZXMvY2FsZW5kYXJDb25mbGljdFNlcnZpY2UudHM6MTQ1XSBPYnRlbmllbmRvIGV2ZW50b3MgZGVsIG3DunNpY286JywgbXVzaWNpYW5JZCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gZGIuY29sbGVjdGlvbih0aGlzLkNPTExFQ1RJT04pXG4gICAgICAgIC53aGVyZSgnbXVzaWNpYW5JZCcsICc9PScsIG11c2ljaWFuSWQpXG4gICAgICAgIC53aGVyZSgnc3RhdHVzJywgJ2luJywgWydjb25maXJtZWQnLCAncGVuZGluZyddKVxuICAgICAgICAud2hlcmUoJ3N0YXJ0VGltZScsICc8PScsIGVuZFRpbWUpXG4gICAgICAgIC53aGVyZSgnZW5kVGltZScsICc+PScsIHN0YXJ0VGltZSk7XG5cbiAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgcXVlcnkuZ2V0KCk7XG4gICAgICBjb25zdCBldmVudHMgPSBzbmFwc2hvdC5kb2NzLm1hcChkb2MgPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0gZG9jLmRhdGEoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgIHN0YXJ0VGltZTogZGF0YS5zdGFydFRpbWUudG9EYXRlKCksXG4gICAgICAgICAgZW5kVGltZTogZGF0YS5lbmRUaW1lLnRvRGF0ZSgpLFxuICAgICAgICAgIGNyZWF0ZWRBdDogZGF0YS5jcmVhdGVkQXQudG9EYXRlKCksXG4gICAgICAgICAgdXBkYXRlZEF0OiBkYXRhLnVwZGF0ZWRBdC50b0RhdGUoKVxuICAgICAgICB9IGFzIENhbGVuZGFyRXZlbnQ7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGV2ZW50cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBvYnRlbmllbmRvIGV2ZW50b3MgZGVsIG3DunNpY28nLCBlcnJvciBhcyBFcnJvciwgeyBcbiAgICAgICAgbWV0YWRhdGE6IHsgbXVzaWNpYW5JZCB9XG4gICAgICB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRlbmVyIGRpc3BvbmliaWxpZGFkIGRlIHVuIG3DunNpY28gcGFyYSB1biBkw61hIGVzcGVjw61maWNvXG4gICAqL1xuICBhc3luYyBnZXREYWlseUF2YWlsYWJpbGl0eShtdXNpY2lhbklkOiBzdHJpbmcsIGRhdGU6IERhdGUpOiBQcm9taXNlPHtcbiAgICBkYXRlOiBEYXRlO1xuICAgIGJ1c3lTbG90czogQ2FsZW5kYXJFdmVudFtdO1xuICAgIGF2YWlsYWJsZVNsb3RzOiB7IHN0YXJ0VGltZTogRGF0ZTsgZW5kVGltZTogRGF0ZTsgZHVyYXRpb246IG51bWJlciB9W107XG4gIH0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ1tzcmMvc2VydmljZXMvY2FsZW5kYXJDb25mbGljdFNlcnZpY2UudHM6MTc1XSBPYnRlbmllbmRvIGRpc3BvbmliaWxpZGFkIGRpYXJpYSBkZWwgbcO6c2ljbzonLCBtdXNpY2lhbklkKTtcbiAgICAgIFxuICAgICAgY29uc3Qgc3RhcnRPZkRheSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgc3RhcnRPZkRheS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIFxuICAgICAgY29uc3QgZW5kT2ZEYXkgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgIGVuZE9mRGF5LnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG5cbiAgICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IHRoaXMuZ2V0TXVzaWNpYW5FdmVudHMobXVzaWNpYW5JZCwgc3RhcnRPZkRheSwgZW5kT2ZEYXkpO1xuICAgICAgXG4gICAgICAvLyBFbmNvbnRyYXIgc2xvdHMgZGlzcG9uaWJsZXNcbiAgICAgIGNvbnN0IGF2YWlsYWJsZVNsb3RzID0gdGhpcy5maW5kQXZhaWxhYmxlU2xvdHNJbkRheShldmVudHMsIHN0YXJ0T2ZEYXksIGVuZE9mRGF5KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0ZSxcbiAgICAgICAgYnVzeVNsb3RzOiBldmVudHMsXG4gICAgICAgIGF2YWlsYWJsZVNsb3RzXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIG9idGVuaWVuZG8gZGlzcG9uaWJpbGlkYWQgZGlhcmlhJywgZXJyb3IgYXMgRXJyb3IsIHsgXG4gICAgICAgIG1ldGFkYXRhOiB7IG11c2ljaWFuSWQsIGRhdGUgfVxuICAgICAgfSk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2FyIGRpc3BvbmliaWxpZGFkIGRlIG3Dumx0aXBsZXMgbcO6c2ljb3NcbiAgICovXG4gIGFzeW5jIGNoZWNrTXVsdGlwbGVNdXNpY2lhbnNBdmFpbGFiaWxpdHkoXG4gICAgbXVzaWNpYW5JZHM6IHN0cmluZ1tdLFxuICAgIHN0YXJ0VGltZTogRGF0ZSxcbiAgICBlbmRUaW1lOiBEYXRlXG4gICk6IFByb21pc2U8e1xuICAgIGF2YWlsYWJsZU11c2ljaWFuczogc3RyaW5nW107XG4gICAgdW5hdmFpbGFibGVNdXNpY2lhbnM6IHN0cmluZ1tdO1xuICAgIGNvbmZsaWN0czogUmVjb3JkPHN0cmluZywgQ2FsZW5kYXJFdmVudFtdPjtcbiAgfT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnW3NyYy9zZXJ2aWNlcy9jYWxlbmRhckNvbmZsaWN0U2VydmljZS50czoyMDVdIFZlcmlmaWNhbmRvIGRpc3BvbmliaWxpZGFkIGRlIG3Dumx0aXBsZXMgbcO6c2ljb3MnKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBtdXNpY2lhbklkcy5tYXAoYXN5bmMgKG11c2ljaWFuSWQpID0+IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNoZWNrQ29uZmxpY3RzKHtcbiAgICAgICAgICAgIG11c2ljaWFuSWQsXG4gICAgICAgICAgICBzdGFydFRpbWUsXG4gICAgICAgICAgICBlbmRUaW1lLFxuICAgICAgICAgICAgbG9jYXRpb246ICcnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHsgbXVzaWNpYW5JZCwgcmVzdWx0IH07XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBjb25zdCBhdmFpbGFibGVNdXNpY2lhbnM6IHN0cmluZ1tdID0gW107XG4gICAgICBjb25zdCB1bmF2YWlsYWJsZU11c2ljaWFuczogc3RyaW5nW10gPSBbXTtcbiAgICAgIGNvbnN0IGNvbmZsaWN0czogUmVjb3JkPHN0cmluZywgQ2FsZW5kYXJFdmVudFtdPiA9IHt9O1xuXG4gICAgICByZXN1bHRzLmZvckVhY2goKHsgbXVzaWNpYW5JZCwgcmVzdWx0IH0pID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdC5oYXNDb25mbGljdCkge1xuICAgICAgICAgIHVuYXZhaWxhYmxlTXVzaWNpYW5zLnB1c2gobXVzaWNpYW5JZCk7XG4gICAgICAgICAgY29uZmxpY3RzW211c2ljaWFuSWRdID0gcmVzdWx0LmNvbmZsaWN0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdmFpbGFibGVNdXNpY2lhbnMucHVzaChtdXNpY2lhbklkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGF2YWlsYWJsZU11c2ljaWFucyxcbiAgICAgICAgdW5hdmFpbGFibGVNdXNpY2lhbnMsXG4gICAgICAgIGNvbmZsaWN0c1xuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciB2ZXJpZmljYW5kbyBkaXNwb25pYmlsaWRhZCBkZSBtw7psdGlwbGVzIG3DunNpY29zJywgZXJyb3IgYXMgRXJyb3IsIHsgXG4gICAgICAgIG1ldGFkYXRhOiB7IG11c2ljaWFuSWRzIH1cbiAgICAgIH0pO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVuY29udHJhciBjb25mbGljdG9zIGVuIGV2ZW50b3MgZXhpc3RlbnRlc1xuICAgKi9cbiAgcHJpdmF0ZSBmaW5kQ29uZmxpY3RzKFxuICAgIGV2ZW50czogQ2FsZW5kYXJFdmVudFtdLFxuICAgIHN0YXJ0VGltZTogRGF0ZSxcbiAgICBlbmRUaW1lOiBEYXRlLFxuICAgIHRyYXZlbFRpbWU6IG51bWJlcixcbiAgICBidWZmZXJUaW1lOiBudW1iZXJcbiAgKTogQ2FsZW5kYXJFdmVudFtdIHtcbiAgICBjb25zdCBjb25mbGljdHM6IENhbGVuZGFyRXZlbnRbXSA9IFtdO1xuICAgIFxuICAgIC8vIEV4cGFuZGlyIGVsIHJhbmdvIGRlIHRpZW1wbyBwYXJhIGluY2x1aXIgdmlhamUgeSBidWZmZXJcbiAgICBjb25zdCBleHBhbmRlZFN0YXJ0VGltZSA9IG5ldyBEYXRlKHN0YXJ0VGltZS5nZXRUaW1lKCkgLSAodHJhdmVsVGltZSArIGJ1ZmZlclRpbWUpICogNjAwMDApO1xuICAgIGNvbnN0IGV4cGFuZGVkRW5kVGltZSA9IG5ldyBEYXRlKGVuZFRpbWUuZ2V0VGltZSgpICsgKHRyYXZlbFRpbWUgKyBidWZmZXJUaW1lKSAqIDYwMDAwKTtcblxuICAgIGV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIC8vIFZlcmlmaWNhciBzaSBoYXkgc29sYXBhbWllbnRvXG4gICAgICBpZiAoXG4gICAgICAgIChldmVudC5zdGFydFRpbWUgPCBleHBhbmRlZEVuZFRpbWUgJiYgZXZlbnQuZW5kVGltZSA+IGV4cGFuZGVkU3RhcnRUaW1lKSB8fFxuICAgICAgICAoZXhwYW5kZWRTdGFydFRpbWUgPCBldmVudC5lbmRUaW1lICYmIGV4cGFuZGVkRW5kVGltZSA+IGV2ZW50LnN0YXJ0VGltZSlcbiAgICAgICkge1xuICAgICAgICBjb25mbGljdHMucHVzaChldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29uZmxpY3RzO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuY29udHJhciBzbG90cyBkaXNwb25pYmxlc1xuICAgKi9cbiAgcHJpdmF0ZSBmaW5kQXZhaWxhYmxlU2xvdHMoXG4gICAgZXZlbnRzOiBDYWxlbmRhckV2ZW50W10sXG4gICAgc3RhcnRUaW1lOiBEYXRlLFxuICAgIGVuZFRpbWU6IERhdGUsXG4gICAgcmVxdWlyZWREdXJhdGlvbjogbnVtYmVyXG4gICk6IHsgc3RhcnRUaW1lOiBEYXRlOyBlbmRUaW1lOiBEYXRlOyBkdXJhdGlvbjogbnVtYmVyIH1bXSB7XG4gICAgY29uc3Qgc2xvdHM6IHsgc3RhcnRUaW1lOiBEYXRlOyBlbmRUaW1lOiBEYXRlOyBkdXJhdGlvbjogbnVtYmVyIH1bXSA9IFtdO1xuICAgIFxuICAgIC8vIE9yZGVuYXIgZXZlbnRvcyBwb3IgaG9yYSBkZSBpbmljaW9cbiAgICBjb25zdCBzb3J0ZWRFdmVudHMgPSBbLi4uZXZlbnRzXS5zb3J0KChhLCBiKSA9PiBhLnN0YXJ0VGltZS5nZXRUaW1lKCkgLSBiLnN0YXJ0VGltZS5nZXRUaW1lKCkpO1xuICAgIFxuICAgIGxldCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKHN0YXJ0VGltZSk7XG4gICAgXG4gICAgc29ydGVkRXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgY29uc3QgdGltZVVudGlsRXZlbnQgPSBldmVudC5zdGFydFRpbWUuZ2V0VGltZSgpIC0gY3VycmVudFRpbWUuZ2V0VGltZSgpO1xuICAgICAgY29uc3QgYXZhaWxhYmxlRHVyYXRpb24gPSB0aW1lVW50aWxFdmVudCAvIDYwMDAwOyAvLyBjb252ZXJ0aXIgYSBtaW51dG9zXG4gICAgICBcbiAgICAgIGlmIChhdmFpbGFibGVEdXJhdGlvbiA+PSByZXF1aXJlZER1cmF0aW9uKSB7XG4gICAgICAgIHNsb3RzLnB1c2goe1xuICAgICAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoY3VycmVudFRpbWUpLFxuICAgICAgICAgIGVuZFRpbWU6IG5ldyBEYXRlKGV2ZW50LnN0YXJ0VGltZSksXG4gICAgICAgICAgZHVyYXRpb246IGF2YWlsYWJsZUR1cmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjdXJyZW50VGltZSA9IG5ldyBEYXRlKE1hdGgubWF4KGN1cnJlbnRUaW1lLmdldFRpbWUoKSwgZXZlbnQuZW5kVGltZS5nZXRUaW1lKCkpKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBWZXJpZmljYXIgc2kgaGF5IHRpZW1wbyBkaXNwb25pYmxlIGRlc3B1w6lzIGRlbCDDumx0aW1vIGV2ZW50b1xuICAgIGNvbnN0IHRpbWVBZnRlckxhc3RFdmVudCA9IGVuZFRpbWUuZ2V0VGltZSgpIC0gY3VycmVudFRpbWUuZ2V0VGltZSgpO1xuICAgIGNvbnN0IGF2YWlsYWJsZUR1cmF0aW9uID0gdGltZUFmdGVyTGFzdEV2ZW50IC8gNjAwMDA7XG4gICAgXG4gICAgaWYgKGF2YWlsYWJsZUR1cmF0aW9uID49IHJlcXVpcmVkRHVyYXRpb24pIHtcbiAgICAgIHNsb3RzLnB1c2goe1xuICAgICAgICBzdGFydFRpbWU6IG5ldyBEYXRlKGN1cnJlbnRUaW1lKSxcbiAgICAgICAgZW5kVGltZTogbmV3IERhdGUoZW5kVGltZSksXG4gICAgICAgIGR1cmF0aW9uOiBhdmFpbGFibGVEdXJhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBzbG90cztcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmNvbnRyYXIgc2xvdHMgZGlzcG9uaWJsZXMgZW4gdW4gZMOtYSBjb21wbGV0b1xuICAgKi9cbiAgcHJpdmF0ZSBmaW5kQXZhaWxhYmxlU2xvdHNJbkRheShcbiAgICBldmVudHM6IENhbGVuZGFyRXZlbnRbXSxcbiAgICBzdGFydE9mRGF5OiBEYXRlLFxuICAgIGVuZE9mRGF5OiBEYXRlXG4gICk6IHsgc3RhcnRUaW1lOiBEYXRlOyBlbmRUaW1lOiBEYXRlOyBkdXJhdGlvbjogbnVtYmVyIH1bXSB7XG4gICAgY29uc3Qgc2xvdHM6IHsgc3RhcnRUaW1lOiBEYXRlOyBlbmRUaW1lOiBEYXRlOyBkdXJhdGlvbjogbnVtYmVyIH1bXSA9IFtdO1xuICAgIFxuICAgIC8vIE9yZGVuYXIgZXZlbnRvcyBwb3IgaG9yYSBkZSBpbmljaW9cbiAgICBjb25zdCBzb3J0ZWRFdmVudHMgPSBbLi4uZXZlbnRzXS5zb3J0KChhLCBiKSA9PiBhLnN0YXJ0VGltZS5nZXRUaW1lKCkgLSBiLnN0YXJ0VGltZS5nZXRUaW1lKCkpO1xuICAgIFxuICAgIGxldCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKHN0YXJ0T2ZEYXkpO1xuICAgIFxuICAgIHNvcnRlZEV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudC5zdGFydFRpbWUgPiBjdXJyZW50VGltZSkge1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IChldmVudC5zdGFydFRpbWUuZ2V0VGltZSgpIC0gY3VycmVudFRpbWUuZ2V0VGltZSgpKSAvIDYwMDAwO1xuICAgICAgICBpZiAoZHVyYXRpb24gPj0gMzApIHsgLy8gTcOtbmltbyAzMCBtaW51dG9zXG4gICAgICAgICAgc2xvdHMucHVzaCh7XG4gICAgICAgICAgICBzdGFydFRpbWU6IG5ldyBEYXRlKGN1cnJlbnRUaW1lKSxcbiAgICAgICAgICAgIGVuZFRpbWU6IG5ldyBEYXRlKGV2ZW50LnN0YXJ0VGltZSksXG4gICAgICAgICAgICBkdXJhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdXJyZW50VGltZSA9IG5ldyBEYXRlKE1hdGgubWF4KGN1cnJlbnRUaW1lLmdldFRpbWUoKSwgZXZlbnQuZW5kVGltZS5nZXRUaW1lKCkpKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBWZXJpZmljYXIgdGllbXBvIGRlc3B1w6lzIGRlbCDDumx0aW1vIGV2ZW50b1xuICAgIGlmIChjdXJyZW50VGltZSA8IGVuZE9mRGF5KSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IChlbmRPZkRheS5nZXRUaW1lKCkgLSBjdXJyZW50VGltZS5nZXRUaW1lKCkpIC8gNjAwMDA7XG4gICAgICBpZiAoZHVyYXRpb24gPj0gMzApIHtcbiAgICAgICAgc2xvdHMucHVzaCh7XG4gICAgICAgICAgc3RhcnRUaW1lOiBuZXcgRGF0ZShjdXJyZW50VGltZSksXG4gICAgICAgICAgZW5kVGltZTogbmV3IERhdGUoZW5kT2ZEYXkpLFxuICAgICAgICAgIGR1cmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc2xvdHM7XG4gIH1cblxuICAvKipcbiAgICogRW5jb250cmFyIGVsIG1lam9yIHNsb3QgZGUgdGllbXBvXG4gICAqL1xuICBwcml2YXRlIGZpbmRCZXN0VGltZVNsb3QoXG4gICAgc2xvdHM6IHsgc3RhcnRUaW1lOiBEYXRlOyBlbmRUaW1lOiBEYXRlOyBkdXJhdGlvbjogbnVtYmVyIH1bXSxcbiAgICBwcmVmZXJyZWRUaW1lOiBEYXRlXG4gICk6IERhdGUgfCB1bmRlZmluZWQge1xuICAgIGlmIChzbG90cy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG4gICAgXG4gICAgLy8gRW5jb250cmFyIGVsIHNsb3QgbcOhcyBjZXJjYW5vIGFsIHRpZW1wbyBwcmVmZXJpZG9cbiAgICBsZXQgYmVzdFNsb3QgPSBzbG90c1swXTtcbiAgICBsZXQgbWluRGlmZmVyZW5jZSA9IE1hdGguYWJzKHNsb3RzWzBdLnN0YXJ0VGltZS5nZXRUaW1lKCkgLSBwcmVmZXJyZWRUaW1lLmdldFRpbWUoKSk7XG4gICAgXG4gICAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICAgIGNvbnN0IGRpZmZlcmVuY2UgPSBNYXRoLmFicyhzbG90LnN0YXJ0VGltZS5nZXRUaW1lKCkgLSBwcmVmZXJyZWRUaW1lLmdldFRpbWUoKSk7XG4gICAgICBpZiAoZGlmZmVyZW5jZSA8IG1pbkRpZmZlcmVuY2UpIHtcbiAgICAgICAgbWluRGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgICAgIGJlc3RTbG90ID0gc2xvdDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gYmVzdFNsb3Quc3RhcnRUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGFyIGR1cmFjacOzbiBkZSB1biBldmVudG8gZW4gbWludXRvc1xuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVFdmVudER1cmF0aW9uKHN0YXJ0VGltZTogRGF0ZSwgZW5kVGltZTogRGF0ZSk6IG51bWJlciB7XG4gICAgcmV0dXJuIChlbmRUaW1lLmdldFRpbWUoKSAtIHN0YXJ0VGltZS5nZXRUaW1lKCkpIC8gNjAwMDA7XG4gIH1cbn0gIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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