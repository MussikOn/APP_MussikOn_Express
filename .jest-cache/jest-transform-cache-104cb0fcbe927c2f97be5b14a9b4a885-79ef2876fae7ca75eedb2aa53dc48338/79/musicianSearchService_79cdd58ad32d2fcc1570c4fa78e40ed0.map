{"version":3,"names":["firebase_1","cov_6vh6c0aij","s","require","loggerService_1","MusicianSearchService","searchMusiciansForEvent","event","criteria","f","logger","info","metadata","id","musicians","getAvailableMusicians","length","musiciansWithInstrument","filter","musician","instruments","includes","instrument","availableMusicians","checkAvailability","scoredMusicians","calculateMatchScores","sortedMusicians","sort","a","b","matchScore","error","snapshot","db","collection","where","get","doc","docs","userData","data","profileSnapshot","userEmail","limit","empty","profileData","push","name","lastName","hasOwnInstruments","experience","bio","location","hourlyRate","isApproved","isAvailable","phone","socialMedia","rating","totalEvents","completedEvents","eventDate","Date","date","time","eventEndTime","getTime","parseDuration","duration","conflicts","checkMusicianConflicts","musicianEmail","eventStart","eventEnd","eventName","results","bringInstrument","experienceScore","Math","min","ratingScore","budget","hourlyCost","distance","calculateDistance","completionRate","round","availability","hours","parseInt","split","minutes","location1","location2","random","getRecommendedMusicians","eventId","getEventById","Error","parseFloat","eventType","exists","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\musicianSearchService.ts"],"sourcesContent":["import { db } from '../utils/firebase';\r\nimport { Event, Musician, MusicianSearchRequest, MusicianSearchResponse } from '../utils/DataTypes';\r\nimport { logger } from '../services/loggerService';\r\n\r\n// Interfaz para los criterios de b√∫squeda\r\nexport interface MusicianSearchCriteria {\r\n  instrument: string;\r\n  location?: string;\r\n  budget?: number;\r\n  date?: string;\r\n  time?: string;\r\n  duration?: string;\r\n  eventType?: string;\r\n  maxDistance?: number; // en kil√≥metros\r\n}\r\n\r\n// Interfaz para el resultado de b√∫squeda\r\nexport interface MusicianSearchResult {\r\n  userEmail: string;\r\n  name: string;\r\n  lastName: string;\r\n  instruments: string[];\r\n  hasOwnInstruments: boolean;\r\n  experience: number;\r\n  hourlyRate: number;\r\n  location: string;\r\n  isAvailable: boolean;\r\n  rating: number;\r\n  distance?: number; // distancia desde la ubicaci√≥n del evento\r\n  matchScore: number; // puntuaci√≥n de compatibilidad (0-100)\r\n  availability: {\r\n    isAvailable: boolean;\r\n    conflicts: string[];\r\n  };\r\n}\r\n\r\n// Interfaz para el perfil de m√∫sico\r\ninterface MusicianProfile {\r\n  userEmail: string;\r\n  name: string;\r\n  lastName: string;\r\n  instruments: string[];\r\n  hasOwnInstruments: boolean;\r\n  experience: number;\r\n  bio?: string;\r\n  location: string;\r\n  hourlyRate: number;\r\n  isApproved: boolean;\r\n  isAvailable: boolean;\r\n  phone?: string;\r\n  socialMedia?: Record<string, string>;\r\n  rating: number;\r\n  totalEvents: number;\r\n  completedEvents: number;\r\n}\r\n\r\n/**\r\n * Algoritmo de b√∫squeda de m√∫sicos para eventos\r\n * Implementa un sistema de scoring basado en m√∫ltiples criterios\r\n */\r\nexport class MusicianSearchService {\r\n  /**\r\n   * Busca m√∫sicos disponibles que coincidan con los criterios del evento\r\n   */\r\n  static async searchMusiciansForEvent(\r\n    event: Event,\r\n    criteria: MusicianSearchCriteria\r\n  ): Promise<MusicianSearchResult[]> {\r\n    logger.info('[src/services/musicianSearchService.ts:75] üîç Iniciando b√∫squeda de m√∫sicos para evento:', { metadata: { id: event.id\r\n,    } });\r\n\r\n    try {\r\n      // 1. Obtener todos los m√∫sicos aprobados y disponibles\r\n      const musicians = await this.getAvailableMusicians();\r\n\r\n      logger.info('[src/services/musicianSearchService.ts:82] üìä M√∫sicos disponibles encontrados:', { metadata: { id: musicians.length\r\n,    } });\r\n\r\n      // 2. Filtrar por instrumento requerido\r\n      const musiciansWithInstrument = musicians.filter(musician =>\r\n        musician.instruments.includes(criteria.instrument)\r\n      );\r\n\r\n      logger.info('[src/services/musicianSearchService.ts:89] üéµ M√∫sicos con instrumento requerido:', { metadata: { id: musiciansWithInstrument.length\r\n,    } });\r\n\r\n      // 3. Verificar disponibilidad de tiempo\r\n      const availableMusicians = await this.checkAvailability(\r\n        musiciansWithInstrument,\r\n        event\r\n      );\r\n\r\n      logger.info('[src/services/musicianSearchService.ts:96] ‚è∞ M√∫sicos disponibles en fecha/hora:', { metadata: { id: availableMusicians.length\r\n,    } });\r\n\r\n      // 4. Calcular puntuaciones de matching\r\n      const scoredMusicians = await this.calculateMatchScores(\r\n        availableMusicians,\r\n        event,\r\n        criteria\r\n      );\r\n\r\n      // 5. Ordenar por puntuaci√≥n (mayor a menor)\r\n      const sortedMusicians = scoredMusicians.sort(\r\n        (a, b) => b.matchScore - a.matchScore\r\n      );\r\n\r\n      logger.info('[src/services/musicianSearchService.ts:108] üèÜ B√∫squeda completada. M√∫sicos encontrados:', { metadata: { id: sortedMusicians.length\r\n,    } });\r\n\r\n      return sortedMusicians;\r\n    } catch (error) {\r\n      logger.error('[src/services/musicianSearchService.ts:115] ‚ùå Error en b√∫squeda de m√∫sicos:', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene todos los m√∫sicos aprobados y disponibles\r\n   */\r\n  private static async getAvailableMusicians(): Promise<MusicianProfile[]> {\r\n    const snapshot = await db\r\n      .collection('users')\r\n      .where('roll', '==', 'musico')\r\n      .where('isApproved', '==', true)\r\n      .where('isAvailable', '==', true)\r\n      .get();\r\n\r\n    const musicians: MusicianProfile[] = [];\r\n\r\n    for (const doc of snapshot.docs) {\r\n      const userData = doc.data();\r\n      \r\n      // Obtener perfil completo del m√∫sico\r\n      const profileSnapshot = await db\r\n        .collection('musicianProfiles')\r\n        .where('userEmail', '==', userData.userEmail)\r\n        .limit(1)\r\n        .get();\r\n\r\n      if (!profileSnapshot.empty) {\r\n        const profileData = profileSnapshot.docs[0].data();\r\n        musicians.push({\r\n          userEmail: userData.userEmail,\r\n          name: userData.name,\r\n          lastName: userData.lastName,\r\n          instruments: profileData.instruments || [],\r\n          hasOwnInstruments: profileData.hasOwnInstruments || false,\r\n          experience: profileData.experience || 0,\r\n          bio: profileData.bio,\r\n          location: profileData.location || '',\r\n          hourlyRate: profileData.hourlyRate || 0,\r\n          isApproved: userData.isApproved || false,\r\n          isAvailable: userData.isAvailable || false,\r\n          phone: profileData.phone,\r\n          socialMedia: profileData.socialMedia,\r\n          rating: profileData.rating || 0,\r\n          totalEvents: profileData.totalEvents || 0,\r\n          completedEvents: profileData.completedEvents || 0,\r\n        });\r\n      }\r\n    }\r\n\r\n    return musicians;\r\n  }\r\n\r\n  /**\r\n   * Verifica la disponibilidad de tiempo de los m√∫sicos\r\n   */\r\n  private static async checkAvailability(\r\n    musicians: MusicianProfile[],\r\n    event: Event\r\n  ): Promise<MusicianProfile[]> {\r\n    const eventDate = new Date(`${event.date}T${event.time}`);\r\n    const eventEndTime = new Date(eventDate.getTime() + this.parseDuration(event.duration));\r\n\r\n    const availableMusicians: MusicianProfile[] = [];\r\n\r\n    for (const musician of musicians) {\r\n      // Verificar si el m√∫sico tiene conflictos en la fecha/hora del evento\r\n      const conflicts = await this.checkMusicianConflicts(\r\n        musician.userEmail,\r\n        eventDate,\r\n        eventEndTime\r\n      );\r\n\r\n      if (conflicts.length === 0) {\r\n        availableMusicians.push(musician);\r\n      }\r\n    }\r\n\r\n    return availableMusicians;\r\n  }\r\n\r\n  /**\r\n   * Verifica conflictos de horario para un m√∫sico espec√≠fico\r\n   */\r\n  private static async checkMusicianConflicts(\r\n    musicianEmail: string,\r\n    eventStart: Date,\r\n    eventEnd: Date\r\n  ): Promise<string[]> {\r\n    const conflicts: string[] = [];\r\n\r\n    // Buscar eventos asignados al m√∫sico en la misma fecha\r\n    const snapshot = await db\r\n      .collection('events')\r\n      .where('assignedMusicianId', '==', musicianEmail)\r\n      .where('status', 'in', ['musician_assigned', 'pending_musician'])\r\n      .get();\r\n\r\n    for (const doc of snapshot.docs) {\r\n      const event = doc.data() as Event;\r\n      const eventDate = new Date(`${event.date}T${event.time}`);\r\n      const eventEndTime = new Date(eventDate.getTime() + this.parseDuration(event.duration));\r\n\r\n      // Verificar si hay solapamiento de horarios\r\n      if (\r\n        (eventStart >= eventDate && eventStart < eventEndTime) ||\r\n        (eventEnd > eventDate && eventEnd <= eventEndTime) ||\r\n        (eventStart <= eventDate && eventEnd >= eventEndTime)\r\n      ) {\r\n        conflicts.push(event.eventName);\r\n      }\r\n    }\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  /**\r\n   * Calcula las puntuaciones de matching para cada m√∫sico\r\n   */\r\n  private static async calculateMatchScores(\r\n    musicians: MusicianProfile[],\r\n    event: Event,\r\n    criteria: MusicianSearchCriteria\r\n  ): Promise<MusicianSearchResult[]> {\r\n    const results: MusicianSearchResult[] = [];\r\n\r\n    for (const musician of musicians) {\r\n      let matchScore = 0;\r\n\r\n      // 1. Puntuaci√≥n por instrumento (40 puntos)\r\n      if (musician.instruments.includes(criteria.instrument)) {\r\n        matchScore += 40;\r\n      }\r\n\r\n      // 2. Puntuaci√≥n por disponibilidad de instrumento (15 puntos)\r\n      if (musician.hasOwnInstruments) {\r\n        matchScore += 15;\r\n      } else if (event.bringInstrument) {\r\n        matchScore += 5; // Puntuaci√≥n menor si el evento requiere instrumento\r\n      }\r\n\r\n      // 3. Puntuaci√≥n por experiencia (20 puntos)\r\n      const experienceScore = Math.min(musician.experience * 2, 20);\r\n      matchScore += experienceScore;\r\n\r\n      // 4. Puntuaci√≥n por rating (15 puntos)\r\n      const ratingScore = (musician.rating / 5) * 15;\r\n      matchScore += ratingScore;\r\n\r\n      // 5. Puntuaci√≥n por presupuesto (10 puntos)\r\n      if (criteria.budget) {\r\n        const hourlyCost = musician.hourlyRate * this.parseDuration(event.duration) / 60;\r\n        if (hourlyCost <= criteria.budget) {\r\n          matchScore += 10;\r\n        } else if (hourlyCost <= criteria.budget * 1.2) {\r\n          matchScore += 5; // Puntuaci√≥n reducida si est√° dentro del 20% del presupuesto\r\n        }\r\n      }\r\n\r\n      // 6. Puntuaci√≥n por ubicaci√≥n (si se especifica)\r\n      if (criteria.location && musician.location) {\r\n        const distance = this.calculateDistance(criteria.location, musician.location);\r\n        if (distance <= 10) { // 10 km\r\n          matchScore += 10;\r\n        } else if (distance <= 25) { // 25 km\r\n          matchScore += 5;\r\n        }\r\n      }\r\n\r\n      // 7. Puntuaci√≥n por historial de eventos completados\r\n      if (musician.completedEvents > 0) {\r\n        const completionRate = musician.completedEvents / musician.totalEvents;\r\n        matchScore += completionRate * 10;\r\n      }\r\n\r\n      // Limitar la puntuaci√≥n m√°xima a 100\r\n      matchScore = Math.min(matchScore, 100);\r\n\r\n      results.push({\r\n        userEmail: musician.userEmail,\r\n        name: musician.name,\r\n        lastName: musician.lastName,\r\n        instruments: musician.instruments,\r\n        hasOwnInstruments: musician.hasOwnInstruments,\r\n        experience: musician.experience,\r\n        hourlyRate: musician.hourlyRate,\r\n        location: musician.location,\r\n        isAvailable: musician.isAvailable,\r\n        rating: musician.rating,\r\n        matchScore: Math.round(matchScore),\r\n        availability: {\r\n          isAvailable: true,\r\n          conflicts: [],\r\n        },\r\n      });\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Convierte la duraci√≥n de string a minutos\r\n   */\r\n  private static parseDuration(duration: string): number {\r\n    const hours = parseInt(duration.split(':')[0]) || 0;\r\n    const minutes = parseInt(duration.split(':')[1]) || 0;\r\n    return hours * 60 + minutes;\r\n  }\r\n\r\n  /**\r\n   * Calcula la distancia entre dos ubicaciones (implementaci√≥n b√°sica)\r\n   * En producci√≥n, usar Google Maps API o similar\r\n   */\r\n  private static calculateDistance(location1: string, location2: string): number {\r\n    // Implementaci√≥n b√°sica - en producci√≥n usar Google Maps API\r\n    // Por ahora retorna una distancia aleatoria para demostraci√≥n\r\n    return Math.random() * 50; // 0-50 km\r\n  }\r\n\r\n  /**\r\n   * Obtiene m√∫sicos recomendados para un evento espec√≠fico\r\n   */\r\n  static async getRecommendedMusicians(eventId: string): Promise<MusicianSearchResult[]> {\r\n    const event = await this.getEventById(eventId);\r\n    if (!event) {\r\n      throw new Error('Evento no encontrado');\r\n    }\r\n\r\n    const criteria: MusicianSearchCriteria = {\r\n      instrument: event.instrument,\r\n      budget: parseFloat(event.budget),\r\n      date: event.date,\r\n      time: event.time,\r\n      duration: event.duration,\r\n      eventType: event.eventType,\r\n    };\r\n\r\n    return this.searchMusiciansForEvent(event, criteria);\r\n  }\r\n\r\n  /**\r\n   * Obtiene un evento por ID\r\n   */\r\n  private static async getEventById(eventId: string): Promise<Event | null> {\r\n    const doc = await db.collection('events').doc(eventId).get();\r\n    if (!doc.exists) return null;\r\n    return doc.data() as Event;\r\n  }\r\n} "],"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","ignoreList":[]}