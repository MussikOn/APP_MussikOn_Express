{"version":3,"names":["express_1","cov_1yjng99b0p","s","require","paymentSystemController_1","authMiddleware_1","requireRole_1","uploadMiddleware_1","loggerService_1","router","Router","paymentSystemController","PaymentSystemController","get","authMiddleware","req","res","f","__awaiter","getUserBalance","post","registerBankAccount","getUserBankAccounts","upload","single","uploadDepositVoucher","getUserDeposits","payMusicianForEvent","getMusicianEarnings","requestWithdrawal","requireRole","getPendingDeposits","put","verifyDeposit","getPendingWithdrawals","processWithdrawal","getPaymentStatistics","FirestoreIndexManager","Promise","resolve","then","__importStar","indexStatus","checkIndexStatus","json","success","data","message","error","logger","status","exports","default"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\paymentSystemRoutes.ts"],"sourcesContent":["import { Router } from 'express';\nimport { PaymentSystemController } from '../controllers/paymentSystemController';\nimport { authMiddleware } from '../middleware/authMiddleware';\nimport { requireRole } from '../middleware/requireRole';\nimport { upload } from '../middleware/uploadMiddleware';\nimport { logger } from '../services/loggerService';\n\nconst router = Router();\nconst paymentSystemController = new PaymentSystemController();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     BankAccount:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *         userId:\n *           type: string\n *         accountHolder:\n *           type: string\n *         accountNumber:\n *           type: string\n *         bankName:\n *           type: string\n *         accountType:\n *           type: string\n *           enum: [savings, checking]\n *         routingNumber:\n *           type: string\n *         isVerified:\n *           type: boolean\n *         isDefault:\n *           type: boolean\n *         createdAt:\n *           type: string\n *         updatedAt:\n *           type: string\n *     \n *     UserBalance:\n *       type: object\n *       properties:\n *         userId:\n *           type: string\n *         userType:\n *           type: string\n *           enum: [musician, event_organizer]\n *         currentBalance:\n *           type: number\n *         currency:\n *           type: string\n *         totalDeposited:\n *           type: number\n *         totalWithdrawn:\n *           type: number\n *         totalEarned:\n *           type: number\n *         pendingEarnings:\n *           type: number\n *         lastTransactionAt:\n *           type: string\n *         updatedAt:\n *           type: string\n *     \n *     UserDeposit:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *         userId:\n *           type: string\n *         amount:\n *           type: number\n *         currency:\n *           type: string\n *         voucherFile:\n *           type: object\n *           properties:\n *             url:\n *               type: string\n *             filename:\n *               type: string\n *             uploadedAt:\n *               type: string\n *         status:\n *           type: string\n *           enum: [pending, verified, rejected]\n *         adminNotes:\n *           type: string\n *         verifiedBy:\n *           type: string\n *         verifiedAt:\n *           type: string\n *         createdAt:\n *           type: string\n *         updatedAt:\n *           type: string\n *     \n *     MusicianEarnings:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *         musicianId:\n *           type: string\n *         eventId:\n *           type: string\n *         eventPaymentId:\n *           type: string\n *         amount:\n *           type: number\n *         currency:\n *           type: string\n *         status:\n *           type: string\n *           enum: [pending, available, withdrawn]\n *         eventDate:\n *           type: string\n *         eventTitle:\n *           type: string\n *         organizerName:\n *           type: string\n *         createdAt:\n *           type: string\n *         updatedAt:\n *           type: string\n *     \n *     WithdrawalRequest:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *         musicianId:\n *           type: string\n *         bankAccountId:\n *           type: string\n *         amount:\n *           type: number\n *         currency:\n *           type: string\n *         status:\n *           type: string\n *           enum: [pending, processing, completed, rejected]\n *         adminNotes:\n *           type: string\n *         processedBy:\n *           type: string\n *         processedAt:\n *           type: string\n *         createdAt:\n *           type: string\n *         updatedAt:\n *           type: string\n */\n\n// ===== RUTAS PARA USUARIOS =====\n\n/**\n * @swagger\n * /payments/my-balance:\n *   get:\n *     summary: Obtener balance actual del usuario\n *     tags: [Sistema de Pagos]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Balance obtenido exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   $ref: '#/components/schemas/UserBalance'\n *                 message:\n *                   type: string\n *       401:\n *         description: Usuario no autenticado\n *       500:\n *         description: Error del servidor\n */\nrouter.get('/my-balance', authMiddleware, async (req, res) => {\n  await paymentSystemController.getUserBalance(req, res);\n});\n\n/**\n * @swagger\n * /bank-accounts/register:\n *   post:\n *     summary: Registrar cuenta bancaria\n *     tags: [Sistema de Pagos]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - accountHolder\n *               - accountNumber\n *               - bankName\n *               - accountType\n *             properties:\n *               accountHolder:\n *                 type: string\n *               accountNumber:\n *                 type: string\n *               bankName:\n *                 type: string\n *               accountType:\n *                 type: string\n *                 enum: [savings, checking]\n *               routingNumber:\n *                 type: string\n *     responses:\n *       201:\n *         description: Cuenta bancaria registrada exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   $ref: '#/components/schemas/BankAccount'\n *                 message:\n *                   type: string\n *       400:\n *         description: Datos incompletos\n *       401:\n *         description: Usuario no autenticado\n *       500:\n *         description: Error del servidor\n */\nrouter.post('/bank-accounts/register', authMiddleware, async (req, res) => {\n  await paymentSystemController.registerBankAccount(req, res);\n});\n\n/**\n * @swagger\n * /bank-accounts/my-accounts:\n *   get:\n *     summary: Obtener cuentas bancarias del usuario\n *     tags: [Sistema de Pagos]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Cuentas bancarias obtenidas exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/BankAccount'\n *                 message:\n *                   type: string\n *       401:\n *         description: Usuario no autenticado\n *       500:\n *         description: Error del servidor\n */\nrouter.get('/bank-accounts/my-accounts', authMiddleware, async (req, res) => {\n  await paymentSystemController.getUserBankAccounts(req, res);\n});\n\n/**\n * @swagger\n * /payments/deposit:\n *   post:\n *     summary: Subir comprobante de depÃ³sito\n *     tags: [Sistema de Pagos]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         multipart/form-data:\n *           schema:\n *             type: object\n *             required:\n *               - amount\n *               - voucherFile\n *             properties:\n *               amount:\n *                 type: number\n *               voucherFile:\n *                 type: string\n *                 format: binary\n *               description:\n *                 type: string\n *     responses:\n *       201:\n *         description: Comprobante subido exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   $ref: '#/components/schemas/UserDeposit'\n *                 message:\n *                   type: string\n *       400:\n *         description: Datos incompletos\n *       401:\n *         description: Usuario no autenticado\n *       500:\n *         description: Error del servidor\n */\nrouter.post('/deposit', authMiddleware, upload.single('voucherFile'), async (req, res) => {\n  await paymentSystemController.uploadDepositVoucher(req, res);\n});\n\n/**\n * @swagger\n * /payments/my-deposits:\n *   get:\n *     summary: Obtener historial de depÃ³sitos del usuario\n *     tags: [Sistema de Pagos]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Historial obtenido exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/UserDeposit'\n *                 message:\n *                   type: string\n *       401:\n *         description: Usuario no autenticado\n *       500:\n *         description: Error del servidor\n */\nrouter.get('/my-deposits', authMiddleware, async (req, res) => {\n  await paymentSystemController.getUserDeposits(req, res);\n});\n\n/**\n * @swagger\n * /events/{eventId}/pay-musician:\n *   post:\n *     summary: Pagar a mÃºsico por evento\n *     tags: [Sistema de Pagos]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: eventId\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - musicianId\n *               - amount\n *             properties:\n *               musicianId:\n *                 type: string\n *               amount:\n *                 type: number\n *               paymentMethod:\n *                 type: string\n *                 enum: [balance, bank_transfer]\n *                 default: balance\n *               description:\n *                 type: string\n *     responses:\n *       201:\n *         description: Pago procesado exitosamente\n *       400:\n *         description: Datos incompletos\n *       401:\n *         description: Usuario no autenticado\n *       500:\n *         description: Error del servidor\n */\nrouter.post('/events/:eventId/pay-musician', authMiddleware, async (req, res) => {\n  await paymentSystemController.payMusicianForEvent(req, res);\n});\n\n/**\n * @swagger\n * /musicians/earnings:\n *   get:\n *     summary: Obtener ganancias del mÃºsico\n *     tags: [Sistema de Pagos]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Ganancias obtenidas exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/MusicianEarnings'\n *                 message:\n *                   type: string\n *       401:\n *         description: Usuario no autenticado\n *       500:\n *         description: Error del servidor\n */\nrouter.get('/musicians/earnings', authMiddleware, async (req, res) => {\n  await paymentSystemController.getMusicianEarnings(req, res);\n});\n\n/**\n * @swagger\n * /musicians/withdraw-earnings:\n *   post:\n *     summary: Solicitar retiro de ganancias\n *     tags: [Sistema de Pagos]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - bankAccountId\n *               - amount\n *             properties:\n *               bankAccountId:\n *                 type: string\n *               amount:\n *                 type: number\n *               description:\n *                 type: string\n *     responses:\n *       201:\n *         description: Solicitud de retiro creada exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   $ref: '#/components/schemas/WithdrawalRequest'\n *                 message:\n *                   type: string\n *       400:\n *         description: Datos incompletos\n *       401:\n *         description: Usuario no autenticado\n *       500:\n *         description: Error del servidor\n */\nrouter.post('/musicians/withdraw-earnings', authMiddleware, async (req, res) => {\n  await paymentSystemController.requestWithdrawal(req, res);\n});\n\n// ===== RUTAS DE ADMINISTRACIÃN =====\n\n/**\n * @swagger\n * /admin/payments/pending-deposits:\n *   get:\n *     summary: Obtener depÃ³sitos pendientes (admin)\n *     tags: [AdministraciÃ³n - Pagos]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: DepÃ³sitos pendientes obtenidos exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/UserDeposit'\n *                 message:\n *                   type: string\n *       401:\n *         description: No autorizado\n *       500:\n *         description: Error del servidor\n */\nrouter.get('/admin/payments/pending-deposits', authMiddleware, requireRole(['adminJunior', 'adminMidLevel', 'adminSenior', 'superAdmin']), async (req, res) => {\n  await paymentSystemController.getPendingDeposits(req, res);\n});\n\n/**\n * @swagger\n * /admin/payments/verify-deposit/{depositId}:\n *   put:\n *     summary: Verificar depÃ³sito (admin)\n *     tags: [AdministraciÃ³n - Pagos]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: depositId\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - approved\n *             properties:\n *               approved:\n *                 type: boolean\n *               notes:\n *                 type: string\n *     responses:\n *       200:\n *         description: DepÃ³sito verificado exitosamente\n *       400:\n *         description: Datos incompletos\n *       401:\n *         description: No autorizado\n *       500:\n *         description: Error del servidor\n */\nrouter.put('/admin/payments/verify-deposit/:depositId', authMiddleware, requireRole(['adminJunior', 'adminMidLevel', 'adminSenior', 'superAdmin']), async (req, res) => {\n  await paymentSystemController.verifyDeposit(req, res);\n});\n\n/**\n * @swagger\n * /admin/payments/pending-withdrawals:\n *   get:\n *     summary: Obtener retiros pendientes (admin)\n *     tags: [AdministraciÃ³n - Pagos]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Retiros pendientes obtenidos exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/WithdrawalRequest'\n *                 message:\n *                   type: string\n *       401:\n *         description: No autorizado\n *       500:\n *         description: Error del servidor\n */\nrouter.get('/admin/payments/pending-withdrawals', authMiddleware, requireRole(['adminJunior', 'adminMidLevel', 'adminSenior', 'superAdmin']), async (req, res) => {\n  await paymentSystemController.getPendingWithdrawals(req, res);\n});\n\n/**\n * @swagger\n * /admin/payments/process-withdrawal/{withdrawalId}:\n *   put:\n *     summary: Procesar retiro (admin)\n *     tags: [AdministraciÃ³n - Pagos]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: withdrawalId\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - approved\n *             properties:\n *               approved:\n *                 type: boolean\n *               notes:\n *                 type: string\n *     responses:\n *       200:\n *         description: Retiro procesado exitosamente\n *       400:\n *         description: Datos incompletos\n *       401:\n *         description: No autorizado\n *       500:\n *         description: Error del servidor\n */\nrouter.put('/admin/payments/process-withdrawal/:withdrawalId', authMiddleware, requireRole(['adminJunior', 'adminMidLevel', 'adminSenior', 'superAdmin']), async (req, res) => {\n  await paymentSystemController.processWithdrawal(req, res);\n});\n\n/**\n * @swagger\n * /admin/payments/statistics:\n *   get:\n *     summary: Obtener estadÃ­sticas de pagos (admin)\n *     tags: [AdministraciÃ³n - Pagos]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: EstadÃ­sticas obtenidas exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   type: object\n *                   properties:\n *                     totalDeposits:\n *                       type: number\n *                     totalWithdrawals:\n *                       type: number\n *                     totalCommissions:\n *                       type: number\n *                     pendingDeposits:\n *                       type: number\n *                     pendingWithdrawals:\n *                       type: number\n *                     averageTransactionAmount:\n *                       type: number\n *                     monthlyRevenue:\n *                       type: number\n *                     topEarningMusicians:\n *                       type: array\n *                       items:\n *                         type: object\n *                         properties:\n *                           musicianId:\n *                             type: string\n *                           musicianName:\n *                             type: string\n *                           totalEarnings:\n *                             type: number\n *                 message:\n *                   type: string\n *       401:\n *         description: No autorizado\n *       500:\n *         description: Error del servidor\n */\nrouter.get('/admin/payments/statistics', authMiddleware, requireRole(['adminJunior', 'adminMidLevel', 'adminSenior', 'superAdmin']), async (req, res) => {\n  await paymentSystemController.getPaymentStatistics(req, res);\n});\n\n/**\n * @swagger\n * /admin/firestore/indexes/status:\n *   get:\n *     summary: Verificar estado de Ã­ndices de Firestore (admin)\n *     tags: [AdministraciÃ³n - Sistema]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Estado de Ã­ndices obtenido exitosamente\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   type: object\n *                   additionalProperties:\n *                     type: boolean\n *                 message:\n *                   type: string\n *       401:\n *         description: No autorizado\n *       500:\n *         description: Error del servidor\n */\nrouter.get('/admin/firestore/indexes/status', authMiddleware, requireRole(['adminJunior', 'adminMidLevel', 'adminSenior', 'superAdmin']), async (req, res) => {\n  try {\n    const { FirestoreIndexManager } = await import('../utils/firestoreIndexes');\n    const indexStatus = await FirestoreIndexManager.checkIndexStatus();\n    \n    res.json({\n      success: true,\n      data: indexStatus,\n      message: 'Estado de Ã­ndices obtenido exitosamente'\n    });\n  } catch (error) {\n    logger.error('Error verificando estado de Ã­ndices', error as Error);\n    res.status(500).json({\n      success: false,\n      error: 'Error verificando estado de Ã­ndices'\n    });\n  }\n});\n\nexport default router; "],"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","ignoreList":[]}