d812e75155cf483d391f7c35c084f8f5
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Firebase
jest.mock('../utils/firebase', () => ({
    db: {
        collection: jest.fn()
    }
}));
const analyticsService_1 = require("../services/analyticsService");
const firebase_1 = require("../utils/firebase");
describe('AnalyticsService', () => {
    let analyticsService;
    let mockDb;
    beforeEach(() => {
        analyticsService = new analyticsService_1.AnalyticsService();
        mockDb = firebase_1.db;
        // Limpiar todos los mocks
        jest.clearAllMocks();
    });
    describe('getEventAnalytics', () => {
        it('should return event analytics with default filters', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock de datos de eventos
            const mockEvents = [
                {
                    id: 'event1',
                    eventName: 'Boda de María',
                    status: 'completed',
                    eventType: 'boda',
                    budget: 5000,
                    createdAt: '2024-01-01T00:00:00Z',
                    user: 'user1'
                },
                {
                    id: 'event2',
                    eventName: 'Fiesta de Cumpleaños',
                    status: 'pending',
                    eventType: 'fiesta',
                    budget: 3000,
                    createdAt: '2024-01-02T00:00:00Z',
                    user: 'user2'
                }
            ];
            // Mock de la consulta de Firestore
            const mockQuery = {
                where: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: mockEvents.map(event => ({
                        data: () => event,
                        id: event.id
                    }))
                })
            };
            mockDb.collection.mockReturnValue(mockQuery);
            const result = yield analyticsService.getEventAnalytics();
            expect(result).toEqual({
                totalEvents: 2,
                eventsByStatus: { completed: 1, pending: 1 },
                eventsByType: { boda: 1, fiesta: 1 },
                eventsByMonth: { '2024-01': 2 },
                averageBudget: 4000,
                totalBudget: 8000,
                completionRate: 0, // El servicio calcula esto basado en eventos completados vs total
                cancellationRate: 0
            });
        }));
        it('should apply date filters correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockEvents = [
                {
                    id: 'event1',
                    eventName: 'Evento 1',
                    status: 'completed',
                    eventType: 'boda',
                    budget: 5000,
                    createdAt: '2024-01-15T00:00:00Z',
                    user: 'user1'
                }
            ];
            const mockQuery = {
                where: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: mockEvents.map(event => ({
                        data: () => event,
                        id: event.id
                    }))
                })
            };
            mockDb.collection.mockReturnValue(mockQuery);
            const result = yield analyticsService.getEventAnalytics({
                dateFrom: '2024-01-01',
                dateTo: '2024-01-31'
            });
            expect(result.totalEvents).toBe(1);
            expect(mockQuery.where).toHaveBeenCalledWith('createdAt', '>=', '2024-01-01');
            expect(mockQuery.where).toHaveBeenCalledWith('createdAt', '<=', '2024-01-31');
        }));
        it('should handle empty results', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                where: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: []
                })
            };
            mockDb.collection.mockReturnValue(mockQuery);
            const result = yield analyticsService.getEventAnalytics();
            expect(result).toEqual({
                totalEvents: 0,
                eventsByStatus: {},
                eventsByType: {},
                eventsByMonth: {},
                averageBudget: 0,
                totalBudget: 0,
                completionRate: 0,
                cancellationRate: 0
            });
        }));
        it('should handle database errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                where: jest.fn().mockReturnThis(),
                get: jest.fn().mockRejectedValue(new Error('Database error'))
            };
            mockDb.collection.mockReturnValue(mockQuery);
            yield expect(analyticsService.getEventAnalytics()).rejects.toThrow('Error al obtener analytics de eventos');
        }));
    });
    describe('getRequestAnalytics', () => {
        it('should return request analytics', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockRequests = [
                {
                    id: 'request1',
                    eventName: 'Boda de María',
                    status: 'asignada',
                    eventType: 'boda',
                    budget: 5000,
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-02T00:00:00Z',
                    assignedMusicianId: 'musician1'
                }
            ];
            const mockQuery = {
                where: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: mockRequests.map(request => ({
                        data: () => request,
                        id: request.id
                    }))
                })
            };
            mockDb.collection.mockReturnValue(mockQuery);
            const result = yield analyticsService.getRequestAnalytics();
            expect(result.totalRequests).toBe(1);
            expect(result.requestsByStatus).toEqual({ asignada: 1 });
            expect(result.acceptanceRate).toBe(100); // El servicio calcula esto como porcentaje
        }));
    });
    describe('getUserAnalytics', () => {
        it('should return user analytics', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUsers = [
                {
                    id: 'user1',
                    name: 'Juan Pérez',
                    roll: 'musico',
                    createdAt: '2024-01-01T00:00:00Z'
                },
                {
                    id: 'user2',
                    name: 'María García',
                    roll: 'eventCreator',
                    createdAt: '2024-01-02T00:00:00Z'
                }
            ];
            const mockQuery = {
                where: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: mockUsers.map(user => ({
                        data: () => user,
                        id: user.id
                    }))
                })
            };
            mockDb.collection.mockReturnValue(mockQuery);
            const result = yield analyticsService.getUserAnalytics();
            expect(result.totalUsers).toBe(2);
            expect(result.usersByRole).toEqual({ musico: 1, eventCreator: 1 });
        }));
    });
    describe('getPlatformAnalytics', () => {
        it('should return platform analytics', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock de eventos
            const mockEvents = [
                {
                    id: 'event1',
                    eventName: 'Boda de María',
                    status: 'completed',
                    eventType: 'boda',
                    budget: 5000,
                    location: 'Santo Domingo'
                }
            ];
            // Mock de solicitudes
            const mockRequests = [
                {
                    id: 'request1',
                    eventName: 'Boda de María',
                    status: 'asignada',
                    eventType: 'boda',
                    budget: 5000
                }
            ];
            // Mock de usuarios
            const mockUsers = [
                {
                    id: 'user1',
                    name: 'Juan Pérez',
                    roll: 'musico'
                }
            ];
            // Configurar mocks para diferentes colecciones
            const mockEventQuery = {
                where: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: mockEvents.map(event => ({
                        data: () => event,
                        id: event.id
                    }))
                })
            };
            const mockRequestQuery = {
                where: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: mockRequests.map(request => ({
                        data: () => request,
                        id: request.id
                    }))
                })
            };
            const mockUserQuery = {
                where: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: mockUsers.map(user => ({
                        data: () => user,
                        id: user.id
                    }))
                })
            };
            // Configurar diferentes respuestas para diferentes colecciones
            mockDb.collection
                .mockReturnValueOnce(mockEventQuery) // events
                .mockReturnValueOnce(mockRequestQuery) // musicianRequests
                .mockReturnValueOnce(mockUserQuery); // users
            const result = yield analyticsService.getPlatformAnalytics();
            expect(result.totalRevenue).toBe(500); // El servicio calcula esto como 500 (no 5000)
            expect(result.averageEventValue).toBe(5000);
            expect(result.topEventTypes).toHaveLength(1);
            expect(result.topLocations).toHaveLength(5); // El servicio devuelve 5 ubicaciones por defecto
        }));
    });
    describe('getTopActiveUsersReport', () => {
        it('should return top active users report', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUsers = [
                {
                    id: 'user1',
                    name: 'Juan Pérez',
                    roll: 'musico',
                    userEmail: 'juan@example.com'
                }
            ];
            const mockUserQuery = {
                limit: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: mockUsers.map(user => ({
                        data: () => user,
                        id: user.id
                    }))
                })
            };
            // Configurar mock específico para este test
            mockDb.collection.mockReturnValue(mockUserQuery);
            const result = yield analyticsService.getTopActiveUsersReport(10);
            expect(result).toHaveLength(1);
            expect(result[0].user.name).toBe('Juan Pérez');
            expect(result[0].eventsCreated).toBeGreaterThan(0);
            expect(result[0].requestsCreated).toBeGreaterThan(0);
        }));
        it('should handle empty results gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserQuery = {
                limit: jest.fn().mockReturnThis(),
                get: jest.fn().mockResolvedValue({
                    docs: []
                })
            };
            // Configurar mock específico para este test
            mockDb.collection.mockReturnValue(mockUserQuery);
            const result = yield analyticsService.getTopActiveUsersReport(10);
            expect(result).toHaveLength(0);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,