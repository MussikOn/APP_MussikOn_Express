{"version":3,"names":["cov_rf8lsamg1","actualCoverage","firebase_1","s","require","loggerService_1","RateCalculationService","constructor","f","COLLECTION_RATES","COLLECTION_MARKET_DATA","COLLECTION_PERFORMANCE","BASE_RATES","EVENT_TYPE_MULTIPLIERS","LOCATION_MULTIPLIERS","calculateRate","request","logger","info","context","metadata","musicianId","musicianData","getMusicianData","marketData","getMarketData","instrument","location","eventType","factors","calculateFactors","baseRate","b","finalRate","calculateFinalRate","breakdown","generateBreakdown","recommendations","generateRecommendations","result","error","performanceRef","db","collection","doc","get","exists","data","experience","rating","totalEvents","completedEvents","averageResponseTime","specializations","marketRef","where","snapshot","empty","docs","averageRate","minRate","maxRate","demandLevel","seasonalityFactor","experienceMultiplier","calculateExperienceMultiplier","demandMultiplier","calculateDemandMultiplier","locationMultiplier","toLowerCase","eventTypeMultiplier","durationMultiplier","calculateDurationMultiplier","duration","urgencyMultiplier","isUrgent","seasonalityMultiplier","calculateSeasonalityMultiplier","eventDate","performanceMultiplier","calculatePerformanceMultiplier","hours","baseFactor","month","getMonth","ratingMultiplier","completionRate","responseMultiplier","Math","max","round","factor","multiplier","amount","calculatedRate","competitorRates","getCompetitorRates","suggestedRate","min","marketAverage","ratesRef","orderBy","limit","map","rate","updateMarketData","newAverage","count","newMin","newMax","ref","update","updatedAt","Date","add","createdAt","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\rateCalculationService.ts"],"sourcesContent":["import { db } from '../utils/firebase';\r\nimport { logger } from './loggerService';\r\n\r\nexport interface RateFactors {\r\n  baseRate: number;\r\n  experienceMultiplier: number;\r\n  demandMultiplier: number;\r\n  locationMultiplier: number;\r\n  eventTypeMultiplier: number;\r\n  durationMultiplier: number;\r\n  urgencyMultiplier: number;\r\n  seasonalityMultiplier: number;\r\n}\r\n\r\nexport interface RateCalculationRequest {\r\n  musicianId: string;\r\n  eventType: string;\r\n  duration: number; // minutos\r\n  location: string;\r\n  eventDate: Date;\r\n  instrument: string;\r\n  isUrgent?: boolean;\r\n  specialRequirements?: string[];\r\n}\r\n\r\nexport interface RateCalculationResult {\r\n  baseRate: number;\r\n  finalRate: number;\r\n  breakdown: {\r\n    factor: string;\r\n    multiplier: number;\r\n    amount: number;\r\n  }[];\r\n  factors: RateFactors;\r\n  recommendations: {\r\n    suggestedRate: number;\r\n    marketAverage: number;\r\n    competitorRates: number[];\r\n  };\r\n}\r\n\r\nexport interface MarketData {\r\n  averageRate: number;\r\n  minRate: number;\r\n  maxRate: number;\r\n  demandLevel: 'low' | 'medium' | 'high';\r\n  seasonalityFactor: number;\r\n}\r\n\r\nexport class RateCalculationService {\r\n  private readonly COLLECTION_RATES = 'musician_rates';\r\n  private readonly COLLECTION_MARKET_DATA = 'market_data';\r\n  private readonly COLLECTION_PERFORMANCE = 'musician_performance';\r\n\r\n  // Tarifas base por instrumento (por hora)\r\n  private readonly BASE_RATES: Record<string, number> = {\r\n    'guitarra': 50,\r\n    'piano': 60,\r\n    'violin': 70,\r\n    'bateria': 55,\r\n    'bajo': 45,\r\n    'saxofon': 65,\r\n    'trompeta': 60,\r\n    'flauta': 55,\r\n    'canto': 80,\r\n    'dj': 100,\r\n    'banda_completa': 300\r\n  };\r\n\r\n  // Multiplicadores por tipo de evento\r\n  private readonly EVENT_TYPE_MULTIPLIERS: Record<string, number> = {\r\n    'wedding': 1.5,\r\n    'corporate': 1.3,\r\n    'birthday': 1.0,\r\n    'anniversary': 1.2,\r\n    'graduation': 1.1,\r\n    'party': 1.0,\r\n    'ceremony': 1.4,\r\n    'concert': 1.6,\r\n    'festival': 1.8,\r\n    'private': 1.2\r\n  };\r\n\r\n  // Multiplicadores por ubicación\r\n  private readonly LOCATION_MULTIPLIERS: Record<string, number> = {\r\n    'madrid': 1.3,\r\n    'barcelona': 1.4,\r\n    'valencia': 1.1,\r\n    'sevilla': 1.0,\r\n    'bilbao': 1.2,\r\n    'malaga': 1.1,\r\n    'granada': 0.9,\r\n    'alicante': 1.0,\r\n    'murcia': 0.9,\r\n    'zaragoza': 1.1\r\n  };\r\n\r\n  /**\r\n   * Calcular tarifa automática para un músico\r\n   */\r\n  async calculateRate(request: RateCalculationRequest): Promise<RateCalculationResult> {\r\n    try {\r\n      logger.info('Calculando tarifa para músico:', { context: 'Rate', metadata: { musicianId: request.musicianId } });\r\n      \r\n      // Obtener datos del músico\r\n      const musicianData = await this.getMusicianData(request.musicianId);\r\n      \r\n      // Obtener datos del mercado\r\n      const marketData = await this.getMarketData(request.instrument, request.location, request.eventType);\r\n      \r\n      // Calcular factores\r\n      const factors = await this.calculateFactors(request, musicianData, marketData);\r\n      \r\n      // Calcular tarifa base\r\n      const baseRate = this.BASE_RATES[request.instrument] || 50;\r\n      \r\n      // Calcular tarifa final\r\n      const finalRate = this.calculateFinalRate(baseRate, factors);\r\n      \r\n      // Generar breakdown\r\n      const breakdown = this.generateBreakdown(baseRate, factors);\r\n      \r\n      // Generar recomendaciones\r\n      const recommendations = await this.generateRecommendations(request, finalRate, marketData);\r\n      \r\n      const result: RateCalculationResult = {\r\n        baseRate,\r\n        finalRate,\r\n        breakdown,\r\n        factors,\r\n        recommendations\r\n      };\r\n\r\n      logger.info('Cálculo de tarifa completado', {\r\n        metadata: {\r\n          musicianId: request.musicianId,\r\n          baseRate,\r\n          finalRate,\r\n          factors\r\n        }\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      logger.error('Error calculando tarifa', error as Error, { \r\n        metadata: { request }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener datos del músico\r\n   */\r\n  private async getMusicianData(musicianId: string): Promise<{\r\n    experience: number; // años\r\n    rating: number;\r\n    totalEvents: number;\r\n    completedEvents: number;\r\n    averageResponseTime: number;\r\n    specializations: string[];\r\n  }> {\r\n    try {\r\n      const performanceRef = db.collection(this.COLLECTION_PERFORMANCE).doc(musicianId);\r\n      const doc = await performanceRef.get();\r\n      \r\n      if (doc.exists) {\r\n        const data = doc.data();\r\n        return {\r\n          experience: data?.experience || 1,\r\n          rating: data?.rating || 3.0,\r\n          totalEvents: data?.totalEvents || 0,\r\n          completedEvents: data?.completedEvents || 0,\r\n          averageResponseTime: data?.averageResponseTime || 60,\r\n          specializations: data?.specializations || []\r\n        };\r\n      }\r\n\r\n      // Datos por defecto para músicos nuevos\r\n      return {\r\n        experience: 1,\r\n        rating: 3.0,\r\n        totalEvents: 0,\r\n        completedEvents: 0,\r\n        averageResponseTime: 60,\r\n        specializations: []\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error obteniendo datos del músico', error as Error, { \r\n        metadata: { musicianId }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener datos del mercado\r\n   */\r\n  private async getMarketData(instrument: string, location: string, eventType: string): Promise<MarketData> {\r\n    try {\r\n      const marketRef = db.collection(this.COLLECTION_MARKET_DATA)\r\n        .where('instrument', '==', instrument)\r\n        .where('location', '==', location)\r\n        .where('eventType', '==', eventType);\r\n      \r\n      const snapshot = await marketRef.get();\r\n      \r\n      if (!snapshot.empty) {\r\n        const data = snapshot.docs[0].data();\r\n        return {\r\n          averageRate: data.averageRate || 50,\r\n          minRate: data.minRate || 30,\r\n          maxRate: data.maxRate || 100,\r\n          demandLevel: data.demandLevel || 'medium',\r\n          seasonalityFactor: data.seasonalityFactor || 1.0\r\n        };\r\n      }\r\n\r\n      // Datos por defecto\r\n      return {\r\n        averageRate: 50,\r\n        minRate: 30,\r\n        maxRate: 100,\r\n        demandLevel: 'medium',\r\n        seasonalityFactor: 1.0\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error obteniendo datos del mercado', error as Error, { \r\n        metadata: { instrument, location, eventType }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcular factores de multiplicación\r\n   */\r\n  private async calculateFactors(\r\n    request: RateCalculationRequest,\r\n    musicianData: any,\r\n    marketData: MarketData\r\n  ): Promise<RateFactors> {\r\n    // Factor de experiencia\r\n    const experienceMultiplier = this.calculateExperienceMultiplier(musicianData.experience);\r\n    \r\n    // Factor de demanda del mercado\r\n    const demandMultiplier = this.calculateDemandMultiplier(marketData.demandLevel);\r\n    \r\n    // Factor de ubicación\r\n    const locationMultiplier = this.LOCATION_MULTIPLIERS[request.location.toLowerCase()] || 1.0;\r\n    \r\n    // Factor de tipo de evento\r\n    const eventTypeMultiplier = this.EVENT_TYPE_MULTIPLIERS[request.eventType.toLowerCase()] || 1.0;\r\n    \r\n    // Factor de duración\r\n    const durationMultiplier = this.calculateDurationMultiplier(request.duration);\r\n    \r\n    // Factor de urgencia\r\n    const urgencyMultiplier = request.isUrgent ? 1.3 : 1.0;\r\n    \r\n    // Factor de estacionalidad\r\n    const seasonalityMultiplier = this.calculateSeasonalityMultiplier(request.eventDate, marketData.seasonalityFactor);\r\n    \r\n    // Factor de rendimiento del músico\r\n    const performanceMultiplier = this.calculatePerformanceMultiplier(musicianData);\r\n\r\n    return {\r\n      baseRate: this.BASE_RATES[request.instrument] || 50,\r\n      experienceMultiplier,\r\n      demandMultiplier,\r\n      locationMultiplier,\r\n      eventTypeMultiplier,\r\n      durationMultiplier,\r\n      urgencyMultiplier,\r\n      seasonalityMultiplier: seasonalityMultiplier * performanceMultiplier\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calcular multiplicador por experiencia\r\n   */\r\n  private calculateExperienceMultiplier(experience: number): number {\r\n    if (experience < 1) return 0.8;\r\n    if (experience < 3) return 1.0;\r\n    if (experience < 5) return 1.2;\r\n    if (experience < 10) return 1.4;\r\n    return 1.6; // 10+ años\r\n  }\r\n\r\n  /**\r\n   * Calcular multiplicador por demanda\r\n   */\r\n  private calculateDemandMultiplier(demandLevel: string): number {\r\n    switch (demandLevel) {\r\n      case 'low': return 0.9;\r\n      case 'medium': return 1.0;\r\n      case 'high': return 1.3;\r\n      default: return 1.0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcular multiplicador por duración\r\n   */\r\n  private calculateDurationMultiplier(duration: number): number {\r\n    const hours = duration / 60;\r\n    if (hours <= 1) return 1.0;\r\n    if (hours <= 2) return 0.9;\r\n    if (hours <= 4) return 0.85;\r\n    if (hours <= 6) return 0.8;\r\n    return 0.75; // Más de 6 horas\r\n  }\r\n\r\n  /**\r\n   * Calcular multiplicador por estacionalidad\r\n   */\r\n  private calculateSeasonalityMultiplier(eventDate: Date, baseFactor: number): number {\r\n    const month = eventDate.getMonth() + 1;\r\n    \r\n    // Meses de alta temporada (verano, diciembre)\r\n    if (month === 6 || month === 7 || month === 8 || month === 12) {\r\n      return baseFactor * 1.2;\r\n    }\r\n    \r\n    // Meses de temporada media (primavera, otoño)\r\n    if (month === 3 || month === 4 || month === 5 || month === 9 || month === 10) {\r\n      return baseFactor * 1.1;\r\n    }\r\n    \r\n    // Meses de baja temporada (enero, febrero, noviembre)\r\n    return baseFactor * 0.9;\r\n  }\r\n\r\n  /**\r\n   * Calcular multiplicador por rendimiento\r\n   */\r\n  private calculatePerformanceMultiplier(musicianData: any): number {\r\n    const ratingMultiplier = musicianData.rating / 5.0;\r\n    const completionRate = musicianData.totalEvents > 0 ? \r\n      musicianData.completedEvents / musicianData.totalEvents : 0.8;\r\n    const responseMultiplier = Math.max(0.8, 1.0 - (musicianData.averageResponseTime - 30) / 120);\r\n    \r\n    return (ratingMultiplier + completionRate + responseMultiplier) / 3;\r\n  }\r\n\r\n  /**\r\n   * Calcular tarifa final\r\n   */\r\n  private calculateFinalRate(baseRate: number, factors: RateFactors): number {\r\n    const finalRate = baseRate * \r\n      factors.experienceMultiplier *\r\n      factors.demandMultiplier *\r\n      factors.locationMultiplier *\r\n      factors.eventTypeMultiplier *\r\n      factors.durationMultiplier *\r\n      factors.urgencyMultiplier *\r\n      factors.seasonalityMultiplier;\r\n    \r\n    // Redondear a múltiplos de 5\r\n    return Math.round(finalRate / 5) * 5;\r\n  }\r\n\r\n  /**\r\n   * Generar breakdown detallado\r\n   */\r\n  private generateBreakdown(baseRate: number, factors: RateFactors): RateCalculationResult['breakdown'] {\r\n    return [\r\n      {\r\n        factor: 'Tarifa Base',\r\n        multiplier: 1.0,\r\n        amount: baseRate\r\n      },\r\n      {\r\n        factor: 'Experiencia',\r\n        multiplier: factors.experienceMultiplier,\r\n        amount: baseRate * (factors.experienceMultiplier - 1)\r\n      },\r\n      {\r\n        factor: 'Demanda del Mercado',\r\n        multiplier: factors.demandMultiplier,\r\n        amount: baseRate * (factors.demandMultiplier - 1)\r\n      },\r\n      {\r\n        factor: 'Ubicación',\r\n        multiplier: factors.locationMultiplier,\r\n        amount: baseRate * (factors.locationMultiplier - 1)\r\n      },\r\n      {\r\n        factor: 'Tipo de Evento',\r\n        multiplier: factors.eventTypeMultiplier,\r\n        amount: baseRate * (factors.eventTypeMultiplier - 1)\r\n      },\r\n      {\r\n        factor: 'Duración',\r\n        multiplier: factors.durationMultiplier,\r\n        amount: baseRate * (factors.durationMultiplier - 1)\r\n      },\r\n      {\r\n        factor: 'Urgencia',\r\n        multiplier: factors.urgencyMultiplier,\r\n        amount: baseRate * (factors.urgencyMultiplier - 1)\r\n      },\r\n      {\r\n        factor: 'Estacionalidad y Rendimiento',\r\n        multiplier: factors.seasonalityMultiplier,\r\n        amount: baseRate * (factors.seasonalityMultiplier - 1)\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Generar recomendaciones\r\n   */\r\n  private async generateRecommendations(\r\n    request: RateCalculationRequest,\r\n    calculatedRate: number,\r\n    marketData: MarketData\r\n  ): Promise<RateCalculationResult['recommendations']> {\r\n    // Obtener tarifas de competidores\r\n    const competitorRates = await this.getCompetitorRates(request.instrument, request.location);\r\n    \r\n    // Calcular tarifa sugerida basada en el mercado\r\n    const suggestedRate = Math.max(\r\n      marketData.minRate,\r\n      Math.min(marketData.maxRate, calculatedRate)\r\n    );\r\n    \r\n    return {\r\n      suggestedRate,\r\n      marketAverage: marketData.averageRate,\r\n      competitorRates\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Obtener tarifas de competidores\r\n   */\r\n  private async getCompetitorRates(instrument: string, location: string): Promise<number[]> {\r\n    try {\r\n      const ratesRef = db.collection(this.COLLECTION_RATES)\r\n        .where('instrument', '==', instrument)\r\n        .where('location', '==', location)\r\n        .orderBy('rate', 'desc')\r\n        .limit(5);\r\n      \r\n      const snapshot = await ratesRef.get();\r\n      return snapshot.docs.map(doc => doc.data().rate);\r\n    } catch (error) {\r\n      logger.error('Error obteniendo tarifas de competidores', error as Error, { \r\n        metadata: { instrument, location }\r\n      });\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualizar datos del mercado\r\n   */\r\n  async updateMarketData(\r\n    instrument: string,\r\n    location: string,\r\n    eventType: string,\r\n    rate: number\r\n  ): Promise<void> {\r\n    try {\r\n      logger.info('[src/services/rateCalculationService.ts:350] Actualizando datos del mercado');\r\n      \r\n      const marketRef = db.collection(this.COLLECTION_MARKET_DATA)\r\n        .where('instrument', '==', instrument)\r\n        .where('location', '==', location)\r\n        .where('eventType', '==', eventType);\r\n      \r\n      const snapshot = await marketRef.get();\r\n      \r\n      if (!snapshot.empty) {\r\n        const doc = snapshot.docs[0];\r\n        const data = doc.data();\r\n        \r\n        // Actualizar promedio\r\n        const newAverage = (data.averageRate * data.count + rate) / (data.count + 1);\r\n        const newMin = Math.min(data.minRate, rate);\r\n        const newMax = Math.max(data.maxRate, rate);\r\n        \r\n        await doc.ref.update({\r\n          averageRate: newAverage,\r\n          minRate: newMin,\r\n          maxRate: newMax,\r\n          count: data.count + 1,\r\n          updatedAt: new Date()\r\n        });\r\n      } else {\r\n        // Crear nuevo registro\r\n        await db.collection(this.COLLECTION_MARKET_DATA).add({\r\n          instrument,\r\n          location,\r\n          eventType,\r\n          averageRate: rate,\r\n          minRate: rate,\r\n          maxRate: rate,\r\n          count: 1,\r\n          demandLevel: 'medium',\r\n          seasonalityFactor: 1.0,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date()\r\n        });\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error actualizando datos del mercado', error as Error, { \r\n        metadata: { instrument, location, eventType, rate }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n} "],"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","ignoreList":[]}