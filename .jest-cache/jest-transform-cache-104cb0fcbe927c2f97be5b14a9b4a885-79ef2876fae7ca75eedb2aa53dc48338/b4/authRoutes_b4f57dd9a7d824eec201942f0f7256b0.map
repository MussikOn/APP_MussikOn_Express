{"version":3,"names":["cov_3b06ulla2","actualCoverage","express_1","s","require","authMiddleware_1","validationMiddleware_1","errorHandler_1","loggerService_1","validationSchemas_1","authController_1","router","Router","post","validate","registerSchema","asyncHandler","req","res","f","__awaiter","logger","logAuth","body","userEmail","registerController","musicianRegisterSchema","requestEmailVerificationController","verifyAndCompleteRegistrationController","loginSchema","loginController","emailRegisterController","put","authMiddleware","validateId","updateUserSchema","params","metadata","updatedBy","b","_a","user","updateUserByEmailController","get","validNumberGetByEmail","eventId","addedBy","addEventToUserController","delete","deletedBy","deleteUserByEmailController","forgotPasswordController","code","verifyCodeController","resetPasswordController","exports","default"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\authRoutes.ts"],"sourcesContent":["import express, { Request, Response, Router } from 'express';\r\nimport { authMiddleware } from '../middleware/authMiddleware';\r\nimport { validate, validateId } from '../middleware/validationMiddleware';\r\nimport { asyncHandler } from '../middleware/errorHandler';\r\nimport { logger } from '../services/loggerService';\r\nimport {\r\n  registerSchema,\r\n  loginSchema,\r\n  updateUserSchema,\r\n  musicianRegisterSchema,\r\n} from '../utils/validationSchemas';\r\nimport {\r\n  emailRegisterController,\r\n  loginController,\r\n  registerController,\r\n  updateUserByEmailController,\r\n  validNumberGetByEmail,\r\n  addEventToUserController,\r\n  deleteUserByEmailController,\r\n  forgotPasswordController,\r\n  verifyCodeController,\r\n  resetPasswordController,\r\n  requestEmailVerificationController,\r\n  verifyAndCompleteRegistrationController,\r\n} from '../controllers/authController';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: Auth\r\n *   description: Endpoints de autenticación y gestión de usuario\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /auth/Register:\r\n *   post:\r\n *     tags: [Auth]\r\n *     summary: Registro de usuario\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/AuthUserRegister'\r\n *     responses:\r\n *       201:\r\n *         description: Usuario registrado exitosamente\r\n *       400:\r\n *         description: Datos de entrada inválidos\r\n *       409:\r\n *         description: Usuario ya existe\r\n */\r\nrouter.post(\r\n  '/Register',\r\n  validate(registerSchema),\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    logger.logAuth('Intento de registro', req.body.userEmail);\r\n    await registerController(req, res);\r\n    logger.logAuth('Registro exitoso', req.body.userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/request-verification:\r\n *   post:\r\n *     tags: [Auth]\r\n *     summary: Solicitar verificación de email para registro\r\n *     description: Envía un código de verificación al email para completar el registro de músicos o creadores de eventos.\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - name\r\n *               - lastName\r\n *               - userEmail\r\n *               - userPassword\r\n *               - roll\r\n *             properties:\r\n *               name:\r\n *                 type: string\r\n *                 minLength: 2\r\n *                 maxLength: 50\r\n *                 description: Nombre del usuario\r\n *               lastName:\r\n *                 type: string\r\n *                 minLength: 2\r\n *                 maxLength: 50\r\n *                 description: Apellido del usuario\r\n *               userEmail:\r\n *                 type: string\r\n *                 format: email\r\n *                 description: Email del usuario\r\n *               userPassword:\r\n *                 type: string\r\n *                 minLength: 8\r\n *                 description: Contraseña del usuario\r\n *               roll:\r\n *                 type: string\r\n *                 enum: [musico, eventCreator]\r\n *                 description: Rol del usuario (músico o creador de eventos)\r\n *     responses:\r\n *       200:\r\n *         description: Email de verificación enviado exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     userEmail:\r\n *                       type: string\r\n *                     roll:\r\n *                       type: string\r\n *                     expiresIn:\r\n *                       type: string\r\n *       400:\r\n *         description: Datos de entrada inválidos\r\n *       409:\r\n *         description: Usuario ya existe\r\n */\r\nrouter.post(\r\n  '/request-verification',\r\n  validate(musicianRegisterSchema),\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    logger.logAuth('Solicitud de verificación de email', req.body.userEmail);\r\n    await requestEmailVerificationController(req, res);\r\n    logger.logAuth('Email de verificación enviado', req.body.userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/verify-and-complete-registration:\r\n *   post:\r\n *     tags: [Auth]\r\n *     summary: Verificar código y completar registro\r\n *     description: Verifica el código enviado por email y completa el registro del usuario.\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - userEmail\r\n *               - code\r\n *             properties:\r\n *               userEmail:\r\n *                 type: string\r\n *                 format: email\r\n *                 description: Email del usuario\r\n *               code:\r\n *                 type: string\r\n *                 minLength: 6\r\n *                 maxLength: 6\r\n *                 description: Código de verificación enviado por email\r\n *     responses:\r\n *       201:\r\n *         description: Usuario registrado exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     userEmail:\r\n *                       type: string\r\n *                     name:\r\n *                       type: string\r\n *                     lastName:\r\n *                       type: string\r\n *                     roll:\r\n *                       type: string\r\n *                     status:\r\n *                       type: string\r\n *                     token:\r\n *                       type: string\r\n *       400:\r\n *         description: Código inválido o expirado\r\n *       404:\r\n *         description: Datos de registro no encontrados\r\n */\r\nrouter.post(\r\n  '/verify-and-complete-registration',\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    logger.logAuth('Verificación de código solicitada', req.body.userEmail);\r\n    await verifyAndCompleteRegistrationController(req, res);\r\n    logger.logAuth('Registro completado exitosamente', req.body.userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/login:\r\n *   post:\r\n *     tags: [Auth]\r\n *     summary: Login de usuario\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               userEmail:\r\n *                 type: string\r\n *                 format: email\r\n *               userPassword:\r\n *                 type: string\r\n *                 minLength: 6\r\n *     responses:\r\n *       200:\r\n *         description: Login exitoso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 msg:\r\n *                   type: string\r\n *                 token:\r\n *                   type: string\r\n *       401:\r\n *         description: Credenciales incorrectas\r\n *       400:\r\n *         description: Datos de entrada inválidos\r\n */\r\nrouter.post(\r\n  '/login',\r\n  validate(loginSchema),\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    logger.logAuth('Intento de login', req.body.userEmail);\r\n    await loginController(req, res);\r\n    logger.logAuth('Login exitoso', req.body.userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/email-register:\r\n *   post:\r\n *     tags: [Auth]\r\n *     summary: Registro con email\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/AuthUserRegister'\r\n *     responses:\r\n *       201:\r\n *         description: Usuario registrado exitosamente\r\n *       400:\r\n *         description: Datos de entrada inválidos\r\n */\r\nrouter.post(\r\n  '/email-register',\r\n  validate(registerSchema),\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    logger.logAuth('Intento de registro con email', req.body.userEmail);\r\n    await emailRegisterController(req, res);\r\n    logger.logAuth('Registro con email exitoso', req.body.userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/update/{userEmail}:\r\n *   put:\r\n *     tags: [Auth]\r\n *     summary: Actualizar usuario por email\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: userEmail\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *           format: email\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/UpdateUser'\r\n *     responses:\r\n *       200:\r\n *         description: Usuario actualizado exitosamente\r\n *       400:\r\n *         description: Datos de entrada inválidos\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Usuario no encontrado\r\n */\r\nrouter.put(\r\n  '/update/:userEmail',\r\n  authMiddleware,\r\n  validateId,\r\n  validate(updateUserSchema),\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    const userEmail = req.params.userEmail;\r\n    logger.logAuth('Intento de actualización de usuario', userEmail, {\r\n      metadata: { updatedBy: (req as any).user?.userEmail },\r\n    });\r\n    await updateUserByEmailController(req, res);\r\n    logger.logAuth('Actualización de usuario exitosa', userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/validate-number/{userEmail}:\r\n *   get:\r\n *     tags: [Auth]\r\n *     summary: Validar número de teléfono por email\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: userEmail\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *           format: email\r\n *     responses:\r\n *       200:\r\n *         description: Número validado exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Usuario no encontrado\r\n */\r\nrouter.get(\r\n  '/validate-number/:userEmail',\r\n  authMiddleware,\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    const userEmail = req.params.userEmail;\r\n    logger.logAuth('Validación de número solicitada', userEmail);\r\n    await validNumberGetByEmail(req, res);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/add-event/{userEmail}:\r\n *   post:\r\n *     tags: [Auth]\r\n *     summary: Agregar evento a usuario\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: userEmail\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *           format: email\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               eventId:\r\n *                 type: string\r\n *     responses:\r\n *       200:\r\n *         description: Evento agregado exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Usuario o evento no encontrado\r\n */\r\nrouter.post(\r\n  '/add-event/:userEmail',\r\n  authMiddleware,\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    const userEmail = req.params.userEmail;\r\n    const eventId = req.body.eventId;\r\n    logger.logAuth('Agregando evento a usuario', userEmail, {\r\n      metadata: { eventId, addedBy: (req as any).user?.userEmail },\r\n    });\r\n    await addEventToUserController(req, res);\r\n    logger.logAuth('Evento agregado exitosamente', userEmail, {\r\n      metadata: { eventId },\r\n    });\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/delete/{userEmail}:\r\n *   delete:\r\n *     tags: [Auth]\r\n *     summary: Eliminar usuario por email\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: userEmail\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *           format: email\r\n *     responses:\r\n *       200:\r\n *         description: Usuario eliminado exitosamente\r\n *       401:\r\n *         description: No autorizado\r\n *       404:\r\n *         description: Usuario no encontrado\r\n */\r\nrouter.delete(\r\n  '/delete/:userEmail',\r\n  authMiddleware,\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    const userEmail = req.params.userEmail;\r\n    logger.logAuth('Eliminación de usuario solicitada', userEmail, {\r\n      metadata: { deletedBy: (req as any).user?.userEmail },\r\n    });\r\n    await deleteUserByEmailController(req, res);\r\n    logger.logAuth('Usuario eliminado exitosamente', userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/forgot-password:\r\n *   post:\r\n *     tags: [Auth]\r\n *     summary: Solicitar recuperación de contraseña (solo superadmin)\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               userEmail:\r\n *                 type: string\r\n *                 format: email\r\n *     responses:\r\n *       200:\r\n *         description: Código de verificación enviado\r\n *       400:\r\n *         description: Email inválido\r\n *       403:\r\n *         description: Solo superadmin puede recuperar contraseña\r\n *       404:\r\n *         description: Usuario no encontrado\r\n */\r\nrouter.post(\r\n  '/forgot-password',\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    const userEmail = req.body.userEmail;\r\n    logger.logAuth('Solicitud de recuperación de contraseña', userEmail);\r\n    await forgotPasswordController(req, res);\r\n    logger.logAuth('Código de verificación enviado', userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/verify-code:\r\n *   post:\r\n *     tags: [Auth]\r\n *     summary: Verificar código de recuperación\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               userEmail:\r\n *                 type: string\r\n *                 format: email\r\n *               code:\r\n *                 type: string\r\n *                 minLength: 6\r\n *                 maxLength: 6\r\n *     responses:\r\n *       200:\r\n *         description: Código verificado correctamente\r\n *       400:\r\n *         description: Código inválido o expirado\r\n *       403:\r\n *         description: Solo superadmin puede recuperar contraseña\r\n *       404:\r\n *         description: Usuario no encontrado\r\n */\r\nrouter.post(\r\n  '/verify-code',\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    const userEmail = req.body.userEmail;\r\n    const code = req.body.code;\r\n    logger.logAuth('Verificación de código solicitada', userEmail, {\r\n      metadata: { code },\r\n    });\r\n    await verifyCodeController(req, res);\r\n    logger.logAuth('Código verificado exitosamente', userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /auth/reset-password:\r\n *   post:\r\n *     tags: [Auth]\r\n *     summary: Restablecer contraseña\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               userEmail:\r\n *                 type: string\r\n *                 format: email\r\n *               code:\r\n *                 type: string\r\n *                 minLength: 6\r\n *                 maxLength: 6\r\n *               newPassword:\r\n *                 type: string\r\n *                 minLength: 6\r\n *     responses:\r\n *       200:\r\n *         description: Contraseña actualizada correctamente\r\n *       400:\r\n *         description: Código inválido o contraseña débil\r\n *       403:\r\n *         description: Solo superadmin puede recuperar contraseña\r\n *       404:\r\n *         description: Usuario no encontrado\r\n */\r\nrouter.post(\r\n  '/reset-password',\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    const userEmail = req.body.userEmail;\r\n    logger.logAuth('Restablecimiento de contraseña solicitado', userEmail);\r\n    await resetPasswordController(req, res);\r\n    logger.logAuth('Contraseña restablecida exitosamente', userEmail);\r\n  })\r\n);\r\n\r\nexport default router;\r\n"],"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","ignoreList":[]}