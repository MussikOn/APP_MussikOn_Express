116806c55c911fcd6592729f82131ba9
"use strict";

/* istanbul ignore next */
function cov_u6x3jt6go() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\optimizationController.ts";
  var hash = "9ea01c5f15343a965229c71a0ee27ea668a13ba7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\optimizationController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 40
        }
      },
      "14": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 60
        }
      },
      "15": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 58
        }
      },
      "16": {
        start: {
          line: 15,
          column: 39
        },
        end: {
          line: 15,
          column: 90
        }
      },
      "17": {
        start: {
          line: 16,
          column: 38
        },
        end: {
          line: 16,
          column: 90
        }
      },
      "18": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "19": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "20": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 21,
          column: 74
        }
      },
      "21": {
        start: {
          line: 22,
          column: 39
        },
        end: {
          line: 22,
          column: 109
        }
      },
      "22": {
        start: {
          line: 23,
          column: 33
        },
        end: {
          line: 40,
          column: 17
        }
      },
      "23": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 43,
          column: 19
        }
      },
      "24": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 47
        }
      },
      "25": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 49,
          column: 19
        }
      },
      "26": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 54,
          column: 19
        }
      },
      "27": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "29": {
        start: {
          line: 61,
          column: 35
        },
        end: {
          line: 61,
          column: 44
        }
      },
      "30": {
        start: {
          line: 62,
          column: 37
        },
        end: {
          line: 62,
          column: 56
        }
      },
      "31": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 70
        }
      },
      "32": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 107
        }
      },
      "33": {
        start: {
          line: 65,
          column: 33
        },
        end: {
          line: 72,
          column: 17
        }
      },
      "34": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "35": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 47
        }
      },
      "36": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 81,
          column: 19
        }
      },
      "37": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 86,
          column: 19
        }
      },
      "38": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "39": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "40": {
        start: {
          line: 93,
          column: 57
        },
        end: {
          line: 93,
          column: 65
        }
      },
      "41": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 100,
          column: 17
        }
      },
      "42": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 98,
          column: 23
        }
      },
      "43": {
        start: {
          line: 99,
          column: 20
        },
        end: {
          line: 99,
          column: 27
        }
      },
      "44": {
        start: {
          line: 101,
          column: 33
        },
        end: {
          line: 101,
          column: 164
        }
      },
      "45": {
        start: {
          line: 102,
          column: 33
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "46": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 116,
          column: 19
        }
      },
      "47": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 47
        }
      },
      "48": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 122,
          column: 19
        }
      },
      "49": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 127,
          column: 19
        }
      },
      "50": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 173,
          column: 11
        }
      },
      "51": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "52": {
        start: {
          line: 134,
          column: 60
        },
        end: {
          line: 134,
          column: 68
        }
      },
      "53": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "54": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 139,
          column: 23
        }
      },
      "55": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 27
        }
      },
      "56": {
        start: {
          line: 142,
          column: 31
        },
        end: {
          line: 142,
          column: 168
        }
      },
      "57": {
        start: {
          line: 143,
          column: 33
        },
        end: {
          line: 152,
          column: 17
        }
      },
      "58": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 160,
          column: 19
        }
      },
      "59": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 70
        }
      },
      "60": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 166,
          column: 19
        }
      },
      "61": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 171,
          column: 19
        }
      },
      "62": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 225,
          column: 11
        }
      },
      "63": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 224,
          column: 13
        }
      },
      "64": {
        start: {
          line: 178,
          column: 35
        },
        end: {
          line: 178,
          column: 79
        }
      },
      "65": {
        start: {
          line: 179,
          column: 39
        },
        end: {
          line: 179,
          column: 109
        }
      },
      "66": {
        start: {
          line: 180,
          column: 35
        },
        end: {
          line: 180,
          column: 111
        }
      },
      "67": {
        start: {
          line: 181,
          column: 33
        },
        end: {
          line: 209,
          column: 17
        }
      },
      "68": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 212,
          column: 19
        }
      },
      "69": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 47
        }
      },
      "70": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 218,
          column: 19
        }
      },
      "71": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 223,
          column: 19
        }
      },
      "72": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "73": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 266,
          column: 13
        }
      },
      "74": {
        start: {
          line: 230,
          column: 57
        },
        end: {
          line: 230,
          column: 65
        }
      },
      "75": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 237,
          column: 17
        }
      },
      "76": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 235,
          column: 23
        }
      },
      "77": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 27
        }
      },
      "78": {
        start: {
          line: 238,
          column: 31
        },
        end: {
          line: 238,
          column: 153
        }
      },
      "79": {
        start: {
          line: 239,
          column: 33
        },
        end: {
          line: 247,
          column: 17
        }
      },
      "80": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 254,
          column: 19
        }
      },
      "81": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 47
        }
      },
      "82": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 260,
          column: 19
        }
      },
      "83": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 265,
          column: 19
        }
      },
      "84": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 310,
          column: 11
        }
      },
      "85": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "86": {
        start: {
          line: 272,
          column: 39
        },
        end: {
          line: 272,
          column: 47
        }
      },
      "87": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 279,
          column: 17
        }
      },
      "88": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 277,
          column: 23
        }
      },
      "89": {
        start: {
          line: 278,
          column: 20
        },
        end: {
          line: 278,
          column: 27
        }
      },
      "90": {
        start: {
          line: 280,
          column: 31
        },
        end: {
          line: 280,
          column: 124
        }
      },
      "91": {
        start: {
          line: 281,
          column: 33
        },
        end: {
          line: 290,
          column: 17
        }
      },
      "92": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 297,
          column: 19
        }
      },
      "93": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 298,
          column: 70
        }
      },
      "94": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 303,
          column: 19
        }
      },
      "95": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 308,
          column: 19
        }
      },
      "96": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 354,
          column: 11
        }
      },
      "97": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 353,
          column: 13
        }
      },
      "98": {
        start: {
          line: 315,
          column: 35
        },
        end: {
          line: 315,
          column: 79
        }
      },
      "99": {
        start: {
          line: 316,
          column: 39
        },
        end: {
          line: 316,
          column: 109
        }
      },
      "100": {
        start: {
          line: 317,
          column: 37
        },
        end: {
          line: 325,
          column: 17
        }
      },
      "101": {
        start: {
          line: 327,
          column: 40
        },
        end: {
          line: 327,
          column: 76
        }
      },
      "102": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 333,
          column: 17
        }
      },
      "103": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 329,
          column: 54
        }
      },
      "104": {
        start: {
          line: 331,
          column: 21
        },
        end: {
          line: 333,
          column: 17
        }
      },
      "105": {
        start: {
          line: 332,
          column: 20
        },
        end: {
          line: 332,
          column: 53
        }
      },
      "106": {
        start: {
          line: 334,
          column: 33
        },
        end: {
          line: 337,
          column: 17
        }
      },
      "107": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 340,
          column: 19
        }
      },
      "108": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 47
        }
      },
      "109": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 346,
          column: 19
        }
      },
      "110": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 352,
          column: 19
        }
      },
      "111": {
        start: {
          line: 357,
          column: 0
        },
        end: {
          line: 357,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 18
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 19,
            column: 47
          },
          end: {
            line: 19,
            column: 48
          }
        },
        loc: {
          start: {
            line: 19,
            column: 60
          },
          end: {
            line: 56,
            column: 9
          }
        },
        line: 19
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 25
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 58
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 59,
            column: 47
          },
          end: {
            line: 59,
            column: 48
          }
        },
        loc: {
          start: {
            line: 59,
            column: 60
          },
          end: {
            line: 88,
            column: 9
          }
        },
        line: 59
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 38
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 90
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 91,
            column: 47
          },
          end: {
            line: 91,
            column: 48
          }
        },
        loc: {
          start: {
            line: 91,
            column: 60
          },
          end: {
            line: 129,
            column: 9
          }
        },
        line: 91
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 35
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 131
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 132,
            column: 47
          },
          end: {
            line: 132,
            column: 48
          }
        },
        loc: {
          start: {
            line: 132,
            column: 60
          },
          end: {
            line: 173,
            column: 9
          }
        },
        line: 132
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 35
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 175
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 176,
            column: 47
          },
          end: {
            line: 176,
            column: 48
          }
        },
        loc: {
          start: {
            line: 176,
            column: 60
          },
          end: {
            line: 225,
            column: 9
          }
        },
        line: 176
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 28
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 227
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 228,
            column: 47
          },
          end: {
            line: 228,
            column: 48
          }
        },
        loc: {
          start: {
            line: 228,
            column: 60
          },
          end: {
            line: 267,
            column: 9
          }
        },
        line: 228
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 30
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 269
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 270,
            column: 47
          },
          end: {
            line: 270,
            column: 48
          }
        },
        loc: {
          start: {
            line: 270,
            column: 60
          },
          end: {
            line: 310,
            column: 9
          }
        },
        line: 270
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 26
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 312
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 313,
            column: 47
          },
          end: {
            line: 313,
            column: 48
          }
        },
        loc: {
          start: {
            line: 313,
            column: 60
          },
          end: {
            line: 354,
            column: 9
          }
        },
        line: 313
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 37
          },
          end: {
            line: 31,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 32
          },
          end: {
            line: 31,
            column: 80
          }
        }, {
          start: {
            line: 31,
            column: 83
          },
          end: {
            line: 31,
            column: 84
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 37
          },
          end: {
            line: 62,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 37
          },
          end: {
            line: 62,
            column: 43
          }
        }, {
          start: {
            line: 62,
            column: 47
          },
          end: {
            line: 62,
            column: 56
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 69,
            column: 32
          },
          end: {
            line: 69,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 32
          },
          end: {
            line: 69,
            column: 44
          }
        }, {
          start: {
            line: 69,
            column: 48
          },
          end: {
            line: 69,
            column: 53
          }
        }],
        line: 69
      },
      "8": {
        loc: {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 100,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 100,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "9": {
        loc: {
          start: {
            line: 101,
            column: 135
          },
          end: {
            line: 101,
            column: 148
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 135
          },
          end: {
            line: 101,
            column: 142
          }
        }, {
          start: {
            line: 101,
            column: 146
          },
          end: {
            line: 101,
            column: 148
          }
        }],
        line: 101
      },
      "10": {
        loc: {
          start: {
            line: 101,
            column: 150
          },
          end: {
            line: 101,
            column: 163
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 150
          },
          end: {
            line: 101,
            column: 157
          }
        }, {
          start: {
            line: 101,
            column: 161
          },
          end: {
            line: 101,
            column: 163
          }
        }],
        line: 101
      },
      "11": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 135,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 135,
            column: 31
          }
        }, {
          start: {
            line: 135,
            column: 35
          },
          end: {
            line: 135,
            column: 42
          }
        }, {
          start: {
            line: 135,
            column: 46
          },
          end: {
            line: 135,
            column: 68
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 142,
            column: 138
          },
          end: {
            line: 142,
            column: 167
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 138
          },
          end: {
            line: 142,
            column: 149
          }
        }, {
          start: {
            line: 142,
            column: 153
          },
          end: {
            line: 142,
            column: 167
          }
        }],
        line: 142
      },
      "14": {
        loc: {
          start: {
            line: 145,
            column: 29
          },
          end: {
            line: 145,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 46
          },
          end: {
            line: 145,
            column: 82
          }
        }, {
          start: {
            line: 145,
            column: 85
          },
          end: {
            line: 145,
            column: 119
          }
        }],
        line: 145
      },
      "15": {
        loc: {
          start: {
            line: 161,
            column: 27
          },
          end: {
            line: 161,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 44
          },
          end: {
            line: 161,
            column: 47
          }
        }, {
          start: {
            line: 161,
            column: 50
          },
          end: {
            line: 161,
            column: 53
          }
        }],
        line: 161
      },
      "16": {
        loc: {
          start: {
            line: 188,
            column: 37
          },
          end: {
            line: 189,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 32
          },
          end: {
            line: 189,
            column: 95
          }
        }, {
          start: {
            line: 189,
            column: 98
          },
          end: {
            line: 189,
            column: 99
          }
        }],
        line: 188
      },
      "17": {
        loc: {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 237,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 237,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "18": {
        loc: {
          start: {
            line: 238,
            column: 124
          },
          end: {
            line: 238,
            column: 137
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 124
          },
          end: {
            line: 238,
            column: 131
          }
        }, {
          start: {
            line: 238,
            column: 135
          },
          end: {
            line: 238,
            column: 137
          }
        }],
        line: 238
      },
      "19": {
        loc: {
          start: {
            line: 238,
            column: 139
          },
          end: {
            line: 238,
            column: 152
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 139
          },
          end: {
            line: 238,
            column: 146
          }
        }, {
          start: {
            line: 238,
            column: 150
          },
          end: {
            line: 238,
            column: 152
          }
        }],
        line: 238
      },
      "20": {
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "21": {
        loc: {
          start: {
            line: 273,
            column: 20
          },
          end: {
            line: 273,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 20
          },
          end: {
            line: 273,
            column: 31
          }
        }, {
          start: {
            line: 273,
            column: 35
          },
          end: {
            line: 273,
            column: 61
          }
        }],
        line: 273
      },
      "22": {
        loc: {
          start: {
            line: 283,
            column: 29
          },
          end: {
            line: 283,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 46
          },
          end: {
            line: 283,
            column: 87
          }
        }, {
          start: {
            line: 283,
            column: 90
          },
          end: {
            line: 283,
            column: 120
          }
        }],
        line: 283
      },
      "23": {
        loc: {
          start: {
            line: 298,
            column: 27
          },
          end: {
            line: 298,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 298,
            column: 44
          },
          end: {
            line: 298,
            column: 47
          }
        }, {
          start: {
            line: 298,
            column: 50
          },
          end: {
            line: 298,
            column: 53
          }
        }],
        line: 298
      },
      "24": {
        loc: {
          start: {
            line: 320,
            column: 31
          },
          end: {
            line: 320,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 320,
            column: 53
          },
          end: {
            line: 320,
            column: 62
          }
        }, {
          start: {
            line: 320,
            column: 65
          },
          end: {
            line: 320,
            column: 74
          }
        }],
        line: 320
      },
      "25": {
        loc: {
          start: {
            line: 321,
            column: 35
          },
          end: {
            line: 321,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 321,
            column: 72
          },
          end: {
            line: 321,
            column: 81
          }
        }, {
          start: {
            line: 321,
            column: 84
          },
          end: {
            line: 321,
            column: 93
          }
        }],
        line: 321
      },
      "26": {
        loc: {
          start: {
            line: 322,
            column: 32
          },
          end: {
            line: 322,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 85
          },
          end: {
            line: 322,
            column: 94
          }
        }, {
          start: {
            line: 322,
            column: 97
          },
          end: {
            line: 322,
            column: 106
          }
        }],
        line: 322
      },
      "27": {
        loc: {
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 333,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 333,
            column: 17
          }
        }, {
          start: {
            line: 331,
            column: 21
          },
          end: {
            line: 333,
            column: 17
          }
        }],
        line: 328
      },
      "28": {
        loc: {
          start: {
            line: 331,
            column: 21
          },
          end: {
            line: 333,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 21
          },
          end: {
            line: 333,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\optimizationController.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\optimizationController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\r\nimport { logger } from '../services/loggerService';\r\nimport { cacheService } from '../services/cacheService';\r\nimport { firestoreOptimizationService } from '../services/firestoreOptimizationService';\r\nimport { QueryOptimizationMiddleware } from '../middleware/queryOptimizationMiddleware';\r\n\r\nexport class OptimizationController {\r\n  public async getCacheStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const stats = await cacheService.getStats();\r\n      const firestoreStats = firestoreOptimizationService.getStats();\r\n\r\n      const response = {\r\n        success: true,\r\n        data: {\r\n          cache: {\r\n            hits: stats.hits,\r\n            misses: stats.misses,\r\n            keys: stats.keys,\r\n            hitRate: stats.hits + stats.misses > 0 ? \r\n              (stats.hits / (stats.hits + stats.misses)) * 100 : 0\r\n          },\r\n          firestore: {\r\n            cacheSize: firestoreStats.cacheSize,\r\n            activeQueries: firestoreStats.activeQueries,\r\n            config: firestoreStats.config\r\n          },\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      logger.info('Cache stats retrieved successfully', {\r\n        metadata: { service: 'OptimizationController', stats: response.data }\r\n      });\r\n\r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      logger.error('Error getting cache stats', error as Error, {\r\n        metadata: { service: 'OptimizationController' }\r\n      });\r\n\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Error retrieving cache statistics',\r\n        error: (error as Error).message\r\n      });\r\n    }\r\n  }\r\n\r\n  public async clearCache(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { prefix } = req.query;\r\n      const prefixString = prefix as string || undefined;\r\n\r\n      await cacheService.clear(prefixString);\r\n      await firestoreOptimizationService.clearCache(prefixString);\r\n\r\n      const response = {\r\n        success: true,\r\n        message: 'Cache cleared successfully',\r\n        data: {\r\n          prefix: prefixString || 'all',\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      logger.info('Cache cleared successfully', {\r\n        metadata: { service: 'OptimizationController', prefix: prefixString }\r\n      });\r\n\r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      logger.error('Error clearing cache', error as Error, {\r\n        metadata: { service: 'OptimizationController' }\r\n      });\r\n\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Error clearing cache',\r\n        error: (error as Error).message\r\n      });\r\n    }\r\n  }\r\n\r\n  public async analyzeQueryPerformance(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { collection, filters, options } = req.body;\r\n\r\n      if (!collection) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Collection name is required'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const analysis = await firestoreOptimizationService.analyzeQueryPerformance(\r\n        collection,\r\n        filters || {},\r\n        options || {}\r\n      );\r\n\r\n      const response = {\r\n        success: true,\r\n        data: {\r\n          collection,\r\n          analysis,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      logger.info('Query performance analysis completed', {\r\n        metadata: { \r\n          service: 'OptimizationController', \r\n          collection,\r\n          analysis \r\n        }\r\n      });\r\n\r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      logger.error('Error analyzing query performance', error as Error, {\r\n        metadata: { service: 'OptimizationController' }\r\n      });\r\n\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Error analyzing query performance',\r\n        error: (error as Error).message\r\n      });\r\n    }\r\n  }\r\n\r\n  public async createCompositeIndex(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { collection, fields, queryScopes } = req.body;\r\n\r\n      if (!collection || !fields || !Array.isArray(fields)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Collection name and fields array are required'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const result = await firestoreOptimizationService.createCompositeIndex(\r\n        collection,\r\n        fields,\r\n        queryScopes || ['COLLECTION']\r\n      );\r\n\r\n      const response = {\r\n        success: result.success,\r\n        message: result.success ? 'Composite index creation requested' : 'Failed to create composite index',\r\n        data: {\r\n          collection,\r\n          fields,\r\n          indexName: result.indexName,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      logger.info('Composite index creation requested', {\r\n        metadata: { \r\n          service: 'OptimizationController', \r\n          collection,\r\n          fields,\r\n          result \r\n        }\r\n      });\r\n\r\n      res.status(result.success ? 200 : 500).json(response);\r\n    } catch (error) {\r\n      logger.error('Error creating composite index', error as Error, {\r\n        metadata: { service: 'OptimizationController' }\r\n      });\r\n\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Error creating composite index',\r\n        error: (error as Error).message\r\n      });\r\n    }\r\n  }\r\n\r\n  public async getOptimizationStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const cacheStats = await cacheService.getStats();\r\n      const firestoreStats = firestoreOptimizationService.getStats();\r\n      const queryStats = QueryOptimizationMiddleware.getQueryStats(req);\r\n\r\n      const response = {\r\n        success: true,\r\n        data: {\r\n          cache: {\r\n            hits: cacheStats.hits,\r\n            misses: cacheStats.misses,\r\n            keys: cacheStats.keys,\r\n            hitRate: cacheStats.hits + cacheStats.misses > 0 ? \r\n              (cacheStats.hits / (cacheStats.hits + cacheStats.misses)) * 100 : 0\r\n          },\r\n          firestore: {\r\n            cacheSize: firestoreStats.cacheSize,\r\n            activeQueries: firestoreStats.activeQueries,\r\n            config: firestoreStats.config\r\n          },\r\n          query: {\r\n            queryTime: queryStats.queryTime,\r\n            resultCount: queryStats.resultCount,\r\n            cacheHit: queryStats.cacheHit,\r\n            optimizationApplied: queryStats.optimizationApplied\r\n          },\r\n          system: {\r\n            memoryUsage: process.memoryUsage(),\r\n            uptime: process.uptime(),\r\n            nodeVersion: process.version\r\n          },\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      logger.info('Optimization stats retrieved successfully', {\r\n        metadata: { service: 'OptimizationController', stats: response.data }\r\n      });\r\n\r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      logger.error('Error getting optimization stats', error as Error, {\r\n        metadata: { service: 'OptimizationController' }\r\n      });\r\n\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Error retrieving optimization statistics',\r\n        error: (error as Error).message\r\n      });\r\n    }\r\n  }\r\n\r\n  public async optimizeQuery(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { collection, filters, options } = req.body;\r\n\r\n      if (!collection) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Collection name is required'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const result = await firestoreOptimizationService.optimizedQuery(\r\n        collection,\r\n        filters || {},\r\n        options || {}\r\n      );\r\n\r\n      const response = {\r\n        success: true,\r\n        data: {\r\n          collection,\r\n          results: result.data,\r\n          metrics: result.metrics,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      logger.info('Optimized query executed successfully', {\r\n        metadata: { \r\n          service: 'OptimizationController', \r\n          collection,\r\n          metrics: result.metrics \r\n        }\r\n      });\r\n\r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      logger.error('Error executing optimized query', error as Error, {\r\n        metadata: { service: 'OptimizationController' }\r\n      });\r\n\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Error executing optimized query',\r\n        error: (error as Error).message\r\n      });\r\n    }\r\n  }\r\n\r\n  public async batchOperations(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { operations } = req.body;\r\n\r\n      if (!operations || !Array.isArray(operations)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Operations array is required'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const result = await firestoreOptimizationService.batchOperations(operations);\r\n\r\n      const response = {\r\n        success: result.success,\r\n        message: result.success ? 'Batch operations completed successfully' : 'Some batch operations failed',\r\n        data: {\r\n          totalOperations: operations.length,\r\n          successfulResults: result.results.length,\r\n          errors: result.errors,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      logger.info('Batch operations completed', {\r\n        metadata: { \r\n          service: 'OptimizationController', \r\n          totalOperations: operations.length,\r\n          success: result.success \r\n        }\r\n      });\r\n\r\n      res.status(result.success ? 200 : 207).json(response);\r\n    } catch (error) {\r\n      logger.error('Error executing batch operations', error as Error, {\r\n        metadata: { service: 'OptimizationController' }\r\n      });\r\n\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Error executing batch operations',\r\n        error: (error as Error).message\r\n      });\r\n    }\r\n  }\r\n\r\n  public async healthCheck(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const cacheStats = await cacheService.getStats();\r\n      const firestoreStats = firestoreOptimizationService.getStats();\r\n\r\n      const healthStatus = {\r\n        status: 'healthy',\r\n        services: {\r\n          cache: cacheStats.keys > 0 ? 'healthy' : 'warning',\r\n          firestore: firestoreStats.activeQueries < 100 ? 'healthy' : 'warning',\r\n          memory: process.memoryUsage().heapUsed < 500 * 1024 * 1024 ? 'healthy' : 'warning' // 500MB\r\n        },\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      // Determine overall status\r\n      const serviceStatuses = Object.values(healthStatus.services);\r\n      if (serviceStatuses.includes('unhealthy')) {\r\n        healthStatus.status = 'unhealthy';\r\n      } else if (serviceStatuses.includes('warning')) {\r\n        healthStatus.status = 'degraded';\r\n      }\r\n\r\n      const response = {\r\n        success: true,\r\n        data: healthStatus\r\n      };\r\n\r\n      logger.info('Health check completed', {\r\n        metadata: { service: 'OptimizationController', healthStatus }\r\n      });\r\n\r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      logger.error('Error during health check', error as Error, {\r\n        metadata: { service: 'OptimizationController' }\r\n      });\r\n\r\n      res.status(500).json({\r\n        success: false,\r\n        status: 'unhealthy',\r\n        message: 'Health check failed',\r\n        error: (error as Error).message\r\n      });\r\n    }\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9ea01c5f15343a965229c71a0ee27ea668a13ba7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_u6x3jt6go = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_u6x3jt6go();
var __awaiter =
/* istanbul ignore next */
(cov_u6x3jt6go().s[0]++,
/* istanbul ignore next */
(cov_u6x3jt6go().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_u6x3jt6go().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_u6x3jt6go().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_u6x3jt6go().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[1]++;
    cov_u6x3jt6go().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_u6x3jt6go().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_u6x3jt6go().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[2]++;
      cov_u6x3jt6go().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_u6x3jt6go().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_u6x3jt6go().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_u6x3jt6go().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[4]++;
      cov_u6x3jt6go().s[4]++;
      try {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[5]++;
      cov_u6x3jt6go().s[7]++;
      try {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[6]++;
      cov_u6x3jt6go().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_u6x3jt6go().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_u6x3jt6go().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_u6x3jt6go().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_u6x3jt6go().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_u6x3jt6go().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_u6x3jt6go().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_u6x3jt6go().s[13]++;
exports.OptimizationController = void 0;
const loggerService_1 =
/* istanbul ignore next */
(cov_u6x3jt6go().s[14]++, require("../services/loggerService"));
const cacheService_1 =
/* istanbul ignore next */
(cov_u6x3jt6go().s[15]++, require("../services/cacheService"));
const firestoreOptimizationService_1 =
/* istanbul ignore next */
(cov_u6x3jt6go().s[16]++, require("../services/firestoreOptimizationService"));
const queryOptimizationMiddleware_1 =
/* istanbul ignore next */
(cov_u6x3jt6go().s[17]++, require("../middleware/queryOptimizationMiddleware"));
class OptimizationController {
  getCacheStats(req, res) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[7]++;
    cov_u6x3jt6go().s[18]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[8]++;
      cov_u6x3jt6go().s[19]++;
      try {
        const stats =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[20]++, yield cacheService_1.cacheService.getStats());
        const firestoreStats =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[21]++, firestoreOptimizationService_1.firestoreOptimizationService.getStats());
        const response =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[22]++, {
          success: true,
          data: {
            cache: {
              hits: stats.hits,
              misses: stats.misses,
              keys: stats.keys,
              hitRate: stats.hits + stats.misses > 0 ?
              /* istanbul ignore next */
              (cov_u6x3jt6go().b[5][0]++, stats.hits / (stats.hits + stats.misses) * 100) :
              /* istanbul ignore next */
              (cov_u6x3jt6go().b[5][1]++, 0)
            },
            firestore: {
              cacheSize: firestoreStats.cacheSize,
              activeQueries: firestoreStats.activeQueries,
              config: firestoreStats.config
            },
            timestamp: new Date().toISOString()
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[23]++;
        loggerService_1.logger.info('Cache stats retrieved successfully', {
          metadata: {
            service: 'OptimizationController',
            stats: response.data
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[24]++;
        res.status(200).json(response);
      } catch (error) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[25]++;
        loggerService_1.logger.error('Error getting cache stats', error, {
          metadata: {
            service: 'OptimizationController'
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[26]++;
        res.status(500).json({
          success: false,
          message: 'Error retrieving cache statistics',
          error: error.message
        });
      }
    });
  }
  clearCache(req, res) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[9]++;
    cov_u6x3jt6go().s[27]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[10]++;
      cov_u6x3jt6go().s[28]++;
      try {
        const {
          prefix
        } =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[29]++, req.query);
        const prefixString =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[30]++,
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[6][0]++, prefix) ||
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[6][1]++, undefined));
        /* istanbul ignore next */
        cov_u6x3jt6go().s[31]++;
        yield cacheService_1.cacheService.clear(prefixString);
        /* istanbul ignore next */
        cov_u6x3jt6go().s[32]++;
        yield firestoreOptimizationService_1.firestoreOptimizationService.clearCache(prefixString);
        const response =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[33]++, {
          success: true,
          message: 'Cache cleared successfully',
          data: {
            prefix:
            /* istanbul ignore next */
            (cov_u6x3jt6go().b[7][0]++, prefixString) ||
            /* istanbul ignore next */
            (cov_u6x3jt6go().b[7][1]++, 'all'),
            timestamp: new Date().toISOString()
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[34]++;
        loggerService_1.logger.info('Cache cleared successfully', {
          metadata: {
            service: 'OptimizationController',
            prefix: prefixString
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[35]++;
        res.status(200).json(response);
      } catch (error) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[36]++;
        loggerService_1.logger.error('Error clearing cache', error, {
          metadata: {
            service: 'OptimizationController'
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[37]++;
        res.status(500).json({
          success: false,
          message: 'Error clearing cache',
          error: error.message
        });
      }
    });
  }
  analyzeQueryPerformance(req, res) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[11]++;
    cov_u6x3jt6go().s[38]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[12]++;
      cov_u6x3jt6go().s[39]++;
      try {
        const {
          collection,
          filters,
          options
        } =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[40]++, req.body);
        /* istanbul ignore next */
        cov_u6x3jt6go().s[41]++;
        if (!collection) {
          /* istanbul ignore next */
          cov_u6x3jt6go().b[8][0]++;
          cov_u6x3jt6go().s[42]++;
          res.status(400).json({
            success: false,
            message: 'Collection name is required'
          });
          /* istanbul ignore next */
          cov_u6x3jt6go().s[43]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_u6x3jt6go().b[8][1]++;
        }
        const analysis =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[44]++, yield firestoreOptimizationService_1.firestoreOptimizationService.analyzeQueryPerformance(collection,
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[9][0]++, filters) ||
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[9][1]++, {}),
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[10][0]++, options) ||
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[10][1]++, {})));
        const response =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[45]++, {
          success: true,
          data: {
            collection,
            analysis,
            timestamp: new Date().toISOString()
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[46]++;
        loggerService_1.logger.info('Query performance analysis completed', {
          metadata: {
            service: 'OptimizationController',
            collection,
            analysis
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[47]++;
        res.status(200).json(response);
      } catch (error) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[48]++;
        loggerService_1.logger.error('Error analyzing query performance', error, {
          metadata: {
            service: 'OptimizationController'
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[49]++;
        res.status(500).json({
          success: false,
          message: 'Error analyzing query performance',
          error: error.message
        });
      }
    });
  }
  createCompositeIndex(req, res) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[13]++;
    cov_u6x3jt6go().s[50]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[14]++;
      cov_u6x3jt6go().s[51]++;
      try {
        const {
          collection,
          fields,
          queryScopes
        } =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[52]++, req.body);
        /* istanbul ignore next */
        cov_u6x3jt6go().s[53]++;
        if (
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[12][0]++, !collection) ||
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[12][1]++, !fields) ||
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[12][2]++, !Array.isArray(fields))) {
          /* istanbul ignore next */
          cov_u6x3jt6go().b[11][0]++;
          cov_u6x3jt6go().s[54]++;
          res.status(400).json({
            success: false,
            message: 'Collection name and fields array are required'
          });
          /* istanbul ignore next */
          cov_u6x3jt6go().s[55]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_u6x3jt6go().b[11][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[56]++, yield firestoreOptimizationService_1.firestoreOptimizationService.createCompositeIndex(collection, fields,
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[13][0]++, queryScopes) ||
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[13][1]++, ['COLLECTION'])));
        const response =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[57]++, {
          success: result.success,
          message: result.success ?
          /* istanbul ignore next */
          (cov_u6x3jt6go().b[14][0]++, 'Composite index creation requested') :
          /* istanbul ignore next */
          (cov_u6x3jt6go().b[14][1]++, 'Failed to create composite index'),
          data: {
            collection,
            fields,
            indexName: result.indexName,
            timestamp: new Date().toISOString()
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[58]++;
        loggerService_1.logger.info('Composite index creation requested', {
          metadata: {
            service: 'OptimizationController',
            collection,
            fields,
            result
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[59]++;
        res.status(result.success ?
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[15][0]++, 200) :
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[15][1]++, 500)).json(response);
      } catch (error) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[60]++;
        loggerService_1.logger.error('Error creating composite index', error, {
          metadata: {
            service: 'OptimizationController'
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[61]++;
        res.status(500).json({
          success: false,
          message: 'Error creating composite index',
          error: error.message
        });
      }
    });
  }
  getOptimizationStats(req, res) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[15]++;
    cov_u6x3jt6go().s[62]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[16]++;
      cov_u6x3jt6go().s[63]++;
      try {
        const cacheStats =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[64]++, yield cacheService_1.cacheService.getStats());
        const firestoreStats =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[65]++, firestoreOptimizationService_1.firestoreOptimizationService.getStats());
        const queryStats =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[66]++, queryOptimizationMiddleware_1.QueryOptimizationMiddleware.getQueryStats(req));
        const response =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[67]++, {
          success: true,
          data: {
            cache: {
              hits: cacheStats.hits,
              misses: cacheStats.misses,
              keys: cacheStats.keys,
              hitRate: cacheStats.hits + cacheStats.misses > 0 ?
              /* istanbul ignore next */
              (cov_u6x3jt6go().b[16][0]++, cacheStats.hits / (cacheStats.hits + cacheStats.misses) * 100) :
              /* istanbul ignore next */
              (cov_u6x3jt6go().b[16][1]++, 0)
            },
            firestore: {
              cacheSize: firestoreStats.cacheSize,
              activeQueries: firestoreStats.activeQueries,
              config: firestoreStats.config
            },
            query: {
              queryTime: queryStats.queryTime,
              resultCount: queryStats.resultCount,
              cacheHit: queryStats.cacheHit,
              optimizationApplied: queryStats.optimizationApplied
            },
            system: {
              memoryUsage: process.memoryUsage(),
              uptime: process.uptime(),
              nodeVersion: process.version
            },
            timestamp: new Date().toISOString()
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[68]++;
        loggerService_1.logger.info('Optimization stats retrieved successfully', {
          metadata: {
            service: 'OptimizationController',
            stats: response.data
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[69]++;
        res.status(200).json(response);
      } catch (error) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[70]++;
        loggerService_1.logger.error('Error getting optimization stats', error, {
          metadata: {
            service: 'OptimizationController'
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[71]++;
        res.status(500).json({
          success: false,
          message: 'Error retrieving optimization statistics',
          error: error.message
        });
      }
    });
  }
  optimizeQuery(req, res) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[17]++;
    cov_u6x3jt6go().s[72]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[18]++;
      cov_u6x3jt6go().s[73]++;
      try {
        const {
          collection,
          filters,
          options
        } =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[74]++, req.body);
        /* istanbul ignore next */
        cov_u6x3jt6go().s[75]++;
        if (!collection) {
          /* istanbul ignore next */
          cov_u6x3jt6go().b[17][0]++;
          cov_u6x3jt6go().s[76]++;
          res.status(400).json({
            success: false,
            message: 'Collection name is required'
          });
          /* istanbul ignore next */
          cov_u6x3jt6go().s[77]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_u6x3jt6go().b[17][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[78]++, yield firestoreOptimizationService_1.firestoreOptimizationService.optimizedQuery(collection,
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[18][0]++, filters) ||
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[18][1]++, {}),
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[19][0]++, options) ||
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[19][1]++, {})));
        const response =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[79]++, {
          success: true,
          data: {
            collection,
            results: result.data,
            metrics: result.metrics,
            timestamp: new Date().toISOString()
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[80]++;
        loggerService_1.logger.info('Optimized query executed successfully', {
          metadata: {
            service: 'OptimizationController',
            collection,
            metrics: result.metrics
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[81]++;
        res.status(200).json(response);
      } catch (error) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[82]++;
        loggerService_1.logger.error('Error executing optimized query', error, {
          metadata: {
            service: 'OptimizationController'
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[83]++;
        res.status(500).json({
          success: false,
          message: 'Error executing optimized query',
          error: error.message
        });
      }
    });
  }
  batchOperations(req, res) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[19]++;
    cov_u6x3jt6go().s[84]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[20]++;
      cov_u6x3jt6go().s[85]++;
      try {
        const {
          operations
        } =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[86]++, req.body);
        /* istanbul ignore next */
        cov_u6x3jt6go().s[87]++;
        if (
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[21][0]++, !operations) ||
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[21][1]++, !Array.isArray(operations))) {
          /* istanbul ignore next */
          cov_u6x3jt6go().b[20][0]++;
          cov_u6x3jt6go().s[88]++;
          res.status(400).json({
            success: false,
            message: 'Operations array is required'
          });
          /* istanbul ignore next */
          cov_u6x3jt6go().s[89]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_u6x3jt6go().b[20][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[90]++, yield firestoreOptimizationService_1.firestoreOptimizationService.batchOperations(operations));
        const response =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[91]++, {
          success: result.success,
          message: result.success ?
          /* istanbul ignore next */
          (cov_u6x3jt6go().b[22][0]++, 'Batch operations completed successfully') :
          /* istanbul ignore next */
          (cov_u6x3jt6go().b[22][1]++, 'Some batch operations failed'),
          data: {
            totalOperations: operations.length,
            successfulResults: result.results.length,
            errors: result.errors,
            timestamp: new Date().toISOString()
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[92]++;
        loggerService_1.logger.info('Batch operations completed', {
          metadata: {
            service: 'OptimizationController',
            totalOperations: operations.length,
            success: result.success
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[93]++;
        res.status(result.success ?
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[23][0]++, 200) :
        /* istanbul ignore next */
        (cov_u6x3jt6go().b[23][1]++, 207)).json(response);
      } catch (error) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[94]++;
        loggerService_1.logger.error('Error executing batch operations', error, {
          metadata: {
            service: 'OptimizationController'
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[95]++;
        res.status(500).json({
          success: false,
          message: 'Error executing batch operations',
          error: error.message
        });
      }
    });
  }
  healthCheck(req, res) {
    /* istanbul ignore next */
    cov_u6x3jt6go().f[21]++;
    cov_u6x3jt6go().s[96]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_u6x3jt6go().f[22]++;
      cov_u6x3jt6go().s[97]++;
      try {
        const cacheStats =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[98]++, yield cacheService_1.cacheService.getStats());
        const firestoreStats =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[99]++, firestoreOptimizationService_1.firestoreOptimizationService.getStats());
        const healthStatus =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[100]++, {
          status: 'healthy',
          services: {
            cache: cacheStats.keys > 0 ?
            /* istanbul ignore next */
            (cov_u6x3jt6go().b[24][0]++, 'healthy') :
            /* istanbul ignore next */
            (cov_u6x3jt6go().b[24][1]++, 'warning'),
            firestore: firestoreStats.activeQueries < 100 ?
            /* istanbul ignore next */
            (cov_u6x3jt6go().b[25][0]++, 'healthy') :
            /* istanbul ignore next */
            (cov_u6x3jt6go().b[25][1]++, 'warning'),
            memory: process.memoryUsage().heapUsed < 500 * 1024 * 1024 ?
            /* istanbul ignore next */
            (cov_u6x3jt6go().b[26][0]++, 'healthy') :
            /* istanbul ignore next */
            (cov_u6x3jt6go().b[26][1]++, 'warning') // 500MB
          },
          timestamp: new Date().toISOString()
        });
        // Determine overall status
        const serviceStatuses =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[101]++, Object.values(healthStatus.services));
        /* istanbul ignore next */
        cov_u6x3jt6go().s[102]++;
        if (serviceStatuses.includes('unhealthy')) {
          /* istanbul ignore next */
          cov_u6x3jt6go().b[27][0]++;
          cov_u6x3jt6go().s[103]++;
          healthStatus.status = 'unhealthy';
        } else {
          /* istanbul ignore next */
          cov_u6x3jt6go().b[27][1]++;
          cov_u6x3jt6go().s[104]++;
          if (serviceStatuses.includes('warning')) {
            /* istanbul ignore next */
            cov_u6x3jt6go().b[28][0]++;
            cov_u6x3jt6go().s[105]++;
            healthStatus.status = 'degraded';
          } else
          /* istanbul ignore next */
          {
            cov_u6x3jt6go().b[28][1]++;
          }
        }
        const response =
        /* istanbul ignore next */
        (cov_u6x3jt6go().s[106]++, {
          success: true,
          data: healthStatus
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[107]++;
        loggerService_1.logger.info('Health check completed', {
          metadata: {
            service: 'OptimizationController',
            healthStatus
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[108]++;
        res.status(200).json(response);
      } catch (error) {
        /* istanbul ignore next */
        cov_u6x3jt6go().s[109]++;
        loggerService_1.logger.error('Error during health check', error, {
          metadata: {
            service: 'OptimizationController'
          }
        });
        /* istanbul ignore next */
        cov_u6x3jt6go().s[110]++;
        res.status(500).json({
          success: false,
          status: 'unhealthy',
          message: 'Health check failed',
          error: error.message
        });
      }
    });
  }
}
/* istanbul ignore next */
cov_u6x3jt6go().s[111]++;
exports.OptimizationController = OptimizationController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,