{"version":3,"names":["cov_1phtk7vunv","actualCoverage","firebase_1","s","require","loggerService_1","idriveE2_1","PaymentSystemService","constructor","f","COMMISSION_RATE","calculateCommission","eventAmount","commission","musicianAmount","totalAmount","commissionAmount","commissionRate","getUserBalance","userId","logger","info","metadata","balanceDoc","db","collection","doc","get","exists","b","initialBalance","balance","currency","lastUpdated","Date","toISOString","totalDeposits","totalWithdrawals","totalEarnings","set","data","error","Error","registerBankAccount","accountData","bankAccount","Object","assign","id","now","isVerified","isDefault","createdAt","updatedAt","userAccounts","where","size","update","getUserBankAccounts","accountsSnapshot","orderBy","docs","map","indexError","code","_a","message","includes","warn","accounts","sort","a","getTime","uploadDepositVoucher","depositData","amount","fileUrl","uploadToS3","voucherFile","buffer","originalname","mimetype","deposit","url","filename","uploadedAt","accountHolderName","accountNumber","bankName","depositDate","depositTime","referenceNumber","comments","status","verifyDeposit","depositId","adminId","approved","notes","verificationData","depositRef","depositDoc","updateData","verifiedBy","verifiedAt","updateUserBalance","processEventPayment","paymentData","eventId","organizerId","musicianId","eventPayment","paymentMethod","createMusicianEarning","earning","eventPaymentId","requestWithdrawal","withdrawalData","withdrawal","bankAccountId","processWithdrawal","withdrawalId","withdrawalRef","withdrawalDoc","processedBy","processedAt","transactionType","balanceRef","currentBalance","newBalance","Math","abs","updatedBalance","getPaymentStatistics","depositsSnapshot","reduce","sum","paymentsSnapshot","totalPayments","payment","totalCommissions","withdrawalsSnapshot","pendingDepositsSnapshot","pendingWithdrawalsSnapshot","pendingDepositsCount","pendingWithdrawalsCount","totalUsers","getTotalUsers","totalMusicians","getTotalMusicians","totalEvents","getTotalEvents","getPendingDeposits","getPendingWithdrawals","getMusicianEarnings","earningsSnapshot","usersSnapshot","musiciansSnapshot","eventsSnapshot","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\paymentSystemService.ts"],"sourcesContent":["import { db } from '../utils/firebase';\nimport { logger } from './loggerService';\nimport { uploadToS3 } from '../utils/idriveE2';\nimport { \n  BankAccount, \n  UserDeposit, \n  EventPayment, \n  MusicianEarnings, \n  WithdrawalRequest, \n  UserBalance, \n  CommissionCalculation,\n  PaymentStatistics,\n  BankAccountData,\n  DepositRequest,\n  WithdrawalRequestData,\n  EventPaymentRequest\n} from '../types/paymentTypes';\n\nexport class PaymentSystemService {\n  private readonly COMMISSION_RATE = 0.10; // 10% de comisión\n\n  /**\n   * Calcular comisión de la plataforma\n   */\n  private calculateCommission(eventAmount: number): CommissionCalculation {\n    const commission = eventAmount * this.COMMISSION_RATE;\n    const musicianAmount = eventAmount - commission;\n    \n    return {\n      totalAmount: eventAmount,\n      commissionAmount: commission,\n      musicianAmount: musicianAmount,\n      commissionRate: this.COMMISSION_RATE\n    };\n  }\n\n  /**\n   * Obtener balance de usuario\n   */\n  async getUserBalance(userId: string): Promise<UserBalance> {\n    try {\n      logger.info('Obteniendo balance de usuario', { metadata: { userId } });\n      \n      const balanceDoc = await db.collection('user_balances').doc(userId).get();\n      \n      if (!balanceDoc.exists) {\n        // Crear balance inicial si no existe\n        const initialBalance: UserBalance = {\n          userId,\n          balance: 0,\n          currency: 'RD$',\n          lastUpdated: new Date().toISOString(),\n          totalDeposits: 0,\n          totalWithdrawals: 0,\n          totalEarnings: 0\n        };\n        \n        await db.collection('user_balances').doc(userId).set(initialBalance);\n        return initialBalance;\n      }\n      \n      return balanceDoc.data() as UserBalance;\n    } catch (error) {\n      logger.error('Error obteniendo balance de usuario', error as Error, { \n        metadata: { userId } \n      });\n      throw new Error('Error obteniendo balance de usuario');\n    }\n  }\n\n  /**\n   * Registrar cuenta bancaria\n   */\n  async registerBankAccount(userId: string, accountData: BankAccountData): Promise<BankAccount> {\n    try {\n      logger.info('Registrando cuenta bancaria', { metadata: { userId } });\n      \n      const bankAccount: BankAccount = {\n        id: `bank_${Date.now()}_${userId}`,\n        userId,\n        ...accountData,\n        isVerified: false,\n        isDefault: false,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('bank_accounts').doc(bankAccount.id).set(bankAccount);\n      \n      // Si es la primera cuenta, establecer como default\n      const userAccounts = await db.collection('bank_accounts')\n        .where('userId', '==', userId)\n        .get();\n      \n      if (userAccounts.size === 1) {\n        bankAccount.isDefault = true;\n        await db.collection('bank_accounts').doc(bankAccount.id).update({ isDefault: true });\n      }\n      \n      return bankAccount;\n    } catch (error) {\n      logger.error('Error registrando cuenta bancaria', error as Error, { \n        metadata: { userId } \n      });\n      throw new Error('Error registrando cuenta bancaria');\n    }\n  }\n\n  /**\n   * Obtener cuentas bancarias de usuario\n   */\n  async getUserBankAccounts(userId: string): Promise<BankAccount[]> {\n    try {\n      logger.info('Obteniendo cuentas bancarias de usuario', { metadata: { userId } });\n      \n      try {\n        // Intentar consulta optimizada con índices\n        const accountsSnapshot = await db.collection('bank_accounts')\n          .where('userId', '==', userId)\n          .orderBy('isDefault', 'desc')\n          .orderBy('createdAt', 'desc')\n          .get();\n        \n        return accountsSnapshot.docs.map(doc => doc.data() as BankAccount);\n      } catch (indexError) {\n        // Si falla por falta de índice, usar consulta simple y ordenar en memoria\n        const error = indexError as any;\n        if (error.code === 'FAILED_PRECONDITION' && error.message?.includes('index')) {\n          logger.warn('Índice no disponible, usando ordenamiento en memoria', { \n            metadata: { userId, error: error.message } \n          });\n          \n          const accountsSnapshot = await db.collection('bank_accounts')\n            .where('userId', '==', userId)\n            .get();\n          \n          const accounts = accountsSnapshot.docs.map(doc => doc.data() as BankAccount);\n          \n          // Ordenar por default primero, luego por fecha de creación\n          return accounts.sort((a, b) => {\n            // Primero por isDefault (descendente)\n            if (a.isDefault !== b.isDefault) {\n              return b.isDefault ? 1 : -1;\n            }\n            // Luego por createdAt (descendente)\n            return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n          });\n        } else {\n          // Si es otro tipo de error, relanzarlo\n          throw indexError;\n        }\n      }\n    } catch (error) {\n      logger.error('Error obteniendo cuentas bancarias', error as Error, { \n        metadata: { userId } \n      });\n      throw new Error('Error obteniendo cuentas bancarias');\n    }\n  }\n\n  /**\n   * Subir comprobante de depósito\n   */\n  async uploadDepositVoucher(userId: string, depositData: DepositRequest): Promise<UserDeposit> {\n    try {\n      logger.info('Subiendo comprobante de depósito', { metadata: { userId, amount: depositData.amount } });\n      \n      // Subir archivo a S3\n      const fileUrl = await uploadToS3(\n        depositData.voucherFile.buffer,\n        depositData.voucherFile.originalname || 'voucher.jpg',\n        depositData.voucherFile.mimetype || 'image/jpeg',\n        'deposits'\n      );\n      \n      const deposit: UserDeposit = {\n        id: `deposit_${Date.now()}_${userId}`,\n        userId,\n        amount: depositData.amount,\n        currency: 'RD$',\n        voucherFile: {\n          url: fileUrl,\n          filename: depositData.voucherFile.originalname || 'voucher.jpg',\n          uploadedAt: new Date().toISOString()\n        },\n        // Información del depósito bancario\n        accountHolderName: depositData.accountHolderName,\n        accountNumber: depositData.accountNumber,\n        bankName: depositData.bankName,\n        depositDate: depositData.depositDate,\n        depositTime: depositData.depositTime,\n        referenceNumber: depositData.referenceNumber,\n        comments: depositData.comments,\n        // Estado inicial\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('user_deposits').doc(deposit.id).set(deposit);\n      \n      return deposit;\n    } catch (error) {\n      logger.error('Error subiendo comprobante de depósito', error as Error, { \n        metadata: { userId } \n      });\n      throw new Error('Error subiendo comprobante de depósito');\n    }\n  }\n\n  /**\n   * Verificar depósito (admin)\n   */\n  async verifyDeposit(\n    depositId: string, \n    adminId: string, \n    approved: boolean, \n    notes?: string,\n    verificationData?: {\n      bankDepositDate: string;\n      bankDepositTime: string;\n      referenceNumber: string;\n      accountLastFourDigits: string;\n      verifiedBy: string;\n    }\n  ): Promise<void> {\n    try {\n      logger.info('Verificando depósito', { metadata: { depositId, adminId, approved } });\n      \n      const depositRef = db.collection('user_deposits').doc(depositId);\n      const depositDoc = await depositRef.get();\n      \n      if (!depositDoc.exists) {\n        throw new Error('Depósito no encontrado');\n      }\n      \n      const deposit = depositDoc.data() as UserDeposit;\n      \n      if (deposit.status !== 'pending') {\n        throw new Error('Depósito ya fue procesado');\n      }\n      \n      const updateData: Partial<UserDeposit> = {\n        status: approved ? 'approved' : 'rejected',\n        verifiedBy: adminId,\n        verifiedAt: new Date().toISOString(),\n        notes,\n        updatedAt: new Date().toISOString()\n      };\n\n      // Si fue aprobado y se proporcionan datos de verificación, agregarlos\n      if (approved && verificationData) {\n        updateData.verificationData = {\n          ...verificationData,\n          verifiedBy: adminId\n        };\n      }\n      \n      await depositRef.update(updateData);\n      \n      // Si fue aprobado, actualizar balance del usuario\n      if (approved) {\n        await this.updateUserBalance(deposit.userId, deposit.amount, 'deposit');\n      }\n    } catch (error) {\n      logger.error('Error verificando depósito', error as Error, { \n        metadata: { depositId, adminId } \n      });\n      throw new Error('Error verificando depósito');\n    }\n  }\n\n  /**\n   * Procesar pago de evento\n   */\n  async processEventPayment(paymentData: EventPaymentRequest): Promise<EventPayment> {\n    try {\n      logger.info('Procesando pago de evento', { \n        metadata: { \n          eventId: paymentData.eventId,\n          organizerId: paymentData.organizerId,\n          musicianId: paymentData.musicianId,\n          amount: paymentData.amount\n        }\n      });\n      \n      const commission = this.calculateCommission(paymentData.amount);\n      \n      const eventPayment: EventPayment = {\n        id: `payment_${Date.now()}_${paymentData.eventId}`,\n        eventId: paymentData.eventId,\n        organizerId: paymentData.organizerId,\n        musicianId: paymentData.musicianId,\n        amount: paymentData.amount,\n        currency: 'RD$',\n        commission: commission.commissionAmount,\n        musicianAmount: commission.musicianAmount,\n        status: 'completed',\n        paymentMethod: 'transfer',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('event_payments').doc(eventPayment.id).set(eventPayment);\n      \n      // Crear ganancia para el músico\n      await this.createMusicianEarning(eventPayment);\n      \n      // Actualizar balance del organizador (deducir pago)\n      await this.updateUserBalance(paymentData.organizerId, -paymentData.amount, 'payment');\n      \n      return eventPayment;\n    } catch (error) {\n      logger.error('Error procesando pago de evento', error as Error, { \n        metadata: { eventId: paymentData.eventId } \n      });\n      throw new Error('Error procesando pago de evento');\n    }\n  }\n\n  /**\n   * Crear ganancia para músico\n   */\n  private async createMusicianEarning(eventPayment: EventPayment): Promise<void> {\n    try {\n      const earning: MusicianEarnings = {\n        id: `earning_${Date.now()}_${eventPayment.musicianId}`,\n        musicianId: eventPayment.musicianId,\n        eventId: eventPayment.eventId,\n        eventPaymentId: eventPayment.id,\n        amount: eventPayment.musicianAmount,\n        currency: 'RD$',\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('musician_earnings').doc(earning.id).set(earning);\n      \n      // Actualizar balance del músico\n      await this.updateUserBalance(eventPayment.musicianId, eventPayment.musicianAmount, 'earning');\n    } catch (error) {\n      logger.error('Error creando ganancia para músico', error as Error, { \n        metadata: { musicianId: eventPayment.musicianId, eventId: eventPayment.eventId } \n      });\n      throw new Error('Error creando ganancia para músico');\n    }\n  }\n\n  /**\n   * Solicitar retiro de ganancias\n   */\n  async requestWithdrawal(musicianId: string, withdrawalData: WithdrawalRequestData): Promise<WithdrawalRequest> {\n    try {\n      logger.info('Solicitando retiro de ganancias', { metadata: { musicianId, amount: withdrawalData.amount } });\n      \n      // Verificar que el usuario tenga suficiente balance\n      const balance = await this.getUserBalance(musicianId);\n      if (balance.balance < withdrawalData.amount) {\n        throw new Error('Saldo insuficiente para el retiro');\n      }\n      \n      const withdrawal: WithdrawalRequest = {\n        id: `withdrawal_${Date.now()}_${musicianId}`,\n        musicianId,\n        amount: withdrawalData.amount,\n        currency: 'RD$',\n        bankAccountId: withdrawalData.bankAccountId,\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      await db.collection('withdrawal_requests').doc(withdrawal.id).set(withdrawal);\n      \n      return withdrawal;\n    } catch (error) {\n      logger.error('Error solicitando retiro', error as Error, { \n        metadata: { musicianId } \n      });\n      throw new Error('Error solicitando retiro');\n    }\n  }\n\n  /**\n   * Procesar retiro (admin)\n   */\n  async processWithdrawal(withdrawalId: string, adminId: string, approved: boolean, notes?: string): Promise<void> {\n    try {\n      logger.info('Procesando retiro', { metadata: { withdrawalId, adminId, approved } });\n      \n      const withdrawalRef = db.collection('withdrawal_requests').doc(withdrawalId);\n      const withdrawalDoc = await withdrawalRef.get();\n      \n      if (!withdrawalDoc.exists) {\n        throw new Error('Solicitud de retiro no encontrada');\n      }\n      \n      const withdrawal = withdrawalDoc.data() as WithdrawalRequest;\n      \n      if (withdrawal.status !== 'pending') {\n        throw new Error('Solicitud de retiro ya fue procesada');\n      }\n      \n      const updateData: Partial<WithdrawalRequest> = {\n        status: approved ? 'approved' : 'rejected',\n        processedBy: adminId,\n        processedAt: new Date().toISOString(),\n        notes,\n        updatedAt: new Date().toISOString()\n      };\n      \n      await withdrawalRef.update(updateData);\n      \n      // Si fue aprobado, actualizar balance del usuario\n      if (approved) {\n        await this.updateUserBalance(withdrawal.musicianId, -withdrawal.amount, 'withdrawal');\n      }\n    } catch (error) {\n      logger.error('Error procesando retiro', error as Error, { \n        metadata: { withdrawalId, adminId } \n      });\n      throw new Error('Error procesando retiro');\n    }\n  }\n\n  /**\n   * Actualizar balance de usuario\n   */\n  private async updateUserBalance(userId: string, amount: number, transactionType: 'deposit' | 'payment' | 'earning' | 'withdrawal'): Promise<void> {\n    try {\n      const balanceRef = db.collection('user_balances').doc(userId);\n      const balanceDoc = await balanceRef.get();\n      \n      let currentBalance = 0;\n      let totalDeposits = 0;\n      let totalWithdrawals = 0;\n      let totalEarnings = 0;\n      \n      if (balanceDoc.exists) {\n        const balance = balanceDoc.data() as UserBalance;\n        currentBalance = balance.balance;\n        totalDeposits = balance.totalDeposits;\n        totalWithdrawals = balance.totalWithdrawals;\n        totalEarnings = balance.totalEarnings;\n      }\n      \n      // Actualizar balance y estadísticas\n      const newBalance = currentBalance + amount;\n      \n      switch (transactionType) {\n        case 'deposit':\n          totalDeposits += amount;\n          break;\n        case 'withdrawal':\n          totalWithdrawals += Math.abs(amount);\n          break;\n        case 'earning':\n          totalEarnings += amount;\n          break;\n      }\n      \n      const updatedBalance: UserBalance = {\n        userId,\n        balance: newBalance,\n        currency: 'RD$',\n        lastUpdated: new Date().toISOString(),\n        totalDeposits,\n        totalWithdrawals,\n        totalEarnings\n      };\n      \n      await balanceRef.set(updatedBalance);\n    } catch (error) {\n      logger.error('Error actualizando balance de usuario', error as Error, { \n        metadata: { userId, amount, transactionType } \n      });\n      throw new Error('Error actualizando balance de usuario');\n    }\n  }\n\n  /**\n   * Obtener estadísticas de pagos (admin)\n   */\n  async getPaymentStatistics(): Promise<PaymentStatistics> {\n    try {\n      // Obtener total de depósitos\n      const depositsSnapshot = await db.collection('user_deposits')\n        .where('status', '==', 'approved')\n        .get();\n      \n      const totalDeposits = depositsSnapshot.docs.reduce((sum, doc) => {\n        const deposit = doc.data() as UserDeposit;\n        return sum + deposit.amount;\n      }, 0);\n      \n      // Obtener total de pagos de eventos\n      const paymentsSnapshot = await db.collection('event_payments')\n        .where('status', '==', 'completed')\n        .get();\n      \n      const totalPayments = paymentsSnapshot.docs.reduce((sum, doc) => {\n        const payment = doc.data() as EventPayment;\n        return sum + payment.amount;\n      }, 0);\n      \n      const totalCommissions = paymentsSnapshot.docs.reduce((sum, doc) => {\n        const payment = doc.data() as EventPayment;\n        return sum + payment.commission;\n      }, 0);\n      \n      // Obtener total de retiros\n      const withdrawalsSnapshot = await db.collection('withdrawal_requests')\n        .where('status', '==', 'approved')\n        .get();\n      \n      const totalWithdrawals = withdrawalsSnapshot.docs.reduce((sum, doc) => {\n        const withdrawal = doc.data() as WithdrawalRequest;\n        return sum + withdrawal.amount;\n      }, 0);\n      \n      // Obtener depósitos pendientes\n      const pendingDepositsSnapshot = await db.collection('user_deposits')\n        .where('status', '==', 'pending')\n        .get();\n      \n      // Obtener retiros pendientes\n      const pendingWithdrawalsSnapshot = await db.collection('withdrawal_requests')\n        .where('status', '==', 'pending')\n        .get();\n      \n      return {\n        totalDeposits,\n        totalPayments,\n        totalCommissions,\n        totalWithdrawals,\n        pendingDepositsCount: pendingDepositsSnapshot.size,\n        pendingWithdrawalsCount: pendingWithdrawalsSnapshot.size,\n        totalUsers: await this.getTotalUsers(),\n        totalMusicians: await this.getTotalMusicians(),\n        totalEvents: await this.getTotalEvents(),\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      logger.error('Error obteniendo estadísticas de pagos', error as Error);\n      throw new Error('Error obteniendo estadísticas de pagos');\n    }\n  }\n\n  /**\n   * Obtener depósitos pendientes (admin)\n   */\n  async getPendingDeposits(): Promise<UserDeposit[]> {\n    try {\n      const depositsSnapshot = await db.collection('user_deposits')\n        .where('status', '==', 'pending')\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return depositsSnapshot.docs.map(doc => doc.data() as UserDeposit);\n    } catch (error) {\n      logger.error('Error obteniendo depósitos pendientes', error as Error);\n      throw new Error('Error obteniendo depósitos pendientes');\n    }\n  }\n\n  /**\n   * Obtener retiros pendientes (admin)\n   */\n  async getPendingWithdrawals(): Promise<WithdrawalRequest[]> {\n    try {\n      const withdrawalsSnapshot = await db.collection('withdrawal_requests')\n        .where('status', '==', 'pending')\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return withdrawalsSnapshot.docs.map(doc => doc.data() as WithdrawalRequest);\n    } catch (error) {\n      logger.error('Error obteniendo retiros pendientes', error as Error);\n      throw new Error('Error obteniendo retiros pendientes');\n    }\n  }\n\n  /**\n   * Obtener ganancias de músico\n   */\n  async getMusicianEarnings(musicianId: string): Promise<MusicianEarnings[]> {\n    try {\n      const earningsSnapshot = await db.collection('musician_earnings')\n        .where('musicianId', '==', musicianId)\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return earningsSnapshot.docs.map(doc => doc.data() as MusicianEarnings);\n    } catch (error) {\n      logger.error('Error obteniendo ganancias de músico', error as Error, { \n        metadata: { musicianId } \n      });\n      throw new Error('Error obteniendo ganancias de músico');\n    }\n  }\n\n  // Métodos auxiliares para estadísticas\n  private async getTotalUsers(): Promise<number> {\n    const usersSnapshot = await db.collection('users').get();\n    return usersSnapshot.size;\n  }\n\n  private async getTotalMusicians(): Promise<number> {\n    const musiciansSnapshot = await db.collection('users')\n      .where('role', '==', 'musician')\n      .get();\n    return musiciansSnapshot.size;\n  }\n\n  private async getTotalEvents(): Promise<number> {\n    const eventsSnapshot = await db.collection('events').get();\n    return eventsSnapshot.size;\n  }\n} "],"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","ignoreList":[]}