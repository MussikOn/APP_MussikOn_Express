{"version":3,"names":["cov_218vpdjnp9","actualCoverage","express_1","s","__importDefault","require","loggerService_1","firebase_1","authMiddleware_1","adm","default","use","json","delete","authMiddleware","req","res","f","__awaiter","snapshot","db","collection","get","empty","b","status","message","deletePromises","forEach","doc","push","id","Promise","all","error","logger","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\superAdminRouter.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\r\nimport { logger } from '../services/loggerService';\r\nimport { db } from '../utils/firebase';\r\nimport cors from 'cors';\r\nimport { authMiddleware } from '../middleware/authMiddleware';\r\n\r\nconst adm = express();\r\nadm.use(express.json());\r\n\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: Admin\r\n *   description: Endpoints de administraciÃ³n y superusuario\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /superAdmin/deleteAllUsers:\r\n *   delete:\r\n *     tags: [Admin]\r\n *     summary: Elimina todos los usuarios de Firestore (protegido)\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Todos los usuarios eliminados exitosamente\r\n *       404:\r\n *         description: No hay usuarios para eliminar\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *       500:\r\n *         description: Error al eliminar todos los usuarios\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n */\r\nadm.delete(\r\n  '/deleteAllUsers',\r\n  authMiddleware,\r\n  async (req: Request, res: Response) => {\r\n    try {\r\n      const snapshot = await db.collection('users').get();\r\n\r\n      if (snapshot.empty) {\r\n        res.status(404).json({ message: 'No hay usuarios para eliminar' });\r\n      }\r\n      const deletePromises: Promise<FirebaseFirestore.WriteResult>[] = [];\r\n\r\n      snapshot.forEach(doc => {\r\n        deletePromises.push(db.collection('users').doc(doc.id).delete());\r\n      });\r\n\r\n      await Promise.all(deletePromises);\r\n\r\n      res\r\n        .status(200)\r\n        .json({ message: 'Todos los usuarios fueron eliminados exitosamente' });\r\n    } catch (error) {\r\n      logger.error('Error al eliminar todos los usuarios:', error as Error);\r\n      res.status(500).json({ message: 'Error al eliminar todos los usuarios' });\r\n    }\r\n  }\r\n);\r\n\r\nexport default adm;\r\n"],"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","ignoreList":[]}