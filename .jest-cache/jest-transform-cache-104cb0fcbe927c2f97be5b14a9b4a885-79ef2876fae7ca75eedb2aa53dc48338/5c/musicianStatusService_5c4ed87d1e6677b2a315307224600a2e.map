{"version":3,"names":["cov_c6xbo6x52","actualCoverage","firebase_1","s","require","loggerService_1","MusicianStatusService","constructor","f","COLLECTION","HEARTBEAT_INTERVAL","OFFLINE_THRESHOLD","updateStatus","musicianId","data","logger","info","context","metadata","now","Date","statusRef","db","collection","doc","updateData","Object","assign","lastSeen","toISOString","updatedAt","existingDoc","get","exists","b","newStatus","id","isOnline","_a","currentLocation","availability","isAvailable","_c","_b","availableFrom","_d","availableTo","_e","maxDistance","_g","_f","preferences","eventTypes","instruments","minBudget","maxBudget","performance","rating","totalEvents","completedEvents","responseTime","createdAt","set","status","update","updatedDoc","updatedStatus","updates","error","getStatus","lastSeenDate","timeSinceLastSeen","getTime","getOnlineMusicians","filters","query","where","snapshot","musicians","docs","map","applyFilters","sort","a","scoreA","scoreB","count","length","heartbeat","location","setOffline","updatePreferences","Error","currentStatus","updatedPreferences","updatePerformance","updatedPerformance","cleanupOfflineStatuses","cutoffTime","batch","forEach","delete","ref","commit","deletedCount","filter","musician","eventType","includes","instrument","distance","calculateDistance","latitude","longitude","radius","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","Math","sin","cos","c","atan2","sqrt","deg","PI","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\musicianStatusService.ts"],"sourcesContent":["import { db } from '../utils/firebase';\r\nimport { logger } from './loggerService';\r\n\r\nexport interface MusicianStatus {\r\n  id: string;\r\n  musicianId: string;\r\n  isOnline: boolean;\r\n  lastSeen: string; // ISO string para compatibilidad con Firestore\r\n  currentLocation?: {\r\n    latitude: number;\r\n    longitude: number;\r\n    address?: string;\r\n  };\r\n  availability: {\r\n    isAvailable: boolean;\r\n    availableFrom?: string; // ISO string para compatibilidad con Firestore\r\n    availableTo?: string; // ISO string para compatibilidad con Firestore\r\n    maxDistance?: number; // km\r\n  };\r\n  preferences: {\r\n    eventTypes: string[];\r\n    instruments: string[];\r\n    minBudget: number;\r\n    maxBudget: number;\r\n  };\r\n  performance: {\r\n    rating: number;\r\n    totalEvents: number;\r\n    completedEvents: number;\r\n    responseTime: number; // minutos promedio\r\n  };\r\n  createdAt: string; // ISO string para compatibilidad con Firestore\r\n  updatedAt: string; // ISO string para compatibilidad con Firestore\r\n}\r\n\r\nexport interface StatusUpdateData {\r\n  isOnline?: boolean;\r\n  currentLocation?: {\r\n    latitude: number;\r\n    longitude: number;\r\n    address?: string;\r\n  };\r\n  availability?: {\r\n    isAvailable: boolean;\r\n    availableFrom?: string; // ISO string para compatibilidad con Firestore\r\n    availableTo?: string; // ISO string para compatibilidad con Firestore\r\n    maxDistance?: number;\r\n  };\r\n}\r\n\r\nexport class MusicianStatusService {\r\n  private readonly COLLECTION = 'musician_status';\r\n  private readonly HEARTBEAT_INTERVAL = 5 * 60 * 1000; // 5 minutos\r\n  private readonly OFFLINE_THRESHOLD = 10 * 60 * 1000; // 10 minutos\r\n\r\n  /**\r\n   * Actualizar estado del músico\r\n   */\r\n  async updateStatus(musicianId: string, data: StatusUpdateData): Promise<MusicianStatus> {\r\n    try {\r\n      logger.info('Actualizando estado del músico:', { context: 'Status', metadata: { musicianId } });\r\n      \r\n      const now = new Date();\r\n      const statusRef = db.collection(this.COLLECTION).doc(musicianId);\r\n      \r\n      const updateData: Partial<MusicianStatus> = {\r\n        ...data,\r\n        lastSeen: now.toISOString(),\r\n        updatedAt: now.toISOString()\r\n      };\r\n\r\n      // Si es la primera vez, crear el documento\r\n      const existingDoc = await statusRef.get();\r\n      if (!existingDoc.exists) {\r\n        const newStatus: MusicianStatus = {\r\n          id: musicianId,\r\n          musicianId,\r\n          isOnline: data.isOnline ?? true,\r\n          lastSeen: now.toISOString(),\r\n          currentLocation: data.currentLocation,\r\n          availability: {\r\n            isAvailable: data.availability?.isAvailable ?? true,\r\n            availableFrom: data.availability?.availableFrom,\r\n            availableTo: data.availability?.availableTo,\r\n            maxDistance: data.availability?.maxDistance ?? 50\r\n          },\r\n          preferences: {\r\n            eventTypes: [],\r\n            instruments: [],\r\n            minBudget: 0,\r\n            maxBudget: 10000\r\n          },\r\n          performance: {\r\n            rating: 0,\r\n            totalEvents: 0,\r\n            completedEvents: 0,\r\n            responseTime: 0\r\n          },\r\n          createdAt: now.toISOString(),\r\n          updatedAt: now.toISOString()\r\n        };\r\n\r\n        await statusRef.set(newStatus);\r\n        logger.info('Estado de músico creado', { \r\n          metadata: { musicianId, status: newStatus }\r\n        });\r\n        return newStatus;\r\n      }\r\n\r\n      // Actualizar documento existente\r\n      await statusRef.update(updateData);\r\n      \r\n      const updatedDoc = await statusRef.get();\r\n      const updatedStatus = updatedDoc.data() as MusicianStatus;\r\n      \r\n      logger.info('Estado de músico actualizado', { \r\n        metadata: { musicianId, updates: updateData }\r\n      });\r\n      return updatedStatus;\r\n    } catch (error) {\r\n      logger.error('Error actualizando estado del músico', error as Error, { \r\n        metadata: { musicianId }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener estado actual del músico\r\n   */\r\n  async getStatus(musicianId: string): Promise<MusicianStatus | null> {\r\n    try {\r\n      logger.info('Obteniendo estado del músico:', { context: 'Status', metadata: { musicianId } });\r\n      \r\n      const statusRef = db.collection(this.COLLECTION).doc(musicianId);\r\n      const doc = await statusRef.get();\r\n      \r\n      if (!doc.exists) {\r\n        return null;\r\n      }\r\n\r\n      const status = doc.data() as MusicianStatus;\r\n      \r\n      // Verificar si el músico está realmente online basado en lastSeen\r\n      const lastSeenDate = new Date(status.lastSeen);\r\n      const timeSinceLastSeen = Date.now() - lastSeenDate.getTime();\r\n      if (timeSinceLastSeen > this.OFFLINE_THRESHOLD && status.isOnline) {\r\n        // Actualizar automáticamente a offline\r\n        await this.updateStatus(musicianId, { isOnline: false });\r\n        status.isOnline = false;\r\n      }\r\n\r\n      return status;\r\n    } catch (error) {\r\n      logger.error('Error obteniendo estado del músico', error as Error, { \r\n        metadata: { musicianId }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener músicos online disponibles\r\n   */\r\n  async getOnlineMusicians(filters?: {\r\n    location?: { latitude: number; longitude: number; radius: number };\r\n    eventType?: string;\r\n    instrument?: string;\r\n    minBudget?: number;\r\n    maxBudget?: number;\r\n  }): Promise<MusicianStatus[]> {\r\n    try {\r\n      logger.info('[src/services/musicianStatusService.ts:125] Buscando músicos online disponibles');\r\n      \r\n      let query = db.collection(this.COLLECTION)\r\n        .where('isOnline', '==', true)\r\n        .where('availability.isAvailable', '==', true);\r\n\r\n      const snapshot = await query.get();\r\n      let musicians = snapshot.docs.map(doc => doc.data() as MusicianStatus);\r\n\r\n      // Aplicar filtros adicionales\r\n      if (filters) {\r\n        musicians = this.applyFilters(musicians, filters);\r\n      }\r\n\r\n      // Ordenar por rating y tiempo de respuesta\r\n      musicians.sort((a, b) => {\r\n        const scoreA = (a.performance.rating * 0.7) + ((100 - a.performance.responseTime) * 0.3);\r\n        const scoreB = (b.performance.rating * 0.7) + ((100 - b.performance.responseTime) * 0.3);\r\n        return scoreB - scoreA;\r\n      });\r\n\r\n      logger.info('Músicos online encontrados', { \r\n        metadata: { count: musicians.length }\r\n      });\r\n      return musicians;\r\n    } catch (error) {\r\n      logger.error('Error obteniendo músicos online', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Heartbeat para mantener estado online\r\n   */\r\n  async heartbeat(musicianId: string, location?: { latitude: number; longitude: number }): Promise<void> {\r\n    try {\r\n      logger.info('Heartbeat del músico:', { context: 'Status', metadata: { musicianId } });\r\n      \r\n      const updateData: StatusUpdateData = {\r\n        isOnline: true\r\n      };\r\n\r\n      if (location) {\r\n        updateData.currentLocation = location;\r\n      }\r\n\r\n      await this.updateStatus(musicianId, updateData);\r\n    } catch (error) {\r\n      logger.error('Error en heartbeat del músico', error as Error, { \r\n        metadata: { musicianId }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marcar músico como offline\r\n   */\r\n  async setOffline(musicianId: string): Promise<void> {\r\n    try {\r\n      logger.info('Marcando músico como offline:', { context: 'Status', metadata: { musicianId } });\r\n      \r\n      await this.updateStatus(musicianId, { isOnline: false });\r\n    } catch (error) {\r\n      logger.error('Error marcando músico como offline', error as Error, { \r\n        metadata: { musicianId }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualizar preferencias del músico\r\n   */\r\n  async updatePreferences(\r\n    musicianId: string, \r\n    preferences: Partial<MusicianStatus['preferences']>\r\n  ): Promise<MusicianStatus> {\r\n    try {\r\n      logger.info('Actualizando preferencias del músico:', { context: 'Status', metadata: { musicianId } });\r\n      \r\n      const statusRef = db.collection(this.COLLECTION).doc(musicianId);\r\n      const doc = await statusRef.get();\r\n      \r\n      if (!doc.exists) {\r\n        throw new Error('Estado del músico no encontrado');\r\n      }\r\n\r\n      const currentStatus = doc.data() as MusicianStatus;\r\n      const updatedPreferences = { ...currentStatus.preferences, ...preferences };\r\n\r\n      await statusRef.update({\r\n        preferences: updatedPreferences,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n\r\n      const updatedDoc = await statusRef.get();\r\n      return updatedDoc.data() as MusicianStatus;\r\n    } catch (error) {\r\n      logger.error('Error actualizando preferencias del músico', error as Error, { \r\n        metadata: { musicianId }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualizar métricas de rendimiento\r\n   */\r\n  async updatePerformance(\r\n    musicianId: string,\r\n    performance: Partial<MusicianStatus['performance']>\r\n  ): Promise<MusicianStatus> {\r\n    try {\r\n      logger.info('Actualizando rendimiento del músico:', { context: 'Status', metadata: { musicianId } });\r\n      \r\n      const statusRef = db.collection(this.COLLECTION).doc(musicianId);\r\n      const doc = await statusRef.get();\r\n      \r\n      if (!doc.exists) {\r\n        throw new Error('Estado del músico no encontrado');\r\n      }\r\n\r\n      const currentStatus = doc.data() as MusicianStatus;\r\n      const updatedPerformance = { ...currentStatus.performance, ...performance };\r\n\r\n      await statusRef.update({\r\n        performance: updatedPerformance,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n\r\n      const updatedDoc = await statusRef.get();\r\n      return updatedDoc.data() as MusicianStatus;\r\n    } catch (error) {\r\n      logger.error('Error actualizando rendimiento del músico', error as Error, { \r\n        metadata: { musicianId }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpiar estados offline antiguos\r\n   */\r\n  async cleanupOfflineStatuses(): Promise<number> {\r\n    try {\r\n      logger.info('[src/services/musicianStatusService.ts:250] Limpiando estados offline antiguos');\r\n      \r\n      const cutoffTime = new Date(Date.now() - (24 * 60 * 60 * 1000)); // 24 horas\r\n      \r\n      const query = db.collection(this.COLLECTION)\r\n        .where('isOnline', '==', false)\r\n        .where('lastSeen', '<', cutoffTime);\r\n\r\n      const snapshot = await query.get();\r\n      const batch = db.batch();\r\n      \r\n      snapshot.docs.forEach(doc => {\r\n        batch.delete(doc.ref);\r\n      });\r\n\r\n      await batch.commit();\r\n      \r\n      const deletedCount = snapshot.docs.length;\r\n      logger.info('Estados offline limpiados', { \r\n        metadata: { deletedCount }\r\n      });\r\n      \r\n      return deletedCount;\r\n    } catch (error) {\r\n      logger.error('Error limpiando estados offline', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Aplicar filtros a la lista de músicos\r\n   */\r\n  private applyFilters(musicians: MusicianStatus[], filters: any): MusicianStatus[] {\r\n    return musicians.filter(musician => {\r\n      // Filtro por tipo de evento\r\n      if (filters.eventType && !musician.preferences.eventTypes.includes(filters.eventType)) {\r\n        return false;\r\n      }\r\n\r\n      // Filtro por instrumento\r\n      if (filters.instrument && !musician.preferences.instruments.includes(filters.instrument)) {\r\n        return false;\r\n      }\r\n\r\n      // Filtro por presupuesto\r\n      if (filters.minBudget && musician.preferences.maxBudget < filters.minBudget) {\r\n        return false;\r\n      }\r\n      if (filters.maxBudget && musician.preferences.minBudget > filters.maxBudget) {\r\n        return false;\r\n      }\r\n\r\n      // Filtro por ubicación\r\n      if (filters.location && musician.currentLocation) {\r\n        const distance = this.calculateDistance(\r\n          filters.location.latitude,\r\n          filters.location.longitude,\r\n          musician.currentLocation.latitude,\r\n          musician.currentLocation.longitude\r\n        );\r\n        \r\n        if (distance > filters.location.radius) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calcular distancia entre dos puntos (fórmula de Haversine)\r\n   */\r\n  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\r\n    const R = 6371; // Radio de la Tierra en km\r\n    const dLat = this.deg2rad(lat2 - lat1);\r\n    const dLon = this.deg2rad(lon2 - lon1);\r\n    const a = \r\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * \r\n      Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c;\r\n  }\r\n\r\n  private deg2rad(deg: number): number {\r\n    return deg * (Math.PI/180);\r\n  }\r\n} "],"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","ignoreList":[]}