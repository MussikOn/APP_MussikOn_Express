{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\advancedSearchController.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\advancedSearchController.test.ts"],"sourcesContent":["import { AdvancedSearchController } from '../controllers/advancedSearchController';\r\nimport { MusicianStatusService } from '../services/musicianStatusService';\r\nimport { CalendarConflictService } from '../services/calendarConflictService';\r\nimport { RateCalculationService } from '../services/rateCalculationService';\r\n\r\n// Mock de los servicios\r\njest.mock('../services/musicianStatusService');\r\njest.mock('../services/calendarConflictService');\r\njest.mock('../services/rateCalculationService');\r\n\r\ndescribe('AdvancedSearchController', () => {\r\n  let controller: AdvancedSearchController;\r\n  let mockRequest: any;\r\n  let mockResponse: any;\r\n\r\n  beforeEach(() => {\r\n    controller = new AdvancedSearchController();\r\n    mockRequest = {\r\n      body: {},\r\n      params: {},\r\n      query: {}\r\n    };\r\n    mockResponse = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn().mockReturnThis()\r\n    };\r\n\r\n    // Limpiar todos los mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('searchAvailableMusicians', () => {\r\n    it('should return error when required parameters are missing', async () => {\r\n      mockRequest.body = {};\r\n\r\n      await controller.searchAvailableMusicians(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Faltan parámetros requeridos: eventType, instrument, location, eventDate, duration'\r\n      });\r\n    });\r\n\r\n    it('should return empty results when no musicians are available', async () => {\r\n      mockRequest.body = {\r\n        eventType: 'wedding',\r\n        instrument: 'guitarra',\r\n        location: 'Madrid',\r\n        eventDate: '2024-12-25T20:00:00Z',\r\n        duration: 120\r\n      };\r\n\r\n      // Mock de servicios usando la instancia del controlador\r\n      jest.spyOn(controller['musicianStatusService'], 'getOnlineMusicians').mockResolvedValue([]);\r\n\r\n      await controller.searchAvailableMusicians(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: {\r\n          availableMusicians: [],\r\n          unavailableMusicians: [],\r\n          conflicts: {},\r\n          message: 'No hay músicos disponibles en este momento'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should return available musicians with rates', async () => {\r\n      mockRequest.body = {\r\n        eventType: 'wedding',\r\n        instrument: 'guitarra',\r\n        location: 'Madrid',\r\n        eventDate: '2024-12-25T20:00:00Z',\r\n        duration: 120\r\n      };\r\n\r\n      const mockMusicians = [\r\n        {\r\n          id: 'musician1',\r\n          musicianId: 'musician1',\r\n          isOnline: true,\r\n          lastSeen: new Date().toISOString(),\r\n          availability: { isAvailable: true },\r\n          preferences: {\r\n            eventTypes: ['wedding'],\r\n            instruments: ['guitarra'],\r\n            minBudget: 100,\r\n            maxBudget: 1000\r\n          },\r\n          performance: { rating: 4.5, responseTime: 30, totalEvents: 50, completedEvents: 45 },\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        }\r\n      ];\r\n\r\n      const mockRateResult = {\r\n        baseRate: 50,\r\n        finalRate: 150,\r\n        breakdown: [],\r\n        factors: {\r\n          baseRate: 50,\r\n          experienceMultiplier: 1.2,\r\n          demandMultiplier: 1.1,\r\n          locationMultiplier: 1.3,\r\n          eventTypeMultiplier: 1.5,\r\n          durationMultiplier: 1.0,\r\n          urgencyMultiplier: 1.0,\r\n          seasonalityMultiplier: 1.0\r\n        },\r\n        recommendations: { suggestedRate: 150, marketAverage: 120, competitorRates: [140, 160] }\r\n      };\r\n\r\n      // Mock de servicios usando la instancia del controlador\r\n      jest.spyOn(controller['musicianStatusService'], 'getOnlineMusicians').mockResolvedValue(mockMusicians);\r\n      jest.spyOn(controller['calendarConflictService'], 'checkMultipleMusiciansAvailability').mockResolvedValue({\r\n        availableMusicians: ['musician1'],\r\n        unavailableMusicians: [],\r\n        conflicts: {}\r\n      });\r\n      jest.spyOn(controller['rateCalculationService'], 'calculateRate').mockResolvedValue(mockRateResult);\r\n\r\n      await controller.searchAvailableMusicians(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: expect.objectContaining({\r\n          availableMusicians: expect.arrayContaining([\r\n            expect.objectContaining({\r\n              musicianId: 'musician1',\r\n              rate: 150,\r\n            }),\r\n          ]),\r\n        }),\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('checkMusicianAvailability', () => {\r\n    it('should return error when required parameters are missing', async () => {\r\n      mockRequest.body = {};\r\n\r\n      await controller.checkMusicianAvailability(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Faltan parámetros requeridos: musicianId, eventDate, duration'\r\n      });\r\n    });\r\n\r\n    it('should return not found when musician does not exist', async () => {\r\n      mockRequest.body = {\r\n        musicianId: 'nonexistent',\r\n        eventDate: '2024-12-25T20:00:00Z',\r\n        duration: 120\r\n      };\r\n\r\n      const mockMusicianStatusService = MusicianStatusService as jest.MockedClass<typeof MusicianStatusService>;\r\n      mockMusicianStatusService.prototype.getStatus = jest.fn().mockResolvedValue(null);\r\n\r\n      await controller.checkMusicianAvailability(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Músico no encontrado'\r\n      });\r\n    });\r\n\r\n    it('should return unavailable when musician is offline', async () => {\r\n      mockRequest.body = {\r\n        musicianId: 'musician1',\r\n        eventDate: '2024-12-25T20:00:00Z',\r\n        duration: 120\r\n      };\r\n\r\n      const mockStatus = {\r\n        id: 'musician1',\r\n        musicianId: 'musician1',\r\n        isOnline: false,\r\n        lastSeen: new Date().toISOString(),\r\n        availability: { isAvailable: false },\r\n        preferences: {\r\n          eventTypes: [],\r\n          instruments: [],\r\n          minBudget: 0,\r\n          maxBudget: 10000\r\n        },\r\n        performance: {\r\n          rating: 0,\r\n          totalEvents: 0,\r\n          completedEvents: 0,\r\n          responseTime: 0\r\n        },\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      // Mock de servicios usando la instancia del controlador\r\n      jest.spyOn(controller['musicianStatusService'], 'getStatus').mockResolvedValue(mockStatus);\r\n\r\n      await controller.checkMusicianAvailability(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: {\r\n          isAvailable: false,\r\n          reason: 'Músico no está online o no disponible',\r\n          status: mockStatus\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('updateMusicianStatus', () => {\r\n    it('should return error when musicianId is missing', async () => {\r\n      mockRequest.params = {};\r\n\r\n      await controller.updateMusicianStatus(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'ID del músico requerido'\r\n      });\r\n    });\r\n\r\n    it('should update musician status successfully', async () => {\r\n      mockRequest.params = { musicianId: 'musician1' };\r\n      mockRequest.body = {\r\n        isOnline: true,\r\n        currentLocation: { latitude: 40.4168, longitude: -3.7038 }\r\n      };\r\n\r\n      const mockUpdatedStatus = {\r\n        id: 'musician1',\r\n        musicianId: 'musician1',\r\n        isOnline: true,\r\n        lastSeen: new Date().toISOString(),\r\n        currentLocation: { latitude: 40.4168, longitude: -3.7038 },\r\n        availability: {\r\n          isAvailable: true,\r\n          maxDistance: 50\r\n        },\r\n        preferences: {\r\n          eventTypes: [],\r\n          instruments: [],\r\n          minBudget: 0,\r\n          maxBudget: 10000\r\n        },\r\n        performance: {\r\n          rating: 0,\r\n          totalEvents: 0,\r\n          completedEvents: 0,\r\n          responseTime: 0\r\n        },\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      // Mock de servicios usando la instancia del controlador\r\n      jest.spyOn(controller['musicianStatusService'], 'updateStatus').mockResolvedValue(mockUpdatedStatus);\r\n\r\n      await controller.updateMusicianStatus(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockUpdatedStatus\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('musicianHeartbeat', () => {\r\n    it('should return error when musicianId is missing', async () => {\r\n      mockRequest.params = {};\r\n\r\n      await controller.musicianHeartbeat(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'ID del músico requerido'\r\n      });\r\n    });\r\n\r\n    it('should register heartbeat successfully', async () => {\r\n      mockRequest.params = { musicianId: 'musician1' };\r\n      mockRequest.body = {\r\n        location: { latitude: 40.4168, longitude: -3.7038 }\r\n      };\r\n\r\n      // Mock de servicios usando la instancia del controlador\r\n      jest.spyOn(controller['musicianStatusService'], 'heartbeat').mockResolvedValue(undefined);\r\n\r\n      await controller.musicianHeartbeat(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Heartbeat registrado correctamente'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getDailyAvailability', () => {\r\n    it('should return error when musicianId is missing', async () => {\r\n      mockRequest.params = {};\r\n\r\n      await controller.getDailyAvailability(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'ID del músico requerido'\r\n      });\r\n    });\r\n\r\n    it('should return daily availability', async () => {\r\n      mockRequest.params = { musicianId: 'musician1' };\r\n      mockRequest.query = { date: '2024-12-25' };\r\n\r\n      const mockAvailability = {\r\n        date: new Date('2024-12-25'),\r\n        busySlots: [],\r\n        availableSlots: [\r\n          { startTime: new Date('2024-12-25T10:00:00'), endTime: new Date('2024-12-25T12:00:00'), duration: 120 }\r\n        ]\r\n      };\r\n\r\n      // Mock de servicios usando la instancia del controlador\r\n      jest.spyOn(controller['calendarConflictService'], 'getDailyAvailability').mockResolvedValue(mockAvailability);\r\n\r\n      await controller.getDailyAvailability(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockAvailability\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('calculateMusicianRate', () => {\r\n    it('should return error when required parameters are missing', async () => {\r\n      mockRequest.body = {};\r\n\r\n      await controller.calculateMusicianRate(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Faltan parámetros requeridos'\r\n      });\r\n    });\r\n\r\n    it('should calculate rate successfully', async () => {\r\n      mockRequest.body = {\r\n        musicianId: 'musician1',\r\n        eventType: 'wedding',\r\n        duration: 120,\r\n        location: 'Madrid',\r\n        eventDate: '2024-12-25T20:00:00Z',\r\n        instrument: 'guitarra'\r\n      };\r\n\r\n      const mockRateResult = {\r\n        baseRate: 50,\r\n        finalRate: 150,\r\n        breakdown: [],\r\n        factors: {\r\n          baseRate: 50,\r\n          experienceMultiplier: 1.2,\r\n          demandMultiplier: 1.1,\r\n          locationMultiplier: 1.3,\r\n          eventTypeMultiplier: 1.5,\r\n          durationMultiplier: 1.0,\r\n          urgencyMultiplier: 1.0,\r\n          seasonalityMultiplier: 1.0\r\n        },\r\n        recommendations: {\r\n          suggestedRate: 150,\r\n          marketAverage: 120,\r\n          competitorRates: [140, 160]\r\n        }\r\n      };\r\n\r\n      // Mock de servicios usando la instancia del controlador\r\n      jest.spyOn(controller['rateCalculationService'], 'calculateRate').mockResolvedValue(mockRateResult);\r\n\r\n      await controller.calculateMusicianRate(mockRequest, mockResponse);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockRateResult\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('calculateRelevanceScore', () => {\r\n    it('should calculate relevance score correctly', () => {\r\n      const musician = {\r\n        status: {\r\n          performance: {\r\n            rating: 4.5,\r\n            responseTime: 30,\r\n            totalEvents: 50\r\n          }\r\n        },\r\n        rate: 150\r\n      };\r\n\r\n      const score = (controller as any).calculateRelevanceScore(musician);\r\n\r\n      // Score esperado: rating(36) + response(22.5) + price(5) + experience(10) = 73.5\r\n      expect(score).toBeGreaterThan(0);\r\n      expect(score).toBeLessThanOrEqual(100);\r\n    });\r\n  });\r\n}); "],"version":3}