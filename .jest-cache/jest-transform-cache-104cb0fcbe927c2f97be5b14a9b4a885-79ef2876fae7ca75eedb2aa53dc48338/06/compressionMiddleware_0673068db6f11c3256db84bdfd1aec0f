60841f1d12c12f4115a144b8dd5f8d5c
"use strict";

/* istanbul ignore next */
function cov_ernx8492a() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\compressionMiddleware.ts";
  var hash = "c64051c4b9a42f6b98825f8cf914387e5f1fe169";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\compressionMiddleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 71
        }
      },
      "2": {
        start: {
          line: 4,
          column: 24
        },
        end: {
          line: 4,
          column: 60
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 105
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 37
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 13,
          column: 9
        }
      },
      "6": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 80
        }
      },
      "7": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 46
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "9": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 29,
          column: 13
        }
      },
      "10": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 58
        }
      },
      "11": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 23,
          column: 19
        }
      },
      "12": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 28,
          column: 19
        }
      },
      "13": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "15": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 25
        }
      },
      "16": {
        start: {
          line: 43,
          column: 30
        },
        end: {
          line: 43,
          column: 76
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "18": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 25
        }
      },
      "19": {
        start: {
          line: 48,
          column: 28
        },
        end: {
          line: 48,
          column: 57
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "21": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 25
        }
      },
      "22": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 20
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "24": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "25": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 30
        }
      },
      "26": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "27": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 30
        }
      },
      "28": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 53
        }
      },
      "29": {
        start: {
          line: 71,
          column: 29
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "30": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 37
        }
      },
      "31": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "32": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "33": {
        start: {
          line: 83,
          column: 35
        },
        end: {
          line: 83,
          column: 55
        }
      },
      "34": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 87,
          column: 17
        }
      },
      "35": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 38
        }
      },
      "36": {
        start: {
          line: 89,
          column: 35
        },
        end: {
          line: 89,
          column: 64
        }
      },
      "37": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 62
        }
      },
      "38": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 57
        }
      },
      "39": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 34
        }
      },
      "40": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 24
        }
      },
      "41": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "42": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 24
        }
      },
      "43": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 104,
          column: 75
        }
      },
      "44": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 105,
          column: 58
        }
      },
      "45": {
        start: {
          line: 106,
          column: 31
        },
        end: {
          line: 108,
          column: 24
        }
      },
      "46": {
        start: {
          line: 109,
          column: 33
        },
        end: {
          line: 110,
          column: 70
        }
      },
      "47": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "48": {
        start: {
          line: 119,
          column: 0
        },
        end: {
          line: 119,
          column: 54
        }
      },
      "49": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 121,
          column: 81
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 32
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 28
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 37
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 17
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 58
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 59,
            column: 16
          }
        },
        loc: {
          start: {
            line: 59,
            column: 35
          },
          end: {
            line: 77,
            column: 9
          }
        },
        line: 59
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 44
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 79
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 41
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 103
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 6,
            column: 16
          },
          end: {
            line: 6,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 6,
            column: 26
          },
          end: {
            line: 6,
            column: 28
          }
        }],
        line: 6
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 29,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 29,
            column: 13
          }
        }, {
          start: {
            line: 25,
            column: 17
          },
          end: {
            line: 29,
            column: 13
          }
        }],
        line: 19
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 43
          }
        }, {
          start: {
            line: 39,
            column: 47
          },
          end: {
            line: 39,
            column: 95
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 71
          }
        }, {
          start: {
            line: 43,
            column: 75
          },
          end: {
            line: 43,
            column: 76
          }
        }],
        line: 43
      },
      "6": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "7": {
        loc: {
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 44,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 44,
            column: 51
          }
        }, {
          start: {
            line: 44,
            column: 55
          },
          end: {
            line: 44,
            column: 59
          }
        }],
        line: 44
      },
      "8": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "9": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 53,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 23
          }
        }, {
          start: {
            line: 49,
            column: 28
          },
          end: {
            line: 49,
            column: 58
          }
        }, {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 42
          }
        }, {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 42
          }
        }, {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 51
          }
        }, {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 52
          }
        }],
        line: 49
      },
      "10": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "11": {
        loc: {
          start: {
            line: 61,
            column: 16
          },
          end: {
            line: 61,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 16
          },
          end: {
            line: 61,
            column: 33
          }
        }, {
          start: {
            line: 61,
            column: 37
          },
          end: {
            line: 61,
            column: 78
          }
        }],
        line: 61
      },
      "12": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "13": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "14": {
        loc: {
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "15": {
        loc: {
          start: {
            line: 85,
            column: 41
          },
          end: {
            line: 85,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 41
          },
          end: {
            line: 85,
            column: 94
          }
        }, {
          start: {
            line: 85,
            column: 98
          },
          end: {
            line: 85,
            column: 102
          }
        }],
        line: 85
      },
      "16": {
        loc: {
          start: {
            line: 104,
            column: 29
          },
          end: {
            line: 104,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 29
          },
          end: {
            line: 104,
            column: 70
          }
        }, {
          start: {
            line: 104,
            column: 74
          },
          end: {
            line: 104,
            column: 75
          }
        }],
        line: 104
      },
      "17": {
        loc: {
          start: {
            line: 106,
            column: 31
          },
          end: {
            line: 108,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 72
          }
        }, {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 108,
            column: 24
          }
        }],
        line: 106
      },
      "18": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 56
          }
        }, {
          start: {
            line: 107,
            column: 60
          },
          end: {
            line: 107,
            column: 72
          }
        }],
        line: 107
      },
      "19": {
        loc: {
          start: {
            line: 109,
            column: 33
          },
          end: {
            line: 110,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 66
          }
        }, {
          start: {
            line: 110,
            column: 69
          },
          end: {
            line: 110,
            column: 70
          }
        }],
        line: 109
      },
      "20": {
        loc: {
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 115,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 115,
            column: 31
          }
        }, {
          start: {
            line: 115,
            column: 35
          },
          end: {
            line: 115,
            column: 41
          }
        }],
        line: 115
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0, 0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\compressionMiddleware.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\compressionMiddleware.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\r\nimport { logger } from '../services/loggerService';\r\n\r\nexport interface CompressionOptions {\r\n  threshold?: number; // Minimum size to compress (bytes)\r\n  level?: number; // Compression level (1-9)\r\n  filter?: (req: Request, res: Response) => boolean;\r\n}\r\n\r\nexport class CompressionMiddleware {\r\n  private static instance: CompressionMiddleware;\r\n  private compression: any;\r\n  private options: CompressionOptions;\r\n\r\n  private constructor(options: CompressionOptions = {}) {\r\n    this.options = {\r\n      threshold: 1024, // 1KB\r\n      level: 6,\r\n      filter: this.defaultFilter,\r\n      ...options\r\n    };\r\n    this.initializeCompression();\r\n  }\r\n\r\n  public static getInstance(options?: CompressionOptions): CompressionMiddleware {\r\n    if (!CompressionMiddleware.instance) {\r\n      CompressionMiddleware.instance = new CompressionMiddleware(options);\r\n    }\r\n    return CompressionMiddleware.instance;\r\n  }\r\n\r\n  private initializeCompression(): void {\r\n    try {\r\n      // Use compression library if available\r\n      if (process.env.ENABLE_COMPRESSION === 'true') {\r\n        this.compression = require('compression');\r\n        logger.info('Compression middleware initialized', { \r\n          metadata: { service: 'CompressionMiddleware', options: this.options } \r\n        });\r\n      } else {\r\n        logger.info('Compression disabled by environment variable', { \r\n          metadata: { service: 'CompressionMiddleware' } \r\n        });\r\n      }\r\n    } catch (error) {\r\n      logger.warn('Compression library not available, using fallback', { \r\n        metadata: { service: 'CompressionMiddleware' } \r\n      });\r\n    }\r\n  }\r\n\r\n  private defaultFilter(req: Request, res: Response): boolean {\r\n    // Don't compress if request doesn't accept gzip\r\n    if (!req.headers['accept-encoding'] || !req.headers['accept-encoding'].includes('gzip')) {\r\n      return false;\r\n    }\r\n\r\n    // Don't compress small responses\r\n    const contentLength = parseInt(res.getHeader('content-length') as string) || 0;\r\n    if (contentLength < (this.options.threshold || 1024)) {\r\n      return false;\r\n    }\r\n\r\n    // Don't compress already compressed content\r\n    const contentType = res.getHeader('content-type') as string;\r\n    if (contentType && (\r\n      contentType.includes('image/') ||\r\n      contentType.includes('video/') ||\r\n      contentType.includes('audio/') ||\r\n      contentType.includes('application/zip') ||\r\n      contentType.includes('application/gzip')\r\n    )) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public middleware() {\r\n    return (req: Request, res: Response, next: NextFunction) => {\r\n      // Skip compression if not enabled or library not available\r\n      if (!this.compression || process.env.ENABLE_COMPRESSION !== 'true') {\r\n        return next();\r\n      }\r\n\r\n      // Check if response should be compressed\r\n      if (!this.options.filter!(req, res)) {\r\n        return next();\r\n      }\r\n\r\n      // Add compression headers\r\n      res.setHeader('Vary', 'Accept-Encoding');\r\n      \r\n      // Use compression middleware\r\n      const compress = this.compression({\r\n        threshold: this.options.threshold,\r\n        level: this.options.level,\r\n        filter: this.options.filter\r\n      });\r\n\r\n      compress(req, res, next);\r\n    };\r\n  }\r\n\r\n  public static compressResponse(data: any, req: Request, res: Response): Buffer | string {\r\n    try {\r\n      // Simple compression for JSON responses\r\n      if (typeof data === 'object') {\r\n        const jsonString = JSON.stringify(data);\r\n        \r\n        // Only compress if response is large enough\r\n        if (jsonString.length < (CompressionMiddleware.getInstance().options.threshold || 1024)) {\r\n          return jsonString;\r\n        }\r\n\r\n        // Simple compression by removing unnecessary whitespace\r\n        const compressed = JSON.stringify(data, null, 0);\r\n        res.setHeader('Content-Encoding', 'identity');\r\n        res.setHeader('X-Compression', 'simple');\r\n        \r\n        return compressed;\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('Error compressing response', error as Error, { \r\n        metadata: { service: 'CompressionMiddleware' } \r\n      });\r\n      return data;\r\n    }\r\n  }\r\n\r\n  public static getCompressionStats(req: Request, res: Response): {\r\n    originalSize: number;\r\n    compressedSize: number;\r\n    compressionRatio: number;\r\n    algorithm: string;\r\n  } {\r\n    const originalSize = parseInt(res.getHeader('content-length') as string) || 0;\r\n    const encoding = res.getHeader('content-encoding') as string;\r\n    const compressedSize = encoding === 'gzip' ? \r\n      parseInt(res.getHeader('x-compressed-size') as string) || originalSize : \r\n      originalSize;\r\n    \r\n    const compressionRatio = originalSize > 0 ? \r\n      ((originalSize - compressedSize) / originalSize) * 100 : 0;\r\n\r\n    return {\r\n      originalSize,\r\n      compressedSize,\r\n      compressionRatio,\r\n      algorithm: encoding || 'none'\r\n    };\r\n  }\r\n}\r\n\r\n// Export middleware function\r\nexport const compressionMiddleware = CompressionMiddleware.getInstance().middleware(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c64051c4b9a42f6b98825f8cf914387e5f1fe169"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ernx8492a = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ernx8492a();
cov_ernx8492a().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ernx8492a().s[1]++;
exports.compressionMiddleware = exports.CompressionMiddleware = void 0;
const loggerService_1 =
/* istanbul ignore next */
(cov_ernx8492a().s[2]++, require("../services/loggerService"));
class CompressionMiddleware {
  constructor(options =
  /* istanbul ignore next */
  (cov_ernx8492a().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_ernx8492a().f[0]++;
    cov_ernx8492a().s[3]++;
    this.options = Object.assign({
      threshold: 1024,
      level: 6,
      filter: this.defaultFilter
    }, options);
    /* istanbul ignore next */
    cov_ernx8492a().s[4]++;
    this.initializeCompression();
  }
  static getInstance(options) {
    /* istanbul ignore next */
    cov_ernx8492a().f[1]++;
    cov_ernx8492a().s[5]++;
    if (!CompressionMiddleware.instance) {
      /* istanbul ignore next */
      cov_ernx8492a().b[1][0]++;
      cov_ernx8492a().s[6]++;
      CompressionMiddleware.instance = new CompressionMiddleware(options);
    } else
    /* istanbul ignore next */
    {
      cov_ernx8492a().b[1][1]++;
    }
    cov_ernx8492a().s[7]++;
    return CompressionMiddleware.instance;
  }
  initializeCompression() {
    /* istanbul ignore next */
    cov_ernx8492a().f[2]++;
    cov_ernx8492a().s[8]++;
    try {
      /* istanbul ignore next */
      cov_ernx8492a().s[9]++;
      // Use compression library if available
      if (process.env.ENABLE_COMPRESSION === 'true') {
        /* istanbul ignore next */
        cov_ernx8492a().b[2][0]++;
        cov_ernx8492a().s[10]++;
        this.compression = require('compression');
        /* istanbul ignore next */
        cov_ernx8492a().s[11]++;
        loggerService_1.logger.info('Compression middleware initialized', {
          metadata: {
            service: 'CompressionMiddleware',
            options: this.options
          }
        });
      } else {
        /* istanbul ignore next */
        cov_ernx8492a().b[2][1]++;
        cov_ernx8492a().s[12]++;
        loggerService_1.logger.info('Compression disabled by environment variable', {
          metadata: {
            service: 'CompressionMiddleware'
          }
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_ernx8492a().s[13]++;
      loggerService_1.logger.warn('Compression library not available, using fallback', {
        metadata: {
          service: 'CompressionMiddleware'
        }
      });
    }
  }
  defaultFilter(req, res) {
    /* istanbul ignore next */
    cov_ernx8492a().f[3]++;
    cov_ernx8492a().s[14]++;
    // Don't compress if request doesn't accept gzip
    if (
    /* istanbul ignore next */
    (cov_ernx8492a().b[4][0]++, !req.headers['accept-encoding']) ||
    /* istanbul ignore next */
    (cov_ernx8492a().b[4][1]++, !req.headers['accept-encoding'].includes('gzip'))) {
      /* istanbul ignore next */
      cov_ernx8492a().b[3][0]++;
      cov_ernx8492a().s[15]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_ernx8492a().b[3][1]++;
    }
    // Don't compress small responses
    const contentLength =
    /* istanbul ignore next */
    (cov_ernx8492a().s[16]++,
    /* istanbul ignore next */
    (cov_ernx8492a().b[5][0]++, parseInt(res.getHeader('content-length'))) ||
    /* istanbul ignore next */
    (cov_ernx8492a().b[5][1]++, 0));
    /* istanbul ignore next */
    cov_ernx8492a().s[17]++;
    if (contentLength < (
    /* istanbul ignore next */
    (cov_ernx8492a().b[7][0]++, this.options.threshold) ||
    /* istanbul ignore next */
    (cov_ernx8492a().b[7][1]++, 1024))) {
      /* istanbul ignore next */
      cov_ernx8492a().b[6][0]++;
      cov_ernx8492a().s[18]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_ernx8492a().b[6][1]++;
    }
    // Don't compress already compressed content
    const contentType =
    /* istanbul ignore next */
    (cov_ernx8492a().s[19]++, res.getHeader('content-type'));
    /* istanbul ignore next */
    cov_ernx8492a().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_ernx8492a().b[9][0]++, contentType) && (
    /* istanbul ignore next */
    (cov_ernx8492a().b[9][1]++, contentType.includes('image/')) ||
    /* istanbul ignore next */
    (cov_ernx8492a().b[9][2]++, contentType.includes('video/')) ||
    /* istanbul ignore next */
    (cov_ernx8492a().b[9][3]++, contentType.includes('audio/')) ||
    /* istanbul ignore next */
    (cov_ernx8492a().b[9][4]++, contentType.includes('application/zip')) ||
    /* istanbul ignore next */
    (cov_ernx8492a().b[9][5]++, contentType.includes('application/gzip')))) {
      /* istanbul ignore next */
      cov_ernx8492a().b[8][0]++;
      cov_ernx8492a().s[21]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_ernx8492a().b[8][1]++;
    }
    cov_ernx8492a().s[22]++;
    return true;
  }
  middleware() {
    /* istanbul ignore next */
    cov_ernx8492a().f[4]++;
    cov_ernx8492a().s[23]++;
    return (req, res, next) => {
      /* istanbul ignore next */
      cov_ernx8492a().f[5]++;
      cov_ernx8492a().s[24]++;
      // Skip compression if not enabled or library not available
      if (
      /* istanbul ignore next */
      (cov_ernx8492a().b[11][0]++, !this.compression) ||
      /* istanbul ignore next */
      (cov_ernx8492a().b[11][1]++, process.env.ENABLE_COMPRESSION !== 'true')) {
        /* istanbul ignore next */
        cov_ernx8492a().b[10][0]++;
        cov_ernx8492a().s[25]++;
        return next();
      } else
      /* istanbul ignore next */
      {
        cov_ernx8492a().b[10][1]++;
      }
      // Check if response should be compressed
      cov_ernx8492a().s[26]++;
      if (!this.options.filter(req, res)) {
        /* istanbul ignore next */
        cov_ernx8492a().b[12][0]++;
        cov_ernx8492a().s[27]++;
        return next();
      } else
      /* istanbul ignore next */
      {
        cov_ernx8492a().b[12][1]++;
      }
      // Add compression headers
      cov_ernx8492a().s[28]++;
      res.setHeader('Vary', 'Accept-Encoding');
      // Use compression middleware
      const compress =
      /* istanbul ignore next */
      (cov_ernx8492a().s[29]++, this.compression({
        threshold: this.options.threshold,
        level: this.options.level,
        filter: this.options.filter
      }));
      /* istanbul ignore next */
      cov_ernx8492a().s[30]++;
      compress(req, res, next);
    };
  }
  static compressResponse(data, req, res) {
    /* istanbul ignore next */
    cov_ernx8492a().f[6]++;
    cov_ernx8492a().s[31]++;
    try {
      /* istanbul ignore next */
      cov_ernx8492a().s[32]++;
      // Simple compression for JSON responses
      if (typeof data === 'object') {
        /* istanbul ignore next */
        cov_ernx8492a().b[13][0]++;
        const jsonString =
        /* istanbul ignore next */
        (cov_ernx8492a().s[33]++, JSON.stringify(data));
        // Only compress if response is large enough
        /* istanbul ignore next */
        cov_ernx8492a().s[34]++;
        if (jsonString.length < (
        /* istanbul ignore next */
        (cov_ernx8492a().b[15][0]++, CompressionMiddleware.getInstance().options.threshold) ||
        /* istanbul ignore next */
        (cov_ernx8492a().b[15][1]++, 1024))) {
          /* istanbul ignore next */
          cov_ernx8492a().b[14][0]++;
          cov_ernx8492a().s[35]++;
          return jsonString;
        } else
        /* istanbul ignore next */
        {
          cov_ernx8492a().b[14][1]++;
        }
        // Simple compression by removing unnecessary whitespace
        const compressed =
        /* istanbul ignore next */
        (cov_ernx8492a().s[36]++, JSON.stringify(data, null, 0));
        /* istanbul ignore next */
        cov_ernx8492a().s[37]++;
        res.setHeader('Content-Encoding', 'identity');
        /* istanbul ignore next */
        cov_ernx8492a().s[38]++;
        res.setHeader('X-Compression', 'simple');
        /* istanbul ignore next */
        cov_ernx8492a().s[39]++;
        return compressed;
      } else
      /* istanbul ignore next */
      {
        cov_ernx8492a().b[13][1]++;
      }
      cov_ernx8492a().s[40]++;
      return data;
    } catch (error) {
      /* istanbul ignore next */
      cov_ernx8492a().s[41]++;
      loggerService_1.logger.error('Error compressing response', error, {
        metadata: {
          service: 'CompressionMiddleware'
        }
      });
      /* istanbul ignore next */
      cov_ernx8492a().s[42]++;
      return data;
    }
  }
  static getCompressionStats(req, res) {
    /* istanbul ignore next */
    cov_ernx8492a().f[7]++;
    const originalSize =
    /* istanbul ignore next */
    (cov_ernx8492a().s[43]++,
    /* istanbul ignore next */
    (cov_ernx8492a().b[16][0]++, parseInt(res.getHeader('content-length'))) ||
    /* istanbul ignore next */
    (cov_ernx8492a().b[16][1]++, 0));
    const encoding =
    /* istanbul ignore next */
    (cov_ernx8492a().s[44]++, res.getHeader('content-encoding'));
    const compressedSize =
    /* istanbul ignore next */
    (cov_ernx8492a().s[45]++, encoding === 'gzip' ?
    /* istanbul ignore next */
    (cov_ernx8492a().b[17][0]++,
    /* istanbul ignore next */
    (cov_ernx8492a().b[18][0]++, parseInt(res.getHeader('x-compressed-size'))) ||
    /* istanbul ignore next */
    (cov_ernx8492a().b[18][1]++, originalSize)) :
    /* istanbul ignore next */
    (cov_ernx8492a().b[17][1]++, originalSize));
    const compressionRatio =
    /* istanbul ignore next */
    (cov_ernx8492a().s[46]++, originalSize > 0 ?
    /* istanbul ignore next */
    (cov_ernx8492a().b[19][0]++, (originalSize - compressedSize) / originalSize * 100) :
    /* istanbul ignore next */
    (cov_ernx8492a().b[19][1]++, 0));
    /* istanbul ignore next */
    cov_ernx8492a().s[47]++;
    return {
      originalSize,
      compressedSize,
      compressionRatio,
      algorithm:
      /* istanbul ignore next */
      (cov_ernx8492a().b[20][0]++, encoding) ||
      /* istanbul ignore next */
      (cov_ernx8492a().b[20][1]++, 'none')
    };
  }
}
/* istanbul ignore next */
cov_ernx8492a().s[48]++;
exports.CompressionMiddleware = CompressionMiddleware;
// Export middleware function
/* istanbul ignore next */
cov_ernx8492a().s[49]++;
exports.compressionMiddleware = CompressionMiddleware.getInstance().middleware();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZXJueDg0OTJhIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwibG9nZ2VyU2VydmljZV8xIiwicmVxdWlyZSIsIkNvbXByZXNzaW9uTWlkZGxld2FyZSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImIiLCJmIiwiT2JqZWN0IiwiYXNzaWduIiwidGhyZXNob2xkIiwibGV2ZWwiLCJmaWx0ZXIiLCJkZWZhdWx0RmlsdGVyIiwiaW5pdGlhbGl6ZUNvbXByZXNzaW9uIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsInByb2Nlc3MiLCJlbnYiLCJFTkFCTEVfQ09NUFJFU1NJT04iLCJjb21wcmVzc2lvbiIsImxvZ2dlciIsImluZm8iLCJtZXRhZGF0YSIsInNlcnZpY2UiLCJlcnJvciIsIndhcm4iLCJyZXEiLCJyZXMiLCJoZWFkZXJzIiwiaW5jbHVkZXMiLCJjb250ZW50TGVuZ3RoIiwicGFyc2VJbnQiLCJnZXRIZWFkZXIiLCJjb250ZW50VHlwZSIsIm1pZGRsZXdhcmUiLCJuZXh0Iiwic2V0SGVhZGVyIiwiY29tcHJlc3MiLCJjb21wcmVzc1Jlc3BvbnNlIiwiZGF0YSIsImpzb25TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwibGVuZ3RoIiwiY29tcHJlc3NlZCIsImdldENvbXByZXNzaW9uU3RhdHMiLCJvcmlnaW5hbFNpemUiLCJlbmNvZGluZyIsImNvbXByZXNzZWRTaXplIiwiY29tcHJlc3Npb25SYXRpbyIsImFsZ29yaXRobSIsImV4cG9ydHMiLCJjb21wcmVzc2lvbk1pZGRsZXdhcmUiXSwic291cmNlcyI6WyJDOlxcc3JjXFxBUFBfTXVzc2lrT25cXEFQUF9NdXNzaWtPbl9FeHByZXNzXFxzcmNcXG1pZGRsZXdhcmVcXGNvbXByZXNzaW9uTWlkZGxld2FyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL3NlcnZpY2VzL2xvZ2dlclNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21wcmVzc2lvbk9wdGlvbnMge1xyXG4gIHRocmVzaG9sZD86IG51bWJlcjsgLy8gTWluaW11bSBzaXplIHRvIGNvbXByZXNzIChieXRlcylcclxuICBsZXZlbD86IG51bWJlcjsgLy8gQ29tcHJlc3Npb24gbGV2ZWwgKDEtOSlcclxuICBmaWx0ZXI/OiAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tcHJlc3Npb25NaWRkbGV3YXJlIHtcclxuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogQ29tcHJlc3Npb25NaWRkbGV3YXJlO1xyXG4gIHByaXZhdGUgY29tcHJlc3Npb246IGFueTtcclxuICBwcml2YXRlIG9wdGlvbnM6IENvbXByZXNzaW9uT3B0aW9ucztcclxuXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihvcHRpb25zOiBDb21wcmVzc2lvbk9wdGlvbnMgPSB7fSkge1xyXG4gICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICB0aHJlc2hvbGQ6IDEwMjQsIC8vIDFLQlxyXG4gICAgICBsZXZlbDogNixcclxuICAgICAgZmlsdGVyOiB0aGlzLmRlZmF1bHRGaWx0ZXIsXHJcbiAgICAgIC4uLm9wdGlvbnNcclxuICAgIH07XHJcbiAgICB0aGlzLmluaXRpYWxpemVDb21wcmVzc2lvbigpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZShvcHRpb25zPzogQ29tcHJlc3Npb25PcHRpb25zKTogQ29tcHJlc3Npb25NaWRkbGV3YXJlIHtcclxuICAgIGlmICghQ29tcHJlc3Npb25NaWRkbGV3YXJlLmluc3RhbmNlKSB7XHJcbiAgICAgIENvbXByZXNzaW9uTWlkZGxld2FyZS5pbnN0YW5jZSA9IG5ldyBDb21wcmVzc2lvbk1pZGRsZXdhcmUob3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQ29tcHJlc3Npb25NaWRkbGV3YXJlLmluc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplQ29tcHJlc3Npb24oKTogdm9pZCB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBVc2UgY29tcHJlc3Npb24gbGlicmFyeSBpZiBhdmFpbGFibGVcclxuICAgICAgaWYgKHByb2Nlc3MuZW52LkVOQUJMRV9DT01QUkVTU0lPTiA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgdGhpcy5jb21wcmVzc2lvbiA9IHJlcXVpcmUoJ2NvbXByZXNzaW9uJyk7XHJcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0NvbXByZXNzaW9uIG1pZGRsZXdhcmUgaW5pdGlhbGl6ZWQnLCB7IFxyXG4gICAgICAgICAgbWV0YWRhdGE6IHsgc2VydmljZTogJ0NvbXByZXNzaW9uTWlkZGxld2FyZScsIG9wdGlvbnM6IHRoaXMub3B0aW9ucyB9IFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKCdDb21wcmVzc2lvbiBkaXNhYmxlZCBieSBlbnZpcm9ubWVudCB2YXJpYWJsZScsIHsgXHJcbiAgICAgICAgICBtZXRhZGF0YTogeyBzZXJ2aWNlOiAnQ29tcHJlc3Npb25NaWRkbGV3YXJlJyB9IFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBsb2dnZXIud2FybignQ29tcHJlc3Npb24gbGlicmFyeSBub3QgYXZhaWxhYmxlLCB1c2luZyBmYWxsYmFjaycsIHsgXHJcbiAgICAgICAgbWV0YWRhdGE6IHsgc2VydmljZTogJ0NvbXByZXNzaW9uTWlkZGxld2FyZScgfSBcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRlZmF1bHRGaWx0ZXIocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogYm9vbGVhbiB7XHJcbiAgICAvLyBEb24ndCBjb21wcmVzcyBpZiByZXF1ZXN0IGRvZXNuJ3QgYWNjZXB0IGd6aXBcclxuICAgIGlmICghcmVxLmhlYWRlcnNbJ2FjY2VwdC1lbmNvZGluZyddIHx8ICFyZXEuaGVhZGVyc1snYWNjZXB0LWVuY29kaW5nJ10uaW5jbHVkZXMoJ2d6aXAnKSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRG9uJ3QgY29tcHJlc3Mgc21hbGwgcmVzcG9uc2VzXHJcbiAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gcGFyc2VJbnQocmVzLmdldEhlYWRlcignY29udGVudC1sZW5ndGgnKSBhcyBzdHJpbmcpIHx8IDA7XHJcbiAgICBpZiAoY29udGVudExlbmd0aCA8ICh0aGlzLm9wdGlvbnMudGhyZXNob2xkIHx8IDEwMjQpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEb24ndCBjb21wcmVzcyBhbHJlYWR5IGNvbXByZXNzZWQgY29udGVudFxyXG4gICAgY29uc3QgY29udGVudFR5cGUgPSByZXMuZ2V0SGVhZGVyKCdjb250ZW50LXR5cGUnKSBhcyBzdHJpbmc7XHJcbiAgICBpZiAoY29udGVudFR5cGUgJiYgKFxyXG4gICAgICBjb250ZW50VHlwZS5pbmNsdWRlcygnaW1hZ2UvJykgfHxcclxuICAgICAgY29udGVudFR5cGUuaW5jbHVkZXMoJ3ZpZGVvLycpIHx8XHJcbiAgICAgIGNvbnRlbnRUeXBlLmluY2x1ZGVzKCdhdWRpby8nKSB8fFxyXG4gICAgICBjb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24vemlwJykgfHxcclxuICAgICAgY29udGVudFR5cGUuaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL2d6aXAnKVxyXG4gICAgKSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbWlkZGxld2FyZSgpIHtcclxuICAgIHJldHVybiAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcclxuICAgICAgLy8gU2tpcCBjb21wcmVzc2lvbiBpZiBub3QgZW5hYmxlZCBvciBsaWJyYXJ5IG5vdCBhdmFpbGFibGVcclxuICAgICAgaWYgKCF0aGlzLmNvbXByZXNzaW9uIHx8IHByb2Nlc3MuZW52LkVOQUJMRV9DT01QUkVTU0lPTiAhPT0gJ3RydWUnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5leHQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgcmVzcG9uc2Ugc2hvdWxkIGJlIGNvbXByZXNzZWRcclxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZmlsdGVyIShyZXEsIHJlcykpIHtcclxuICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBZGQgY29tcHJlc3Npb24gaGVhZGVyc1xyXG4gICAgICByZXMuc2V0SGVhZGVyKCdWYXJ5JywgJ0FjY2VwdC1FbmNvZGluZycpO1xyXG4gICAgICBcclxuICAgICAgLy8gVXNlIGNvbXByZXNzaW9uIG1pZGRsZXdhcmVcclxuICAgICAgY29uc3QgY29tcHJlc3MgPSB0aGlzLmNvbXByZXNzaW9uKHtcclxuICAgICAgICB0aHJlc2hvbGQ6IHRoaXMub3B0aW9ucy50aHJlc2hvbGQsXHJcbiAgICAgICAgbGV2ZWw6IHRoaXMub3B0aW9ucy5sZXZlbCxcclxuICAgICAgICBmaWx0ZXI6IHRoaXMub3B0aW9ucy5maWx0ZXJcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb21wcmVzcyhyZXEsIHJlcywgbmV4dCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb21wcmVzc1Jlc3BvbnNlKGRhdGE6IGFueSwgcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogQnVmZmVyIHwgc3RyaW5nIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIFNpbXBsZSBjb21wcmVzc2lvbiBmb3IgSlNPTiByZXNwb25zZXNcclxuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGNvbnN0IGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBPbmx5IGNvbXByZXNzIGlmIHJlc3BvbnNlIGlzIGxhcmdlIGVub3VnaFxyXG4gICAgICAgIGlmIChqc29uU3RyaW5nLmxlbmd0aCA8IChDb21wcmVzc2lvbk1pZGRsZXdhcmUuZ2V0SW5zdGFuY2UoKS5vcHRpb25zLnRocmVzaG9sZCB8fCAxMDI0KSkge1xyXG4gICAgICAgICAgcmV0dXJuIGpzb25TdHJpbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTaW1wbGUgY29tcHJlc3Npb24gYnkgcmVtb3ZpbmcgdW5uZWNlc3Nhcnkgd2hpdGVzcGFjZVxyXG4gICAgICAgIGNvbnN0IGNvbXByZXNzZWQgPSBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAwKTtcclxuICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LUVuY29kaW5nJywgJ2lkZW50aXR5Jyk7XHJcbiAgICAgICAgcmVzLnNldEhlYWRlcignWC1Db21wcmVzc2lvbicsICdzaW1wbGUnKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gY29tcHJlc3NlZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIGNvbXByZXNzaW5nIHJlc3BvbnNlJywgZXJyb3IgYXMgRXJyb3IsIHsgXHJcbiAgICAgICAgbWV0YWRhdGE6IHsgc2VydmljZTogJ0NvbXByZXNzaW9uTWlkZGxld2FyZScgfSBcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBnZXRDb21wcmVzc2lvblN0YXRzKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IHtcclxuICAgIG9yaWdpbmFsU2l6ZTogbnVtYmVyO1xyXG4gICAgY29tcHJlc3NlZFNpemU6IG51bWJlcjtcclxuICAgIGNvbXByZXNzaW9uUmF0aW86IG51bWJlcjtcclxuICAgIGFsZ29yaXRobTogc3RyaW5nO1xyXG4gIH0ge1xyXG4gICAgY29uc3Qgb3JpZ2luYWxTaXplID0gcGFyc2VJbnQocmVzLmdldEhlYWRlcignY29udGVudC1sZW5ndGgnKSBhcyBzdHJpbmcpIHx8IDA7XHJcbiAgICBjb25zdCBlbmNvZGluZyA9IHJlcy5nZXRIZWFkZXIoJ2NvbnRlbnQtZW5jb2RpbmcnKSBhcyBzdHJpbmc7XHJcbiAgICBjb25zdCBjb21wcmVzc2VkU2l6ZSA9IGVuY29kaW5nID09PSAnZ3ppcCcgPyBcclxuICAgICAgcGFyc2VJbnQocmVzLmdldEhlYWRlcigneC1jb21wcmVzc2VkLXNpemUnKSBhcyBzdHJpbmcpIHx8IG9yaWdpbmFsU2l6ZSA6IFxyXG4gICAgICBvcmlnaW5hbFNpemU7XHJcbiAgICBcclxuICAgIGNvbnN0IGNvbXByZXNzaW9uUmF0aW8gPSBvcmlnaW5hbFNpemUgPiAwID8gXHJcbiAgICAgICgob3JpZ2luYWxTaXplIC0gY29tcHJlc3NlZFNpemUpIC8gb3JpZ2luYWxTaXplKSAqIDEwMCA6IDA7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgb3JpZ2luYWxTaXplLFxyXG4gICAgICBjb21wcmVzc2VkU2l6ZSxcclxuICAgICAgY29tcHJlc3Npb25SYXRpbyxcclxuICAgICAgYWxnb3JpdGhtOiBlbmNvZGluZyB8fCAnbm9uZSdcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvcnQgbWlkZGxld2FyZSBmdW5jdGlvblxyXG5leHBvcnQgY29uc3QgY29tcHJlc3Npb25NaWRkbGV3YXJlID0gQ29tcHJlc3Npb25NaWRkbGV3YXJlLmdldEluc3RhbmNlKCkubWlkZGxld2FyZSgpOyAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQStCVTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBQUFBLGFBQUEsR0FBQUUsQ0FBQTs7Ozs7OztBQTlCVixNQUFBQyxlQUFBO0FBQUE7QUFBQSxDQUFBSCxhQUFBLEdBQUFFLENBQUEsT0FBQUUsT0FBQTtBQVFBLE1BQWFDLHFCQUFxQjtFQUtoQ0MsWUFBb0JDLE9BQUE7RUFBQTtFQUFBLENBQUFQLGFBQUEsR0FBQVEsQ0FBQSxVQUE4QixFQUFFO0lBQUE7SUFBQVIsYUFBQSxHQUFBUyxDQUFBO0lBQUFULGFBQUEsR0FBQUUsQ0FBQTtJQUNsRCxJQUFJLENBQUNLLE9BQU8sR0FBQUcsTUFBQSxDQUFBQyxNQUFBO01BQ1ZDLFNBQVMsRUFBRSxJQUFJO01BQ2ZDLEtBQUssRUFBRSxDQUFDO01BQ1JDLE1BQU0sRUFBRSxJQUFJLENBQUNDO0lBQWEsR0FDdkJSLE9BQU8sQ0FDWDtJQUFDO0lBQUFQLGFBQUEsR0FBQUUsQ0FBQTtJQUNGLElBQUksQ0FBQ2MscUJBQXFCLEVBQUU7RUFDOUI7RUFFTyxPQUFPQyxXQUFXQSxDQUFDVixPQUE0QjtJQUFBO0lBQUFQLGFBQUEsR0FBQVMsQ0FBQTtJQUFBVCxhQUFBLEdBQUFFLENBQUE7SUFDcEQsSUFBSSxDQUFDRyxxQkFBcUIsQ0FBQ2EsUUFBUSxFQUFFO01BQUE7TUFBQWxCLGFBQUEsR0FBQVEsQ0FBQTtNQUFBUixhQUFBLEdBQUFFLENBQUE7TUFDbkNHLHFCQUFxQixDQUFDYSxRQUFRLEdBQUcsSUFBSWIscUJBQXFCLENBQUNFLE9BQU8sQ0FBQztJQUNyRSxDQUFDO0lBQUE7SUFBQTtNQUFBUCxhQUFBLEdBQUFRLENBQUE7SUFBQTtJQUFBUixhQUFBLEdBQUFFLENBQUE7SUFDRCxPQUFPRyxxQkFBcUIsQ0FBQ2EsUUFBUTtFQUN2QztFQUVRRixxQkFBcUJBLENBQUE7SUFBQTtJQUFBaEIsYUFBQSxHQUFBUyxDQUFBO0lBQUFULGFBQUEsR0FBQUUsQ0FBQTtJQUMzQixJQUFJO01BQUE7TUFBQUYsYUFBQSxHQUFBRSxDQUFBO01BQ0Y7TUFDQSxJQUFJaUIsT0FBTyxDQUFDQyxHQUFHLENBQUNDLGtCQUFrQixLQUFLLE1BQU0sRUFBRTtRQUFBO1FBQUFyQixhQUFBLEdBQUFRLENBQUE7UUFBQVIsYUFBQSxHQUFBRSxDQUFBO1FBQzdDLElBQUksQ0FBQ29CLFdBQVcsR0FBR2xCLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFBQztRQUFBSixhQUFBLEdBQUFFLENBQUE7UUFDMUNDLGVBQUEsQ0FBQW9CLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLG9DQUFvQyxFQUFFO1VBQ2hEQyxRQUFRLEVBQUU7WUFBRUMsT0FBTyxFQUFFLHVCQUF1QjtZQUFFbkIsT0FBTyxFQUFFLElBQUksQ0FBQ0E7VUFBTztTQUNwRSxDQUFDO01BQ0osQ0FBQyxNQUFNO1FBQUE7UUFBQVAsYUFBQSxHQUFBUSxDQUFBO1FBQUFSLGFBQUEsR0FBQUUsQ0FBQTtRQUNMQyxlQUFBLENBQUFvQixNQUFNLENBQUNDLElBQUksQ0FBQyw4Q0FBOEMsRUFBRTtVQUMxREMsUUFBUSxFQUFFO1lBQUVDLE9BQU8sRUFBRTtVQUF1QjtTQUM3QyxDQUFDO01BQ0o7SUFDRixDQUFDLENBQUMsT0FBT0MsS0FBSyxFQUFFO01BQUE7TUFBQTNCLGFBQUEsR0FBQUUsQ0FBQTtNQUNkQyxlQUFBLENBQUFvQixNQUFNLENBQUNLLElBQUksQ0FBQyxtREFBbUQsRUFBRTtRQUMvREgsUUFBUSxFQUFFO1VBQUVDLE9BQU8sRUFBRTtRQUF1QjtPQUM3QyxDQUFDO0lBQ0o7RUFDRjtFQUVRWCxhQUFhQSxDQUFDYyxHQUFZLEVBQUVDLEdBQWE7SUFBQTtJQUFBOUIsYUFBQSxHQUFBUyxDQUFBO0lBQUFULGFBQUEsR0FBQUUsQ0FBQTtJQUMvQztJQUNBO0lBQUk7SUFBQSxDQUFBRixhQUFBLEdBQUFRLENBQUEsV0FBQ3FCLEdBQUcsQ0FBQ0UsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0lBQUE7SUFBQSxDQUFBL0IsYUFBQSxHQUFBUSxDQUFBLFVBQUksQ0FBQ3FCLEdBQUcsQ0FBQ0UsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUNDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRTtNQUFBO01BQUFoQyxhQUFBLEdBQUFRLENBQUE7TUFBQVIsYUFBQSxHQUFBRSxDQUFBO01BQ3ZGLE9BQU8sS0FBSztJQUNkLENBQUM7SUFBQTtJQUFBO01BQUFGLGFBQUEsR0FBQVEsQ0FBQTtJQUFBO0lBRUQ7SUFDQSxNQUFNeUIsYUFBYTtJQUFBO0lBQUEsQ0FBQWpDLGFBQUEsR0FBQUUsQ0FBQTtJQUFHO0lBQUEsQ0FBQUYsYUFBQSxHQUFBUSxDQUFBLFVBQUEwQixRQUFRLENBQUNKLEdBQUcsQ0FBQ0ssU0FBUyxDQUFDLGdCQUFnQixDQUFXLENBQUM7SUFBQTtJQUFBLENBQUFuQyxhQUFBLEdBQUFRLENBQUEsVUFBSSxDQUFDO0lBQUM7SUFBQVIsYUFBQSxHQUFBRSxDQUFBO0lBQy9FLElBQUkrQixhQUFhO0lBQUk7SUFBQSxDQUFBakMsYUFBQSxHQUFBUSxDQUFBLGNBQUksQ0FBQ0QsT0FBTyxDQUFDSyxTQUFTO0lBQUE7SUFBQSxDQUFBWixhQUFBLEdBQUFRLENBQUEsVUFBSSxJQUFJLEVBQUMsRUFBRTtNQUFBO01BQUFSLGFBQUEsR0FBQVEsQ0FBQTtNQUFBUixhQUFBLEdBQUFFLENBQUE7TUFDcEQsT0FBTyxLQUFLO0lBQ2QsQ0FBQztJQUFBO0lBQUE7TUFBQUYsYUFBQSxHQUFBUSxDQUFBO0lBQUE7SUFFRDtJQUNBLE1BQU00QixXQUFXO0lBQUE7SUFBQSxDQUFBcEMsYUFBQSxHQUFBRSxDQUFBLFFBQUc0QixHQUFHLENBQUNLLFNBQVMsQ0FBQyxjQUFjLENBQVc7SUFBQztJQUFBbkMsYUFBQSxHQUFBRSxDQUFBO0lBQzVEO0lBQUk7SUFBQSxDQUFBRixhQUFBLEdBQUFRLENBQUEsVUFBQTRCLFdBQVc7SUFDYjtJQUFBLENBQUFwQyxhQUFBLEdBQUFRLENBQUEsVUFBQTRCLFdBQVcsQ0FBQ0osUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUFBO0lBQUEsQ0FBQWhDLGFBQUEsR0FBQVEsQ0FBQSxVQUM5QjRCLFdBQVcsQ0FBQ0osUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUFBO0lBQUEsQ0FBQWhDLGFBQUEsR0FBQVEsQ0FBQSxVQUM5QjRCLFdBQVcsQ0FBQ0osUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUFBO0lBQUEsQ0FBQWhDLGFBQUEsR0FBQVEsQ0FBQSxVQUM5QjRCLFdBQVcsQ0FBQ0osUUFBUSxDQUFDLGlCQUFpQixDQUFDO0lBQUE7SUFBQSxDQUFBaEMsYUFBQSxHQUFBUSxDQUFBLFVBQ3ZDNEIsV0FBVyxDQUFDSixRQUFRLENBQUMsa0JBQWtCLENBQUMsRUFDekMsRUFBRTtNQUFBO01BQUFoQyxhQUFBLEdBQUFRLENBQUE7TUFBQVIsYUFBQSxHQUFBRSxDQUFBO01BQ0QsT0FBTyxLQUFLO0lBQ2QsQ0FBQztJQUFBO0lBQUE7TUFBQUYsYUFBQSxHQUFBUSxDQUFBO0lBQUE7SUFBQVIsYUFBQSxHQUFBRSxDQUFBO0lBRUQsT0FBTyxJQUFJO0VBQ2I7RUFFT21DLFVBQVVBLENBQUE7SUFBQTtJQUFBckMsYUFBQSxHQUFBUyxDQUFBO0lBQUFULGFBQUEsR0FBQUUsQ0FBQTtJQUNmLE9BQU8sQ0FBQzJCLEdBQVksRUFBRUMsR0FBYSxFQUFFUSxJQUFrQixLQUFJO01BQUE7TUFBQXRDLGFBQUEsR0FBQVMsQ0FBQTtNQUFBVCxhQUFBLEdBQUFFLENBQUE7TUFDekQ7TUFDQTtNQUFJO01BQUEsQ0FBQUYsYUFBQSxHQUFBUSxDQUFBLFlBQUMsSUFBSSxDQUFDYyxXQUFXO01BQUE7TUFBQSxDQUFBdEIsYUFBQSxHQUFBUSxDQUFBLFdBQUlXLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxrQkFBa0IsS0FBSyxNQUFNLEdBQUU7UUFBQTtRQUFBckIsYUFBQSxHQUFBUSxDQUFBO1FBQUFSLGFBQUEsR0FBQUUsQ0FBQTtRQUNsRSxPQUFPb0MsSUFBSSxFQUFFO01BQ2YsQ0FBQztNQUFBO01BQUE7UUFBQXRDLGFBQUEsR0FBQVEsQ0FBQTtNQUFBO01BRUQ7TUFBQVIsYUFBQSxHQUFBRSxDQUFBO01BQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ0ssT0FBTyxDQUFDTyxNQUFPLENBQUNlLEdBQUcsRUFBRUMsR0FBRyxDQUFDLEVBQUU7UUFBQTtRQUFBOUIsYUFBQSxHQUFBUSxDQUFBO1FBQUFSLGFBQUEsR0FBQUUsQ0FBQTtRQUNuQyxPQUFPb0MsSUFBSSxFQUFFO01BQ2YsQ0FBQztNQUFBO01BQUE7UUFBQXRDLGFBQUEsR0FBQVEsQ0FBQTtNQUFBO01BRUQ7TUFBQVIsYUFBQSxHQUFBRSxDQUFBO01BQ0E0QixHQUFHLENBQUNTLFNBQVMsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLENBQUM7TUFFeEM7TUFDQSxNQUFNQyxRQUFRO01BQUE7TUFBQSxDQUFBeEMsYUFBQSxHQUFBRSxDQUFBLFFBQUcsSUFBSSxDQUFDb0IsV0FBVyxDQUFDO1FBQ2hDVixTQUFTLEVBQUUsSUFBSSxDQUFDTCxPQUFPLENBQUNLLFNBQVM7UUFDakNDLEtBQUssRUFBRSxJQUFJLENBQUNOLE9BQU8sQ0FBQ00sS0FBSztRQUN6QkMsTUFBTSxFQUFFLElBQUksQ0FBQ1AsT0FBTyxDQUFDTztPQUN0QixDQUFDO01BQUM7TUFBQWQsYUFBQSxHQUFBRSxDQUFBO01BRUhzQyxRQUFRLENBQUNYLEdBQUcsRUFBRUMsR0FBRyxFQUFFUSxJQUFJLENBQUM7SUFDMUIsQ0FBQztFQUNIO0VBRU8sT0FBT0csZ0JBQWdCQSxDQUFDQyxJQUFTLEVBQUViLEdBQVksRUFBRUMsR0FBYTtJQUFBO0lBQUE5QixhQUFBLEdBQUFTLENBQUE7SUFBQVQsYUFBQSxHQUFBRSxDQUFBO0lBQ25FLElBQUk7TUFBQTtNQUFBRixhQUFBLEdBQUFFLENBQUE7TUFDRjtNQUNBLElBQUksT0FBT3dDLElBQUksS0FBSyxRQUFRLEVBQUU7UUFBQTtRQUFBMUMsYUFBQSxHQUFBUSxDQUFBO1FBQzVCLE1BQU1tQyxVQUFVO1FBQUE7UUFBQSxDQUFBM0MsYUFBQSxHQUFBRSxDQUFBLFFBQUcwQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0gsSUFBSSxDQUFDO1FBRXZDO1FBQUE7UUFBQTFDLGFBQUEsR0FBQUUsQ0FBQTtRQUNBLElBQUl5QyxVQUFVLENBQUNHLE1BQU07UUFBSTtRQUFBLENBQUE5QyxhQUFBLEdBQUFRLENBQUEsV0FBQUgscUJBQXFCLENBQUNZLFdBQVcsRUFBRSxDQUFDVixPQUFPLENBQUNLLFNBQVM7UUFBQTtRQUFBLENBQUFaLGFBQUEsR0FBQVEsQ0FBQSxXQUFJLElBQUksRUFBQyxFQUFFO1VBQUE7VUFBQVIsYUFBQSxHQUFBUSxDQUFBO1VBQUFSLGFBQUEsR0FBQUUsQ0FBQTtVQUN2RixPQUFPeUMsVUFBVTtRQUNuQixDQUFDO1FBQUE7UUFBQTtVQUFBM0MsYUFBQSxHQUFBUSxDQUFBO1FBQUE7UUFFRDtRQUNBLE1BQU11QyxVQUFVO1FBQUE7UUFBQSxDQUFBL0MsYUFBQSxHQUFBRSxDQUFBLFFBQUcwQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0gsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFBQztRQUFBMUMsYUFBQSxHQUFBRSxDQUFBO1FBQ2pENEIsR0FBRyxDQUFDUyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxDQUFDO1FBQUM7UUFBQXZDLGFBQUEsR0FBQUUsQ0FBQTtRQUM5QzRCLEdBQUcsQ0FBQ1MsU0FBUyxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUM7UUFBQztRQUFBdkMsYUFBQSxHQUFBRSxDQUFBO1FBRXpDLE9BQU82QyxVQUFVO01BQ25CLENBQUM7TUFBQTtNQUFBO1FBQUEvQyxhQUFBLEdBQUFRLENBQUE7TUFBQTtNQUFBUixhQUFBLEdBQUFFLENBQUE7TUFFRCxPQUFPd0MsSUFBSTtJQUNiLENBQUMsQ0FBQyxPQUFPZixLQUFLLEVBQUU7TUFBQTtNQUFBM0IsYUFBQSxHQUFBRSxDQUFBO01BQ2RDLGVBQUEsQ0FBQW9CLE1BQU0sQ0FBQ0ksS0FBSyxDQUFDLDRCQUE0QixFQUFFQSxLQUFjLEVBQUU7UUFDekRGLFFBQVEsRUFBRTtVQUFFQyxPQUFPLEVBQUU7UUFBdUI7T0FDN0MsQ0FBQztNQUFDO01BQUExQixhQUFBLEdBQUFFLENBQUE7TUFDSCxPQUFPd0MsSUFBSTtJQUNiO0VBQ0Y7RUFFTyxPQUFPTSxtQkFBbUJBLENBQUNuQixHQUFZLEVBQUVDLEdBQWE7SUFBQTtJQUFBOUIsYUFBQSxHQUFBUyxDQUFBO0lBTTNELE1BQU13QyxZQUFZO0lBQUE7SUFBQSxDQUFBakQsYUFBQSxHQUFBRSxDQUFBO0lBQUc7SUFBQSxDQUFBRixhQUFBLEdBQUFRLENBQUEsV0FBQTBCLFFBQVEsQ0FBQ0osR0FBRyxDQUFDSyxTQUFTLENBQUMsZ0JBQWdCLENBQVcsQ0FBQztJQUFBO0lBQUEsQ0FBQW5DLGFBQUEsR0FBQVEsQ0FBQSxXQUFJLENBQUM7SUFDN0UsTUFBTTBDLFFBQVE7SUFBQTtJQUFBLENBQUFsRCxhQUFBLEdBQUFFLENBQUEsUUFBRzRCLEdBQUcsQ0FBQ0ssU0FBUyxDQUFDLGtCQUFrQixDQUFXO0lBQzVELE1BQU1nQixjQUFjO0lBQUE7SUFBQSxDQUFBbkQsYUFBQSxHQUFBRSxDQUFBLFFBQUdnRCxRQUFRLEtBQUssTUFBTTtJQUFBO0lBQUEsQ0FBQWxELGFBQUEsR0FBQVEsQ0FBQTtJQUN4QztJQUFBLENBQUFSLGFBQUEsR0FBQVEsQ0FBQSxXQUFBMEIsUUFBUSxDQUFDSixHQUFHLENBQUNLLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBVyxDQUFDO0lBQUE7SUFBQSxDQUFBbkMsYUFBQSxHQUFBUSxDQUFBLFdBQUl5QyxZQUFZO0lBQUE7SUFBQSxDQUFBakQsYUFBQSxHQUFBUSxDQUFBLFdBQ3RFeUMsWUFBWTtJQUVkLE1BQU1HLGdCQUFnQjtJQUFBO0lBQUEsQ0FBQXBELGFBQUEsR0FBQUUsQ0FBQSxRQUFHK0MsWUFBWSxHQUFHLENBQUM7SUFBQTtJQUFBLENBQUFqRCxhQUFBLEdBQUFRLENBQUEsV0FDdEMsQ0FBQ3lDLFlBQVksR0FBR0UsY0FBYyxJQUFJRixZQUFZLEdBQUksR0FBRztJQUFBO0lBQUEsQ0FBQWpELGFBQUEsR0FBQVEsQ0FBQSxXQUFHLENBQUM7SUFBQztJQUFBUixhQUFBLEdBQUFFLENBQUE7SUFFN0QsT0FBTztNQUNMK0MsWUFBWTtNQUNaRSxjQUFjO01BQ2RDLGdCQUFnQjtNQUNoQkMsU0FBUztNQUFFO01BQUEsQ0FBQXJELGFBQUEsR0FBQVEsQ0FBQSxXQUFBMEMsUUFBUTtNQUFBO01BQUEsQ0FBQWxELGFBQUEsR0FBQVEsQ0FBQSxXQUFJLE1BQU07S0FDOUI7RUFDSDs7QUFDRDtBQUFBUixhQUFBLEdBQUFFLENBQUE7QUFqSkRvRCxPQUFBLENBQUFqRCxxQkFBQSxHQUFBQSxxQkFBQTtBQW1KQTtBQUFBO0FBQUFMLGFBQUEsR0FBQUUsQ0FBQTtBQUNhb0QsT0FBQSxDQUFBQyxxQkFBcUIsR0FBR2xELHFCQUFxQixDQUFDWSxXQUFXLEVBQUUsQ0FBQ29CLFVBQVUsRUFBRSIsImlnbm9yZUxpc3QiOltdfQ==