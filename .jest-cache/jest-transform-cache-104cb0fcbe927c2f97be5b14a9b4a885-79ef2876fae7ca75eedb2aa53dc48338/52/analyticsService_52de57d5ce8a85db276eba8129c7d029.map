{"version":3,"names":["cov_qq0cfhyj2","actualCoverage","firebase_1","s","require","loggerService_1","AnalyticsService","getEventAnalytics","f","filters","b","query","db","collection","dateFrom","where","dateTo","snapshot","get","events","docs","map","doc","data","eventsByStatus","eventsByType","eventsByMonth","totalBudget","completedEvents","cancelledEvents","forEach","event","status","eventType","month","createdAt","Date","isNaN","getTime","console","info","warn","id","toISOString","substring","error","budget","averageBudget","length","completionRate","cancellationRate","totalEvents","logger","Error","getRequestAnalytics","requests","requestsByStatus","requestsByType","requestsByMonth","acceptedRequests","totalResponseTime","responseTimeCount","request","toDate","metadata","requestId","message","assignedMusicianId","updatedAt","created","updated","acceptanceRate","averageResponseTime","totalRequests","getUserAnalytics","userRole","users","usersByRole","usersByMonth","activeUsers","newUsersThisMonth","currentMonth","lastMonth","now","user","roll","createAt","create_at","previousMonthUsers","currentMonthUsers","userGrowthRate","totalUsers","getPlatformAnalytics","eventAnalytics","requestAnalytics","userAnalytics","Promise","all","totalRevenue","averageEventValue","topEventTypes","Object","entries","type","count","revenue","sort","a","slice","topLocations","location","eventsPerUser","requestsPerUser","performance","successRate","errorRate","userEngagement","averageSessionDuration","getTrendsReport","months","trends","eventTrends","requestTrends","userTrends","i","date","setMonth","getMonth","eventCount","Math","floor","random","eventRevenue","requestCount","newUsers","push","getLocationPerformanceReport","locations","getTopActiveUsersReport","limit","usersSnapshot","eventsCreated","requestsCreated","eventsCompleted","requestsAccepted","exports","analyticsService"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\analyticsService.ts"],"sourcesContent":["import { db } from '../utils/firebase';\r\nimport { Event, User } from '../utils/DataTypes';\r\nimport { logger } from './loggerService';\r\n\r\n// Definir tipo para MusicianRequest ya que no existe en DataTypes\r\nexport interface MusicianRequest {\r\n  id: string;\r\n  user: string;\r\n  eventName: string;\r\n  eventType: string;\r\n  date: string;\r\n  time: string;\r\n  location: string;\r\n  duration: string;\r\n  instrument: string;\r\n  bringInstrument: boolean;\r\n  comment: string;\r\n  budget: string;\r\n  flyerUrl?: string;\r\n  songs: string[];\r\n  recommendations: string[];\r\n  mapsLink: string;\r\n  status: 'pendiente' | 'asignada' | 'cancelada' | 'completada' | 'no_asignada';\r\n  assignedMusicianId?: string;\r\n  interestedMusicians?: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  description?: string;\r\n  requirements?: string;\r\n}\r\n\r\nexport interface AnalyticsFilters {\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  eventType?: string;\r\n  status?: string;\r\n  userRole?: string;\r\n  location?: string;\r\n}\r\n\r\nexport interface EventAnalytics {\r\n  totalEvents: number;\r\n  eventsByStatus: Record<string, number>;\r\n  eventsByType: Record<string, number>;\r\n  eventsByMonth: Record<string, number>;\r\n  averageBudget: number;\r\n  totalBudget: number;\r\n  completionRate: number;\r\n  cancellationRate: number;\r\n}\r\n\r\nexport interface RequestAnalytics {\r\n  totalRequests: number;\r\n  requestsByStatus: Record<string, number>;\r\n  requestsByType: Record<string, number>;\r\n  requestsByMonth: Record<string, number>;\r\n  averageBudget: number;\r\n  totalBudget: number;\r\n  acceptanceRate: number;\r\n  averageResponseTime: number;\r\n}\r\n\r\nexport interface UserAnalytics {\r\n  totalUsers: number;\r\n  usersByRole: Record<string, number>;\r\n  usersByMonth: Record<string, number>;\r\n  activeUsers: number;\r\n  newUsersThisMonth: number;\r\n  userGrowthRate: number;\r\n}\r\n\r\nexport interface PlatformAnalytics {\r\n  totalRevenue: number;\r\n  averageEventValue: number;\r\n  topEventTypes: Array<{ type: string; count: number; revenue: number }>;\r\n  topLocations: Array<{ location: string; count: number; revenue: number }>;\r\n  userEngagement: {\r\n    eventsPerUser: number;\r\n    requestsPerUser: number;\r\n    averageSessionDuration: number;\r\n  };\r\n  performance: {\r\n    averageResponseTime: number;\r\n    successRate: number;\r\n    errorRate: number;\r\n  };\r\n}\r\n\r\nexport class AnalyticsService {\r\n  /**\r\n   * Analytics de eventos\r\n   */\r\n  async getEventAnalytics(\r\n    filters: AnalyticsFilters = {}\r\n  ): Promise<EventAnalytics> {\r\n    try {\r\n      let query: any = db.collection('events');\r\n\r\n      if (filters.dateFrom) {\r\n        query = query.where('createdAt', '>=', filters.dateFrom);\r\n      }\r\n\r\n      if (filters.dateTo) {\r\n        query = query.where('createdAt', '<=', filters.dateTo);\r\n      }\r\n\r\n      const snapshot = await query.get();\r\n      const events = snapshot.docs.map((doc: any) => doc.data() as Event);\r\n\r\n      const eventsByStatus: Record<string, number> = {};\r\n      const eventsByType: Record<string, number> = {};\r\n      const eventsByMonth: Record<string, number> = {};\r\n      let totalBudget = 0;\r\n      let completedEvents = 0;\r\n      let cancelledEvents = 0;\r\n\r\n      events.forEach((event: any) => {\r\n        // Contar por estado\r\n        eventsByStatus[event.status] = (eventsByStatus[event.status] || 0) + 1;\r\n\r\n        // Contar por tipo\r\n        eventsByType[event.eventType] =\r\n          (eventsByType[event.eventType] || 0) + 1;\r\n\r\n        // Contar por mes - Validar fecha antes de convertir\r\n        let month: string;\r\n        try {\r\n          const createdAt = event.createdAt\r\n            ? new Date(event.createdAt)\r\n            : new Date();\r\n          if (isNaN(createdAt.getTime())) {\r\n            console.info('./src/services/analyticsService.ts line 126');\r\n            console.warn('Fecha inválida en event:', event.id, event.createdAt);\r\n            month = new Date().toISOString().substring(0, 7);\r\n          } else {\r\n            month = createdAt.toISOString().substring(0, 7);\r\n          }\r\n        } catch (error) {\r\n          console.info('./src/services/analyticsService.ts line 133');\r\n          console.warn('Error al procesar fecha de event:', event.id, error);\r\n          month = new Date().toISOString().substring(0, 7);\r\n        }\r\n\r\n        eventsByMonth[month] = (eventsByMonth[month] || 0) + 1;\r\n\r\n        // Calcular presupuesto\r\n        totalBudget += event.budget || 0;\r\n\r\n        // Contar eventos completados\r\n        if (event.status === 'completado') completedEvents++;\r\n\r\n        // Contar eventos cancelados\r\n        if (event.status === 'cancelado') cancelledEvents++;\r\n      });\r\n\r\n      const averageBudget = events.length > 0 ? totalBudget / events.length : 0;\r\n      const completionRate =\r\n        events.length > 0 ? (completedEvents / events.length) * 100 : 0;\r\n      const cancellationRate =\r\n        events.length > 0 ? (cancelledEvents / events.length) * 100 : 0;\r\n\r\n      return {\r\n        totalEvents: events.length,\r\n        eventsByStatus,\r\n        eventsByType,\r\n        eventsByMonth,\r\n        averageBudget,\r\n        totalBudget,\r\n        completionRate,\r\n        cancellationRate,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error al obtener analytics de eventos:', error as Error);\r\n      throw new Error('Error al obtener analytics de eventos');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analytics de solicitudes de músicos\r\n   */\r\n  async getRequestAnalytics(\r\n    filters: AnalyticsFilters = {}\r\n  ): Promise<RequestAnalytics> {\r\n    try {\r\n      let query: any = db.collection('musicianRequests');\r\n\r\n      if (filters.dateFrom) {\r\n        query = query.where('createdAt', '>=', filters.dateFrom);\r\n      }\r\n\r\n      if (filters.dateTo) {\r\n        query = query.where('createdAt', '<=', filters.dateTo);\r\n      }\r\n\r\n      const snapshot = await query.get();\r\n      const requests = snapshot.docs.map(\r\n        (doc: any) => doc.data() as MusicianRequest\r\n      );\r\n\r\n      const requestsByStatus: Record<string, number> = {};\r\n      const requestsByType: Record<string, number> = {};\r\n      const requestsByMonth: Record<string, number> = {};\r\n      let totalBudget = 0;\r\n      let acceptedRequests = 0;\r\n      let totalResponseTime = 0;\r\n      let responseTimeCount = 0;\r\n\r\n      requests.forEach((request: any) => {\r\n        // Contar por estado\r\n        requestsByStatus[request.status] =\r\n          (requestsByStatus[request.status] || 0) + 1;\r\n\r\n        // Contar por tipo\r\n        requestsByType[request.eventType] =\r\n          (requestsByType[request.eventType] || 0) + 1;\r\n\r\n        // Contar por mes - Validar fecha antes de convertir\r\n        let month: string;\r\n        try {\r\n          let createdAt: Date;\r\n          \r\n          // Manejar diferentes tipos de fecha (Timestamp de Firestore, Date, string)\r\n          if (request.createdAt) {\r\n            if (request.createdAt.toDate) {\r\n              // Es un Timestamp de Firestore\r\n              createdAt = request.createdAt.toDate();\r\n            } else if (request.createdAt instanceof Date) {\r\n              // Ya es un Date\r\n              createdAt = request.createdAt;\r\n            } else if (typeof request.createdAt === 'string') {\r\n              // Es un string, intentar convertir\r\n              createdAt = new Date(request.createdAt);\r\n            } else {\r\n              // Otro tipo, usar fecha actual\r\n              createdAt = new Date();\r\n            }\r\n          } else {\r\n            createdAt = new Date();\r\n          }\r\n          \r\n          if (isNaN(createdAt.getTime())) {\r\n            logger.warn('Fecha inválida en request', {\r\n              metadata: { requestId: request.id, createdAt: request.createdAt }\r\n            });\r\n            month = new Date().toISOString().substring(0, 7);\r\n          } else {\r\n            month = createdAt.toISOString().substring(0, 7);\r\n          }\r\n        } catch (error) {\r\n          logger.warn('Error al procesar fecha de request', {\r\n            metadata: { requestId: request.id, error: (error as Error).message }\r\n          });\r\n          month = new Date().toISOString().substring(0, 7);\r\n        }\r\n\r\n        requestsByMonth[month] = (requestsByMonth[month] || 0) + 1;\r\n\r\n        // Calcular presupuesto\r\n        totalBudget += request.budget || 0;\r\n\r\n        // Contar solicitudes aceptadas\r\n        if (request.status === 'asignada') acceptedRequests++;\r\n\r\n        // Calcular tiempo de respuesta - Validar fechas\r\n        if (request.assignedMusicianId && request.updatedAt) {\r\n          try {\r\n            let created: Date;\r\n            let updated: Date;\r\n            \r\n            // Manejar createdAt\r\n            if (request.createdAt) {\r\n              if (request.createdAt.toDate) {\r\n                created = request.createdAt.toDate();\r\n              } else if (request.createdAt instanceof Date) {\r\n                created = request.createdAt;\r\n              } else if (typeof request.createdAt === 'string') {\r\n                created = new Date(request.createdAt);\r\n              } else {\r\n                created = new Date();\r\n              }\r\n            } else {\r\n              created = new Date();\r\n            }\r\n            \r\n            // Manejar updatedAt\r\n            if (request.updatedAt.toDate) {\r\n              updated = request.updatedAt.toDate();\r\n            } else if (request.updatedAt instanceof Date) {\r\n              updated = request.updatedAt;\r\n            } else if (typeof request.updatedAt === 'string') {\r\n              updated = new Date(request.updatedAt);\r\n            } else {\r\n              updated = new Date();\r\n            }\r\n\r\n            if (!isNaN(created.getTime()) && !isNaN(updated.getTime())) {\r\n              totalResponseTime += updated.getTime() - created.getTime();\r\n              responseTimeCount++;\r\n            }\r\n          } catch (error) {\r\n            logger.warn('Error al calcular tiempo de respuesta', {\r\n              metadata: { requestId: request.id, error: (error as Error).message }\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      const averageBudget =\r\n        requests.length > 0 ? totalBudget / requests.length : 0;\r\n      const acceptanceRate =\r\n        requests.length > 0 ? (acceptedRequests / requests.length) * 100 : 0;\r\n      const averageResponseTime =\r\n        responseTimeCount > 0 ? totalResponseTime / responseTimeCount : 0;\r\n\r\n      return {\r\n        totalRequests: requests.length,\r\n        requestsByStatus,\r\n        requestsByType,\r\n        requestsByMonth,\r\n        averageBudget,\r\n        totalBudget,\r\n        acceptanceRate,\r\n        averageResponseTime,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error al obtener analytics de solicitudes:', error as Error);\r\n      throw new Error('Error al obtener analytics de solicitudes');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analytics de usuarios\r\n   */\r\n  async getUserAnalytics(\r\n    filters: AnalyticsFilters = {}\r\n  ): Promise<UserAnalytics> {\r\n    try {\r\n      let query: any = db.collection('users');\r\n\r\n      if (filters.userRole) {\r\n        query = query.where('roll', '==', filters.userRole);\r\n      }\r\n\r\n      const snapshot = await query.get();\r\n      const users = snapshot.docs.map((doc: any) => doc.data() as User);\r\n\r\n      const usersByRole: Record<string, number> = {};\r\n      const usersByMonth: Record<string, number> = {};\r\n      let activeUsers = 0;\r\n      let newUsersThisMonth = 0;\r\n\r\n      const currentMonth = new Date().toISOString().substring(0, 7);\r\n      const lastMonth = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\r\n        .toISOString()\r\n        .substring(0, 7);\r\n\r\n      users.forEach((user: any) => {\r\n        // Contar por rol\r\n        usersByRole[user.roll] = (usersByRole[user.roll] || 0) + 1;\r\n\r\n        // Contar por mes - Validar fecha antes de convertir\r\n        let month: string;\r\n        try {\r\n          const createAt = user.create_at\r\n            ? new Date(user.create_at)\r\n            : new Date();\r\n          if (isNaN(createAt.getTime())) {\r\n            console.info('./src/services/analyticsService.ts line 296');\r\n            console.warn('Fecha inválida en user:', user.id, user.create_at);\r\n            month = new Date().toISOString().substring(0, 7);\r\n          } else {\r\n            month = createAt.toISOString().substring(0, 7);\r\n          }\r\n        } catch (error) {\r\n          console.info('./src/services/analyticsService.ts line 303');\r\n          console.warn('Error al procesar fecha de user:', user.id, error);\r\n          month = new Date().toISOString().substring(0, 7);\r\n        }\r\n\r\n        usersByMonth[month] = (usersByMonth[month] || 0) + 1;\r\n\r\n        // Contar usuarios activos (creados en el último mes)\r\n        if (month >= lastMonth) activeUsers++;\r\n\r\n        // Contar nuevos usuarios este mes\r\n        if (month === currentMonth) newUsersThisMonth++;\r\n      });\r\n\r\n      // Calcular tasa de crecimiento\r\n      const previousMonthUsers = usersByMonth[lastMonth] || 0;\r\n      const currentMonthUsers = usersByMonth[currentMonth] || 0;\r\n      const userGrowthRate =\r\n        previousMonthUsers > 0\r\n          ? ((currentMonthUsers - previousMonthUsers) / previousMonthUsers) *\r\n            100\r\n          : 0;\r\n\r\n      return {\r\n        totalUsers: users.length,\r\n        usersByRole,\r\n        usersByMonth,\r\n        activeUsers,\r\n        newUsersThisMonth,\r\n        userGrowthRate,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error al obtener analytics de usuarios:', error as Error);\r\n      throw new Error('Error al obtener analytics de usuarios');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analytics de la plataforma completa\r\n   */\r\n  async getPlatformAnalytics(\r\n    filters: AnalyticsFilters = {}\r\n  ): Promise<PlatformAnalytics> {\r\n    try {\r\n      const [eventAnalytics, requestAnalytics, userAnalytics] =\r\n        await Promise.all([\r\n          this.getEventAnalytics(filters),\r\n          this.getRequestAnalytics(filters),\r\n          this.getUserAnalytics(filters),\r\n        ]);\r\n\r\n      // Calcular ingresos totales (simulado)\r\n      const totalRevenue = eventAnalytics.totalBudget * 0.1; // 10% de comisión\r\n      const averageEventValue =\r\n        eventAnalytics.totalEvents > 0\r\n          ? eventAnalytics.totalBudget / eventAnalytics.totalEvents\r\n          : 0;\r\n\r\n      // Top tipos de eventos\r\n      const topEventTypes = Object.entries(eventAnalytics.eventsByType)\r\n        .map(([type, count]) => ({\r\n          type,\r\n          count,\r\n          revenue: count * averageEventValue,\r\n        }))\r\n        .sort((a, b) => b.count - a.count)\r\n        .slice(0, 5);\r\n\r\n      // Top ubicaciones (simulado)\r\n      const topLocations = [\r\n        { location: 'Santo Domingo', count: 150, revenue: 15000 },\r\n        { location: 'Santiago', count: 120, revenue: 12000 },\r\n        { location: 'La Romana', count: 80, revenue: 8000 },\r\n        { location: 'Puerto Plata', count: 60, revenue: 6000 },\r\n        { location: 'San Pedro de Macorís', count: 40, revenue: 4000 },\r\n      ];\r\n\r\n      // Métricas de engagement\r\n      const eventsPerUser =\r\n        userAnalytics.totalUsers > 0\r\n          ? eventAnalytics.totalEvents / userAnalytics.totalUsers\r\n          : 0;\r\n      const requestsPerUser =\r\n        userAnalytics.totalUsers > 0\r\n          ? requestAnalytics.totalRequests / userAnalytics.totalUsers\r\n          : 0;\r\n\r\n      // Métricas de performance (simuladas)\r\n      const performance = {\r\n        averageResponseTime: requestAnalytics.averageResponseTime,\r\n        successRate: 95.5, // Simulado\r\n        errorRate: 4.5, // Simulado\r\n      };\r\n\r\n      return {\r\n        totalRevenue,\r\n        averageEventValue,\r\n        topEventTypes,\r\n        topLocations,\r\n        userEngagement: {\r\n          eventsPerUser,\r\n          requestsPerUser,\r\n          averageSessionDuration: 25.5, // Simulado en minutos\r\n        },\r\n        performance,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error al obtener analytics de plataforma:', error as Error);\r\n      throw new Error('Error al obtener analytics de plataforma');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reporte de tendencias\r\n   */\r\n  async getTrendsReport(months: number = 6): Promise<{\r\n    eventTrends: Array<{ month: string; count: number; revenue: number }>;\r\n    requestTrends: Array<{\r\n      month: string;\r\n      count: number;\r\n      acceptanceRate: number;\r\n    }>;\r\n    userTrends: Array<{ month: string; newUsers: number; activeUsers: number }>;\r\n  }> {\r\n    try {\r\n      const trends = {\r\n        eventTrends: [] as Array<{\r\n          month: string;\r\n          count: number;\r\n          revenue: number;\r\n        }>,\r\n        requestTrends: [] as Array<{\r\n          month: string;\r\n          count: number;\r\n          acceptanceRate: number;\r\n        }>,\r\n        userTrends: [] as Array<{\r\n          month: string;\r\n          newUsers: number;\r\n          activeUsers: number;\r\n        }>,\r\n      };\r\n\r\n      // Generar datos de tendencias para los últimos meses\r\n      for (let i = months - 1; i >= 0; i--) {\r\n        const date = new Date();\r\n        date.setMonth(date.getMonth() - i);\r\n        const month = date.toISOString().substring(0, 7);\r\n\r\n        // Simular datos de tendencias\r\n        const eventCount = Math.floor(Math.random() * 50) + 20;\r\n        const eventRevenue = eventCount * (Math.random() * 500 + 200);\r\n\r\n        const requestCount = Math.floor(Math.random() * 30) + 10;\r\n        const acceptanceRate = Math.random() * 30 + 60;\r\n\r\n        const newUsers = Math.floor(Math.random() * 20) + 5;\r\n        const activeUsers = Math.floor(Math.random() * 100) + 50;\r\n\r\n        trends.eventTrends.push({\r\n          month,\r\n          count: eventCount,\r\n          revenue: eventRevenue,\r\n        });\r\n\r\n        trends.requestTrends.push({\r\n          month,\r\n          count: requestCount,\r\n          acceptanceRate,\r\n        });\r\n\r\n        trends.userTrends.push({\r\n          month,\r\n          newUsers,\r\n          activeUsers,\r\n        });\r\n      }\r\n\r\n      return trends;\r\n    } catch (error) {\r\n      console.info('./src/services/analyticsService.ts line 459');\r\n      logger.error('Error al obtener reporte de tendencias:', error as Error);\r\n      throw new Error('Error al obtener reporte de tendencias');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reporte de rendimiento por ubicación\r\n   */\r\n  async getLocationPerformanceReport(): Promise<\r\n    Array<{\r\n      location: string;\r\n      totalEvents: number;\r\n      totalRequests: number;\r\n      totalRevenue: number;\r\n      averageEventValue: number;\r\n      completionRate: number;\r\n      acceptanceRate: number;\r\n    }>\r\n  > {\r\n    try {\r\n      // Simular datos de rendimiento por ubicación\r\n      const locations = [\r\n        'Santo Domingo',\r\n        'Santiago',\r\n        'La Romana',\r\n        'Puerto Plata',\r\n        'San Pedro de Macorís',\r\n        'Higüey',\r\n        'San Francisco de Macorís',\r\n        'La Vega',\r\n        'Moca',\r\n        'Bonao',\r\n      ];\r\n\r\n      return locations.map(location => ({\r\n        location,\r\n        totalEvents: Math.floor(Math.random() * 100) + 20,\r\n        totalRequests: Math.floor(Math.random() * 60) + 10,\r\n        totalRevenue: Math.floor(Math.random() * 20000) + 5000,\r\n        averageEventValue: Math.floor(Math.random() * 500) + 200,\r\n        completionRate: Math.random() * 30 + 70,\r\n        acceptanceRate: Math.random() * 40 + 50,\r\n      }));\r\n    } catch (error) {\r\n      console.info('./src/services/analyticsService.ts line 502');\r\n      logger.error('Error al obtener reporte de rendimiento por ubicación:', error as Error);\r\n      throw new Error('Error al obtener reporte de rendimiento por ubicación');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reporte de usuarios más activos\r\n   */\r\n  async getTopActiveUsersReport(limit: number = 10): Promise<\r\n    Array<{\r\n      user: User;\r\n      eventsCreated: number;\r\n      requestsCreated: number;\r\n      eventsCompleted: number;\r\n      requestsAccepted: number;\r\n      totalRevenue: number;\r\n    }>\r\n  > {\r\n    try {\r\n      // Obtener usuarios\r\n      const usersSnapshot = await db.collection('users').limit(limit).get();\r\n      const users = usersSnapshot.docs.map(doc => doc.data() as User);\r\n\r\n      // Simular datos de actividad\r\n      return users\r\n        .map(user => ({\r\n          user,\r\n          eventsCreated: Math.floor(Math.random() * 20) + 1,\r\n          requestsCreated: Math.floor(Math.random() * 15) + 1,\r\n          eventsCompleted: Math.floor(Math.random() * 15) + 1,\r\n          requestsAccepted: Math.floor(Math.random() * 10) + 1,\r\n          totalRevenue: Math.floor(Math.random() * 5000) + 500,\r\n        }))\r\n        .sort((a, b) => b.totalRevenue - a.totalRevenue);\r\n    } catch (error) {\r\n      console.info('./src/services/analyticsService.ts line 534');\r\n      logger.error('Error al obtener reporte de usuarios más activos:', error as Error);\r\n      throw new Error('Error al obtener reporte de usuarios más activos');\r\n    }\r\n  }\r\n}\r\n\r\nexport const analyticsService = new AnalyticsService();\r\n"],"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","ignoreList":[]}