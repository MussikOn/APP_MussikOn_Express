{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\authController.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\authController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport * as bcrypt from 'bcrypt';\nimport {\n  registerController,\n  loginController,\n  requestEmailVerificationController,\n  verifyAndCompleteRegistrationController,\n  forgotPasswordController,\n  verifyCodeController,\n  resetPasswordController,\n  updateUserByEmailController,\n  deleteUserByEmailController\n} from '../controllers/authController';\nimport {\n  getUserByEmailModel,\n  registerModel,\n  updateUserByEmailModel,\n  deleteUserByEmailModel\n} from '../models/authModel';\nimport { createToken } from '../utils/jwt';\nimport { sendEmail } from '../utils/mailer';\nimport { validarEmail, validarPassword } from '../utils/validatios';\nimport { createMockRequest, createMockResponse } from './setup';\n\n// Mock de todas las dependencias\njest.mock('../models/authModel');\njest.mock('../utils/jwt');\njest.mock('../utils/mailer');\njest.mock('../utils/validatios');\njest.mock('bcrypt');\n\ndescribe('AuthController', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockJson: jest.Mock;\n  let mockStatus: jest.Mock;\n\n  beforeEach(() => {\n    mockJson = jest.fn();\n    mockStatus = jest.fn().mockReturnValue({ json: mockJson });\n    \n    mockResponse = {\n      status: mockStatus,\n      json: mockJson\n    };\n\n    // Reset de todos los mocks\n    jest.clearAllMocks();\n  });\n\n  describe('registerController', () => {\n    beforeEach(() => {\n      mockRequest = createMockRequest({\n        body: {\n          name: 'Juan',\n          lastName: 'Pérez',\n          roll: 'musico',\n          userEmail: 'juan@example.com',\n          userPassword: 'Password123!'\n        }\n      });\n    });\n\n    it('should register user successfully', async () => {\n      // Mock de validaciones\n      (validarPassword as jest.Mock).mockReturnValue(true);\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      \n      // Mock de bcrypt\n      (bcrypt.hash as jest.Mock).mockResolvedValue('hashedPassword');\n      \n      // Mock del modelo - registerModel retorna false cuando es exitoso\n      (registerModel as jest.Mock).mockResolvedValue(false);\n      \n      // Mock del usuario creado\n      (getUserByEmailModel as jest.Mock).mockResolvedValue({\n        id: 'user123',\n        name: 'Juan',\n        lastName: 'Pérez',\n        roll: 'musico',\n        userEmail: 'juan@example.com'\n      });\n      \n      (createToken as jest.Mock).mockReturnValue('mockToken');\n\n      await registerController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Usuario Registrado con éxito.',\n        token: 'mockToken',\n        user: expect.objectContaining({\n          id: 'user123',\n          name: 'Juan',\n          lastName: 'Pérez',\n          roll: 'musico',\n          userEmail: 'juan@example.com'\n        })\n      });\n    });\n\n    it('should return error when required fields are missing', async () => {\n      mockRequest = createMockRequest({\n        body: {\n          name: 'Juan',\n          lastName: 'Pérez',\n          // roll, userEmail, userPassword faltantes\n        }\n      });\n\n      await registerController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Error al registrarse, todos los campos deben de ser llenados'\n      });\n    });\n\n    it('should return error when password is invalid', async () => {\n      (validarPassword as jest.Mock).mockReturnValue(false);\n\n      await registerController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: expect.stringContaining('La contraseña no cumple con los requisitos')\n      });\n    });\n\n    it('should return error when email is invalid', async () => {\n      (validarPassword as jest.Mock).mockReturnValue(true);\n      (validarEmail as jest.Mock).mockReturnValue(false);\n\n      await registerController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Correo Electrónico inválido.'\n      });\n    });\n\n    it('should return error when user already exists', async () => {\n      (validarPassword as jest.Mock).mockReturnValue(true);\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (bcrypt.hash as jest.Mock).mockResolvedValue('hashedPassword');\n      \n      // Mock que el usuario ya existe\n      (registerModel as jest.Mock).mockResolvedValue('El usuario ya Existe.');\n\n      await registerController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(409);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Ya hay un usuario con esta direccion de correo electrónico.',\n        data: 'El usuario ya Existe.'\n      });\n    });\n\n    it('should return error when registration fails', async () => {\n      (validarPassword as jest.Mock).mockReturnValue(true);\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (bcrypt.hash as jest.Mock).mockResolvedValue('hashedPassword');\n      \n      (registerModel as jest.Mock).mockRejectedValue(new Error('Database error'));\n\n      await registerController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Error al registrarse.',\n        error: expect.any(Error)\n      });\n    });\n  });\n\n  describe('loginController', () => {\n    beforeEach(() => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com',\n          userPassword: 'Password123!'\n        }\n      });\n    });\n\n    it('should login user successfully', async () => {\n      const mockUser = {\n        id: 'user123',\n        name: 'Juan',\n        lastName: 'Pérez',\n        roll: 'musico',\n        userEmail: 'juan@example.com',\n        userPassword: 'hashedPassword'\n      };\n\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (getUserByEmailModel as jest.Mock).mockResolvedValue(mockUser);\n      (bcrypt.compare as jest.Mock).mockResolvedValue(true);\n      (createToken as jest.Mock).mockReturnValue('mockToken');\n\n      await loginController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Login Exitoso',\n        token: 'mockToken',\n        user: mockUser\n      });\n    });\n\n    it('should return error when required fields are missing', async () => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com'\n          // userPassword faltante\n        }\n      });\n\n      await loginController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Todos los campos deben de ser llenados.'\n      });\n    });\n\n    it('should return error when email is invalid', async () => {\n      (validarEmail as jest.Mock).mockReturnValue(false);\n\n      await loginController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Dirección de correo electrónico no válido.'\n      });\n    });\n\n    it('should return error when user not found', async () => {\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (getUserByEmailModel as jest.Mock).mockResolvedValue(null);\n\n      await loginController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(401);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Verifique su dirección de correo electrónico o regístrese si no tiene una cuenta.'\n      });\n    });\n\n    it('should return error when password is incorrect', async () => {\n      const mockUser = {\n        id: 'user123',\n        name: 'Juan',\n        lastName: 'Pérez',\n        roll: 'musico',\n        userEmail: 'juan@example.com',\n        userPassword: 'hashedPassword'\n      };\n\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (getUserByEmailModel as jest.Mock).mockResolvedValue(mockUser);\n      (bcrypt.compare as jest.Mock).mockResolvedValue(false);\n\n      await loginController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(401);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Contraseña incorrecta.'\n      });\n    });\n  });\n\n  describe('requestEmailVerificationController', () => {\n    beforeEach(() => {\n      mockRequest = createMockRequest({\n        body: {\n          name: 'Juan',\n          lastName: 'Pérez',\n          userEmail: 'juan@example.com',\n          userPassword: 'Password123!',\n          roll: 'musico'\n        }\n      });\n    });\n\n    it('should request email verification successfully', async () => {\n      // Mock de validaciones\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (validarPassword as jest.Mock).mockReturnValue(true);\n      \n      // Mock que el usuario no existe\n      (getUserByEmailModel as jest.Mock).mockResolvedValue(null);\n      (sendEmail as jest.Mock).mockResolvedValue(true);\n\n      await requestEmailVerificationController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        message: 'Email de verificación enviado exitosamente. Revisa tu bandeja de entrada.',\n        data: expect.objectContaining({\n          userEmail: 'juan@example.com',\n          roll: 'musico',\n          expiresIn: '15 minutos'\n        })\n      });\n    });\n\n    it('should return error when email sending fails', async () => {\n      // Mock de validaciones\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (validarPassword as jest.Mock).mockReturnValue(true);\n      \n      // Mock que el usuario no existe\n      (getUserByEmailModel as jest.Mock).mockResolvedValue(null);\n      (sendEmail as jest.Mock).mockRejectedValue(new Error('Email sending failed'));\n\n      await requestEmailVerificationController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(500);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: false,\n        message: 'Error interno del servidor',\n        error: 'Email sending failed'\n      });\n    });\n\n    it('should return error when user already exists', async () => {\n      // Mock de validaciones\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (validarPassword as jest.Mock).mockReturnValue(true);\n      \n      // Mock que el usuario ya existe\n      (getUserByEmailModel as jest.Mock).mockResolvedValue({\n        id: 'user123',\n        userEmail: 'juan@example.com'\n      });\n\n      await requestEmailVerificationController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(409);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: false,\n        message: 'Ya existe un usuario con este email'\n      });\n    });\n  });\n\n  describe('verifyAndCompleteRegistrationController', () => {\n    beforeEach(() => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com',\n          verificationCode: '123456'\n        }\n      });\n    });\n\n    it('should complete registration successfully', async () => {\n      const mockUser = {\n        id: 'user123',\n        name: 'Juan',\n        lastName: 'Pérez',\n        roll: 'musico',\n        userEmail: 'juan@example.com'\n      };\n\n      (registerModel as jest.Mock).mockResolvedValue(mockUser);\n      (createToken as jest.Mock).mockReturnValue('mockToken');\n\n      await verifyAndCompleteRegistrationController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: false,\n        message: 'Email y código son requeridos'\n      });\n    });\n\n    it('should return error when verification code is invalid', async () => {\n      await verifyAndCompleteRegistrationController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: false,\n        message: 'Email y código son requeridos'\n      });\n    });\n\n    it('should return error when required fields are missing', async () => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com'\n          // verificationCode faltante\n        }\n      });\n\n      await verifyAndCompleteRegistrationController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: false,\n        message: 'Email y código son requeridos'\n      });\n    });\n  });\n\n  describe('forgotPasswordController', () => {\n    beforeEach(() => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com'\n        }\n      });\n      (validarEmail as jest.Mock).mockReturnValue(true);\n    });\n\n    it('should send password reset email successfully', async () => {\n      // Mock que el usuario existe y es superadmin\n      (getUserByEmailModel as jest.Mock).mockResolvedValue({\n        id: 'user123',\n        userEmail: 'juan@example.com',\n        roll: 'superadmin',\n        name: 'Juan'\n      });\n      (sendEmail as jest.Mock).mockResolvedValue(true);\n\n      await forgotPasswordController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Código de verificación enviado al email',\n        userEmail: 'juan@example.com'\n      });\n    });\n\n    it('should return error when user is not superadmin', async () => {\n      // Mock que el usuario existe pero no es superadmin\n      (getUserByEmailModel as jest.Mock).mockResolvedValue({\n        id: 'user123',\n        userEmail: 'juan@example.com',\n        roll: 'usuario'\n      });\n\n      await forgotPasswordController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(403);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Solo superadmin puede recuperar contraseña'\n      });\n    });\n  });\n\n  describe('verifyCodeController', () => {\n    beforeEach(() => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com',\n          code: '123456'\n        }\n      });\n      (validarEmail as jest.Mock).mockReturnValue(true);\n    });\n\n    it('should return error when user not found', async () => {\n      (getUserByEmailModel as jest.Mock).mockResolvedValue(null);\n\n      await verifyCodeController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(404);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Usuario no encontrado'\n      });\n    });\n\n    it('should return error when user is not superadmin', async () => {\n      // Mock que el usuario existe pero no es superadmin\n      (getUserByEmailModel as jest.Mock).mockResolvedValue({\n        id: 'user123',\n        userEmail: 'juan@example.com',\n        roll: 'usuario'\n      });\n\n      await verifyCodeController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(403);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Solo superadmin puede recuperar contraseña'\n      });\n    });\n\n    it('should return error when required fields are missing', async () => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com'\n          // code faltante\n        }\n      });\n\n      await verifyCodeController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Email y código son requeridos'\n      });\n    });\n  });\n\n  describe('resetPasswordController', () => {\n    beforeEach(() => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com',\n          code: '123456',\n          newPassword: 'NewPassword123!'\n        }\n      });\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (validarPassword as jest.Mock).mockReturnValue(true);\n    });\n\n    it('should return error when user is not superadmin', async () => {\n      // Mock que el usuario existe pero no es superadmin\n      (getUserByEmailModel as jest.Mock).mockResolvedValue({\n        id: 'user123',\n        userEmail: 'juan@example.com',\n        roll: 'usuario'\n      });\n\n      await resetPasswordController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(403);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Solo superadmin puede recuperar contraseña'\n      });\n    });\n\n    it('should return error when required fields are missing', async () => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com'\n          // code y newPassword faltantes\n        }\n      });\n\n      await resetPasswordController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Email, código y nueva contraseña son requeridos'\n      });\n    });\n\n    it('should return error when password is invalid', async () => {\n      // Mock que el usuario existe y es superadmin\n      (getUserByEmailModel as jest.Mock).mockResolvedValue({\n        id: 'user123',\n        userEmail: 'juan@example.com',\n        roll: 'superadmin'\n      });\n      (validarEmail as jest.Mock).mockReturnValue(true);\n      (validarPassword as jest.Mock).mockReturnValue(false);\n\n      await resetPasswordController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'La contraseña no cumple con los requisitos, debe de contener Mayúsculas, Minúsculas, Números y Carácteres especiales'\n      });\n    });\n  });\n\n  describe('updateUserByEmailController', () => {\n    beforeEach(() => {\n      mockRequest = createMockRequest({\n        body: {\n          name: 'Juan Updated',\n          lastName: 'Pérez Updated'\n        },\n        params: {\n          userEmail: 'juan@example.com'\n        }\n      });\n      (validarEmail as jest.Mock).mockReturnValue(true);\n    });\n\n    it('should update user successfully', async () => {\n      (updateUserByEmailModel as jest.Mock).mockResolvedValue(false); // false significa éxito\n\n      await updateUserByEmailController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Consulta éxitosa'\n      });\n    });\n\n    it('should return error when update fails', async () => {\n      (updateUserByEmailModel as jest.Mock).mockResolvedValue('Error al actualizar');\n\n      await updateUserByEmailController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(401);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Error al actualizar'\n      });\n    });\n\n    it('should return error when email is missing', async () => {\n      mockRequest = createMockRequest({\n        body: {\n          name: 'Juan Updated',\n          lastName: 'Pérez Updated'\n        },\n        params: {} // Sin userEmail\n      });\n\n      await updateUserByEmailController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(401);\n      expect(mockJson).toHaveBeenCalledWith({\n        msg: 'Error al actualizar el usuario.'\n      });\n    });\n  });\n\n  describe('deleteUserByEmailController', () => {\n    beforeEach(() => {\n      mockRequest = createMockRequest({\n        body: {\n          userEmail: 'juan@example.com'\n        }\n      });\n    });\n\n    it('should delete user successfully', async () => {\n      (deleteUserByEmailModel as jest.Mock).mockResolvedValue(false); // false significa éxito\n\n      await deleteUserByEmailController(mockRequest as Request, mockResponse as Response);\n\n      // El controlador usa res.json() directamente cuando es exitoso, no res.status(200).json()\n      expect(mockJson).toHaveBeenCalledWith({\n        message: 'Usuario eliminado correctamente'\n      });\n    });\n\n    it('should return error when user not found', async () => {\n      (deleteUserByEmailModel as jest.Mock).mockResolvedValue('not_found');\n\n      await deleteUserByEmailController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(404);\n      expect(mockJson).toHaveBeenCalledWith({\n        message: 'El usuario no existe o ya fue eliminado'\n      });\n    });\n\n    it('should return error when email is missing', async () => {\n      mockRequest = createMockRequest({\n        body: {} // Sin userEmail\n      });\n\n      await deleteUserByEmailController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        message: 'Falta el email'\n      });\n    });\n\n    it('should return error when model returns \"Falta el email\"', async () => {\n      (deleteUserByEmailModel as jest.Mock).mockResolvedValue('Falta el email');\n\n      await deleteUserByEmailController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        message: 'Falta el email'\n      });\n    });\n\n    it('should return error when model returns other error', async () => {\n      (deleteUserByEmailModel as jest.Mock).mockResolvedValue('Error de base de datos');\n\n      await deleteUserByEmailController(mockRequest as Request, mockResponse as Response);\n\n      expect(mockStatus).toHaveBeenCalledWith(500);\n      expect(mockJson).toHaveBeenCalledWith({\n        message: 'Error de base de datos'\n      });\n    });\n  });\n}); "],"version":3}