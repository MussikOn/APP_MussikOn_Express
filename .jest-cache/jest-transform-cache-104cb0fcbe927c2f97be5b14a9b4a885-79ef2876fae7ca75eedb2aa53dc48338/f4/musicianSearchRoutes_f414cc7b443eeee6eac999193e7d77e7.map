{"version":3,"names":["cov_1jv3jiwigw","actualCoverage","express_1","s","require","authMiddleware_1","errorHandler_1","loggerService_1","musicianSearchController_1","router","Router","post","authMiddleware","asyncHandler","req","res","f","__awaiter","logger","logAuth","b","_a","user","userEmail","metadata","eventId","body","MusicianSearchController","searchMusiciansForEvent","_b","get","params","getRecommendedMusicians","criteria","advancedSearch","getSearchStats","exports","default"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\musicianSearchRoutes.ts"],"sourcesContent":["import express, { Request, Response, Router } from 'express';\r\nimport { authMiddleware } from '../middleware/authMiddleware';\r\nimport { asyncHandler } from '../middleware/errorHandler';\r\nimport { logger } from '../services/loggerService';\r\nimport { MusicianSearchController } from '../controllers/musicianSearchController';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: Musician Search\r\n *   description: Endpoints para búsqueda y recomendación de músicos\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /musician-search/search-for-event:\r\n *   post:\r\n *     tags: [Musician Search]\r\n *     summary: Buscar músicos disponibles para un evento específico\r\n *     description: Algoritmo de búsqueda inteligente que encuentra músicos que coinciden con los criterios del evento\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - eventId\r\n *             properties:\r\n *               eventId:\r\n *                 type: string\r\n *                 description: ID del evento para el cual buscar músicos\r\n *               criteria:\r\n *                 type: object\r\n *                 description: Criterios adicionales de búsqueda (opcionales)\r\n *                 properties:\r\n *                   instrument:\r\n *                     type: string\r\n *                     description: Instrumento específico requerido\r\n *                   location:\r\n *                     type: string\r\n *                     description: Ubicación preferida\r\n *                   budget:\r\n *                     type: number\r\n *                     description: Presupuesto máximo\r\n *                   maxDistance:\r\n *                     type: number\r\n *                     description: Distancia máxima en kilómetros\r\n *     responses:\r\n *       200:\r\n *         description: Búsqueda completada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     eventId:\r\n *                       type: string\r\n *                     totalMusicians:\r\n *                       type: number\r\n *                     musicians:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           userEmail:\r\n *                             type: string\r\n *                           name:\r\n *                             type: string\r\n *                           lastName:\r\n *                             type: string\r\n *                           instruments:\r\n *                             type: array\r\n *                             items:\r\n *                               type: string\r\n *                           hasOwnInstruments:\r\n *                             type: boolean\r\n *                           experience:\r\n *                             type: number\r\n *                           hourlyRate:\r\n *                             type: number\r\n *                           location:\r\n *                             type: string\r\n *                           isAvailable:\r\n *                             type: boolean\r\n *                           rating:\r\n *                             type: number\r\n *                           matchScore:\r\n *                             type: number\r\n *                           availability:\r\n *                             type: object\r\n *                             properties:\r\n *                               isAvailable:\r\n *                                 type: boolean\r\n *                               conflicts:\r\n *                                 type: array\r\n *                                 items:\r\n *                                   type: string\r\n *       400:\r\n *         description: Datos de entrada inválidos\r\n *       403:\r\n *         description: No autorizado - Solo creadores de eventos\r\n *       404:\r\n *         description: Evento no encontrado\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\nrouter.post(\r\n  '/search-for-event',\r\n  authMiddleware,\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    logger.logAuth('Búsqueda de músicos solicitada', (req as any).user?.userEmail, {\r\n      metadata: { eventId: req.body.eventId },\r\n    });\r\n    await MusicianSearchController.searchMusiciansForEvent(req, res);\r\n    logger.logAuth('Búsqueda de músicos completada', (req as any).user?.userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /musician-search/recommendations/{eventId}:\r\n *   get:\r\n *     tags: [Musician Search]\r\n *     summary: Obtener músicos recomendados para un evento\r\n *     description: Obtiene las mejores recomendaciones de músicos para un evento específico\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: eventId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID del evento\r\n *     responses:\r\n *       200:\r\n *         description: Recomendaciones obtenidas exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     eventId:\r\n *                       type: string\r\n *                     totalRecommendations:\r\n *                       type: number\r\n *                     recommendations:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           userEmail:\r\n *                             type: string\r\n *                           name:\r\n *                             type: string\r\n *                           lastName:\r\n *                             type: string\r\n *                           instruments:\r\n *                             type: array\r\n *                             items:\r\n *                               type: string\r\n *                           hasOwnInstruments:\r\n *                             type: boolean\r\n *                           experience:\r\n *                             type: number\r\n *                           hourlyRate:\r\n *                             type: number\r\n *                           location:\r\n *                             type: string\r\n *                           isAvailable:\r\n *                             type: boolean\r\n *                           rating:\r\n *                             type: number\r\n *                           matchScore:\r\n *                             type: number\r\n *       403:\r\n *         description: No autorizado - Solo creadores de eventos\r\n *       404:\r\n *         description: Evento no encontrado\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\nrouter.get(\r\n  '/recommendations/:eventId',\r\n  authMiddleware,\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    logger.logAuth('Recomendaciones solicitadas', (req as any).user?.userEmail, {\r\n      metadata: { eventId: req.params.eventId },\r\n    });\r\n    await MusicianSearchController.getRecommendedMusicians(req, res);\r\n    logger.logAuth('Recomendaciones obtenidas', (req as any).user?.userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /musician-search/advanced-search:\r\n *   post:\r\n *     tags: [Musician Search]\r\n *     summary: Búsqueda avanzada de músicos\r\n *     description: Búsqueda personalizada con criterios específicos\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - criteria\r\n *             properties:\r\n *               criteria:\r\n *                 type: object\r\n *                 required:\r\n *                   - instrument\r\n *                 properties:\r\n *                   instrument:\r\n *                     type: string\r\n *                     description: Instrumento requerido\r\n *                   location:\r\n *                     type: string\r\n *                     description: Ubicación preferida\r\n *                   budget:\r\n *                     type: number\r\n *                     description: Presupuesto máximo\r\n *                   date:\r\n *                     type: string\r\n *                     format: date\r\n *                     description: Fecha del evento\r\n *                   time:\r\n *                     type: string\r\n *                     description: Hora del evento\r\n *                   duration:\r\n *                     type: string\r\n *                     description: Duración del evento (HH:MM)\r\n *                   eventType:\r\n *                     type: string\r\n *                     description: Tipo de evento\r\n *                   maxDistance:\r\n *                     type: number\r\n *                     description: Distancia máxima en kilómetros\r\n *                   bringInstrument:\r\n *                     type: boolean\r\n *                     description: Si el evento requiere instrumento\r\n *     responses:\r\n *       200:\r\n *         description: Búsqueda avanzada completada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     totalMusicians:\r\n *                       type: number\r\n *                     musicians:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           userEmail:\r\n *                             type: string\r\n *                           name:\r\n *                             type: string\r\n *                           lastName:\r\n *                             type: string\r\n *                           instruments:\r\n *                             type: array\r\n *                             items:\r\n *                               type: string\r\n *                           hasOwnInstruments:\r\n *                             type: boolean\r\n *                           experience:\r\n *                             type: number\r\n *                           hourlyRate:\r\n *                             type: number\r\n *                           location:\r\n *                             type: string\r\n *                           isAvailable:\r\n *                             type: boolean\r\n *                           rating:\r\n *                             type: number\r\n *                           matchScore:\r\n *                             type: number\r\n *       400:\r\n *         description: Criterios de búsqueda inválidos\r\n *       403:\r\n *         description: No autorizado - Solo creadores de eventos\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\nrouter.post(\r\n  '/advanced-search',\r\n  authMiddleware,\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    logger.logAuth('Búsqueda avanzada solicitada', (req as any).user?.userEmail, {\r\n      metadata: { criteria: req.body.criteria },\r\n    });\r\n    await MusicianSearchController.advancedSearch(req, res);\r\n    logger.logAuth('Búsqueda avanzada completada', (req as any).user?.userEmail);\r\n  })\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /musician-search/stats:\r\n *   get:\r\n *     tags: [Musician Search]\r\n *     summary: Obtener estadísticas de búsqueda\r\n *     description: Obtiene estadísticas sobre las búsquedas realizadas\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Estadísticas obtenidas exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     totalSearches:\r\n *                       type: number\r\n *                       description: Total de búsquedas realizadas\r\n *                     averageResults:\r\n *                       type: number\r\n *                       description: Promedio de resultados por búsqueda\r\n *                     mostSearchedInstrument:\r\n *                       type: string\r\n *                       description: Instrumento más buscado\r\n *                     lastSearchDate:\r\n *                       type: string\r\n *                       format: date-time\r\n *                       description: Fecha de la última búsqueda\r\n *                     totalMusiciansAvailable:\r\n *                       type: number\r\n *                       description: Total de músicos disponibles\r\n *       403:\r\n *         description: No autorizado - Solo creadores de eventos\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\nrouter.get(\r\n  '/stats',\r\n  authMiddleware,\r\n  asyncHandler(async (req: Request, res: Response) => {\r\n    logger.logAuth('Estadísticas de búsqueda solicitadas', (req as any).user?.userEmail);\r\n    await MusicianSearchController.getSearchStats(req, res);\r\n    logger.logAuth('Estadísticas de búsqueda obtenidas', (req as any).user?.userEmail);\r\n  })\r\n);\r\n\r\nexport default router; "],"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","ignoreList":[]}