{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\chatController.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\chatController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport {\n  getConversations,\n  getMessages,\n  sendMessage,\n  markAsRead,\n  createConversation,\n  searchConversations,\n  deleteConversation,\n  archiveConversation,\n  getConversationById,\n  getChatStats,\n  getAvailableUsers\n} from '../controllers/chatController';\nimport {\n  createConversationModel,\n  getConversationsByUserModel,\n  getConversationByIdModel,\n  getMessagesByConversationModel,\n  createMessageModel,\n  markMessageAsReadModel,\n  markConversationAsReadModel,\n  searchConversationsModel,\n  deleteConversationModel,\n  archiveConversationModel,\n  getChatStatsModel,\n  getConversationBetweenUsersModel,\n} from '../models/chatModel';\n\n// Mock the chat models\njest.mock('../models/chatModel');\njest.mock('../services/loggerService', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn()\n  }\n}));\n\ndescribe('ChatController', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockStatus: jest.Mock;\n  let mockJson: jest.Mock;\n\n  beforeEach(() => {\n    mockStatus = jest.fn().mockReturnThis();\n    mockJson = jest.fn().mockReturnThis();\n    mockResponse = {\n      status: mockStatus,\n      json: mockJson\n    };\n    jest.clearAllMocks();\n  });\n\n  describe('getConversations', () => {\n    it('should return user conversations successfully', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      const mockConversations = [\n        {\n          id: 'conv1',\n          participants: ['user@example.com', 'other@example.com'],\n          lastMessage: 'Hello there',\n          lastMessageTime: new Date().toISOString(),\n          unreadCount: 2,\n          isArchived: false,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      ];\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      (getConversationsByUserModel as jest.Mock).mockResolvedValue(mockConversations);\n\n      // Act\n      await getConversations(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(getConversationsByUserModel).toHaveBeenCalledWith(userEmail);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockConversations\n      });\n    });\n\n    it('should return error when user is not authenticated', async () => {\n      // Arrange\n      mockRequest = {\n        user: undefined\n      };\n\n      // Act\n      await getConversations(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(401);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: false,\n        error: 'Usuario no autenticado'\n      });\n    });\n  });\n\n  describe('getMessages', () => {\n    it('should return messages successfully', async () => {\n      // Arrange\n      const conversationId = 'conv123';\n      const userEmail = 'user@example.com';\n      const mockMessages = [\n        {\n          id: 'msg1',\n          conversationId,\n          sender: 'user@example.com',\n          content: 'Hello',\n          timestamp: new Date().toISOString(),\n          isRead: false\n        }\n      ];\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        params: { conversationId }\n      };\n\n      (getConversationByIdModel as jest.Mock).mockResolvedValue({\n        id: conversationId,\n        participants: [userEmail, 'other@example.com']\n      });\n      (getMessagesByConversationModel as jest.Mock).mockResolvedValue(mockMessages);\n      (markConversationAsReadModel as jest.Mock).mockResolvedValue(undefined);\n\n      // Act\n      await getMessages(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(getConversationByIdModel).toHaveBeenCalledWith(conversationId);\n      expect(getMessagesByConversationModel).toHaveBeenCalledWith(conversationId);\n      expect(markConversationAsReadModel).toHaveBeenCalledWith(conversationId, userEmail);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockMessages\n      });\n    });\n  });\n\n  describe('sendMessage', () => {\n    it('should send message successfully', async () => {\n      // Arrange\n      const conversationId = 'conv123';\n      const userEmail = 'user@example.com';\n      const messageContent = 'Hello there';\n      const mockMessage = {\n        id: 'msg123',\n        conversationId,\n        sender: userEmail,\n        content: messageContent,\n        timestamp: new Date().toISOString(),\n        isRead: false\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        params: { conversationId },\n        body: { content: messageContent }\n      };\n\n      (getConversationByIdModel as jest.Mock).mockResolvedValue({\n        id: conversationId,\n        participants: [userEmail, 'other@example.com']\n      });\n      (createMessageModel as jest.Mock).mockResolvedValue(mockMessage);\n\n      // Act\n      await sendMessage(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(getConversationByIdModel).toHaveBeenCalledWith(conversationId);\n      expect(createMessageModel).toHaveBeenCalledWith({\n        conversationId,\n        senderId: userEmail,\n        senderName: 'Test User',\n        content: messageContent,\n        status: 'sent',\n        type: 'text'\n      });\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockMessage\n      });\n    });\n  });\n\n  describe('markAsRead', () => {\n    it('should mark message as read successfully', async () => {\n      // Arrange\n      const messageId = 'msg123';\n      const userEmail = 'user@example.com';\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        params: { messageId }\n      };\n\n      (markMessageAsReadModel as jest.Mock).mockResolvedValue(undefined);\n\n      // Act\n      await markAsRead(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(markMessageAsReadModel).toHaveBeenCalledWith(messageId);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: null\n      });\n    });\n  });\n\n  describe('createConversation', () => {\n    it('should create conversation successfully', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      const participantEmail = 'other@example.com';\n      const mockConversation = {\n        id: 'conv123',\n        participants: [userEmail, participantEmail],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        body: { participants: [participantEmail] }\n      };\n\n      (getConversationBetweenUsersModel as jest.Mock).mockResolvedValue(null);\n      (createConversationModel as jest.Mock).mockResolvedValue(mockConversation);\n\n      // Act\n      await createConversation(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(getConversationBetweenUsersModel).toHaveBeenCalledWith(userEmail, participantEmail);\n      expect(createConversationModel).toHaveBeenCalledWith([userEmail, participantEmail]);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockConversation\n      });\n    });\n\n    it('should return error when participant email is missing', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        body: { participants: [] }\n      };\n\n      // Act\n      await createConversation(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: false,\n        error: 'Se requiere al menos un participante'\n      });\n    });\n  });\n\n  describe('searchConversations', () => {\n    it('should search conversations successfully', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      const searchTerm = 'test';\n      const mockConversations = [\n        {\n          id: 'conv1',\n          participants: [userEmail, 'other@example.com'],\n          lastMessage: 'test message',\n          lastMessageTime: new Date().toISOString(),\n          unreadCount: 0,\n          isArchived: false\n        }\n      ];\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        query: { search: searchTerm }\n      };\n\n      (searchConversationsModel as jest.Mock).mockResolvedValue(mockConversations);\n\n      // Act\n      await searchConversations(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(searchConversationsModel).toHaveBeenCalledWith(userEmail, {\n        dateFrom: undefined,\n        dateTo: undefined,\n        search: searchTerm,\n        unreadOnly: false\n      });\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockConversations\n      });\n    });\n  });\n\n  describe('deleteConversation', () => {\n    it('should delete conversation successfully', async () => {\n      // Arrange\n      const conversationId = 'conv123';\n      const userEmail = 'user@example.com';\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        params: { conversationId }\n      };\n\n      (deleteConversationModel as jest.Mock).mockResolvedValue(undefined);\n\n      // Act\n      await deleteConversation(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(deleteConversationModel).toHaveBeenCalledWith(conversationId, userEmail);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: null\n      });\n    });\n  });\n\n  describe('archiveConversation', () => {\n    it('should archive conversation successfully', async () => {\n      // Arrange\n      const conversationId = 'conv123';\n      const userEmail = 'user@example.com';\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        params: { conversationId }\n      };\n\n      (archiveConversationModel as jest.Mock).mockResolvedValue(undefined);\n\n      // Act\n      await archiveConversation(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(archiveConversationModel).toHaveBeenCalledWith(conversationId, userEmail);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: null\n      });\n    });\n  });\n\n  describe('getConversationById', () => {\n    it('should return conversation by id successfully', async () => {\n      // Arrange\n      const conversationId = 'conv123';\n      const userEmail = 'user@example.com';\n      const mockConversation = {\n        id: conversationId,\n        participants: [userEmail, 'other@example.com'],\n        lastMessage: 'Hello there',\n        lastMessageTime: new Date().toISOString(),\n        unreadCount: 2,\n        isArchived: false,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        params: { conversationId }\n      };\n\n      (getConversationByIdModel as jest.Mock).mockResolvedValue(mockConversation);\n\n      // Act\n      await getConversationById(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(getConversationByIdModel).toHaveBeenCalledWith(conversationId);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockConversation\n      });\n    });\n\n    it('should return 404 when conversation not found', async () => {\n      // Arrange\n      const conversationId = 'nonexistent';\n      const userEmail = 'user@example.com';\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        params: { conversationId }\n      };\n\n      (getConversationByIdModel as jest.Mock).mockResolvedValue(null);\n\n      // Act\n      await getConversationById(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(404);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: false,\n        error: 'Conversación no encontrada'\n      });\n    });\n  });\n\n  describe('getChatStats', () => {\n    it('should return chat stats successfully', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      const mockStats = {\n        totalConversations: 10,\n        unreadMessages: 5,\n        archivedConversations: 2,\n        totalMessages: 150\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      (getChatStatsModel as jest.Mock).mockResolvedValue(mockStats);\n\n      // Act\n      await getChatStats(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(getChatStatsModel).toHaveBeenCalledWith(userEmail);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockStats\n      });\n    });\n  });\n\n  describe('getAvailableUsers', () => {\n    it('should return available users successfully', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      const mockUsers = [\n        {\n          email: 'other@example.com',\n          name: 'Other User',\n          role: 'musician',\n          isOnline: true\n        }\n      ];\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      // Mock the function that gets available users (this would need to be implemented)\n      // For now, we'll just test the basic structure\n      mockResponse.json = jest.fn();\n\n      // Act\n      await getAvailableUsers(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.json).toHaveBeenCalled();\n    });\n  });\n}); "],"version":3}