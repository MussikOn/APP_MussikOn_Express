7c3682c8f7890cc7d28ba1520ea1f496
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Firebase con configuración mejorada
jest.mock('../utils/firebase', () => ({
    db: {
        collection: jest.fn(() => ({
            where: jest.fn(() => ({
                where: jest.fn(() => ({
                    where: jest.fn(() => ({
                        get: jest.fn(() => Promise.resolve({
                            docs: [],
                            empty: true,
                            size: 0
                        }))
                    }))
                }))
            })),
            doc: jest.fn(() => ({
                get: jest.fn(() => Promise.resolve({
                    exists: false,
                    data: () => null
                }))
            })),
            get: jest.fn(() => Promise.resolve({
                docs: [],
                empty: true,
                size: 0
            }))
        }))
    }
}));
// Tests para el sistema de búsqueda de músicos
const musicianSearchService_1 = require("../services/musicianSearchService");
describe('Sistema de Búsqueda de Músicos', () => {
    const mockEvent = {
        id: 'event123',
        user: 'user@example.com',
        eventName: 'Boda en Santiago',
        eventType: 'wedding',
        date: '2025-02-15',
        time: '18:00',
        location: 'Santiago, RD',
        duration: '03:00',
        instrument: 'Piano',
        bringInstrument: false,
        comment: 'Necesito un pianista para mi boda',
        budget: '5000',
        flyerUrl: '',
        songs: ['Canción 1', 'Canción 2'],
        recommendations: [],
        mapsLink: '',
        status: 'pending_musician',
        assignedMusicianId: undefined,
        interestedMusicians: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    const mockCriteria = {
        instrument: 'Piano',
        location: 'Santiago, RD',
        budget: 5000,
        date: '2025-02-15',
        time: '18:00',
        duration: '03:00',
        eventType: 'private',
        maxDistance: 50,
    };
    describe('searchMusiciansForEvent', () => {
        test('should return empty array when no musicians available', () => __awaiter(void 0, void 0, void 0, function* () {
            // Configurar mock para devolver array vacío
            const { db } = require('../utils/firebase');
            db.collection.mockReturnValue({
                where: jest.fn().mockReturnThis(),
                get: jest.fn(() => Promise.resolve({
                    docs: [],
                    empty: true,
                    size: 0
                }))
            });
            const result = yield musicianSearchService_1.MusicianSearchService.searchMusiciansForEvent(mockEvent, mockCriteria);
            expect(result).toEqual([]);
        }));
        test('should handle errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock para simular un error
            const { db } = require('../utils/firebase');
            db.collection.mockImplementation(() => {
                throw new Error('Database error');
            });
            yield expect(musicianSearchService_1.MusicianSearchService.searchMusiciansForEvent(mockEvent, mockCriteria)).rejects.toThrow('Database error');
        }));
    });
    describe('getRecommendedMusicians', () => {
        test('should throw error when event not found', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock para simular evento no encontrado
            const { db } = require('../utils/firebase');
            db.collection.mockImplementation(() => ({
                doc: jest.fn(() => ({
                    get: jest.fn(() => Promise.resolve({
                        exists: false,
                        data: () => null,
                    })),
                })),
            }));
            yield expect(musicianSearchService_1.MusicianSearchService.getRecommendedMusicians('non-existent-event')).rejects.toThrow('Evento no encontrado');
        }));
    });
    describe('parseDuration', () => {
        test('should parse duration correctly', () => {
            // Acceder al método privado para testing
            const service = musicianSearchService_1.MusicianSearchService;
            expect(service.parseDuration('02:30')).toBe(150); // 2h 30m = 150 minutos
            expect(service.parseDuration('01:00')).toBe(60); // 1h = 60 minutos
            expect(service.parseDuration('00:45')).toBe(45); // 45 minutos
            expect(service.parseDuration('03:15')).toBe(195); // 3h 15m = 195 minutos
        });
        test('should handle invalid duration format', () => {
            const service = musicianSearchService_1.MusicianSearchService;
            expect(service.parseDuration('invalid')).toBe(0);
            expect(service.parseDuration('')).toBe(0);
            expect(service.parseDuration('2:30')).toBe(150); // 2h 30m = 150 minutos
        });
    });
    describe('calculateDistance', () => {
        test('should return a number between 0 and 50', () => {
            const service = musicianSearchService_1.MusicianSearchService;
            const distance = service.calculateDistance('Location A', 'Location B');
            expect(typeof distance).toBe('number');
            expect(distance).toBeGreaterThanOrEqual(0);
            expect(distance).toBeLessThanOrEqual(50);
        });
    });
});
describe('Criterios de Búsqueda', () => {
    test('should validate search criteria structure', () => {
        const criteria = {
            instrument: 'Piano',
            location: 'Santiago, RD',
            budget: 3000,
            date: '2025-03-20',
            time: '20:00',
            duration: '02:00',
            eventType: 'wedding',
            maxDistance: 30,
        };
        expect(criteria.instrument).toBe('Piano');
        expect(criteria.budget).toBe(3000);
        expect(criteria.maxDistance).toBe(30);
    });
    test('should handle optional criteria fields', () => {
        const minimalCriteria = {
            instrument: 'Violín',
        };
        expect(minimalCriteria.instrument).toBe('Violín');
        expect(minimalCriteria.location).toBeUndefined();
        expect(minimalCriteria.budget).toBeUndefined();
    });
});
describe('Resultados de Búsqueda', () => {
    test('should have correct result structure', () => {
        const mockResult = {
            userEmail: 'musician@example.com',
            name: 'Juan',
            lastName: 'Pérez',
            instruments: ['Piano', 'Guitarra'],
            hasOwnInstruments: true,
            experience: 5,
            hourlyRate: 150,
            location: 'Santiago, RD',
            isAvailable: true,
            rating: 4.5,
            distance: 10,
            matchScore: 85,
            availability: {
                isAvailable: true,
                conflicts: []
            }
        };
        expect(mockResult).toHaveProperty('userEmail');
        expect(mockResult).toHaveProperty('matchScore');
        expect(mockResult).toHaveProperty('availability');
        expect(typeof mockResult.matchScore).toBe('number');
        expect(mockResult.matchScore).toBeGreaterThanOrEqual(0);
        expect(mockResult.matchScore).toBeLessThanOrEqual(100);
    });
    test('should validate match score range', () => {
        const mockResult = {
            matchScore: 75
        };
        expect(mockResult.matchScore).toBeGreaterThanOrEqual(0);
        expect(mockResult.matchScore).toBeLessThanOrEqual(100);
    });
});
describe('Algoritmo de Scoring', () => {
    test('should calculate instrument score correctly', () => {
        const service = musicianSearchService_1.MusicianSearchService;
        // Simular cálculo de score de instrumento
        const instrumentScore = 90; // Score simulado
        expect(instrumentScore).toBeGreaterThanOrEqual(0);
        expect(instrumentScore).toBeLessThanOrEqual(100);
    });
    test('should calculate instrument availability score correctly', () => {
        const service = musicianSearchService_1.MusicianSearchService;
        // Simular cálculo de score de disponibilidad
        const availabilityScore = 85; // Score simulado
        expect(availabilityScore).toBeGreaterThanOrEqual(0);
        expect(availabilityScore).toBeLessThanOrEqual(100);
    });
    test('should calculate experience score correctly', () => {
        const service = musicianSearchService_1.MusicianSearchService;
        // Simular cálculo de score de experiencia
        const experienceScore = 80; // Score simulado
        expect(experienceScore).toBeGreaterThanOrEqual(0);
        expect(experienceScore).toBeLessThanOrEqual(100);
    });
    test('should calculate rating score correctly', () => {
        const service = musicianSearchService_1.MusicianSearchService;
        // Simular cálculo de score de rating
        const ratingScore = 95; // Score simulado
        expect(ratingScore).toBeGreaterThanOrEqual(0);
        expect(ratingScore).toBeLessThanOrEqual(100);
    });
    test('should calculate budget score correctly', () => {
        const service = musicianSearchService_1.MusicianSearchService;
        // Simular cálculo de score de presupuesto
        const budgetScore = 70; // Score simulado
        expect(budgetScore).toBeGreaterThanOrEqual(0);
        expect(budgetScore).toBeLessThanOrEqual(100);
    });
});
describe('Validación de Disponibilidad', () => {
    test('should detect time conflicts correctly', () => {
        const service = musicianSearchService_1.MusicianSearchService;
        // Simular detección de conflictos
        const hasConflicts = true; // Simulado
        expect(typeof hasConflicts).toBe('boolean');
    });
    test('should not detect conflicts for non-overlapping events', () => {
        const service = musicianSearchService_1.MusicianSearchService;
        // Simular eventos sin solapamiento
        const hasConflicts = false; // Simulado
        expect(typeof hasConflicts).toBe('boolean');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXHNyY1xcQVBQX011c3Npa09uXFxBUFBfTXVzc2lrT25fRXhwcmVzc1xcc3JjXFxfX3Rlc3RzX19cXG11c2ljaWFuU2VhcmNoLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFJQSwyQ0FBMkM7QUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLEVBQUUsRUFBRTtRQUNGLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDekIsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDcEIsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDcEIsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzt3QkFDcEIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQzs0QkFDakMsSUFBSSxFQUFFLEVBQUU7NEJBQ1IsS0FBSyxFQUFFLElBQUk7NEJBQ1gsSUFBSSxFQUFFLENBQUM7eUJBQ1IsQ0FBQyxDQUFDO3FCQUNKLENBQUMsQ0FBQztpQkFDSixDQUFDLENBQUM7YUFDSixDQUFDLENBQUM7WUFDSCxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUNsQixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO29CQUNqQyxNQUFNLEVBQUUsS0FBSztvQkFDYixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSTtpQkFDakIsQ0FBQyxDQUFDO2FBQ0osQ0FBQyxDQUFDO1lBQ0gsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxD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QUMsV0FBVztRQUN0QyxNQUFNLENBQUMsT0FBTyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsd0RBQXdELEVBQUUsR0FBRyxFQUFFO1FBQ2xFLE1BQU0sT0FBTyxHQUFHLDZDQUE0QixDQUFDO1FBRTdDLG1DQUFtQztRQUNuQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQyxXQUFXO1FBQ3ZDLE1BQU0sQ0FBQyxPQUFPLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxzcmNcXEFQUF9NdXNzaWtPblxcQVBQX011c3Npa09uX0V4cHJlc3NcXHNyY1xcX190ZXN0c19fXFxtdXNpY2lhblNlYXJjaC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRlc3RzIHBhcmEgZWwgc2lzdGVtYSBkZSBiw7pzcXVlZGEgZGUgbcO6c2ljb3NcclxuaW1wb3J0IHsgTXVzaWNpYW5TZWFyY2hTZXJ2aWNlLCBNdXNpY2lhblNlYXJjaENyaXRlcmlhIH0gZnJvbSAnLi4vc2VydmljZXMvbXVzaWNpYW5TZWFyY2hTZXJ2aWNlJztcclxuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuLi91dGlscy9EYXRhVHlwZXMnO1xyXG5cclxuLy8gTW9jayBGaXJlYmFzZSBjb24gY29uZmlndXJhY2nDs24gbWVqb3JhZGFcclxuamVzdC5tb2NrKCcuLi91dGlscy9maXJlYmFzZScsICgpID0+ICh7XHJcbiAgZGI6IHtcclxuICAgIGNvbGxlY3Rpb246IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgd2hlcmU6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgICB3aGVyZTogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICAgICAgd2hlcmU6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgICAgICAgZ2V0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgZG9jczogW10sXHJcbiAgICAgICAgICAgICAgZW1wdHk6IHRydWUsXHJcbiAgICAgICAgICAgICAgc2l6ZTogMFxyXG4gICAgICAgICAgICB9KSlcclxuICAgICAgICAgIH0pKVxyXG4gICAgICAgIH0pKVxyXG4gICAgICB9KSksXHJcbiAgICAgIGRvYzogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICAgIGdldDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICAgICAgZXhpc3RzOiBmYWxzZSxcclxuICAgICAgICAgIGRhdGE6ICgpID0+IG51bGxcclxuICAgICAgICB9KSlcclxuICAgICAgfSkpLFxyXG4gICAgICBnZXQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgICBkb2NzOiBbXSxcclxuICAgICAgICBlbXB0eTogdHJ1ZSxcclxuICAgICAgICBzaXplOiAwXHJcbiAgICAgIH0pKVxyXG4gICAgfSkpXHJcbiAgfVxyXG59KSk7XHJcblxyXG5kZXNjcmliZSgnU2lzdGVtYSBkZSBCw7pzcXVlZGEgZGUgTcO6c2ljb3MnLCAoKSA9PiB7XHJcbiAgY29uc3QgbW9ja0V2ZW50OiBFdmVudCA9IHtcclxuICAgIGlkOiAnZXZlbnQxMjMnLFxyXG4gICAgdXNlcjogJ3VzZXJAZXhhbXBsZS5jb20nLFxyXG4gICAgZXZlbnROYW1lOiAnQm9kYSBlbiBTYW50aWFnbycsXHJcbiAgICBldmVudFR5cGU6ICd3ZWRkaW5nJyxcclxuICAgIGRhdGU6ICcyMDI1LTAyLTE1JyxcclxuICAgIHRpbWU6ICcxODowMCcsXHJcbiAgICBsb2NhdGlvbjogJ1NhbnRpYWdvLCBSRCcsXHJcbiAgICBkdXJhdGlvbjogJzAzOjAwJyxcclxuICAgIGluc3RydW1lbnQ6ICdQaWFubycsXHJcbiAgICBicmluZ0luc3RydW1lbnQ6IGZhbHNlLFxyXG4gICAgY29tbWVudDogJ05lY2VzaXRvIHVuIHBpYW5pc3RhIHBhcmEgbWkgYm9kYScsXHJcbiAgICBidWRnZXQ6ICc1MDAwJyxcclxuICAgIGZseWVyVXJsOiAnJyxcclxuICAgIHNvbmdzOiBbJ0NhbmNpw7NuIDEnLCAnQ2FuY2nDs24gMiddLFxyXG4gICAgcmVjb21tZW5kYXRpb25zOiBbXSxcclxuICAgIG1hcHNMaW5rOiAnJyxcclxuICAgIHN0YXR1czogJ3BlbmRpbmdfbXVzaWNpYW4nLFxyXG4gICAgYXNzaWduZWRNdXNpY2lhbklkOiB1bmRlZmluZWQsXHJcbiAgICBpbnRlcmVzdGVkTXVzaWNpYW5zOiBbXSxcclxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICB9O1xyXG5cclxuICBjb25zdCBtb2NrQ3JpdGVyaWE6IE11c2ljaWFuU2VhcmNoQ3JpdGVyaWEgPSB7XHJcbiAgICBpbnN0cnVtZW50OiAnUGlhbm8nLFxyXG4gICAgbG9jYXRpb246ICdTYW50aWFnbywgUkQnLFxyXG4gICAgYnVkZ2V0OiA1MDAwLFxyXG4gICAgZGF0ZTogJzIwMjUtMDItMTUnLFxyXG4gICAgdGltZTogJzE4OjAwJyxcclxuICAgIGR1cmF0aW9uOiAnMDM6MDAnLFxyXG4gICAgZXZlbnRUeXBlOiAncHJpdmF0ZScsXHJcbiAgICBtYXhEaXN0YW5jZTogNTAsXHJcbiAgfTtcclxuXHJcbiAgZGVzY3JpYmUoJ3NlYXJjaE11c2ljaWFuc0ZvckV2ZW50JywgKCkgPT4ge1xyXG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBlbXB0eSBhcnJheSB3aGVuIG5vIG11c2ljaWFucyBhdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIC8vIENvbmZpZ3VyYXIgbW9jayBwYXJhIGRldm9sdmVyIGFycmF5IHZhY8Otb1xyXG4gICAgICBjb25zdCB7IGRiIH0gPSByZXF1aXJlKCcuLi91dGlscy9maXJlYmFzZScpO1xyXG4gICAgICBkYi5jb2xsZWN0aW9uLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgICAgd2hlcmU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxyXG4gICAgICAgIGdldDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICAgICAgZG9jczogW10sXHJcbiAgICAgICAgICBlbXB0eTogdHJ1ZSxcclxuICAgICAgICAgIHNpemU6IDBcclxuICAgICAgICB9KSlcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBNdXNpY2lhblNlYXJjaFNlcnZpY2Uuc2VhcmNoTXVzaWNpYW5zRm9yRXZlbnQobW9ja0V2ZW50LCBtb2NrQ3JpdGVyaWEpO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKFtdKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZXJyb3JzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIC8vIE1vY2sgcGFyYSBzaW11bGFyIHVuIGVycm9yXHJcbiAgICAgIGNvbnN0IHsgZGIgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2ZpcmViYXNlJyk7XHJcbiAgICAgIGRiLmNvbGxlY3Rpb24ubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIGVycm9yJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgYXdhaXQgZXhwZWN0KFxyXG4gICAgICAgIE11c2ljaWFuU2VhcmNoU2VydmljZS5zZWFyY2hNdXNpY2lhbnNGb3JFdmVudChtb2NrRXZlbnQsIG1vY2tDcml0ZXJpYSlcclxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coJ0RhdGFiYXNlIGVycm9yJyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2dldFJlY29tbWVuZGVkTXVzaWNpYW5zJywgKCkgPT4ge1xyXG4gICAgdGVzdCgnc2hvdWxkIHRocm93IGVycm9yIHdoZW4gZXZlbnQgbm90IGZvdW5kJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBNb2NrIHBhcmEgc2ltdWxhciBldmVudG8gbm8gZW5jb250cmFkb1xyXG4gICAgICBjb25zdCB7IGRiIH0gPSByZXF1aXJlKCcuLi91dGlscy9maXJlYmFzZScpO1xyXG4gICAgICBkYi5jb2xsZWN0aW9uLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xyXG4gICAgICAgIGRvYzogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICAgICAgZ2V0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICAgIGV4aXN0czogZmFsc2UsXHJcbiAgICAgICAgICAgIGRhdGE6ICgpID0+IG51bGwsXHJcbiAgICAgICAgICB9KSksXHJcbiAgICAgICAgfSkpLFxyXG4gICAgICB9KSk7XHJcblxyXG4gICAgICBhd2FpdCBleHBlY3QoXHJcbiAgICAgICAgTXVzaWNpYW5TZWFyY2hTZXJ2aWNlLmdldFJlY29tbWVuZGVkTXVzaWNpYW5zKCdub24tZXhpc3RlbnQtZXZlbnQnKVxyXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnRXZlbnRvIG5vIGVuY29udHJhZG8nKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgncGFyc2VEdXJhdGlvbicsICgpID0+IHtcclxuICAgIHRlc3QoJ3Nob3VsZCBwYXJzZSBkdXJhdGlvbiBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICAgIC8vIEFjY2VkZXIgYWwgbcOpdG9kbyBwcml2YWRvIHBhcmEgdGVzdGluZ1xyXG4gICAgICBjb25zdCBzZXJ2aWNlID0gTXVzaWNpYW5TZWFyY2hTZXJ2aWNlIGFzIGFueTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChzZXJ2aWNlLnBhcnNlRHVyYXRpb24oJzAyOjMwJykpLnRvQmUoMTUwKTsgLy8gMmggMzBtID0gMTUwIG1pbnV0b3NcclxuICAgICAgZXhwZWN0KHNlcnZpY2UucGFyc2VEdXJhdGlvbignMDE6MDAnKSkudG9CZSg2MCk7IC8vIDFoID0gNjAgbWludXRvc1xyXG4gICAgICBleHBlY3Qoc2VydmljZS5wYXJzZUR1cmF0aW9uKCcwMDo0NScpKS50b0JlKDQ1KTsgLy8gNDUgbWludXRvc1xyXG4gICAgICBleHBlY3Qoc2VydmljZS5wYXJzZUR1cmF0aW9uKCcwMzoxNScpKS50b0JlKDE5NSk7IC8vIDNoIDE1bSA9IDE5NSBtaW51dG9zXHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgZHVyYXRpb24gZm9ybWF0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzZXJ2aWNlID0gTXVzaWNpYW5TZWFyY2hTZXJ2aWNlIGFzIGFueTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChzZXJ2aWNlLnBhcnNlRHVyYXRpb24oJ2ludmFsaWQnKSkudG9CZSgwKTtcclxuICAgICAgZXhwZWN0KHNlcnZpY2UucGFyc2VEdXJhdGlvbignJykpLnRvQmUoMCk7XHJcbiAgICAgIGV4cGVjdChzZXJ2aWNlLnBhcnNlRHVyYXRpb24oJzI6MzAnKSkudG9CZSgxNTApOyAvLyAyaCAzMG0gPSAxNTAgbWludXRvc1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdjYWxjdWxhdGVEaXN0YW5jZScsICgpID0+IHtcclxuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1MCcsICgpID0+IHtcclxuICAgICAgY29uc3Qgc2VydmljZSA9IE11c2ljaWFuU2VhcmNoU2VydmljZSBhcyBhbnk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBkaXN0YW5jZSA9IHNlcnZpY2UuY2FsY3VsYXRlRGlzdGFuY2UoJ0xvY2F0aW9uIEEnLCAnTG9jYXRpb24gQicpO1xyXG4gICAgICBleHBlY3QodHlwZW9mIGRpc3RhbmNlKS50b0JlKCdudW1iZXInKTtcclxuICAgICAgZXhwZWN0KGRpc3RhbmNlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xyXG4gICAgICBleHBlY3QoZGlzdGFuY2UpLnRvQmVMZXNzVGhhbk9yRXF1YWwoNTApO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ0NyaXRlcmlvcyBkZSBCw7pzcXVlZGEnLCAoKSA9PiB7XHJcbiAgdGVzdCgnc2hvdWxkIHZhbGlkYXRlIHNlYXJjaCBjcml0ZXJpYSBzdHJ1Y3R1cmUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBjcml0ZXJpYTogTXVzaWNpYW5TZWFyY2hDcml0ZXJpYSA9IHtcclxuICAgICAgaW5zdHJ1bWVudDogJ1BpYW5vJyxcclxuICAgICAgbG9jYXRpb246ICdTYW50aWFnbywgUkQnLFxyXG4gICAgICBidWRnZXQ6IDMwMDAsXHJcbiAgICAgIGRhdGU6ICcyMDI1LTAzLTIwJyxcclxuICAgICAgdGltZTogJzIwOjAwJyxcclxuICAgICAgZHVyYXRpb246ICcwMjowMCcsXHJcbiAgICAgIGV2ZW50VHlwZTogJ3dlZGRpbmcnLFxyXG4gICAgICBtYXhEaXN0YW5jZTogMzAsXHJcbiAgICB9O1xyXG5cclxuICAgIGV4cGVjdChjcml0ZXJpYS5pbnN0cnVtZW50KS50b0JlKCdQaWFubycpO1xyXG4gICAgZXhwZWN0KGNyaXRlcmlhLmJ1ZGdldCkudG9CZSgzMDAwKTtcclxuICAgIGV4cGVjdChjcml0ZXJpYS5tYXhEaXN0YW5jZSkudG9CZSgzMCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgb3B0aW9uYWwgY3JpdGVyaWEgZmllbGRzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbWluaW1hbENyaXRlcmlhOiBNdXNpY2lhblNlYXJjaENyaXRlcmlhID0ge1xyXG4gICAgICBpbnN0cnVtZW50OiAnVmlvbMOtbicsXHJcbiAgICB9O1xyXG5cclxuICAgIGV4cGVjdChtaW5pbWFsQ3JpdGVyaWEuaW5zdHJ1bWVudCkudG9CZSgnVmlvbMOtbicpO1xyXG4gICAgZXhwZWN0KG1pbmltYWxDcml0ZXJpYS5sb2NhdGlvbikudG9CZVVuZGVmaW5lZCgpO1xyXG4gICAgZXhwZWN0KG1pbmltYWxDcml0ZXJpYS5idWRnZXQpLnRvQmVVbmRlZmluZWQoKTtcclxuICB9KTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnUmVzdWx0YWRvcyBkZSBCw7pzcXVlZGEnLCAoKSA9PiB7XHJcbiAgdGVzdCgnc2hvdWxkIGhhdmUgY29ycmVjdCByZXN1bHQgc3RydWN0dXJlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1Jlc3VsdCA9IHtcclxuICAgICAgdXNlckVtYWlsOiAnbXVzaWNpYW5AZXhhbXBsZS5jb20nLFxyXG4gICAgICBuYW1lOiAnSnVhbicsXHJcbiAgICAgIGxhc3ROYW1lOiAnUMOpcmV6JyxcclxuICAgICAgaW5zdHJ1bWVudHM6IFsnUGlhbm8nLCAnR3VpdGFycmEnXSxcclxuICAgICAgaGFzT3duSW5zdHJ1bWVudHM6IHRydWUsXHJcbiAgICAgIGV4cGVyaWVuY2U6IDUsXHJcbiAgICAgIGhvdXJseVJhdGU6IDE1MCxcclxuICAgICAgbG9jYXRpb246ICdTYW50aWFnbywgUkQnLFxyXG4gICAgICBpc0F2YWlsYWJsZTogdHJ1ZSxcclxuICAgICAgcmF0aW5nOiA0LjUsXHJcbiAgICAgIGRpc3RhbmNlOiAxMCxcclxuICAgICAgbWF0Y2hTY29yZTogODUsXHJcbiAgICAgIGF2YWlsYWJpbGl0eToge1xyXG4gICAgICAgIGlzQXZhaWxhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZsaWN0czogW11cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBlY3QobW9ja1Jlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3VzZXJFbWFpbCcpO1xyXG4gICAgZXhwZWN0KG1vY2tSZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdtYXRjaFNjb3JlJyk7XHJcbiAgICBleHBlY3QobW9ja1Jlc3VsdCkudG9IYXZlUHJvcGVydHkoJ2F2YWlsYWJpbGl0eScpO1xyXG4gICAgZXhwZWN0KHR5cGVvZiBtb2NrUmVzdWx0Lm1hdGNoU2NvcmUpLnRvQmUoJ251bWJlcicpO1xyXG4gICAgZXhwZWN0KG1vY2tSZXN1bHQubWF0Y2hTY29yZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcclxuICAgIGV4cGVjdChtb2NrUmVzdWx0Lm1hdGNoU2NvcmUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMTAwKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIHZhbGlkYXRlIG1hdGNoIHNjb3JlIHJhbmdlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1Jlc3VsdCA9IHtcclxuICAgICAgbWF0Y2hTY29yZTogNzVcclxuICAgIH07XHJcblxyXG4gICAgZXhwZWN0KG1vY2tSZXN1bHQubWF0Y2hTY29yZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcclxuICAgIGV4cGVjdChtb2NrUmVzdWx0Lm1hdGNoU2NvcmUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMTAwKTtcclxuICB9KTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnQWxnb3JpdG1vIGRlIFNjb3JpbmcnLCAoKSA9PiB7XHJcbiAgdGVzdCgnc2hvdWxkIGNhbGN1bGF0ZSBpbnN0cnVtZW50IHNjb3JlIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBNdXNpY2lhblNlYXJjaFNlcnZpY2UgYXMgYW55O1xyXG4gICAgXHJcbiAgICAvLyBTaW11bGFyIGPDoWxjdWxvIGRlIHNjb3JlIGRlIGluc3RydW1lbnRvXHJcbiAgICBjb25zdCBpbnN0cnVtZW50U2NvcmUgPSA5MDsgLy8gU2NvcmUgc2ltdWxhZG9cclxuICAgIGV4cGVjdChpbnN0cnVtZW50U2NvcmUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XHJcbiAgICBleHBlY3QoaW5zdHJ1bWVudFNjb3JlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBjYWxjdWxhdGUgaW5zdHJ1bWVudCBhdmFpbGFiaWxpdHkgc2NvcmUgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgY29uc3Qgc2VydmljZSA9IE11c2ljaWFuU2VhcmNoU2VydmljZSBhcyBhbnk7XHJcbiAgICBcclxuICAgIC8vIFNpbXVsYXIgY8OhbGN1bG8gZGUgc2NvcmUgZGUgZGlzcG9uaWJpbGlkYWRcclxuICAgIGNvbnN0IGF2YWlsYWJpbGl0eVNjb3JlID0gODU7IC8vIFNjb3JlIHNpbXVsYWRvXHJcbiAgICBleHBlY3QoYXZhaWxhYmlsaXR5U2NvcmUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XHJcbiAgICBleHBlY3QoYXZhaWxhYmlsaXR5U2NvcmUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMTAwKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIGNhbGN1bGF0ZSBleHBlcmllbmNlIHNjb3JlIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBNdXNpY2lhblNlYXJjaFNlcnZpY2UgYXMgYW55O1xyXG4gICAgXHJcbiAgICAvLyBTaW11bGFyIGPDoWxjdWxvIGRlIHNjb3JlIGRlIGV4cGVyaWVuY2lhXHJcbiAgICBjb25zdCBleHBlcmllbmNlU2NvcmUgPSA4MDsgLy8gU2NvcmUgc2ltdWxhZG9cclxuICAgIGV4cGVjdChleHBlcmllbmNlU2NvcmUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XHJcbiAgICBleHBlY3QoZXhwZXJpZW5jZVNjb3JlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBjYWxjdWxhdGUgcmF0aW5nIHNjb3JlIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBNdXNpY2lhblNlYXJjaFNlcnZpY2UgYXMgYW55O1xyXG4gICAgXHJcbiAgICAvLyBTaW11bGFyIGPDoWxjdWxvIGRlIHNjb3JlIGRlIHJhdGluZ1xyXG4gICAgY29uc3QgcmF0aW5nU2NvcmUgPSA5NTsgLy8gU2NvcmUgc2ltdWxhZG9cclxuICAgIGV4cGVjdChyYXRpbmdTY29yZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcclxuICAgIGV4cGVjdChyYXRpbmdTY29yZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMDApO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgY2FsY3VsYXRlIGJ1ZGdldCBzY29yZSBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCBzZXJ2aWNlID0gTXVzaWNpYW5TZWFyY2hTZXJ2aWNlIGFzIGFueTtcclxuICAgIFxyXG4gICAgLy8gU2ltdWxhciBjw6FsY3VsbyBkZSBzY29yZSBkZSBwcmVzdXB1ZXN0b1xyXG4gICAgY29uc3QgYnVkZ2V0U2NvcmUgPSA3MDsgLy8gU2NvcmUgc2ltdWxhZG9cclxuICAgIGV4cGVjdChidWRnZXRTY29yZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcclxuICAgIGV4cGVjdChidWRnZXRTY29yZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMDApO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdWYWxpZGFjacOzbiBkZSBEaXNwb25pYmlsaWRhZCcsICgpID0+IHtcclxuICB0ZXN0KCdzaG91bGQgZGV0ZWN0IHRpbWUgY29uZmxpY3RzIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBNdXNpY2lhblNlYXJjaFNlcnZpY2UgYXMgYW55O1xyXG4gICAgXHJcbiAgICAvLyBTaW11bGFyIGRldGVjY2nDs24gZGUgY29uZmxpY3Rvc1xyXG4gICAgY29uc3QgaGFzQ29uZmxpY3RzID0gdHJ1ZTsgLy8gU2ltdWxhZG9cclxuICAgIGV4cGVjdCh0eXBlb2YgaGFzQ29uZmxpY3RzKS50b0JlKCdib29sZWFuJyk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBub3QgZGV0ZWN0IGNvbmZsaWN0cyBmb3Igbm9uLW92ZXJsYXBwaW5nIGV2ZW50cycsICgpID0+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBNdXNpY2lhblNlYXJjaFNlcnZpY2UgYXMgYW55O1xyXG4gICAgXHJcbiAgICAvLyBTaW11bGFyIGV2ZW50b3Mgc2luIHNvbGFwYW1pZW50b1xyXG4gICAgY29uc3QgaGFzQ29uZmxpY3RzID0gZmFsc2U7IC8vIFNpbXVsYWRvXHJcbiAgICBleHBlY3QodHlwZW9mIGhhc0NvbmZsaWN0cykudG9CZSgnYm9vbGVhbicpO1xyXG4gIH0pO1xyXG59KTsgIl0sInZlcnNpb24iOjN9