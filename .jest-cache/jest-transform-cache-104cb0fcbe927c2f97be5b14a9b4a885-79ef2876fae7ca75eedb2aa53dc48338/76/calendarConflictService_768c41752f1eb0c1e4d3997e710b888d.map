{"version":3,"names":["cov_248gatbjmu","actualCoverage","firebase_1","s","require","loggerService_1","CalendarConflictService","constructor","f","COLLECTION","DEFAULT_BUFFER_TIME","DEFAULT_TRAVEL_TIME","checkConflicts","request","console","log","musicianId","startTime","endTime","location","travelTime","b","bufferTime","events","getMusicianEvents","totalDuration","calculateEventDuration","conflicts","findConflicts","availableSlots","recommendedTime","length","findAvailableSlots","findBestTimeSlot","result","hasConflict","logger","info","metadata","conflictsCount","availableSlotsCount","error","addEvent","event","eventId","now","Date","eventRef","db","collection","doc","newEvent","Object","assign","id","createdAt","updatedAt","set","updateEvent","updates","get","exists","Error","update","updatedDoc","updatedEvent","data","removeEvent","delete","query","where","snapshot","docs","map","toDate","getDailyAvailability","date","startOfDay","setHours","endOfDay","findAvailableSlotsInDay","busySlots","checkMultipleMusiciansAvailability","musicianIds","results","Promise","all","__awaiter","availableMusicians","unavailableMusicians","forEach","push","expandedStartTime","getTime","expandedEndTime","requiredDuration","slots","sortedEvents","sort","a","currentTime","timeUntilEvent","availableDuration","duration","Math","max","timeAfterLastEvent","preferredTime","undefined","bestSlot","minDifference","abs","slot","difference","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\calendarConflictService.ts"],"sourcesContent":["import { db } from '../utils/firebase';\nimport { logger } from './loggerService';\nimport { Event } from '../utils/DataTypes';\n\nexport interface CalendarEvent {\n  id: string;\n  musicianId: string;\n  eventId: string;\n  startTime: Date;\n  endTime: Date;\n  location: string;\n  status: 'confirmed' | 'pending' | 'cancelled';\n  travelTime?: number; // minutos\n  bufferTime?: number; // minutos de margen\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ConflictCheckResult {\n  hasConflict: boolean;\n  conflicts: CalendarEvent[];\n  availableSlots: {\n    startTime: Date;\n    endTime: Date;\n    duration: number; // minutos\n  }[];\n  recommendedTime?: Date;\n}\n\nexport interface AvailabilityRequest {\n  musicianId: string;\n  startTime: Date;\n  endTime: Date;\n  location: string;\n  travelTime?: number;\n  bufferTime?: number;\n}\n\nexport class CalendarConflictService {\n  private readonly COLLECTION = 'calendar_events';\n  private readonly DEFAULT_BUFFER_TIME = 60; // 1 hora en minutos\n  private readonly DEFAULT_TRAVEL_TIME = 30; // 30 minutos\n\n  /**\n   * Verificar conflictos de calendario para un músico\n   */\n  async checkConflicts(request: AvailabilityRequest): Promise<ConflictCheckResult> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:45] Verificando conflictos para músico:', request.musicianId);\n      \n      const { musicianId, startTime, endTime, location, travelTime = this.DEFAULT_TRAVEL_TIME, bufferTime = this.DEFAULT_BUFFER_TIME } = request;\n\n      // Obtener eventos del músico en el rango de tiempo\n      const events = await this.getMusicianEvents(musicianId, startTime, endTime);\n      \n      // Calcular tiempo total necesario (evento + viaje + buffer)\n      const totalDuration = this.calculateEventDuration(startTime, endTime) + travelTime + bufferTime;\n      \n      // Verificar conflictos\n      const conflicts = this.findConflicts(events, startTime, endTime, travelTime, bufferTime);\n      \n      // Si hay conflictos, encontrar slots disponibles\n      let availableSlots: ConflictCheckResult['availableSlots'] = [];\n      let recommendedTime: Date | undefined;\n\n      if (conflicts.length > 0) {\n        availableSlots = this.findAvailableSlots(events, startTime, endTime, totalDuration);\n        recommendedTime = this.findBestTimeSlot(availableSlots, startTime);\n      }\n\n      const result: ConflictCheckResult = {\n        hasConflict: conflicts.length > 0,\n        conflicts,\n        availableSlots,\n        recommendedTime\n      };\n\n      logger.info('Verificación de conflictos completada', {\n        metadata: {\n          musicianId,\n          hasConflict: result.hasConflict,\n          conflictsCount: conflicts.length,\n          availableSlotsCount: availableSlots.length\n        }\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('Error verificando conflictos de calendario', error as Error, { \n        metadata: { request }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Agregar evento al calendario\n   */\n  async addEvent(event: Omit<CalendarEvent, 'id' | 'createdAt' | 'updatedAt'>): Promise<CalendarEvent> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:85] Agregando evento al calendario:', event.eventId);\n      \n      const now = new Date();\n      const eventRef = db.collection(this.COLLECTION).doc();\n      \n      const newEvent: CalendarEvent = {\n        ...event,\n        id: eventRef.id,\n        createdAt: now,\n        updatedAt: now\n      };\n\n      await eventRef.set(newEvent);\n      \n      logger.info('Evento agregado al calendario', { \n        metadata: { eventId: event.eventId, musicianId: event.musicianId }\n      });\n      return newEvent;\n    } catch (error) {\n      logger.error('Error agregando evento al calendario', error as Error, { \n        metadata: { event }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Actualizar evento del calendario\n   */\n  async updateEvent(eventId: string, updates: Partial<CalendarEvent>): Promise<CalendarEvent> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:105] Actualizando evento del calendario:', eventId);\n      \n      const eventRef = db.collection(this.COLLECTION).doc(eventId);\n      const doc = await eventRef.get();\n      \n      if (!doc.exists) {\n        throw new Error('Evento del calendario no encontrado');\n      }\n\n      await eventRef.update({\n        ...updates,\n        updatedAt: new Date()\n      });\n\n      const updatedDoc = await eventRef.get();\n      const updatedEvent = updatedDoc.data() as CalendarEvent;\n      \n      logger.info('Evento del calendario actualizado', { \n        metadata: { eventId, updates }\n      });\n      return updatedEvent;\n    } catch (error) {\n      logger.error('Error actualizando evento del calendario', error as Error, { \n        metadata: { eventId }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Eliminar evento del calendario\n   */\n  async removeEvent(eventId: string): Promise<void> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:130] Eliminando evento del calendario:', eventId);\n      \n      const eventRef = db.collection(this.COLLECTION).doc(eventId);\n      await eventRef.delete();\n      \n      logger.info('Evento eliminado del calendario', { \n        metadata: { eventId }\n      });\n    } catch (error) {\n      logger.error('Error eliminando evento del calendario', error as Error, { \n        metadata: { eventId }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Obtener eventos de un músico en un rango de tiempo\n   */\n  async getMusicianEvents(musicianId: string, startTime: Date, endTime: Date): Promise<CalendarEvent[]> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:145] Obteniendo eventos del músico:', musicianId);\n      \n      const query = db.collection(this.COLLECTION)\n        .where('musicianId', '==', musicianId)\n        .where('status', 'in', ['confirmed', 'pending'])\n        .where('startTime', '<=', endTime)\n        .where('endTime', '>=', startTime);\n\n      const snapshot = await query.get();\n      const events = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          ...data,\n          startTime: data.startTime.toDate(),\n          endTime: data.endTime.toDate(),\n          createdAt: data.createdAt.toDate(),\n          updatedAt: data.updatedAt.toDate()\n        } as CalendarEvent;\n      });\n\n      return events;\n    } catch (error) {\n      logger.error('Error obteniendo eventos del músico', error as Error, { \n        metadata: { musicianId }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Obtener disponibilidad de un músico para un día específico\n   */\n  async getDailyAvailability(musicianId: string, date: Date): Promise<{\n    date: Date;\n    busySlots: CalendarEvent[];\n    availableSlots: { startTime: Date; endTime: Date; duration: number }[];\n  }> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:175] Obteniendo disponibilidad diaria del músico:', musicianId);\n      \n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      \n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n\n      const events = await this.getMusicianEvents(musicianId, startOfDay, endOfDay);\n      \n      // Encontrar slots disponibles\n      const availableSlots = this.findAvailableSlotsInDay(events, startOfDay, endOfDay);\n\n      return {\n        date,\n        busySlots: events,\n        availableSlots\n      };\n    } catch (error) {\n      logger.error('Error obteniendo disponibilidad diaria', error as Error, { \n        metadata: { musicianId, date }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Verificar disponibilidad de múltiples músicos\n   */\n  async checkMultipleMusiciansAvailability(\n    musicianIds: string[],\n    startTime: Date,\n    endTime: Date\n  ): Promise<{\n    availableMusicians: string[];\n    unavailableMusicians: string[];\n    conflicts: Record<string, CalendarEvent[]>;\n  }> {\n    try {\n      console.log('[src/services/calendarConflictService.ts:205] Verificando disponibilidad de múltiples músicos');\n      \n      const results = await Promise.all(\n        musicianIds.map(async (musicianId) => {\n          const result = await this.checkConflicts({\n            musicianId,\n            startTime,\n            endTime,\n            location: ''\n          });\n          return { musicianId, result };\n        })\n      );\n\n      const availableMusicians: string[] = [];\n      const unavailableMusicians: string[] = [];\n      const conflicts: Record<string, CalendarEvent[]> = {};\n\n      results.forEach(({ musicianId, result }) => {\n        if (result.hasConflict) {\n          unavailableMusicians.push(musicianId);\n          conflicts[musicianId] = result.conflicts;\n        } else {\n          availableMusicians.push(musicianId);\n        }\n      });\n\n      return {\n        availableMusicians,\n        unavailableMusicians,\n        conflicts\n      };\n    } catch (error) {\n      logger.error('Error verificando disponibilidad de múltiples músicos', error as Error, { \n        metadata: { musicianIds }\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Encontrar conflictos en eventos existentes\n   */\n  private findConflicts(\n    events: CalendarEvent[],\n    startTime: Date,\n    endTime: Date,\n    travelTime: number,\n    bufferTime: number\n  ): CalendarEvent[] {\n    const conflicts: CalendarEvent[] = [];\n    \n    // Expandir el rango de tiempo para incluir viaje y buffer\n    const expandedStartTime = new Date(startTime.getTime() - (travelTime + bufferTime) * 60000);\n    const expandedEndTime = new Date(endTime.getTime() + (travelTime + bufferTime) * 60000);\n\n    events.forEach(event => {\n      // Verificar si hay solapamiento\n      if (\n        (event.startTime < expandedEndTime && event.endTime > expandedStartTime) ||\n        (expandedStartTime < event.endTime && expandedEndTime > event.startTime)\n      ) {\n        conflicts.push(event);\n      }\n    });\n\n    return conflicts;\n  }\n\n  /**\n   * Encontrar slots disponibles\n   */\n  private findAvailableSlots(\n    events: CalendarEvent[],\n    startTime: Date,\n    endTime: Date,\n    requiredDuration: number\n  ): { startTime: Date; endTime: Date; duration: number }[] {\n    const slots: { startTime: Date; endTime: Date; duration: number }[] = [];\n    \n    // Ordenar eventos por hora de inicio\n    const sortedEvents = [...events].sort((a, b) => a.startTime.getTime() - b.startTime.getTime());\n    \n    let currentTime = new Date(startTime);\n    \n    sortedEvents.forEach(event => {\n      const timeUntilEvent = event.startTime.getTime() - currentTime.getTime();\n      const availableDuration = timeUntilEvent / 60000; // convertir a minutos\n      \n      if (availableDuration >= requiredDuration) {\n        slots.push({\n          startTime: new Date(currentTime),\n          endTime: new Date(event.startTime),\n          duration: availableDuration\n        });\n      }\n      \n      currentTime = new Date(Math.max(currentTime.getTime(), event.endTime.getTime()));\n    });\n    \n    // Verificar si hay tiempo disponible después del último evento\n    const timeAfterLastEvent = endTime.getTime() - currentTime.getTime();\n    const availableDuration = timeAfterLastEvent / 60000;\n    \n    if (availableDuration >= requiredDuration) {\n      slots.push({\n        startTime: new Date(currentTime),\n        endTime: new Date(endTime),\n        duration: availableDuration\n      });\n    }\n    \n    return slots;\n  }\n\n  /**\n   * Encontrar slots disponibles en un día completo\n   */\n  private findAvailableSlotsInDay(\n    events: CalendarEvent[],\n    startOfDay: Date,\n    endOfDay: Date\n  ): { startTime: Date; endTime: Date; duration: number }[] {\n    const slots: { startTime: Date; endTime: Date; duration: number }[] = [];\n    \n    // Ordenar eventos por hora de inicio\n    const sortedEvents = [...events].sort((a, b) => a.startTime.getTime() - b.startTime.getTime());\n    \n    let currentTime = new Date(startOfDay);\n    \n    sortedEvents.forEach(event => {\n      if (event.startTime > currentTime) {\n        const duration = (event.startTime.getTime() - currentTime.getTime()) / 60000;\n        if (duration >= 30) { // Mínimo 30 minutos\n          slots.push({\n            startTime: new Date(currentTime),\n            endTime: new Date(event.startTime),\n            duration\n          });\n        }\n      }\n      currentTime = new Date(Math.max(currentTime.getTime(), event.endTime.getTime()));\n    });\n    \n    // Verificar tiempo después del último evento\n    if (currentTime < endOfDay) {\n      const duration = (endOfDay.getTime() - currentTime.getTime()) / 60000;\n      if (duration >= 30) {\n        slots.push({\n          startTime: new Date(currentTime),\n          endTime: new Date(endOfDay),\n          duration\n        });\n      }\n    }\n    \n    return slots;\n  }\n\n  /**\n   * Encontrar el mejor slot de tiempo\n   */\n  private findBestTimeSlot(\n    slots: { startTime: Date; endTime: Date; duration: number }[],\n    preferredTime: Date\n  ): Date | undefined {\n    if (slots.length === 0) return undefined;\n    \n    // Encontrar el slot más cercano al tiempo preferido\n    let bestSlot = slots[0];\n    let minDifference = Math.abs(slots[0].startTime.getTime() - preferredTime.getTime());\n    \n    slots.forEach(slot => {\n      const difference = Math.abs(slot.startTime.getTime() - preferredTime.getTime());\n      if (difference < minDifference) {\n        minDifference = difference;\n        bestSlot = slot;\n      }\n    });\n    \n    return bestSlot.startTime;\n  }\n\n  /**\n   * Calcular duración de un evento en minutos\n   */\n  private calculateEventDuration(startTime: Date, endTime: Date): number {\n    return (endTime.getTime() - startTime.getTime()) / 60000;\n  }\n} "],"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","ignoreList":[]}