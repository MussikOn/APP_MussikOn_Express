{"version":3,"names":["cov_20dr7cu0sn","actualCoverage","s","exports","adminOnly","requireRole","authMiddleware_1","require","req","res","next","f","authMiddleware","authError","b","user","status","json","message","roll","roles","includes","msg"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\adminOnly.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { authMiddleware } from './authMiddleware';\r\n\r\n/**\r\n * Middleware que permite el acceso solo a usuarios con rol admin o superadmin.\r\n * Incluye automáticamente la autenticación.\r\n */\r\nexport function adminOnly(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  // Primero verificar autenticación\r\n  authMiddleware(req, res, (authError?: any) => {\r\n    if (authError) {\r\n      // Si hay error de autenticación, ya se envió la respuesta\r\n      return;\r\n    }\r\n\r\n    // Luego verificar rol de administrador\r\n    const user = (req as any).user;\r\n\r\n    if (!user) {\r\n      res.status(401).json({ message: 'Usuario no autenticado' });\r\n      return;\r\n    }\r\n\r\n    if (\r\n      user.roll === 'admin' ||\r\n      user.roll === 'superadmin' ||\r\n      user.roll === 'adminJunior' ||\r\n      user.roll === 'adminMidLevel' ||\r\n      user.roll === 'adminSenior' ||\r\n      user.roll === 'superAdmin' ||\r\n      user.roll === 'organizador' ||\r\n      user.roll === 'eventCreator' ||\r\n      user.roll === 'musico' // Temporalmente permitido para testing\r\n    ) {\r\n      next();\r\n    } else {\r\n      res.status(403).json({ message: 'Acceso solo para administradores' });\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Middleware genérico para validar roles específicos\r\n * Incluye automáticamente la autenticación.\r\n * @param roles Roles permitidos para acceder al endpoint\r\n */\r\nexport function requireRole(...roles: string[]) {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    // Primero verificar autenticación\r\n    authMiddleware(req, res, (authError?: any) => {\r\n      if (authError) {\r\n        // Si hay error de autenticación, ya se envió la respuesta\r\n        return;\r\n      }\r\n\r\n      // Luego verificar rol específico\r\n      const user = (req as any).user;\r\n      if (!user || !roles.includes(user.roll)) {\r\n        res.status(403).json({ msg: 'No autorizado. Rol insuficiente.' });\r\n        return;\r\n      }\r\n      next();\r\n    });\r\n  };\r\n}\r\n"],"mappingsiBK;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;AAVLC,OAAA,CAAAC,SAAA,GAAAA,SAAA;AAoCC;AAAAJ,cAAA,GAAAE,CAAA;AAODC,OAAA,CAAAE,WAAA,GAAAA,WAAA;AAjDA,MAAAC,gBAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAAK,OAAA;AAEA;;;;AAIA,SAAgBH,SAASA,CACvBI,GAAY,EACZC,GAAa,EACbC,IAAkB;EAAA;EAAAV,cAAA,GAAAW,CAAA;EAAAX,cAAA,GAAAE,CAAA;EAElB;EACA,IAAAI,gBAAA,CAAAM,cAAc,EAACJ,GAAG,EAAEC,GAAG,EAAGI,SAAe,IAAI;IAAA;IAAAb,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAC3C,IAAIW,SAAS,EAAE;MAAA;MAAAb,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MACb;MACA;IACF,CAAC;IAAA;IAAA;MAAAF,cAAA,GAAAc,CAAA;IAAA;IAED;IACA,MAAMC,IAAI;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,OAAIM,GAAW,CAACO,IAAI;IAAC;IAAAf,cAAA,GAAAE,CAAA;IAE/B,IAAI,CAACa,IAAI,EAAE;MAAA;MAAAf,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MACTO,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAwB,CAAE,CAAC;MAAC;MAAAlB,cAAA,GAAAE,CAAA;MAC5D;IACF,CAAC;IAAA;IAAA;MAAAF,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAED;IACE;IAAA,CAAAF,cAAA,GAAAc,CAAA,UAAAC,IAAI,CAACI,IAAI,KAAK,OAAO;IAAA;IAAA,CAAAnB,cAAA,GAAAc,CAAA,UACrBC,IAAI,CAACI,IAAI,KAAK,YAAY;IAAA;IAAA,CAAAnB,cAAA,GAAAc,CAAA,UAC1BC,IAAI,CAACI,IAAI,KAAK,aAAa;IAAA;IAAA,CAAAnB,cAAA,GAAAc,CAAA,UAC3BC,IAAI,CAACI,IAAI,KAAK,eAAe;IAAA;IAAA,CAAAnB,cAAA,GAAAc,CAAA,UAC7BC,IAAI,CAACI,IAAI,KAAK,aAAa;IAAA;IAAA,CAAAnB,cAAA,GAAAc,CAAA,UAC3BC,IAAI,CAACI,IAAI,KAAK,YAAY;IAAA;IAAA,CAAAnB,cAAA,GAAAc,CAAA,UAC1BC,IAAI,CAACI,IAAI,KAAK,aAAa;IAAA;IAAA,CAAAnB,cAAA,GAAAc,CAAA,UAC3BC,IAAI,CAACI,IAAI,KAAK,cAAc;IAAA;IAAA,CAAAnB,cAAA,GAAAc,CAAA,UAC5BC,IAAI,CAACI,IAAI,KAAK,QAAQ,EAAC;IAAA,EACvB;MAAA;MAAAnB,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MACAQ,IAAI,EAAE;IACR,CAAC,MAAM;MAAA;MAAAV,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MACLO,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAkC,CAAE,CAAC;IACvE;EACF,CAAC,CAAC;AACJ;AAEA;;;;;AAKA,SAAgBb,WAAWA,CAAC,GAAGe,KAAe;EAAA;EAAApB,cAAA,GAAAW,CAAA;EAAAX,cAAA,GAAAE,CAAA;EAC5C,OAAO,CAACM,GAAY,EAAEC,GAAa,EAAEC,IAAkB,KAAU;IAAA;IAAAV,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAC/D;IACA,IAAAI,gBAAA,CAAAM,cAAc,EAACJ,GAAG,EAAEC,GAAG,EAAGI,SAAe,IAAI;MAAA;MAAAb,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAC3C,IAAIW,SAAS,EAAE;QAAA;QAAAb,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAE,CAAA;QACb;QACA;MACF,CAAC;MAAA;MAAA;QAAAF,cAAA,GAAAc,CAAA;MAAA;MAED;MACA,MAAMC,IAAI;MAAA;MAAA,CAAAf,cAAA,GAAAE,CAAA,QAAIM,GAAW,CAACO,IAAI;MAAC;MAAAf,cAAA,GAAAE,CAAA;MAC/B;MAAI;MAAA,CAAAF,cAAA,GAAAc,CAAA,WAACC,IAAI;MAAA;MAAA,CAAAf,cAAA,GAAAc,CAAA,UAAI,CAACM,KAAK,CAACC,QAAQ,CAACN,IAAI,CAACI,IAAI,CAAC,GAAE;QAAA;QAAAnB,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAE,CAAA;QACvCO,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEK,GAAG,EAAE;QAAkC,CAAE,CAAC;QAAC;QAAAtB,cAAA,GAAAE,CAAA;QAClE;MACF,CAAC;MAAA;MAAA;QAAAF,cAAA,GAAAc,CAAA;MAAA;MAAAd,cAAA,GAAAE,CAAA;MACDQ,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;AACH","ignoreList":[]}