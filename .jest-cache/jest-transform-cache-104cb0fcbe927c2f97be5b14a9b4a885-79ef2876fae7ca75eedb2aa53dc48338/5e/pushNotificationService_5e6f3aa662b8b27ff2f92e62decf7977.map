{"version":3,"names":["cov_ov0h048uh","actualCoverage","expo_server_sdk_1","s","require","loggerService_1","expo","Expo","ApiService","constructor","baseUrl","b","f","get","endpoint","response","fetch","data","json","error","success","Error","message","post","body","method","headers","JSON","stringify","delete","put","apiService","PushNotificationService","vapidPublicKey","registration","isInitialized","initialize","isSupported","loadVapidKey","registerServiceWorker","logger","navigator","window","getPermissionStatus","granted","denied","default","permission","Notification","requestPermission","serviceWorker","register","info","metadata","id","subscribeToPushNotifications","subscription","pushManager","getSubscription","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","subscriptionData","keys","p256dh","arrayBufferToBase64","getKey","auth","getUserSubscriptions","saveSubscription","userId","Object","assign","getVapidPublicKey","deleteSubscription","subscriptionId","unsubscribe","sendNotificationToUser","notification","subscriptions","userSubscriptions","filter","sub","isActive","length","console","log","messages","map","to","sound","title","priority","badge","channelId","category","chunks","chunkPushNotifications","tickets","chunk","ticketChunk","sendPushNotificationsAsync","push","receiptIds","ticket","status","receiptIdChunks","chunkPushNotificationReceiptIds","receipts","getPushNotificationReceiptsAsync","receiptId","receipt","ticketsSent","errors","sendBulkNotification","request","allSubscriptions","targetSubscriptions","userIds","includes","failed","successCount","failedCount","forEach","totalUsers","createNotificationTemplate","template","getActiveTemplates","getNotificationTemplate","templateId","updateNotificationTemplate","updates","deleteNotificationTemplate","getNotificationStats","testPushNotification","activeSubscriptions","testMessage","type","timestamp","Date","toISOString","showLocalNotification","options","warn","icon","tag","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","buffer","bytes","binary","byteLength","String","fromCharCode","btoa","getNotificationSettings","enabled","categories","system","user","event","payment","chat","quietHours","startTime","endTime","vibration","updateNotificationSettings","settings","isInQuietHours","now","currentTime","getHours","getMinutes","startHour","startMinute","split","Number","endHour","endMinute","exports","pushNotificationService"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\pushNotificationService.ts"],"sourcesContent":["import { Expo, ExpoPushMessage } from 'expo-server-sdk';\r\nimport { logger } from '../services/loggerService';\r\n\r\n// Inicializar Expo SDK\r\nconst expo = new Expo();\r\n\r\n// Tipos para notificaciones push\r\nexport interface PushSubscription {\r\n  id: string;\r\n  endpoint: string;\r\n  keys: {\r\n    p256dh: string;\r\n    auth: string;\r\n  };\r\n  userId: string;\r\n  isActive: boolean;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface PushNotification {\r\n  id: string;\r\n  userId: string;\r\n  title: string;\r\n  body: string;\r\n  icon?: string;\r\n  badge?: string;\r\n  tag?: string;\r\n  data?: Record<string, any>;\r\n  requireInteraction?: boolean;\r\n  priority?: 'high' | 'normal' | 'low';\r\n  timestamp: Date;\r\n  read: boolean;\r\n  category: string;\r\n  type: string;\r\n}\r\n\r\nexport interface NotificationTemplate {\r\n  id: string;\r\n  name: string;\r\n  title: string;\r\n  body: string;\r\n  icon?: string;\r\n  badge?: string;\r\n  tag?: string;\r\n  data?: Record<string, any>;\r\n  category: string;\r\n  type: string;\r\n  isActive: boolean;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface BulkNotificationRequest {\r\n  userIds: string[];\r\n  templateId?: string;\r\n  title: string;\r\n  body: string;\r\n  data?: Record<string, any>;\r\n  category?: string;\r\n  type?: string;\r\n}\r\n\r\nexport interface NotificationStats {\r\n  totalSent: number;\r\n  totalDelivered: number;\r\n  totalFailed: number;\r\n  totalRead: number;\r\n  averageDeliveryTime: number;\r\n  successRate: number;\r\n}\r\n\r\nexport interface NotificationSettings {\r\n  enabled: boolean;\r\n  categories: Record<string, boolean>;\r\n  quietHours: {\r\n    enabled: boolean;\r\n    startTime: string;\r\n    endTime: string;\r\n  };\r\n  sound: boolean;\r\n  vibration: boolean;\r\n}\r\n\r\nexport interface PushNotificationApiResponse<T = any> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: string;\r\n  message?: string;\r\n}\r\n\r\nexport interface PushNotificationError {\r\n  code: string;\r\n  message: string;\r\n  details?: any;\r\n}\r\n\r\nexport interface NotificationPermission {\r\n  granted: boolean;\r\n  denied: boolean;\r\n  default: boolean;\r\n}\r\n\r\n// Servicio API básico\r\nclass ApiService {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl: string = '/api') {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  async get<T>(endpoint: string): Promise<PushNotificationApiResponse<T>> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}${endpoint}`);\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  async post<T>(\r\n    endpoint: string,\r\n    body: any\r\n  ): Promise<PushNotificationApiResponse<T>> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(body),\r\n      });\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  async delete<T>(endpoint: string): Promise<PushNotificationApiResponse<T>> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\r\n        method: 'DELETE',\r\n      });\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  async put<T>(\r\n    endpoint: string,\r\n    body: any\r\n  ): Promise<PushNotificationApiResponse<T>> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(body),\r\n      });\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nconst apiService = new ApiService();\r\n\r\n/**\r\n * Servicio completo para manejo de notificaciones push\r\n * Integra con el backend y maneja la suscripción del dispositivo\r\n */\r\nexport class PushNotificationService {\r\n  private vapidPublicKey: string | null = null;\r\n  private registration: ServiceWorkerRegistration | null = null;\r\n  private isInitialized = false;\r\n\r\n  /**\r\n   * Inicializar el servicio de notificaciones push\r\n   */\r\n  async initialize(): Promise<boolean> {\r\n    try {\r\n      if (this.isInitialized) return true;\r\n\r\n      // Verificar soporte\r\n      if (!this.isSupported()) {\r\n        throw new Error(\r\n          'Las notificaciones push no están soportadas en este dispositivo'\r\n        );\r\n      }\r\n\r\n      // Obtener VAPID key del backend\r\n      await this.loadVapidKey();\r\n\r\n      // Registrar Service Worker\r\n      await this.registerServiceWorker();\r\n\r\n      this.isInitialized = true;\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Error inicializando PushNotificationService:', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verificar si las notificaciones push están soportadas\r\n   */\r\n  isSupported(): boolean {\r\n    return (\r\n      'serviceWorker' in navigator &&\r\n      'PushManager' in window &&\r\n      'Notification' in window\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener el estado actual del permiso\r\n   */\r\n  getPermissionStatus(): NotificationPermission {\r\n    if (!('Notification' in window)) {\r\n      return { granted: false, denied: false, default: true };\r\n    }\r\n\r\n    const permission = Notification.permission;\r\n    return {\r\n      granted: permission === 'granted',\r\n      denied: permission === 'denied',\r\n      default: permission === 'default',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Solicitar permiso para notificaciones\r\n   */\r\n  async requestPermission(): Promise<boolean> {\r\n    try {\r\n      if (!this.isSupported()) {\r\n        throw new Error('Las notificaciones push no están soportadas');\r\n      }\r\n\r\n      const permission = await Notification.requestPermission();\r\n      return permission === 'granted';\r\n    } catch (error) {\r\n      logger.error('Error solicitando permiso:', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cargar VAPID key del backend\r\n   */\r\n  private async loadVapidKey(): Promise<void> {\r\n    try {\r\n      const response = await apiService.get<{ vapidPublicKey: string }>(\r\n        '/push-notifications/vapid-key'\r\n      );\r\n      if (response.success && response.data) {\r\n        this.vapidPublicKey = response.data.vapidPublicKey;\r\n      } else {\r\n        throw new Error('No se pudo obtener la VAPID key');\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error cargando VAPID key:', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registrar Service Worker\r\n   */\r\n  private async registerServiceWorker(): Promise<void> {\r\n    try {\r\n      this.registration = await navigator.serviceWorker.register('/sw.js');\r\n      logger.info('Service Worker registrado:', { metadata: { id: this.registration  } });\r\n    } catch (error) {\r\n      logger.error('Error registrando Service Worker:', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Suscribirse a notificaciones push\r\n   */\r\n  async subscribeToPushNotifications(): Promise<PushSubscription | null> {\r\n    try {\r\n      if (!this.isInitialized) {\r\n        await this.initialize();\r\n      }\r\n\r\n      if (!this.vapidPublicKey) {\r\n        throw new Error('VAPID key no disponible');\r\n      }\r\n\r\n      if (!this.registration) {\r\n        throw new Error('Service Worker no registrado');\r\n      }\r\n\r\n      // Verificar permiso\r\n      const permission = this.getPermissionStatus();\r\n      if (!permission.granted) {\r\n        const granted = await this.requestPermission();\r\n        if (!granted) {\r\n          throw new Error('Permiso de notificaciones denegado');\r\n        }\r\n      }\r\n\r\n      // Obtener suscripción existente o crear nueva\r\n      let subscription = await this.registration.pushManager.getSubscription();\r\n\r\n      if (!subscription) {\r\n        subscription = await this.registration.pushManager.subscribe({\r\n          userVisibleOnly: true,\r\n          applicationServerKey: this.urlBase64ToUint8Array(this.vapidPublicKey),\r\n        });\r\n      }\r\n\r\n      // Guardar suscripción en el backend\r\n      const subscriptionData = {\r\n        endpoint: subscription.endpoint,\r\n        keys: {\r\n          p256dh: this.arrayBufferToBase64(subscription.getKey('p256dh')!),\r\n          auth: this.arrayBufferToBase64(subscription.getKey('auth')!),\r\n        },\r\n      };\r\n\r\n      const response = await apiService.post<PushSubscription>(\r\n        '/push-notifications/subscription',\r\n        subscriptionData\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        return response.data;\r\n      } else {\r\n        throw new Error('Error guardando suscripción en el backend');\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error suscribiéndose a notificaciones push:', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener suscripciones del usuario\r\n   */\r\n  async getUserSubscriptions(): Promise<PushSubscription[]> {\r\n    try {\r\n      const response = await apiService.get<PushSubscription[]>(\r\n        '/push-notifications/subscriptions'\r\n      );\r\n      return response.success && response.data ? response.data : [];\r\n    } catch (error) {\r\n      logger.error('Error obteniendo suscripciones:', error as Error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Guardar suscripción push\r\n   */\r\n  async saveSubscription(\r\n    userId: string,\r\n    subscriptionData: {\r\n      endpoint: string;\r\n      keys: { p256dh: string; auth: string };\r\n      isActive: boolean;\r\n    }\r\n  ): Promise<PushSubscription> {\r\n    try {\r\n      const response = await apiService.post<PushSubscription>(\r\n        '/push-notifications/subscriptions',\r\n        {\r\n          userId,\r\n          ...subscriptionData,\r\n        }\r\n      );\r\n      if (response.success && response.data) {\r\n        return response.data;\r\n      }\r\n      throw new Error('Error guardando suscripción');\r\n    } catch (error) {\r\n      logger.error('Error guardando suscripción:', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener VAPID public key\r\n   */\r\n  getVapidPublicKey(): string | null {\r\n    return this.vapidPublicKey;\r\n  }\r\n\r\n  /**\r\n   * Eliminar suscripción\r\n   */\r\n  async deleteSubscription(subscriptionId: string): Promise<boolean> {\r\n    try {\r\n      const response = await apiService.delete(\r\n        `/push-notifications/subscription/${subscriptionId}`\r\n      );\r\n\r\n      if (response.success) {\r\n        // También eliminar suscripción local si existe\r\n        if (this.registration) {\r\n          const subscription =\r\n            await this.registration.pushManager.getSubscription();\r\n          if (subscription) {\r\n            await subscription.unsubscribe();\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      logger.error('Error eliminando suscripción:', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enviar notificación a usuario específico usando Expo\r\n   */\r\n  async sendNotificationToUser(\r\n    userId: string,\r\n    notification: Omit<PushNotification, 'id' | 'userId' | 'timestamp' | 'read'>\r\n  ): Promise<boolean> {\r\n    try {\r\n      // Obtener suscripciones del usuario\r\n      const subscriptions = await this.getUserSubscriptions();\r\n      const userSubscriptions = subscriptions.filter(\r\n        sub => sub.userId === userId && sub.isActive\r\n      );\r\n\r\n      if (userSubscriptions.length === 0) {\r\n        console.log(`No hay suscripciones activas para el usuario ${userId}`);\r\n        return false;\r\n      }\r\n\r\n      // Crear mensajes para Expo\r\n      const messages: ExpoPushMessage[] = userSubscriptions.map(\r\n        subscription => ({\r\n          to: subscription.endpoint,\r\n          sound: 'default',\r\n          title: notification.title,\r\n          body: notification.body,\r\n          data: notification.data || {},\r\n          priority:\r\n            (notification.priority === 'low'\r\n              ? 'default'\r\n              : notification.priority) || 'high',\r\n          badge: 1,\r\n          channelId: notification.category || 'default',\r\n        })\r\n      );\r\n\r\n      // Enviar notificaciones usando Expo\r\n      const chunks = expo.chunkPushNotifications(messages);\r\n      const tickets = [];\r\n\r\n      for (const chunk of chunks) {\r\n        try {\r\n          const ticketChunk = await expo.sendPushNotificationsAsync(chunk);\r\n          tickets.push(...ticketChunk);\r\n        } catch (error) {\r\n          logger.error('Error enviando chunk de notificaciones:', error as Error);\r\n        }\r\n      }\r\n\r\n      // Verificar tickets para errores\r\n      const receiptIds = tickets\r\n        .filter(ticket => ticket.status === 'error')\r\n        .map(ticket => (ticket as any).id);\r\n\r\n      if (receiptIds.length > 0) {\r\n        const receiptIdChunks =\r\n          expo.chunkPushNotificationReceiptIds(receiptIds);\r\n        for (const chunk of receiptIdChunks) {\r\n          try {\r\n            const receipts = await expo.getPushNotificationReceiptsAsync(chunk);\r\n            for (const receiptId in receipts) {\r\n              const receipt = receipts[receiptId];\r\n              if (receipt.status === 'error') {\r\n                console.error(\r\n                  `Error en notificación ${receiptId}:`,\r\n                  receipt.message\r\n                );\r\n              }\r\n            }\r\n          } catch (error) {\r\n            logger.error('Error verificando receipts:', error as Error);\r\n          }\r\n        }\r\n      }\r\n\r\n      logger.info('Notificación enviada exitosamente', { metadata: {\r\n        userId,\r\n        title: notification.title,\r\n        ticketsSent: tickets.length,\r\n        errors: receiptIds.length,\r\n      } });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Error enviando notificación', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enviar notificación masiva usando Expo\r\n   */\r\n  async sendBulkNotification(\r\n    request: BulkNotificationRequest\r\n  ): Promise<{ success: number; failed: number } | null> {\r\n    try {\r\n      // Obtener todas las suscripciones activas\r\n      const allSubscriptions = await this.getUserSubscriptions();\r\n      const targetSubscriptions = allSubscriptions.filter(\r\n        sub => request.userIds.includes(sub.userId) && sub.isActive\r\n      );\r\n\r\n      if (targetSubscriptions.length === 0) {\r\n        console.log(\r\n          'No hay suscripciones activas para los usuarios especificados'\r\n        );\r\n        return { success: 0, failed: request.userIds.length };\r\n      }\r\n\r\n      // Crear mensajes para Expo\r\n      const messages: ExpoPushMessage[] = targetSubscriptions.map(\r\n        subscription => ({\r\n          to: subscription.endpoint,\r\n          sound: 'default',\r\n          title: request.title,\r\n          body: request.body,\r\n          data: request.data || {},\r\n          priority: 'high',\r\n          badge: 1,\r\n          channelId: request.category || 'default',\r\n        })\r\n      );\r\n\r\n      // Enviar notificaciones usando Expo\r\n      const chunks = expo.chunkPushNotifications(messages);\r\n      const tickets = [];\r\n      let successCount = 0;\r\n      let failedCount = 0;\r\n\r\n      for (const chunk of chunks) {\r\n        try {\r\n          const ticketChunk = await expo.sendPushNotificationsAsync(chunk);\r\n          tickets.push(...ticketChunk);\r\n\r\n          // Contar éxitos y fallos\r\n          ticketChunk.forEach(ticket => {\r\n            if (ticket.status === 'ok') {\r\n              successCount++;\r\n            } else {\r\n              failedCount++;\r\n            }\r\n          });\r\n        } catch (error) {\r\n          logger.error('Error enviando chunk de notificaciones masivas:', error as Error);\r\n          failedCount += chunk.length;\r\n        }\r\n      }\r\n\r\n      logger.info('Notificación masiva enviada', { metadata: {\r\n        totalUsers: request.userIds.length,\r\n        successCount,\r\n        failedCount,\r\n        ticketsSent: tickets.length,\r\n      } });\r\n\r\n      return { success: successCount, failed: failedCount };\r\n    } catch (error) {\r\n      logger.error('Error enviando notificación masiva:', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crear template de notificación\r\n   */\r\n  async createNotificationTemplate(\r\n    template: Omit<NotificationTemplate, 'id' | 'createdAt' | 'updatedAt'>\r\n  ): Promise<NotificationTemplate | null> {\r\n    try {\r\n      const response = await apiService.post<NotificationTemplate>(\r\n        '/push-notifications/templates',\r\n        template\r\n      );\r\n      return response.success && response.data ? response.data : null;\r\n    } catch (error) {\r\n      logger.error('Error creando template:', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener templates activos\r\n   */\r\n  async getActiveTemplates(): Promise<NotificationTemplate[]> {\r\n    try {\r\n      const response = await apiService.get<NotificationTemplate[]>(\r\n        '/push-notifications/templates'\r\n      );\r\n      return response.success && response.data ? response.data : [];\r\n    } catch (error) {\r\n      logger.error('Error obteniendo templates:', error as Error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener template específico\r\n   */\r\n  async getNotificationTemplate(\r\n    templateId: string\r\n  ): Promise<NotificationTemplate | null> {\r\n    try {\r\n      const response = await apiService.get<NotificationTemplate>(\r\n        `/push-notifications/templates/${templateId}`\r\n      );\r\n      return response.success && response.data ? response.data : null;\r\n    } catch (error) {\r\n      logger.error('Error obteniendo template:', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualizar template\r\n   */\r\n  async updateNotificationTemplate(\r\n    templateId: string,\r\n    updates: Partial<NotificationTemplate>\r\n  ): Promise<NotificationTemplate | null> {\r\n    try {\r\n      const response = await apiService.put<NotificationTemplate>(\r\n        `/push-notifications/templates/${templateId}`,\r\n        updates\r\n      );\r\n      return response.success && response.data ? response.data : null;\r\n    } catch (error) {\r\n      logger.error('Error actualizando template:', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Eliminar template\r\n   */\r\n  async deleteNotificationTemplate(templateId: string): Promise<boolean> {\r\n    try {\r\n      const response = await apiService.delete(\r\n        `/push-notifications/templates/${templateId}`\r\n      );\r\n      return response.success;\r\n    } catch (error) {\r\n      logger.error('Error eliminando template:', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de notificaciones\r\n   */\r\n  async getNotificationStats(): Promise<NotificationStats | null> {\r\n    try {\r\n      const response = await apiService.get<NotificationStats>(\r\n        '/push-notifications/stats'\r\n      );\r\n      return response.success && response.data ? response.data : null;\r\n    } catch (error) {\r\n      logger.error('Error obteniendo estadísticas:', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enviar notificación de prueba usando Expo\r\n   */\r\n  async testPushNotification(): Promise<boolean> {\r\n    try {\r\n      // Obtener todas las suscripciones activas\r\n      const subscriptions = await this.getUserSubscriptions();\r\n      const activeSubscriptions = subscriptions.filter(sub => sub.isActive);\r\n\r\n      if (activeSubscriptions.length === 0) {\r\n        console.log(\r\n          'No hay suscripciones activas para enviar notificación de prueba'\r\n        );\r\n        return false;\r\n      }\r\n\r\n      // Crear mensaje de prueba\r\n      const testMessage: ExpoPushMessage = {\r\n        to: activeSubscriptions[0].endpoint, // Enviar solo a la primera suscripción\r\n        sound: 'default',\r\n        title: '🔔 Notificación de Prueba',\r\n        body: 'Esta es una notificación de prueba del sistema MussikOn',\r\n        data: {\r\n          type: 'test',\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n        priority: 'high',\r\n        badge: 1,\r\n        channelId: 'test',\r\n      };\r\n\r\n      // Enviar notificación de prueba\r\n      const chunks = expo.chunkPushNotifications([testMessage]);\r\n\r\n      for (const chunk of chunks) {\r\n        try {\r\n          const tickets = await expo.sendPushNotificationsAsync(chunk);\r\n\r\n          // Verificar resultado\r\n          const ticket = tickets[0];\r\n          if (ticket.status === 'ok') {\r\n            logger.info('✅ Notificación de prueba enviada exitosamente');\r\n            return true;\r\n          } else {\r\n            logger.error('❌ Error enviando notificación de prueba:', new Error(ticket.message));\r\n            return false;\r\n          }\r\n        } catch (error) {\r\n          logger.error('❌ Error enviando notificación de prueba:', error as Error);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    } catch (error) {\r\n      logger.error('Error enviando notificación de prueba:', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mostrar notificación local (para testing)\r\n   */\r\n  showLocalNotification(\r\n    title: string,\r\n    options: NotificationOptions = {}\r\n  ): void {\r\n    if (!('Notification' in window)) {\r\n      console.warn('Las notificaciones no están soportadas');\r\n      return;\r\n    }\r\n\r\n    if (Notification.permission === 'granted') {\r\n      new Notification(title, {\r\n        icon: '/icon-192x192.png',\r\n        badge: '/badge-72x72.png',\r\n        tag: 'mussikon-notification',\r\n        ...options,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convertir VAPID key de base64 a Uint8Array\r\n   */\r\n  private urlBase64ToUint8Array(base64String: string): Uint8Array {\r\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/-/g, '+')\r\n      .replace(/_/g, '/');\r\n\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  }\r\n\r\n  /**\r\n   * Convertir ArrayBuffer a base64\r\n   */\r\n  private arrayBufferToBase64(buffer: ArrayBuffer): string {\r\n    const bytes = new Uint8Array(buffer);\r\n    let binary = '';\r\n    for (let i = 0; i < bytes.byteLength; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return window.btoa(binary);\r\n  }\r\n\r\n  /**\r\n   * Obtener configuración de notificaciones del usuario\r\n   */\r\n  async getNotificationSettings(): Promise<NotificationSettings> {\r\n    try {\r\n      const response = await apiService.get<NotificationSettings>(\r\n        '/push-notifications/settings'\r\n      );\r\n      if (response.success && response.data) {\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error obteniendo configuración:', error as Error);\r\n    }\r\n\r\n    // Configuración por defecto\r\n    return {\r\n      enabled: true,\r\n      categories: {\r\n        system: true,\r\n        user: true,\r\n        event: true,\r\n        request: true,\r\n        payment: true,\r\n        chat: true,\r\n      },\r\n      quietHours: {\r\n        enabled: false,\r\n        startTime: '22:00',\r\n        endTime: '08:00',\r\n      },\r\n      sound: true,\r\n      vibration: true,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Actualizar configuración de notificaciones\r\n   */\r\n  async updateNotificationSettings(\r\n    settings: Partial<NotificationSettings>\r\n  ): Promise<boolean> {\r\n    try {\r\n      const response = await apiService.put(\r\n        '/push-notifications/settings',\r\n        settings\r\n      );\r\n      return response.success;\r\n    } catch (error) {\r\n      logger.error('Error actualizando configuración:', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verificar si está en horas silenciosas\r\n   */\r\n  isInQuietHours(settings: NotificationSettings): boolean {\r\n    if (!settings.quietHours.enabled) return false;\r\n\r\n    const now = new Date();\r\n    const currentTime = now.getHours() * 60 + now.getMinutes();\r\n\r\n    const [startHour, startMinute] = settings.quietHours.startTime\r\n      .split(':')\r\n      .map(Number);\r\n    const [endHour, endMinute] = settings.quietHours.endTime\r\n      .split(':')\r\n      .map(Number);\r\n\r\n    const startTime = startHour * 60 + startMinute;\r\n    const endTime = endHour * 60 + endMinute;\r\n\r\n    if (startTime <= endTime) {\r\n      return currentTime >= startTime && currentTime <= endTime;\r\n    } else {\r\n      // Horas silenciosas cruzan la medianoche\r\n      return currentTime >= startTime || currentTime <= endTime;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton del servicio\r\nexport const pushNotificationService = new PushNotificationService();\r\n"],"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","ignoreList":[]}