{"version":3,"names":["cov_st3c3l33s","actualCoverage","s","exports","sanitizeInput","validateAndSanitize","validate","validateId","validatePagination","validateFile","validateCoordinates","validateDateRange","validatePriceRange","validateUserRole","validateQueryLimit","validateSearchQuery","loggerService_1","require","ValidationErrorException","Error","constructor","errors","message","b","f","name","statusCode","data","trim","replace","Array","isArray","map","item","sanitized","key","value","Object","entries","schema","options","defaultOptions","abortEarly","stripUnknown","allowUnknown","convert","presence","validationOptions","assign","sanitizedData","error","details","detail","field","path","join","_a","context","type","isValid","err","logger","property","req","res","next","result","warn","userId","user","url","originalUrl","method","metadata","status","json","success","timestamp","Date","toISOString","debug","_b","id","params","sanitizedId","length","test","page","parseInt","query","limit","offset","push","pagination","allowedTypes","maxSize","file","files","mimetype","includes","size","Math","round","originalname","sanitizedName","extension","split","pop","toLowerCase","allowedExtensions","lat","lng","latitude","longitude","latValue","parseFloat","lngValue","isNaN","coordinates","startDate","endDate","dateFrom","dateTo","start","end","startDateObj","endDateObj","getTime","maxDate","setFullYear","getFullYear","dateRange","minPrice","maxPrice","budget","budgetMax","min","max","undefined","priceRange","allowedRoles","roll","userRole","maxLimit","search","searchTerm","sanitizedQuery"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\validationMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport Joi from 'joi';\r\nimport { logger } from '../services/loggerService';\r\n\r\n// Tipos para errores de validación\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n  value?: any;\r\n  type?: string;\r\n}\r\n\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: ValidationError[];\r\n  sanitizedData: any;\r\n}\r\n\r\n/**\r\n * Clase para manejo de errores de validación\r\n */\r\nexport class ValidationErrorException extends Error {\r\n  public errors: ValidationError[];\r\n  public statusCode: number;\r\n\r\n  constructor(\r\n    errors: ValidationError[],\r\n    message: string = 'Error de validación'\r\n  ) {\r\n    super(message);\r\n    this.name = 'ValidationErrorException';\r\n    this.errors = errors;\r\n    this.statusCode = 400;\r\n  }\r\n}\r\n\r\n/**\r\n * Función para sanitizar datos de entrada\r\n */\r\nexport function sanitizeInput(data: any): any {\r\n  if (typeof data === 'string') {\r\n    // Remover caracteres peligrosos y normalizar espacios\r\n    return data\r\n      .trim()\r\n      .replace(/[<>]/g, '') // Remover < y >\r\n      .replace(/\\s+/g, ' ') // Normalizar espacios múltiples\r\n      .replace(/javascript:/gi, '') // Remover javascript: protocol\r\n      .replace(/on\\w+=/gi, '') // Remover event handlers\r\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, ''); // Remover scripts\r\n  }\r\n\r\n  if (Array.isArray(data)) {\r\n    return data.map(item => sanitizeInput(item));\r\n  }\r\n\r\n  if (typeof data === 'object' && data !== null) {\r\n    const sanitized: any = {};\r\n    for (const [key, value] of Object.entries(data)) {\r\n      sanitized[key] = sanitizeInput(value);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Función para validar y sanitizar datos usando Joi\r\n */\r\nexport function validateAndSanitize(\r\n  schema: Joi.ObjectSchema,\r\n  data: any,\r\n  options: Joi.ValidationOptions = {}\r\n): ValidationResult {\r\n  const defaultOptions: Joi.ValidationOptions = {\r\n    abortEarly: false,\r\n    stripUnknown: true,\r\n    allowUnknown: false,\r\n    convert: true,\r\n    presence: 'required',\r\n  };\r\n\r\n  const validationOptions = { ...defaultOptions, ...options };\r\n\r\n  try {\r\n    // Sanitizar datos antes de validar\r\n    const sanitizedData = sanitizeInput(data);\r\n\r\n    const { error, value } = schema.validate(sanitizedData, validationOptions);\r\n\r\n    if (error) {\r\n      const errors: ValidationError[] = error.details.map(detail => ({\r\n        field: detail.path.join('.'),\r\n        message: detail.message,\r\n        value: detail.context?.value,\r\n        type: detail.type,\r\n      }));\r\n\r\n      return {\r\n        isValid: false,\r\n        errors,\r\n        sanitizedData: value,\r\n      };\r\n    }\r\n\r\n    return {\r\n      isValid: true,\r\n      errors: [],\r\n      sanitizedData: value,\r\n    };\r\n  } catch (err) {\r\n    logger.error('Error en validación Joi', err as Error);\r\n    return {\r\n      isValid: false,\r\n      errors: [\r\n        {\r\n          field: 'unknown',\r\n          message: 'Error interno de validación',\r\n          type: 'internal',\r\n        },\r\n      ],\r\n      sanitizedData: data,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Middleware de validación genérico mejorado\r\n */\r\nexport function validate(\r\n  schema: Joi.ObjectSchema,\r\n  property: 'body' | 'query' | 'params' = 'body',\r\n  options: Joi.ValidationOptions = {}\r\n) {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    try {\r\n      const data = req[property];\r\n      const result = validateAndSanitize(schema, data, options);\r\n\r\n      if (!result.isValid) {\r\n        logger.warn('Validación fallida', {\r\n          userId: (req as any).user?.userId,\r\n          url: req.originalUrl,\r\n          method: req.method,\r\n          metadata: { errors: result.errors },\r\n        });\r\n\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Datos de entrada inválidos',\r\n          errors: result.errors,\r\n          timestamp: new Date().toISOString(),\r\n          path: req.originalUrl,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Reemplazar datos con los validados y sanitizados\r\n      req[property] = result.sanitizedData;\r\n\r\n      logger.debug('Validación exitosa', {\r\n        userId: (req as any).user?.userId,\r\n        url: req.originalUrl,\r\n        method: req.method,\r\n      });\r\n\r\n      next();\r\n    } catch (error) {\r\n      logger.error('Error en middleware de validación', error as Error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Error interno del servidor',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para validar IDs de Firestore\r\n */\r\nexport function validateId(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const id = req.params.id;\r\n\r\n  if (!id || typeof id !== 'string') {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'ID requerido',\r\n      field: 'id',\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  const sanitizedId = sanitizeInput(id);\r\n\r\n  // Validación para IDs de Firestore\r\n  if (sanitizedId.length < 1 || sanitizedId.length > 1500) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'ID inválido: debe tener entre 1 y 1500 caracteres',\r\n      field: 'id',\r\n      value: sanitizedId,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Verificar que no contenga caracteres peligrosos\r\n  if (/[<>\\\"'&]/.test(sanitizedId)) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'ID contiene caracteres no permitidos',\r\n      field: 'id',\r\n      value: sanitizedId,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  req.params.id = sanitizedId;\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar paginación\r\n */\r\nexport function validatePagination(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const page = parseInt(req.query.page as string) || 1;\r\n  const limit = parseInt(req.query.limit as string) || 10;\r\n  const offset = parseInt(req.query.offset as string) || 0;\r\n\r\n  const errors: ValidationError[] = [];\r\n\r\n  if (page < 1) {\r\n    errors.push({\r\n      field: 'page',\r\n      message: 'Página debe ser mayor a 0',\r\n      value: page,\r\n    });\r\n  }\r\n\r\n  if (limit < 1 || limit > 100) {\r\n    errors.push({\r\n      field: 'limit',\r\n      message: 'Límite debe estar entre 1 y 100',\r\n      value: limit,\r\n    });\r\n  }\r\n\r\n  if (offset < 0) {\r\n    errors.push({\r\n      field: 'offset',\r\n      message: 'Offset debe ser mayor o igual a 0',\r\n      value: offset,\r\n    });\r\n  }\r\n\r\n  if (errors.length > 0) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'Parámetros de paginación inválidos',\r\n      errors,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Agregar valores validados a req\r\n  (req as any).pagination = { page, limit, offset };\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar archivos\r\n */\r\nexport function validateFile(\r\n  allowedTypes: string[] = [\r\n    'image/jpeg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n  ],\r\n  maxSize: number = 10 * 1024 * 1024 // 10MB por defecto\r\n) {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    if (!req.file && !req.files) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'Archivo requerido',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const files = req.files\r\n      ? Array.isArray(req.files)\r\n        ? req.files\r\n        : [req.files]\r\n      : [req.file];\r\n    const errors: ValidationError[] = [];\r\n\r\n    for (const file of files) {\r\n      if (!file) continue;\r\n\r\n      // Validar tipo de archivo\r\n      if (\r\n        file.mimetype &&\r\n        typeof file.mimetype === 'string' &&\r\n        !allowedTypes.includes(file.mimetype)\r\n      ) {\r\n        errors.push({\r\n          field: 'file',\r\n          message: `Tipo de archivo no permitido. Tipos permitidos: ${allowedTypes.join(', ')}`,\r\n          value: file.mimetype,\r\n        });\r\n      }\r\n\r\n      // Validar tamaño\r\n      if (typeof file.size === 'number' && file.size > maxSize) {\r\n        errors.push({\r\n          field: 'file',\r\n          message: `Archivo demasiado grande. Tamaño máximo: ${Math.round(maxSize / 1024 / 1024)}MB`,\r\n          value: file.size,\r\n        });\r\n      }\r\n\r\n      // Validar nombre de archivo\r\n      if (file.originalname && typeof file.originalname === 'string') {\r\n        const sanitizedName = sanitizeInput(file.originalname);\r\n        if (sanitizedName.length > 255) {\r\n          errors.push({\r\n            field: 'filename',\r\n            message: 'Nombre de archivo demasiado largo',\r\n            value: sanitizedName,\r\n          });\r\n        }\r\n\r\n        // Verificar extensión\r\n        const extension = sanitizedName.split('.').pop()?.toLowerCase();\r\n        const allowedExtensions = allowedTypes.map(type => type.split('/')[1]);\r\n        if (extension && !allowedExtensions.includes(extension)) {\r\n          errors.push({\r\n            field: 'filename',\r\n            message: `Extensión no permitida. Extensiones permitidas: ${allowedExtensions.join(', ')}`,\r\n            value: extension,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'Archivo(s) inválido(s)',\r\n        errors,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    next();\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para validar coordenadas geográficas\r\n */\r\nexport function validateCoordinates(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const { lat, lng, latitude, longitude } = req.query;\r\n\r\n  const latValue = parseFloat((lat || latitude) as string);\r\n  const lngValue = parseFloat((lng || longitude) as string);\r\n\r\n  const errors: ValidationError[] = [];\r\n\r\n  if (isNaN(latValue) || latValue < -90 || latValue > 90) {\r\n    errors.push({\r\n      field: 'latitude',\r\n      message: 'Latitud debe ser un número entre -90 y 90',\r\n      value: latValue,\r\n    });\r\n  }\r\n\r\n  if (isNaN(lngValue) || lngValue < -180 || lngValue > 180) {\r\n    errors.push({\r\n      field: 'longitude',\r\n      message: 'Longitud debe ser un número entre -180 y 180',\r\n      value: lngValue,\r\n    });\r\n  }\r\n\r\n  if (errors.length > 0) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'Coordenadas geográficas inválidas',\r\n      errors,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Agregar coordenadas validadas a req\r\n  (req as any).coordinates = { latitude: latValue, longitude: lngValue };\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar fechas\r\n */\r\nexport function validateDateRange(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const { startDate, endDate, dateFrom, dateTo } = req.query;\r\n\r\n  const start = startDate || dateFrom;\r\n  const end = endDate || dateTo;\r\n\r\n  if (!start || !end) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'Fechas de inicio y fin requeridas',\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  const startDateObj = new Date(start as string);\r\n  const endDateObj = new Date(end as string);\r\n\r\n  const errors: ValidationError[] = [];\r\n\r\n  if (isNaN(startDateObj.getTime())) {\r\n    errors.push({\r\n      field: 'startDate',\r\n      message: 'Fecha de inicio inválida',\r\n      value: start,\r\n    });\r\n  }\r\n\r\n  if (isNaN(endDateObj.getTime())) {\r\n    errors.push({\r\n      field: 'endDate',\r\n      message: 'Fecha de fin inválida',\r\n      value: end,\r\n    });\r\n  }\r\n\r\n  if (startDateObj >= endDateObj) {\r\n    errors.push({\r\n      field: 'dateRange',\r\n      message: 'La fecha de inicio debe ser anterior a la fecha de fin',\r\n      value: { start: startDateObj, end: endDateObj },\r\n    });\r\n  }\r\n\r\n  // Verificar que las fechas no estén muy en el futuro (más de 10 años)\r\n  const maxDate = new Date();\r\n  maxDate.setFullYear(maxDate.getFullYear() + 10);\r\n\r\n  if (startDateObj > maxDate || endDateObj > maxDate) {\r\n    errors.push({\r\n      field: 'dateRange',\r\n      message: 'Las fechas no pueden estar más de 10 años en el futuro',\r\n      value: { start: startDateObj, end: endDateObj },\r\n    });\r\n  }\r\n\r\n  if (errors.length > 0) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'Rango de fechas inválido',\r\n      errors,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Agregar fechas validadas a req\r\n  (req as any).dateRange = { startDate: startDateObj, endDate: endDateObj };\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar rangos de precios\r\n */\r\nexport function validatePriceRange(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const { minPrice, maxPrice, budget, budgetMax } = req.query;\r\n\r\n  const min = parseFloat((minPrice || budget) as string);\r\n  const max = parseFloat((maxPrice || budgetMax) as string);\r\n\r\n  if (min !== undefined || max !== undefined) {\r\n    const errors: ValidationError[] = [];\r\n\r\n    if (min !== undefined && (isNaN(min) || min < 0)) {\r\n      errors.push({\r\n        field: 'minPrice',\r\n        message: 'Precio mínimo debe ser un número mayor o igual a 0',\r\n        value: min,\r\n      });\r\n    }\r\n\r\n    if (max !== undefined && (isNaN(max) || max < 0)) {\r\n      errors.push({\r\n        field: 'maxPrice',\r\n        message: 'Precio máximo debe ser un número mayor o igual a 0',\r\n        value: max,\r\n      });\r\n    }\r\n\r\n    if (min !== undefined && max !== undefined && min > max) {\r\n      errors.push({\r\n        field: 'priceRange',\r\n        message: 'El precio mínimo no puede ser mayor al precio máximo',\r\n        value: { min, max },\r\n      });\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'Rango de precios inválido',\r\n        errors,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Agregar precios validados a req\r\n    (req as any).priceRange = { min, max };\r\n  }\r\n\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar roles de usuario\r\n */\r\nexport function validateUserRole(allowedRoles: string[]) {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    const user = (req as any).user;\r\n\r\n    if (!user) {\r\n      res.status(401).json({\r\n        success: false,\r\n        message: 'Usuario no autenticado',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!allowedRoles.includes(user.roll)) {\r\n      res.status(403).json({\r\n        success: false,\r\n        message: `Acceso denegado. Roles permitidos: ${allowedRoles.join(', ')}`,\r\n        userRole: user.roll,\r\n        allowedRoles,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    next();\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para validar límites de consulta\r\n */\r\nexport function validateQueryLimit(maxLimit: number = 100) {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    const limit = parseInt(req.query.limit as string) || 10;\r\n\r\n    if (limit > maxLimit) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: `Límite máximo permitido: ${maxLimit}`,\r\n        field: 'limit',\r\n        value: limit,\r\n        maxLimit,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    next();\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para validar campos de búsqueda\r\n */\r\nexport function validateSearchQuery(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const { query, search } = req.query;\r\n  const searchTerm = query || search;\r\n\r\n  if (searchTerm && typeof searchTerm === 'string') {\r\n    const sanitizedQuery = sanitizeInput(searchTerm);\r\n\r\n    if (sanitizedQuery.length < 1) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'Término de búsqueda no puede estar vacío',\r\n        field: 'query',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (sanitizedQuery.length > 100) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'Término de búsqueda demasiado largo (máximo 100 caracteres)',\r\n        field: 'query',\r\n        value: sanitizedQuery.length,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Verificar caracteres especiales peligrosos\r\n    if (/[<>\\\"'&]/.test(sanitizedQuery)) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'Término de búsqueda contiene caracteres no permitidos',\r\n        field: 'query',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    req.query.query = sanitizedQuery;\r\n  }\r\n\r\n  next();\r\n}\r\n"],"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","ignoreList":[]}