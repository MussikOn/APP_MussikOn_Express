a3d52360a31e6312885bca6b742bc33a
"use strict";

/* istanbul ignore next */
function cov_1m4baz2k66() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\ratingService.ts";
  var hash = "ad7d04931d881485dbb16c88d1b7c7561e2083e2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\ratingService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "14": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "15": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 14,
          column: 50
        }
      },
      "16": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 55
        }
      },
      "17": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 36
        }
      },
      "18": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "19": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "20": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 33,
          column: 19
        }
      },
      "21": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 37,
          column: 17
        }
      },
      "22": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 82
        }
      },
      "23": {
        start: {
          line: 39,
          column: 39
        },
        end: {
          line: 39,
          column: 125
        }
      },
      "24": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 42,
          column: 17
        }
      },
      "25": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 86
        }
      },
      "26": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 38
        }
      },
      "27": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 44,
          column: 212
        }
      },
      "28": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 91
        }
      },
      "29": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 81
        }
      },
      "30": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 53,
          column: 19
        }
      },
      "31": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 30
        }
      },
      "32": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 63,
          column: 19
        }
      },
      "33": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 28
        }
      },
      "34": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      },
      "35": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "36": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 74,
          column: 95
        }
      },
      "37": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 54
        }
      },
      "38": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 82,
          column: 19
        }
      },
      "39": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 28
        }
      },
      "40": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 112,
          column: 11
        }
      },
      "41": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "42": {
        start: {
          line: 93,
          column: 33
        },
        end: {
          line: 99,
          column: 26
        }
      },
      "43": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 71
        }
      },
      "44": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 109,
          column: 19
        }
      },
      "45": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 28
        }
      },
      "46": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "47": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "48": {
        start: {
          line: 120,
          column: 28
        },
        end: {
          line: 121,
          column: 50
        }
      },
      "49": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "50": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 68
        }
      },
      "51": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 72
        }
      },
      "52": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 64
        }
      },
      "53": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 132,
          column: 17
        }
      },
      "54": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 75
        }
      },
      "55": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 135,
          column: 17
        }
      },
      "56": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 75
        }
      },
      "57": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 138,
          column: 17
        }
      },
      "58": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 137,
          column: 80
        }
      },
      "59": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "60": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 77
        }
      },
      "61": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 144,
          column: 17
        }
      },
      "62": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 75
        }
      },
      "63": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 59
        }
      },
      "64": {
        start: {
          line: 146,
          column: 33
        },
        end: {
          line: 146,
          column: 50
        }
      },
      "65": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 60
        }
      },
      "66": {
        start: {
          line: 147,
          column: 48
        },
        end: {
          line: 147,
          column: 58
        }
      },
      "67": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 155,
          column: 19
        }
      },
      "68": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 28
        }
      },
      "69": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 209,
          column: 11
        }
      },
      "70": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "71": {
        start: {
          line: 166,
          column: 32
        },
        end: {
          line: 166,
          column: 75
        }
      },
      "72": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 176,
          column: 17
        }
      },
      "73": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 175,
          column: 22
        }
      },
      "74": {
        start: {
          line: 178,
          column: 36
        },
        end: {
          line: 178,
          column: 91
        }
      },
      "75": {
        start: {
          line: 178,
          column: 68
        },
        end: {
          line: 178,
          column: 87
        }
      },
      "76": {
        start: {
          line: 179,
          column: 38
        },
        end: {
          line: 179,
          column: 66
        }
      },
      "77": {
        start: {
          line: 181,
          column: 43
        },
        end: {
          line: 181,
          column: 75
        }
      },
      "78": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 184,
          column: 19
        }
      },
      "79": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 56
        }
      },
      "80": {
        start: {
          line: 186,
          column: 38
        },
        end: {
          line: 186,
          column: 58
        }
      },
      "81": {
        start: {
          line: 188,
          column: 40
        },
        end: {
          line: 188,
          column: 90
        }
      },
      "82": {
        start: {
          line: 188,
          column: 65
        },
        end: {
          line: 188,
          column: 82
        }
      },
      "83": {
        start: {
          line: 190,
          column: 37
        },
        end: {
          line: 190,
          column: 87
        }
      },
      "84": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 198,
          column: 18
        }
      },
      "85": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 206,
          column: 19
        }
      },
      "86": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 28
        }
      },
      "87": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      },
      "88": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "89": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 222,
          column: 19
        }
      },
      "90": {
        start: {
          line: 223,
          column: 35
        },
        end: {
          line: 223,
          column: 103
        }
      },
      "91": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 97
        }
      },
      "92": {
        start: {
          line: 225,
          column: 38
        },
        end: {
          line: 225,
          column: 72
        }
      },
      "93": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 228,
          column: 17
        }
      },
      "94": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 88
        }
      },
      "95": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 99
        }
      },
      "96": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 236,
          column: 19
        }
      },
      "97": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 37
        }
      },
      "98": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 244,
          column: 19
        }
      },
      "99": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 28
        }
      },
      "100": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 268,
          column: 11
        }
      },
      "101": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 267,
          column: 13
        }
      },
      "102": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 258,
          column: 19
        }
      },
      "103": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 265,
          column: 19
        }
      },
      "104": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 28
        }
      },
      "105": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 309,
          column: 11
        }
      },
      "106": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "107": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 282,
          column: 19
        }
      },
      "108": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 286,
          column: 19
        }
      },
      "109": {
        start: {
          line: 288,
          column: 31
        },
        end: {
          line: 288,
          column: 65
        }
      },
      "110": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 298,
          column: 17
        }
      },
      "111": {
        start: {
          line: 290,
          column: 20
        },
        end: {
          line: 290,
          column: 75
        }
      },
      "112": {
        start: {
          line: 291,
          column: 20
        },
        end: {
          line: 297,
          column: 23
        }
      },
      "113": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 306,
          column: 19
        }
      },
      "114": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 28
        }
      },
      "115": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 340,
          column: 11
        }
      },
      "116": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "117": {
        start: {
          line: 317,
          column: 28
        },
        end: {
          line: 318,
          column: 50
        }
      },
      "118": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 324,
          column: 17
        }
      },
      "119": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 320,
          column: 68
        }
      },
      "120": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 323,
          column: 72
        }
      },
      "121": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 64
        }
      },
      "122": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 62
        }
      },
      "123": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 43
        }
      },
      "124": {
        start: {
          line: 328,
          column: 33
        },
        end: {
          line: 328,
          column: 50
        }
      },
      "125": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 60
        }
      },
      "126": {
        start: {
          line: 329,
          column: 48
        },
        end: {
          line: 329,
          column: 58
        }
      },
      "127": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 337,
          column: 19
        }
      },
      "128": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 28
        }
      },
      "129": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 363,
          column: 11
        }
      },
      "130": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 362,
          column: 13
        }
      },
      "131": {
        start: {
          line: 348,
          column: 33
        },
        end: {
          line: 352,
          column: 26
        }
      },
      "132": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 60
        }
      },
      "133": {
        start: {
          line: 353,
          column: 48
        },
        end: {
          line: 353,
          column: 58
        }
      },
      "134": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 360,
          column: 19
        }
      },
      "135": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 28
        }
      },
      "136": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 399,
          column: 11
        }
      },
      "137": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 398,
          column: 13
        }
      },
      "138": {
        start: {
          line: 372,
          column: 34
        },
        end: {
          line: 372,
          column: 68
        }
      },
      "139": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 378,
          column: 17
        }
      },
      "140": {
        start: {
          line: 374,
          column: 20
        },
        end: {
          line: 374,
          column: 88
        }
      },
      "141": {
        start: {
          line: 377,
          column: 20
        },
        end: {
          line: 377,
          column: 74
        }
      },
      "142": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 77
        }
      },
      "143": {
        start: {
          line: 380,
          column: 39
        },
        end: {
          line: 380,
          column: 62
        }
      },
      "144": {
        start: {
          line: 381,
          column: 36
        },
        end: {
          line: 381,
          column: 55
        }
      },
      "145": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 384,
          column: 17
        }
      },
      "146": {
        start: {
          line: 383,
          column: 20
        },
        end: {
          line: 383,
          column: 29
        }
      },
      "147": {
        start: {
          line: 386,
          column: 32
        },
        end: {
          line: 386,
          column: 75
        }
      },
      "148": {
        start: {
          line: 387,
          column: 42
        },
        end: {
          line: 387,
          column: 93
        }
      },
      "149": {
        start: {
          line: 387,
          column: 72
        },
        end: {
          line: 387,
          column: 86
        }
      },
      "150": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 388,
          column: 75
        }
      },
      "151": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 396,
          column: 19
        }
      },
      "152": {
        start: {
          line: 397,
          column: 16
        },
        end: {
          line: 397,
          column: 25
        }
      },
      "153": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 426,
          column: 11
        }
      },
      "154": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 425,
          column: 13
        }
      },
      "155": {
        start: {
          line: 407,
          column: 30
        },
        end: {
          line: 407,
          column: 77
        }
      },
      "156": {
        start: {
          line: 408,
          column: 32
        },
        end: {
          line: 408,
          column: 77
        }
      },
      "157": {
        start: {
          line: 409,
          column: 35
        },
        end: {
          line: 409,
          column: 37
        }
      },
      "158": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 415,
          column: 17
        }
      },
      "159": {
        start: {
          line: 411,
          column: 20
        },
        end: {
          line: 411,
          column: 59
        }
      },
      "160": {
        start: {
          line: 414,
          column: 20
        },
        end: {
          line: 414,
          column: 63
        }
      },
      "161": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 49
        }
      },
      "162": {
        start: {
          line: 419,
          column: 16
        },
        end: {
          line: 424,
          column: 19
        }
      },
      "163": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 463,
          column: 11
        }
      },
      "164": {
        start: {
          line: 433,
          column: 12
        },
        end: {
          line: 462,
          column: 13
        }
      },
      "165": {
        start: {
          line: 435,
          column: 38
        },
        end: {
          line: 438,
          column: 26
        }
      },
      "166": {
        start: {
          line: 439,
          column: 34
        },
        end: {
          line: 439,
          column: 75
        }
      },
      "167": {
        start: {
          line: 439,
          column: 64
        },
        end: {
          line: 439,
          column: 74
        }
      },
      "168": {
        start: {
          line: 441,
          column: 43
        },
        end: {
          line: 447,
          column: 20
        }
      },
      "169": {
        start: {
          line: 441,
          column: 89
        },
        end: {
          line: 447,
          column: 18
        }
      },
      "170": {
        start: {
          line: 442,
          column: 34
        },
        end: {
          line: 442,
          column: 88
        }
      },
      "171": {
        start: {
          line: 443,
          column: 20
        },
        end: {
          line: 446,
          column: 22
        }
      },
      "172": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 452,
          column: 37
        }
      },
      "173": {
        start: {
          line: 450,
          column: 40
        },
        end: {
          line: 450,
          column: 81
        }
      },
      "174": {
        start: {
          line: 451,
          column: 36
        },
        end: {
          line: 451,
          column: 81
        }
      },
      "175": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 460,
          column: 19
        }
      },
      "176": {
        start: {
          line: 461,
          column: 16
        },
        end: {
          line: 461,
          column: 28
        }
      },
      "177": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 512,
          column: 11
        }
      },
      "178": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 511,
          column: 13
        }
      },
      "179": {
        start: {
          line: 471,
          column: 34
        },
        end: {
          line: 471,
          column: 44
        }
      },
      "180": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 472,
          column: 62
        }
      },
      "181": {
        start: {
          line: 473,
          column: 33
        },
        end: {
          line: 477,
          column: 26
        }
      },
      "182": {
        start: {
          line: 478,
          column: 32
        },
        end: {
          line: 478,
          column: 68
        }
      },
      "183": {
        start: {
          line: 478,
          column: 57
        },
        end: {
          line: 478,
          column: 67
        }
      },
      "184": {
        start: {
          line: 479,
          column: 43
        },
        end: {
          line: 479,
          column: 45
        }
      },
      "185": {
        start: {
          line: 480,
          column: 42
        },
        end: {
          line: 480,
          column: 44
        }
      },
      "186": {
        start: {
          line: 481,
          column: 45
        },
        end: {
          line: 481,
          column: 47
        }
      },
      "187": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 493,
          column: 19
        }
      },
      "188": {
        start: {
          line: 484,
          column: 33
        },
        end: {
          line: 484,
          column: 64
        }
      },
      "189": {
        start: {
          line: 485,
          column: 20
        },
        end: {
          line: 488,
          column: 21
        }
      },
      "190": {
        start: {
          line: 486,
          column: 24
        },
        end: {
          line: 486,
          column: 53
        }
      },
      "191": {
        start: {
          line: 487,
          column: 24
        },
        end: {
          line: 487,
          column: 52
        }
      },
      "192": {
        start: {
          line: 489,
          column: 20
        },
        end: {
          line: 489,
          column: 62
        }
      },
      "193": {
        start: {
          line: 490,
          column: 20
        },
        end: {
          line: 490,
          column: 46
        }
      },
      "194": {
        start: {
          line: 492,
          column: 20
        },
        end: {
          line: 492,
          column: 109
        }
      },
      "195": {
        start: {
          line: 495,
          column: 16
        },
        end: {
          line: 497,
          column: 19
        }
      },
      "196": {
        start: {
          line: 496,
          column: 20
        },
        end: {
          line: 496,
          column: 124
        }
      },
      "197": {
        start: {
          line: 498,
          column: 16
        },
        end: {
          line: 502,
          column: 18
        }
      },
      "198": {
        start: {
          line: 505,
          column: 16
        },
        end: {
          line: 509,
          column: 19
        }
      },
      "199": {
        start: {
          line: 510,
          column: 16
        },
        end: {
          line: 510,
          column: 28
        }
      },
      "200": {
        start: {
          line: 515,
          column: 0
        },
        end: {
          line: 515,
          column: 38
        }
      },
      "201": {
        start: {
          line: 516,
          column: 0
        },
        end: {
          line: 516,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 23
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 23
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 24,
            column: 47
          },
          end: {
            line: 24,
            column: 48
          }
        },
        loc: {
          start: {
            line: 24,
            column: 60
          },
          end: {
            line: 66,
            column: 9
          }
        },
        line: 24
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 28
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 71
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 72,
            column: 47
          },
          end: {
            line: 72,
            column: 48
          }
        },
        loc: {
          start: {
            line: 72,
            column: 60
          },
          end: {
            line: 85,
            column: 9
          }
        },
        line: 72
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 65
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 90
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 91,
            column: 47
          },
          end: {
            line: 91,
            column: 48
          }
        },
        loc: {
          start: {
            line: 91,
            column: 60
          },
          end: {
            line: 112,
            column: 9
          }
        },
        line: 91
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 46
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 117
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 118,
            column: 47
          },
          end: {
            line: 118,
            column: 48
          }
        },
        loc: {
          start: {
            line: 118,
            column: 60
          },
          end: {
            line: 158,
            column: 9
          }
        },
        line: 118
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 147,
            column: 41
          },
          end: {
            line: 147,
            column: 42
          }
        },
        loc: {
          start: {
            line: 147,
            column: 48
          },
          end: {
            line: 147,
            column: 58
          }
        },
        line: 147
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 41
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 163
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 164,
            column: 47
          },
          end: {
            line: 164,
            column: 48
          }
        },
        loc: {
          start: {
            line: 164,
            column: 60
          },
          end: {
            line: 209,
            column: 9
          }
        },
        line: 164
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 178,
            column: 51
          },
          end: {
            line: 178,
            column: 52
          }
        },
        loc: {
          start: {
            line: 178,
            column: 68
          },
          end: {
            line: 178,
            column: 87
          }
        },
        line: 178
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 182,
            column: 32
          },
          end: {
            line: 182,
            column: 33
          }
        },
        loc: {
          start: {
            line: 182,
            column: 42
          },
          end: {
            line: 184,
            column: 17
          }
        },
        line: 182
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 188,
            column: 55
          },
          end: {
            line: 188,
            column: 56
          }
        },
        loc: {
          start: {
            line: 188,
            column: 65
          },
          end: {
            line: 188,
            column: 82
          }
        },
        line: 188
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 36
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 214
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 215,
            column: 47
          },
          end: {
            line: 215,
            column: 48
          }
        },
        loc: {
          start: {
            line: 215,
            column: 60
          },
          end: {
            line: 247,
            column: 9
          }
        },
        line: 215
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 34
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 252
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 253,
            column: 47
          },
          end: {
            line: 253,
            column: 48
          }
        },
        loc: {
          start: {
            line: 253,
            column: 60
          },
          end: {
            line: 268,
            column: 9
          }
        },
        line: 253
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 35
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 273
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 274,
            column: 47
          },
          end: {
            line: 274,
            column: 48
          }
        },
        loc: {
          start: {
            line: 274,
            column: 60
          },
          end: {
            line: 309,
            column: 9
          }
        },
        line: 274
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 48
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 314
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 315,
            column: 50
          },
          end: {
            line: 315,
            column: 51
          }
        },
        loc: {
          start: {
            line: 315,
            column: 90
          },
          end: {
            line: 340,
            column: 9
          }
        },
        line: 315
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 329,
            column: 41
          },
          end: {
            line: 329,
            column: 42
          }
        },
        loc: {
          start: {
            line: 329,
            column: 48
          },
          end: {
            line: 329,
            column: 58
          }
        },
        line: 329
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 29
          },
          end: {
            line: 364,
            column: 5
          }
        },
        line: 345
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 346,
            column: 47
          },
          end: {
            line: 346,
            column: 48
          }
        },
        loc: {
          start: {
            line: 346,
            column: 60
          },
          end: {
            line: 363,
            column: 9
          }
        },
        line: 346
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 353,
            column: 41
          },
          end: {
            line: 353,
            column: 42
          }
        },
        loc: {
          start: {
            line: 353,
            column: 48
          },
          end: {
            line: 353,
            column: 58
          }
        },
        line: 353
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 44
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 368
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 369,
            column: 47
          },
          end: {
            line: 369,
            column: 48
          }
        },
        loc: {
          start: {
            line: 369,
            column: 60
          },
          end: {
            line: 399,
            column: 9
          }
        },
        line: 369
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 387,
            column: 62
          },
          end: {
            line: 387,
            column: 63
          }
        },
        loc: {
          start: {
            line: 387,
            column: 72
          },
          end: {
            line: 387,
            column: 86
          }
        },
        line: 387
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 404,
            column: 5
          }
        },
        loc: {
          start: {
            line: 404,
            column: 44
          },
          end: {
            line: 427,
            column: 5
          }
        },
        line: 404
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 405,
            column: 47
          },
          end: {
            line: 405,
            column: 48
          }
        },
        loc: {
          start: {
            line: 405,
            column: 60
          },
          end: {
            line: 426,
            column: 9
          }
        },
        line: 405
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 431,
            column: 4
          },
          end: {
            line: 431,
            column: 5
          }
        },
        loc: {
          start: {
            line: 431,
            column: 27
          },
          end: {
            line: 464,
            column: 5
          }
        },
        line: 431
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 432,
            column: 50
          },
          end: {
            line: 432,
            column: 51
          }
        },
        loc: {
          start: {
            line: 432,
            column: 89
          },
          end: {
            line: 463,
            column: 9
          }
        },
        line: 432
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 439,
            column: 57
          },
          end: {
            line: 439,
            column: 58
          }
        },
        loc: {
          start: {
            line: 439,
            column: 64
          },
          end: {
            line: 439,
            column: 74
          }
        },
        line: 439
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 441,
            column: 75
          },
          end: {
            line: 441,
            column: 76
          }
        },
        loc: {
          start: {
            line: 441,
            column: 89
          },
          end: {
            line: 447,
            column: 18
          }
        },
        line: 441
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 441,
            column: 121
          },
          end: {
            line: 441,
            column: 122
          }
        },
        loc: {
          start: {
            line: 441,
            column: 134
          },
          end: {
            line: 447,
            column: 17
          }
        },
        line: 441
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 450,
            column: 28
          },
          end: {
            line: 450,
            column: 29
          }
        },
        loc: {
          start: {
            line: 450,
            column: 40
          },
          end: {
            line: 450,
            column: 81
          }
        },
        line: 450
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 451,
            column: 26
          },
          end: {
            line: 451,
            column: 27
          }
        },
        loc: {
          start: {
            line: 451,
            column: 36
          },
          end: {
            line: 451,
            column: 81
          }
        },
        line: 451
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 468,
            column: 5
          }
        },
        loc: {
          start: {
            line: 468,
            column: 22
          },
          end: {
            line: 513,
            column: 5
          }
        },
        line: 468
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 469,
            column: 50
          },
          end: {
            line: 469,
            column: 51
          }
        },
        loc: {
          start: {
            line: 469,
            column: 72
          },
          end: {
            line: 512,
            column: 9
          }
        },
        line: 469
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 478,
            column: 50
          },
          end: {
            line: 478,
            column: 51
          }
        },
        loc: {
          start: {
            line: 478,
            column: 57
          },
          end: {
            line: 478,
            column: 67
          }
        },
        line: 478
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 483,
            column: 32
          },
          end: {
            line: 483,
            column: 33
          }
        },
        loc: {
          start: {
            line: 483,
            column: 42
          },
          end: {
            line: 493,
            column: 17
          }
        },
        line: 483
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 495,
            column: 56
          },
          end: {
            line: 495,
            column: 57
          }
        },
        loc: {
          start: {
            line: 495,
            column: 64
          },
          end: {
            line: 497,
            column: 17
          }
        },
        line: 495
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 37,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 37,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 35,
            column: 20
          },
          end: {
            line: 35,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 20
          },
          end: {
            line: 35,
            column: 35
          }
        }, {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 35,
            column: 54
          }
        }],
        line: 35
      },
      "7": {
        loc: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 42,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 42,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "8": {
        loc: {
          start: {
            line: 57,
            column: 85
          },
          end: {
            line: 57,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 110
          },
          end: {
            line: 57,
            column: 115
          }
        }, {
          start: {
            line: 57,
            column: 118
          },
          end: {
            line: 57,
            column: 148
          }
        }],
        line: 57
      },
      "9": {
        loc: {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 75,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 36
          },
          end: {
            line: 75,
            column: 46
          }
        }, {
          start: {
            line: 75,
            column: 49
          },
          end: {
            line: 75,
            column: 53
          }
        }],
        line: 75
      },
      "10": {
        loc: {
          start: {
            line: 78,
            column: 94
          },
          end: {
            line: 78,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 119
          },
          end: {
            line: 78,
            column: 124
          }
        }, {
          start: {
            line: 78,
            column: 127
          },
          end: {
            line: 78,
            column: 157
          }
        }],
        line: 78
      },
      "11": {
        loc: {
          start: {
            line: 100,
            column: 23
          },
          end: {
            line: 100,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 40
          },
          end: {
            line: 100,
            column: 44
          }
        }, {
          start: {
            line: 100,
            column: 47
          },
          end: {
            line: 100,
            column: 70
          }
        }],
        line: 100
      },
      "12": {
        loc: {
          start: {
            line: 103,
            column: 108
          },
          end: {
            line: 103,
            column: 171
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 133
          },
          end: {
            line: 103,
            column: 138
          }
        }, {
          start: {
            line: 103,
            column: 141
          },
          end: {
            line: 103,
            column: 171
          }
        }],
        line: 103
      },
      "13": {
        loc: {
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        }, {
          start: {
            line: 125,
            column: 21
          },
          end: {
            line: 127,
            column: 17
          }
        }],
        line: 122
      },
      "14": {
        loc: {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 132,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 132,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "15": {
        loc: {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 61
          },
          end: {
            line: 130,
            column: 67
          }
        }, {
          start: {
            line: 130,
            column: 70
          },
          end: {
            line: 130,
            column: 87
          }
        }],
        line: 130
      },
      "16": {
        loc: {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 36
          }
        }, {
          start: {
            line: 130,
            column: 40
          },
          end: {
            line: 130,
            column: 58
          }
        }],
        line: 130
      },
      "17": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "18": {
        loc: {
          start: {
            line: 133,
            column: 20
          },
          end: {
            line: 133,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 61
          },
          end: {
            line: 133,
            column: 67
          }
        }, {
          start: {
            line: 133,
            column: 70
          },
          end: {
            line: 133,
            column: 87
          }
        }],
        line: 133
      },
      "19": {
        loc: {
          start: {
            line: 133,
            column: 20
          },
          end: {
            line: 133,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 20
          },
          end: {
            line: 133,
            column: 36
          }
        }, {
          start: {
            line: 133,
            column: 40
          },
          end: {
            line: 133,
            column: 58
          }
        }],
        line: 133
      },
      "20": {
        loc: {
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "21": {
        loc: {
          start: {
            line: 136,
            column: 21
          },
          end: {
            line: 136,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 62
          },
          end: {
            line: 136,
            column: 68
          }
        }, {
          start: {
            line: 136,
            column: 71
          },
          end: {
            line: 136,
            column: 89
          }
        }],
        line: 136
      },
      "22": {
        loc: {
          start: {
            line: 136,
            column: 21
          },
          end: {
            line: 136,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 21
          },
          end: {
            line: 136,
            column: 37
          }
        }, {
          start: {
            line: 136,
            column: 41
          },
          end: {
            line: 136,
            column: 59
          }
        }],
        line: 136
      },
      "23": {
        loc: {
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "24": {
        loc: {
          start: {
            line: 139,
            column: 20
          },
          end: {
            line: 139,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 61
          },
          end: {
            line: 139,
            column: 67
          }
        }, {
          start: {
            line: 139,
            column: 70
          },
          end: {
            line: 139,
            column: 86
          }
        }],
        line: 139
      },
      "25": {
        loc: {
          start: {
            line: 139,
            column: 20
          },
          end: {
            line: 139,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 20
          },
          end: {
            line: 139,
            column: 36
          }
        }, {
          start: {
            line: 139,
            column: 40
          },
          end: {
            line: 139,
            column: 58
          }
        }],
        line: 139
      },
      "26": {
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 144,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 144,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "27": {
        loc: {
          start: {
            line: 142,
            column: 20
          },
          end: {
            line: 142,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 61
          },
          end: {
            line: 142,
            column: 67
          }
        }, {
          start: {
            line: 142,
            column: 70
          },
          end: {
            line: 142,
            column: 84
          }
        }],
        line: 142
      },
      "28": {
        loc: {
          start: {
            line: 142,
            column: 20
          },
          end: {
            line: 142,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 20
          },
          end: {
            line: 142,
            column: 36
          }
        }, {
          start: {
            line: 142,
            column: 40
          },
          end: {
            line: 142,
            column: 58
          }
        }],
        line: 142
      },
      "29": {
        loc: {
          start: {
            line: 150,
            column: 99
          },
          end: {
            line: 150,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 124
          },
          end: {
            line: 150,
            column: 129
          }
        }, {
          start: {
            line: 150,
            column: 132
          },
          end: {
            line: 150,
            column: 162
          }
        }],
        line: 150
      },
      "30": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "31": {
        loc: {
          start: {
            line: 201,
            column: 103
          },
          end: {
            line: 201,
            column: 166
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 201,
            column: 128
          },
          end: {
            line: 201,
            column: 133
          }
        }, {
          start: {
            line: 201,
            column: 136
          },
          end: {
            line: 201,
            column: 166
          }
        }],
        line: 201
      },
      "32": {
        loc: {
          start: {
            line: 226,
            column: 16
          },
          end: {
            line: 228,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 16
          },
          end: {
            line: 228,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "33": {
        loc: {
          start: {
            line: 240,
            column: 90
          },
          end: {
            line: 240,
            column: 153
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 240,
            column: 115
          },
          end: {
            line: 240,
            column: 120
          }
        }, {
          start: {
            line: 240,
            column: 123
          },
          end: {
            line: 240,
            column: 153
          }
        }],
        line: 240
      },
      "34": {
        loc: {
          start: {
            line: 261,
            column: 96
          },
          end: {
            line: 261,
            column: 159
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 261,
            column: 121
          },
          end: {
            line: 261,
            column: 126
          }
        }, {
          start: {
            line: 261,
            column: 129
          },
          end: {
            line: 261,
            column: 159
          }
        }],
        line: 261
      },
      "35": {
        loc: {
          start: {
            line: 289,
            column: 16
          },
          end: {
            line: 298,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 16
          },
          end: {
            line: 298,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "36": {
        loc: {
          start: {
            line: 289,
            column: 20
          },
          end: {
            line: 289,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 20
          },
          end: {
            line: 289,
            column: 26
          }
        }, {
          start: {
            line: 289,
            column: 30
          },
          end: {
            line: 289,
            column: 55
          }
        }],
        line: 289
      },
      "37": {
        loc: {
          start: {
            line: 301,
            column: 88
          },
          end: {
            line: 301,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 113
          },
          end: {
            line: 301,
            column: 118
          }
        }, {
          start: {
            line: 301,
            column: 121
          },
          end: {
            line: 301,
            column: 151
          }
        }],
        line: 301
      },
      "38": {
        loc: {
          start: {
            line: 315,
            column: 79
          },
          end: {
            line: 315,
            column: 88
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 315,
            column: 87
          },
          end: {
            line: 315,
            column: 88
          }
        }],
        line: 315
      },
      "39": {
        loc: {
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        }, {
          start: {
            line: 322,
            column: 21
          },
          end: {
            line: 324,
            column: 17
          }
        }],
        line: 319
      },
      "40": {
        loc: {
          start: {
            line: 332,
            column: 99
          },
          end: {
            line: 332,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 124
          },
          end: {
            line: 332,
            column: 129
          }
        }, {
          start: {
            line: 332,
            column: 132
          },
          end: {
            line: 332,
            column: 162
          }
        }],
        line: 332
      },
      "41": {
        loc: {
          start: {
            line: 356,
            column: 99
          },
          end: {
            line: 356,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 356,
            column: 124
          },
          end: {
            line: 356,
            column: 129
          }
        }, {
          start: {
            line: 356,
            column: 132
          },
          end: {
            line: 356,
            column: 162
          }
        }],
        line: 356
      },
      "42": {
        loc: {
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 378,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 378,
            column: 17
          }
        }, {
          start: {
            line: 376,
            column: 21
          },
          end: {
            line: 378,
            column: 17
          }
        }],
        line: 373
      },
      "43": {
        loc: {
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 384,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 384,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "44": {
        loc: {
          start: {
            line: 391,
            column: 99
          },
          end: {
            line: 391,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 391,
            column: 124
          },
          end: {
            line: 391,
            column: 129
          }
        }, {
          start: {
            line: 391,
            column: 132
          },
          end: {
            line: 391,
            column: 162
          }
        }],
        line: 391
      },
      "45": {
        loc: {
          start: {
            line: 410,
            column: 16
          },
          end: {
            line: 415,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 16
          },
          end: {
            line: 415,
            column: 17
          }
        }, {
          start: {
            line: 413,
            column: 21
          },
          end: {
            line: 415,
            column: 17
          }
        }],
        line: 410
      },
      "46": {
        loc: {
          start: {
            line: 419,
            column: 107
          },
          end: {
            line: 419,
            column: 170
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 419,
            column: 132
          },
          end: {
            line: 419,
            column: 137
          }
        }, {
          start: {
            line: 419,
            column: 140
          },
          end: {
            line: 419,
            column: 170
          }
        }],
        line: 419
      },
      "47": {
        loc: {
          start: {
            line: 432,
            column: 61
          },
          end: {
            line: 432,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 432,
            column: 69
          },
          end: {
            line: 432,
            column: 71
          }
        }],
        line: 432
      },
      "48": {
        loc: {
          start: {
            line: 432,
            column: 73
          },
          end: {
            line: 432,
            column: 87
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 432,
            column: 86
          },
          end: {
            line: 432,
            column: 87
          }
        }],
        line: 432
      },
      "49": {
        loc: {
          start: {
            line: 455,
            column: 92
          },
          end: {
            line: 455,
            column: 155
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 455,
            column: 117
          },
          end: {
            line: 455,
            column: 122
          }
        }, {
          start: {
            line: 455,
            column: 125
          },
          end: {
            line: 455,
            column: 155
          }
        }],
        line: 455
      },
      "50": {
        loc: {
          start: {
            line: 469,
            column: 61
          },
          end: {
            line: 469,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 469,
            column: 68
          },
          end: {
            line: 469,
            column: 70
          }
        }],
        line: 469
      },
      "51": {
        loc: {
          start: {
            line: 485,
            column: 20
          },
          end: {
            line: 488,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 20
          },
          end: {
            line: 488,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "52": {
        loc: {
          start: {
            line: 492,
            column: 61
          },
          end: {
            line: 492,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 492,
            column: 61
          },
          end: {
            line: 492,
            column: 98
          }
        }, {
          start: {
            line: 492,
            column: 102
          },
          end: {
            line: 492,
            column: 103
          }
        }],
        line: 492
      },
      "53": {
        loc: {
          start: {
            line: 505,
            column: 101
          },
          end: {
            line: 505,
            column: 164
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 505,
            column: 126
          },
          end: {
            line: 505,
            column: 131
          }
        }, {
          start: {
            line: 505,
            column: 134
          },
          end: {
            line: 505,
            column: 164
          }
        }],
        line: 505
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0],
      "48": [0],
      "49": [0, 0],
      "50": [0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\ratingService.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\ratingService.ts"],
      sourcesContent: ["import { db } from '../utils/firebase';\r\nimport { logger } from './loggerService';\r\nimport { FieldValue } from 'firebase-admin/firestore';\r\n\r\nexport interface Rating {\r\n  id: string;\r\n  eventId: string;\r\n  musicianId: string;\r\n  eventCreatorId: string;\r\n  rating: number; // 1-5 estrellas\r\n  review?: string;\r\n  category: 'musician' | 'event_creator';\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  isVerified: boolean; // Solo ratings de eventos completados\r\n  helpfulCount: number;\r\n  reportedCount: number;\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface RatingStats {\r\n  averageRating: number;\r\n  totalRatings: number;\r\n  ratingDistribution: Record<number, number>; // 1-5 estrellas\r\n  recentRatings: Rating[];\r\n  verifiedRatings: number;\r\n  responseRate: number; // Porcentaje de eventos con respuesta\r\n}\r\n\r\nexport interface RatingFilters {\r\n  minRating?: number;\r\n  maxRating?: number;\r\n  category?: 'musician' | 'event_creator';\r\n  isVerified?: boolean;\r\n  dateFrom?: Date;\r\n  dateTo?: Date;\r\n  eventType?: string;\r\n}\r\n\r\nexport class RatingService {\r\n  private readonly collection = 'ratings';\r\n\r\n  /**\r\n   * Crear un nuevo rating\r\n   */\r\n  async createRating(data: Omit<Rating, 'id' | 'createdAt' | 'updatedAt' | 'helpfulCount' | 'reportedCount' | 'isActive'>): Promise<Rating> {\r\n    try {\r\n      logger.info('RatingService: Creando nuevo rating', {\r\n        metadata: {\r\n          eventId: data.eventId,\r\n          musicianId: data.musicianId,\r\n          category: data.category,\r\n          context: 'rating'\r\n        }\r\n      });\r\n\r\n      // Validar que el rating est\xE9 entre 1-5\r\n      if (data.rating < 1 || data.rating > 5) {\r\n        throw new Error('El rating debe estar entre 1 y 5 estrellas');\r\n      }\r\n\r\n      // Verificar que no exista un rating duplicado\r\n      const existingRating = await this.getRatingByEventAndUser(data.eventId, data.musicianId, data.eventCreatorId);\r\n      if (existingRating) {\r\n        throw new Error('Ya existe un rating para este evento y usuario');\r\n      }\r\n\r\n      const now = new Date();\r\n      const rating: Rating = {\r\n        ...data,\r\n        id: db.collection(this.collection).doc().id,\r\n        createdAt: now,\r\n        updatedAt: now,\r\n        helpfulCount: 0,\r\n        reportedCount: 0,\r\n        isActive: true\r\n      };\r\n\r\n      await db.collection(this.collection).doc(rating.id).set(rating);\r\n\r\n      // Actualizar estad\xEDsticas del usuario\r\n      await this.updateUserRatingStats(data.musicianId, data.category);\r\n\r\n      logger.info('RatingService: Rating creado exitosamente', {\r\n        metadata: {\r\n          ratingId: rating.id,\r\n          context: 'rating'\r\n        }\r\n      });\r\n\r\n      return rating;\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al crear rating', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          eventId: data.eventId,\r\n          musicianId: data.musicianId,\r\n          category: data.category\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener rating por ID\r\n   */\r\n  async getRatingById(ratingId: string): Promise<Rating | null> {\r\n    try {\r\n      const doc = await db.collection(this.collection).doc(ratingId).get();\r\n      return doc.exists ? (doc.data() as Rating) : null;\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al obtener rating por ID', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          ratingId\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener rating por evento y usuario\r\n   */\r\n  async getRatingByEventAndUser(eventId: string, musicianId: string, eventCreatorId: string): Promise<Rating | null> {\r\n    try {\r\n      const snapshot = await db.collection(this.collection)\r\n        .where('eventId', '==', eventId)\r\n        .where('musicianId', '==', musicianId)\r\n        .where('eventCreatorId', '==', eventCreatorId)\r\n        .where('isActive', '==', true)\r\n        .limit(1)\r\n        .get();\r\n\r\n      return snapshot.empty ? null : (snapshot.docs[0].data() as Rating);\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al obtener rating por evento y usuario', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          eventId,\r\n          musicianId,\r\n          eventCreatorId\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener ratings de un usuario\r\n   */\r\n  async getUserRatings(userId: string, category: 'musician' | 'event_creator', filters?: RatingFilters): Promise<Rating[]> {\r\n    try {\r\n      let query = db.collection(this.collection)\r\n        .where('isActive', '==', true);\r\n\r\n      if (category === 'musician') {\r\n        query = query.where('musicianId', '==', userId);\r\n      } else {\r\n        query = query.where('eventCreatorId', '==', userId);\r\n      }\r\n\r\n      query = query.where('category', '==', category);\r\n\r\n      // Aplicar filtros adicionales\r\n      if (filters?.minRating) {\r\n        query = query.where('rating', '>=', filters.minRating);\r\n      }\r\n      if (filters?.maxRating) {\r\n        query = query.where('rating', '<=', filters.maxRating);\r\n      }\r\n      if (filters?.isVerified !== undefined) {\r\n        query = query.where('isVerified', '==', filters.isVerified);\r\n      }\r\n      if (filters?.dateFrom) {\r\n        query = query.where('createdAt', '>=', filters.dateFrom);\r\n      }\r\n      if (filters?.dateTo) {\r\n        query = query.where('createdAt', '<=', filters.dateTo);\r\n      }\r\n\r\n      query = query.orderBy('createdAt', 'desc');\r\n\r\n      const snapshot = await query.get();\r\n      return snapshot.docs.map(doc => doc.data() as Rating);\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al obtener ratings de usuario', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          userId,\r\n          category\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener estad\xEDsticas de rating de un usuario\r\n   */\r\n  async getUserRatingStats(userId: string, category: 'musician' | 'event_creator'): Promise<RatingStats> {\r\n    try {\r\n      const ratings = await this.getUserRatings(userId, category);\r\n\r\n      if (ratings.length === 0) {\r\n        return {\r\n          averageRating: 0,\r\n          totalRatings: 0,\r\n          ratingDistribution: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 },\r\n          recentRatings: [],\r\n          verifiedRatings: 0,\r\n          responseRate: 0\r\n        };\r\n      }\r\n\r\n      // Calcular promedio\r\n      const totalRating = ratings.reduce((sum, rating) => sum + rating.rating, 0);\r\n      const averageRating = totalRating / ratings.length;\r\n\r\n      // Calcular distribuci\xF3n\r\n      const ratingDistribution: Record<number, number> = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\r\n      ratings.forEach(rating => {\r\n        ratingDistribution[rating.rating]++;\r\n      });\r\n\r\n      // Ratings recientes (\xFAltimos 10)\r\n      const recentRatings = ratings.slice(0, 10);\r\n\r\n      // Ratings verificados\r\n      const verifiedRatings = ratings.filter(rating => rating.isVerified).length;\r\n\r\n      // Calcular tasa de respuesta (eventos con rating vs total de eventos)\r\n      const responseRate = await this.calculateResponseRate(userId, category);\r\n\r\n      return {\r\n        averageRating: Math.round(averageRating * 100) / 100, // Redondear a 2 decimales\r\n        totalRatings: ratings.length,\r\n        ratingDistribution,\r\n        recentRatings,\r\n        verifiedRatings,\r\n        responseRate\r\n      };\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al obtener estad\xEDsticas de rating', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          userId,\r\n          category\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualizar rating\r\n   */\r\n  async updateRating(ratingId: string, updates: Partial<Pick<Rating, 'rating' | 'review' | 'isActive'>>): Promise<Rating> {\r\n    try {\r\n      logger.info('RatingService: Actualizando rating', {\r\n        metadata: {\r\n          ratingId,\r\n          context: 'rating'\r\n        }\r\n      });\r\n\r\n      const updateData = {\r\n        ...updates,\r\n        updatedAt: new Date()\r\n      };\r\n\r\n      await db.collection(this.collection).doc(ratingId).update(updateData);\r\n\r\n      const updatedRating = await this.getRatingById(ratingId);\r\n      if (!updatedRating) {\r\n        throw new Error('Rating no encontrado despu\xE9s de la actualizaci\xF3n');\r\n      }\r\n\r\n      // Actualizar estad\xEDsticas del usuario\r\n      await this.updateUserRatingStats(updatedRating.musicianId, updatedRating.category);\r\n\r\n      logger.info('RatingService: Rating actualizado exitosamente', {\r\n        metadata: {\r\n          ratingId,\r\n          context: 'rating'\r\n        }\r\n      });\r\n\r\n      return updatedRating;\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al actualizar rating', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          ratingId\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marcar rating como \xFAtil\r\n   */\r\n  async markRatingAsHelpful(ratingId: string): Promise<void> {\r\n    try {\r\n      await db.collection(this.collection).doc(ratingId).update({\r\n        helpfulCount: FieldValue.increment(1),\r\n        updatedAt: new Date()\r\n      });\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al marcar rating como \xFAtil', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          ratingId\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reportar rating\r\n   */\r\n  async reportRating(ratingId: string, reason: string): Promise<void> {\r\n    try {\r\n      logger.warn('RatingService: Rating reportado', {\r\n        metadata: {\r\n          ratingId,\r\n          reason,\r\n          context: 'rating'\r\n        }\r\n      });\r\n\r\n      await db.collection(this.collection).doc(ratingId).update({\r\n        reportedCount: FieldValue.increment(1),\r\n        updatedAt: new Date()\r\n      });\r\n\r\n      // Si el rating tiene m\xE1s de 5 reportes, desactivarlo autom\xE1ticamente\r\n      const rating = await this.getRatingById(ratingId);\r\n      if (rating && rating.reportedCount >= 5) {\r\n        await this.updateRating(ratingId, { isActive: false });\r\n        logger.warn('RatingService: Rating desactivado por m\xFAltiples reportes', {\r\n          metadata: {\r\n            ratingId,\r\n            reportedCount: rating.reportedCount,\r\n            context: 'rating'\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al reportar rating', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          ratingId,\r\n          reason\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener ratings m\xE1s \xFAtiles\r\n   */\r\n  async getMostHelpfulRatings(userId: string, category: 'musician' | 'event_creator', limit: number = 5): Promise<Rating[]> {\r\n    try {\r\n      let query = db.collection(this.collection)\r\n        .where('isActive', '==', true);\r\n\r\n      if (category === 'musician') {\r\n        query = query.where('musicianId', '==', userId);\r\n      } else {\r\n        query = query.where('eventCreatorId', '==', userId);\r\n      }\r\n\r\n      query = query.where('category', '==', category);\r\n      query = query.orderBy('helpfulCount', 'desc');\r\n      query = query.limit(limit);\r\n\r\n      const snapshot = await query.get();\r\n      return snapshot.docs.map(doc => doc.data() as Rating);\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al obtener ratings m\xE1s \xFAtiles', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          userId,\r\n          category\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener ratings por evento\r\n   */\r\n  async getEventRatings(eventId: string): Promise<Rating[]> {\r\n    try {\r\n      const snapshot = await db.collection(this.collection)\r\n        .where('eventId', '==', eventId)\r\n        .where('isActive', '==', true)\r\n        .orderBy('createdAt', 'desc')\r\n        .get();\r\n\r\n      return snapshot.docs.map(doc => doc.data() as Rating);\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al obtener ratings del evento', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          eventId\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcular tasa de respuesta\r\n   */\r\n  private async calculateResponseRate(userId: string, category: 'musician' | 'event_creator'): Promise<number> {\r\n    try {\r\n      // Obtener total de eventos del usuario\r\n      let eventsQuery = db.collection('events') as any;\r\n      if (category === 'musician') {\r\n        eventsQuery = eventsQuery.where('assignedMusicianId', '==', userId);\r\n      } else {\r\n        eventsQuery = eventsQuery.where('user', '==', userId);\r\n      }\r\n      eventsQuery = eventsQuery.where('status', '==', 'completed');\r\n\r\n      const eventsSnapshot = await eventsQuery.get();\r\n      const totalEvents = eventsSnapshot.size;\r\n\r\n      if (totalEvents === 0) {\r\n        return 0;\r\n      }\r\n\r\n      // Obtener eventos con ratings\r\n      const ratings = await this.getUserRatings(userId, category);\r\n      const eventsWithRatings = new Set(ratings.map(rating => rating.eventId)).size;\r\n\r\n      return Math.round((eventsWithRatings / totalEvents) * 100);\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al calcular tasa de respuesta', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          userId,\r\n          category\r\n        }\r\n      });\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualizar estad\xEDsticas de rating del usuario\r\n   */\r\n  private async updateUserRatingStats(userId: string, category: 'musician' | 'event_creator'): Promise<void> {\r\n    try {\r\n      const stats = await this.getUserRatingStats(userId, category);\r\n      \r\n      const userDoc = db.collection('users').doc(userId);\r\n      const updateData: any = {};\r\n\r\n      if (category === 'musician') {\r\n        updateData.musicianRatingStats = stats;\r\n      } else {\r\n        updateData.eventCreatorRatingStats = stats;\r\n      }\r\n\r\n      await userDoc.update(updateData);\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al actualizar estad\xEDsticas de usuario', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          userId,\r\n          category\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener top m\xFAsicos por rating\r\n   */\r\n  async getTopRatedMusicians(limit: number = 10, minRatings: number = 5): Promise<Array<{ userId: string; stats: RatingStats }>> {\r\n    try {\r\n      // Obtener todos los usuarios m\xFAsicos\r\n      const usersSnapshot = await db.collection('users')\r\n        .where('roll', '==', 'musico')\r\n        .where('isApproved', '==', true)\r\n        .get();\r\n\r\n      const musicians = usersSnapshot.docs.map(doc => doc.data());\r\n\r\n      // Obtener estad\xEDsticas de rating para cada m\xFAsico\r\n      const musiciansWithStats = await Promise.all(\r\n        musicians.map(async (musician) => {\r\n          const stats = await this.getUserRatingStats(musician.id, 'musician');\r\n          return {\r\n            userId: musician.id,\r\n            stats\r\n          };\r\n        })\r\n      );\r\n\r\n      // Filtrar por m\xEDnimo de ratings y ordenar por rating promedio\r\n      return musiciansWithStats\r\n        .filter(musician => musician.stats.totalRatings >= minRatings)\r\n        .sort((a, b) => b.stats.averageRating - a.stats.averageRating)\r\n        .slice(0, limit);\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al obtener top m\xFAsicos', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          limit,\r\n          minRatings\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener an\xE1lisis de tendencias de rating\r\n   */\r\n  async getRatingTrends(days: number = 30): Promise<{\r\n    averageRatingByDay: Record<string, number>;\r\n    totalRatingsByDay: Record<string, number>;\r\n    categoryDistribution: Record<string, number>;\r\n  }> {\r\n    try {\r\n      const startDate = new Date();\r\n      startDate.setDate(startDate.getDate() - days);\r\n\r\n      const snapshot = await db.collection(this.collection)\r\n        .where('createdAt', '>=', startDate)\r\n        .where('isActive', '==', true)\r\n        .orderBy('createdAt', 'asc')\r\n        .get();\r\n\r\n      const ratings = snapshot.docs.map(doc => doc.data() as Rating);\r\n\r\n      const averageRatingByDay: Record<string, number> = {};\r\n      const totalRatingsByDay: Record<string, number> = {};\r\n      const categoryDistribution: Record<string, number> = {};\r\n\r\n      // Agrupar por d\xEDa\r\n      ratings.forEach(rating => {\r\n        const date = rating.createdAt.toDateString();\r\n        \r\n        if (!averageRatingByDay[date]) {\r\n          averageRatingByDay[date] = 0;\r\n          totalRatingsByDay[date] = 0;\r\n        }\r\n\r\n        averageRatingByDay[date] += rating.rating;\r\n        totalRatingsByDay[date]++;\r\n\r\n        // Distribuci\xF3n por categor\xEDa\r\n        categoryDistribution[rating.category] = (categoryDistribution[rating.category] || 0) + 1;\r\n      });\r\n\r\n      // Calcular promedios\r\n      Object.keys(averageRatingByDay).forEach(date => {\r\n        averageRatingByDay[date] = Math.round((averageRatingByDay[date] / totalRatingsByDay[date]) * 100) / 100;\r\n      });\r\n\r\n      return {\r\n        averageRatingByDay,\r\n        totalRatingsByDay,\r\n        categoryDistribution\r\n      };\r\n    } catch (error) {\r\n      logger.error('RatingService: Error al obtener tendencias de rating', error instanceof Error ? error : new Error('Error desconocido'), {\r\n        metadata: {\r\n          days\r\n        }\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const ratingService = new RatingService(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ad7d04931d881485dbb16c88d1b7c7561e2083e2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1m4baz2k66 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1m4baz2k66();
var __awaiter =
/* istanbul ignore next */
(cov_1m4baz2k66().s[0]++,
/* istanbul ignore next */
(cov_1m4baz2k66().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1m4baz2k66().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_1m4baz2k66().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_1m4baz2k66().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[1]++;
    cov_1m4baz2k66().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_1m4baz2k66().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_1m4baz2k66().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[2]++;
      cov_1m4baz2k66().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_1m4baz2k66().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_1m4baz2k66().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_1m4baz2k66().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[4]++;
      cov_1m4baz2k66().s[4]++;
      try {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[5]++;
      cov_1m4baz2k66().s[7]++;
      try {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[6]++;
      cov_1m4baz2k66().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_1m4baz2k66().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_1m4baz2k66().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_1m4baz2k66().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_1m4baz2k66().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_1m4baz2k66().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_1m4baz2k66().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1m4baz2k66().s[13]++;
exports.ratingService = exports.RatingService = void 0;
const firebase_1 =
/* istanbul ignore next */
(cov_1m4baz2k66().s[14]++, require("../utils/firebase"));
const loggerService_1 =
/* istanbul ignore next */
(cov_1m4baz2k66().s[15]++, require("./loggerService"));
const firestore_1 =
/* istanbul ignore next */
(cov_1m4baz2k66().s[16]++, require("firebase-admin/firestore"));
class RatingService {
  constructor() {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[7]++;
    cov_1m4baz2k66().s[17]++;
    this.collection = 'ratings';
  }
  /**
   * Crear un nuevo rating
   */
  createRating(data) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[8]++;
    cov_1m4baz2k66().s[18]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[9]++;
      cov_1m4baz2k66().s[19]++;
      try {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[20]++;
        loggerService_1.logger.info('RatingService: Creando nuevo rating', {
          metadata: {
            eventId: data.eventId,
            musicianId: data.musicianId,
            category: data.category,
            context: 'rating'
          }
        });
        // Validar que el rating esté entre 1-5
        /* istanbul ignore next */
        cov_1m4baz2k66().s[21]++;
        if (
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[6][0]++, data.rating < 1) ||
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[6][1]++, data.rating > 5)) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[5][0]++;
          cov_1m4baz2k66().s[22]++;
          throw new Error('El rating debe estar entre 1 y 5 estrellas');
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[5][1]++;
        }
        // Verificar que no exista un rating duplicado
        const existingRating =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[23]++, yield this.getRatingByEventAndUser(data.eventId, data.musicianId, data.eventCreatorId));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[24]++;
        if (existingRating) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[7][0]++;
          cov_1m4baz2k66().s[25]++;
          throw new Error('Ya existe un rating para este evento y usuario');
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[7][1]++;
        }
        const now =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[26]++, new Date());
        const rating =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[27]++, Object.assign(Object.assign({}, data), {
          id: firebase_1.db.collection(this.collection).doc().id,
          createdAt: now,
          updatedAt: now,
          helpfulCount: 0,
          reportedCount: 0,
          isActive: true
        }));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[28]++;
        yield firebase_1.db.collection(this.collection).doc(rating.id).set(rating);
        // Actualizar estadísticas del usuario
        /* istanbul ignore next */
        cov_1m4baz2k66().s[29]++;
        yield this.updateUserRatingStats(data.musicianId, data.category);
        /* istanbul ignore next */
        cov_1m4baz2k66().s[30]++;
        loggerService_1.logger.info('RatingService: Rating creado exitosamente', {
          metadata: {
            ratingId: rating.id,
            context: 'rating'
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[31]++;
        return rating;
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[32]++;
        loggerService_1.logger.error('RatingService: Error al crear rating', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[8][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[8][1]++, new Error('Error desconocido')), {
          metadata: {
            eventId: data.eventId,
            musicianId: data.musicianId,
            category: data.category
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[33]++;
        throw error;
      }
    });
  }
  /**
   * Obtener rating por ID
   */
  getRatingById(ratingId) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[10]++;
    cov_1m4baz2k66().s[34]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[11]++;
      cov_1m4baz2k66().s[35]++;
      try {
        const doc =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[36]++, yield firebase_1.db.collection(this.collection).doc(ratingId).get());
        /* istanbul ignore next */
        cov_1m4baz2k66().s[37]++;
        return doc.exists ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[9][0]++, doc.data()) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[9][1]++, null);
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[38]++;
        loggerService_1.logger.error('RatingService: Error al obtener rating por ID', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[10][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[10][1]++, new Error('Error desconocido')), {
          metadata: {
            ratingId
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[39]++;
        throw error;
      }
    });
  }
  /**
   * Obtener rating por evento y usuario
   */
  getRatingByEventAndUser(eventId, musicianId, eventCreatorId) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[12]++;
    cov_1m4baz2k66().s[40]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[13]++;
      cov_1m4baz2k66().s[41]++;
      try {
        const snapshot =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[42]++, yield firebase_1.db.collection(this.collection).where('eventId', '==', eventId).where('musicianId', '==', musicianId).where('eventCreatorId', '==', eventCreatorId).where('isActive', '==', true).limit(1).get());
        /* istanbul ignore next */
        cov_1m4baz2k66().s[43]++;
        return snapshot.empty ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[11][0]++, null) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[11][1]++, snapshot.docs[0].data());
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[44]++;
        loggerService_1.logger.error('RatingService: Error al obtener rating por evento y usuario', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[12][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[12][1]++, new Error('Error desconocido')), {
          metadata: {
            eventId,
            musicianId,
            eventCreatorId
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[45]++;
        throw error;
      }
    });
  }
  /**
   * Obtener ratings de un usuario
   */
  getUserRatings(userId, category, filters) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[14]++;
    cov_1m4baz2k66().s[46]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[15]++;
      cov_1m4baz2k66().s[47]++;
      try {
        let query =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[48]++, firebase_1.db.collection(this.collection).where('isActive', '==', true));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[49]++;
        if (category === 'musician') {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[13][0]++;
          cov_1m4baz2k66().s[50]++;
          query = query.where('musicianId', '==', userId);
        } else {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[13][1]++;
          cov_1m4baz2k66().s[51]++;
          query = query.where('eventCreatorId', '==', userId);
        }
        /* istanbul ignore next */
        cov_1m4baz2k66().s[52]++;
        query = query.where('category', '==', category);
        // Aplicar filtros adicionales
        /* istanbul ignore next */
        cov_1m4baz2k66().s[53]++;
        if (
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[16][0]++, filters === null) ||
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[16][1]++, filters === void 0) ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[15][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[15][1]++, filters.minRating)) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[14][0]++;
          cov_1m4baz2k66().s[54]++;
          query = query.where('rating', '>=', filters.minRating);
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[14][1]++;
        }
        cov_1m4baz2k66().s[55]++;
        if (
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[19][0]++, filters === null) ||
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[19][1]++, filters === void 0) ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[18][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[18][1]++, filters.maxRating)) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[17][0]++;
          cov_1m4baz2k66().s[56]++;
          query = query.where('rating', '<=', filters.maxRating);
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[17][1]++;
        }
        cov_1m4baz2k66().s[57]++;
        if ((
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[22][0]++, filters === null) ||
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[22][1]++, filters === void 0) ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[21][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[21][1]++, filters.isVerified)) !== undefined) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[20][0]++;
          cov_1m4baz2k66().s[58]++;
          query = query.where('isVerified', '==', filters.isVerified);
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[20][1]++;
        }
        cov_1m4baz2k66().s[59]++;
        if (
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[25][0]++, filters === null) ||
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[25][1]++, filters === void 0) ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[24][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[24][1]++, filters.dateFrom)) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[23][0]++;
          cov_1m4baz2k66().s[60]++;
          query = query.where('createdAt', '>=', filters.dateFrom);
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[23][1]++;
        }
        cov_1m4baz2k66().s[61]++;
        if (
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[28][0]++, filters === null) ||
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[28][1]++, filters === void 0) ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[27][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[27][1]++, filters.dateTo)) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[26][0]++;
          cov_1m4baz2k66().s[62]++;
          query = query.where('createdAt', '<=', filters.dateTo);
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[26][1]++;
        }
        cov_1m4baz2k66().s[63]++;
        query = query.orderBy('createdAt', 'desc');
        const snapshot =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[64]++, yield query.get());
        /* istanbul ignore next */
        cov_1m4baz2k66().s[65]++;
        return snapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[16]++;
          cov_1m4baz2k66().s[66]++;
          return doc.data();
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[67]++;
        loggerService_1.logger.error('RatingService: Error al obtener ratings de usuario', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[29][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[29][1]++, new Error('Error desconocido')), {
          metadata: {
            userId,
            category
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[68]++;
        throw error;
      }
    });
  }
  /**
   * Obtener estadísticas de rating de un usuario
   */
  getUserRatingStats(userId, category) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[17]++;
    cov_1m4baz2k66().s[69]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[18]++;
      cov_1m4baz2k66().s[70]++;
      try {
        const ratings =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[71]++, yield this.getUserRatings(userId, category));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[72]++;
        if (ratings.length === 0) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[30][0]++;
          cov_1m4baz2k66().s[73]++;
          return {
            averageRating: 0,
            totalRatings: 0,
            ratingDistribution: {
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0
            },
            recentRatings: [],
            verifiedRatings: 0,
            responseRate: 0
          };
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[30][1]++;
        }
        // Calcular promedio
        const totalRating =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[74]++, ratings.reduce((sum, rating) => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[19]++;
          cov_1m4baz2k66().s[75]++;
          return sum + rating.rating;
        }, 0));
        const averageRating =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[76]++, totalRating / ratings.length);
        // Calcular distribución
        const ratingDistribution =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[77]++, {
          1: 0,
          2: 0,
          3: 0,
          4: 0,
          5: 0
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[78]++;
        ratings.forEach(rating => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[20]++;
          cov_1m4baz2k66().s[79]++;
          ratingDistribution[rating.rating]++;
        });
        // Ratings recientes (últimos 10)
        const recentRatings =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[80]++, ratings.slice(0, 10));
        // Ratings verificados
        const verifiedRatings =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[81]++, ratings.filter(rating => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[21]++;
          cov_1m4baz2k66().s[82]++;
          return rating.isVerified;
        }).length);
        // Calcular tasa de respuesta (eventos con rating vs total de eventos)
        const responseRate =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[83]++, yield this.calculateResponseRate(userId, category));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[84]++;
        return {
          averageRating: Math.round(averageRating * 100) / 100,
          // Redondear a 2 decimales
          totalRatings: ratings.length,
          ratingDistribution,
          recentRatings,
          verifiedRatings,
          responseRate
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[85]++;
        loggerService_1.logger.error('RatingService: Error al obtener estadísticas de rating', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[31][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[31][1]++, new Error('Error desconocido')), {
          metadata: {
            userId,
            category
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[86]++;
        throw error;
      }
    });
  }
  /**
   * Actualizar rating
   */
  updateRating(ratingId, updates) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[22]++;
    cov_1m4baz2k66().s[87]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[23]++;
      cov_1m4baz2k66().s[88]++;
      try {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[89]++;
        loggerService_1.logger.info('RatingService: Actualizando rating', {
          metadata: {
            ratingId,
            context: 'rating'
          }
        });
        const updateData =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[90]++, Object.assign(Object.assign({}, updates), {
          updatedAt: new Date()
        }));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[91]++;
        yield firebase_1.db.collection(this.collection).doc(ratingId).update(updateData);
        const updatedRating =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[92]++, yield this.getRatingById(ratingId));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[93]++;
        if (!updatedRating) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[32][0]++;
          cov_1m4baz2k66().s[94]++;
          throw new Error('Rating no encontrado después de la actualización');
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[32][1]++;
        }
        // Actualizar estadísticas del usuario
        cov_1m4baz2k66().s[95]++;
        yield this.updateUserRatingStats(updatedRating.musicianId, updatedRating.category);
        /* istanbul ignore next */
        cov_1m4baz2k66().s[96]++;
        loggerService_1.logger.info('RatingService: Rating actualizado exitosamente', {
          metadata: {
            ratingId,
            context: 'rating'
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[97]++;
        return updatedRating;
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[98]++;
        loggerService_1.logger.error('RatingService: Error al actualizar rating', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[33][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[33][1]++, new Error('Error desconocido')), {
          metadata: {
            ratingId
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[99]++;
        throw error;
      }
    });
  }
  /**
   * Marcar rating como útil
   */
  markRatingAsHelpful(ratingId) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[24]++;
    cov_1m4baz2k66().s[100]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[25]++;
      cov_1m4baz2k66().s[101]++;
      try {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[102]++;
        yield firebase_1.db.collection(this.collection).doc(ratingId).update({
          helpfulCount: firestore_1.FieldValue.increment(1),
          updatedAt: new Date()
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[103]++;
        loggerService_1.logger.error('RatingService: Error al marcar rating como útil', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[34][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[34][1]++, new Error('Error desconocido')), {
          metadata: {
            ratingId
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[104]++;
        throw error;
      }
    });
  }
  /**
   * Reportar rating
   */
  reportRating(ratingId, reason) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[26]++;
    cov_1m4baz2k66().s[105]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[27]++;
      cov_1m4baz2k66().s[106]++;
      try {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[107]++;
        loggerService_1.logger.warn('RatingService: Rating reportado', {
          metadata: {
            ratingId,
            reason,
            context: 'rating'
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[108]++;
        yield firebase_1.db.collection(this.collection).doc(ratingId).update({
          reportedCount: firestore_1.FieldValue.increment(1),
          updatedAt: new Date()
        });
        // Si el rating tiene más de 5 reportes, desactivarlo automáticamente
        const rating =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[109]++, yield this.getRatingById(ratingId));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[110]++;
        if (
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[36][0]++, rating) &&
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[36][1]++, rating.reportedCount >= 5)) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[35][0]++;
          cov_1m4baz2k66().s[111]++;
          yield this.updateRating(ratingId, {
            isActive: false
          });
          /* istanbul ignore next */
          cov_1m4baz2k66().s[112]++;
          loggerService_1.logger.warn('RatingService: Rating desactivado por múltiples reportes', {
            metadata: {
              ratingId,
              reportedCount: rating.reportedCount,
              context: 'rating'
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[35][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[113]++;
        loggerService_1.logger.error('RatingService: Error al reportar rating', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[37][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[37][1]++, new Error('Error desconocido')), {
          metadata: {
            ratingId,
            reason
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[114]++;
        throw error;
      }
    });
  }
  /**
   * Obtener ratings más útiles
   */
  getMostHelpfulRatings(userId_1, category_1) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[28]++;
    cov_1m4baz2k66().s[115]++;
    return __awaiter(this, arguments, void 0, function* (userId, category, limit =
    /* istanbul ignore next */
    (cov_1m4baz2k66().b[38][0]++, 5)) {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[29]++;
      cov_1m4baz2k66().s[116]++;
      try {
        let query =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[117]++, firebase_1.db.collection(this.collection).where('isActive', '==', true));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[118]++;
        if (category === 'musician') {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[39][0]++;
          cov_1m4baz2k66().s[119]++;
          query = query.where('musicianId', '==', userId);
        } else {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[39][1]++;
          cov_1m4baz2k66().s[120]++;
          query = query.where('eventCreatorId', '==', userId);
        }
        /* istanbul ignore next */
        cov_1m4baz2k66().s[121]++;
        query = query.where('category', '==', category);
        /* istanbul ignore next */
        cov_1m4baz2k66().s[122]++;
        query = query.orderBy('helpfulCount', 'desc');
        /* istanbul ignore next */
        cov_1m4baz2k66().s[123]++;
        query = query.limit(limit);
        const snapshot =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[124]++, yield query.get());
        /* istanbul ignore next */
        cov_1m4baz2k66().s[125]++;
        return snapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[30]++;
          cov_1m4baz2k66().s[126]++;
          return doc.data();
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[127]++;
        loggerService_1.logger.error('RatingService: Error al obtener ratings más útiles', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[40][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[40][1]++, new Error('Error desconocido')), {
          metadata: {
            userId,
            category
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[128]++;
        throw error;
      }
    });
  }
  /**
   * Obtener ratings por evento
   */
  getEventRatings(eventId) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[31]++;
    cov_1m4baz2k66().s[129]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[32]++;
      cov_1m4baz2k66().s[130]++;
      try {
        const snapshot =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[131]++, yield firebase_1.db.collection(this.collection).where('eventId', '==', eventId).where('isActive', '==', true).orderBy('createdAt', 'desc').get());
        /* istanbul ignore next */
        cov_1m4baz2k66().s[132]++;
        return snapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[33]++;
          cov_1m4baz2k66().s[133]++;
          return doc.data();
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[134]++;
        loggerService_1.logger.error('RatingService: Error al obtener ratings del evento', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[41][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[41][1]++, new Error('Error desconocido')), {
          metadata: {
            eventId
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[135]++;
        throw error;
      }
    });
  }
  /**
   * Calcular tasa de respuesta
   */
  calculateResponseRate(userId, category) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[34]++;
    cov_1m4baz2k66().s[136]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[35]++;
      cov_1m4baz2k66().s[137]++;
      try {
        // Obtener total de eventos del usuario
        let eventsQuery =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[138]++, firebase_1.db.collection('events'));
        /* istanbul ignore next */
        cov_1m4baz2k66().s[139]++;
        if (category === 'musician') {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[42][0]++;
          cov_1m4baz2k66().s[140]++;
          eventsQuery = eventsQuery.where('assignedMusicianId', '==', userId);
        } else {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[42][1]++;
          cov_1m4baz2k66().s[141]++;
          eventsQuery = eventsQuery.where('user', '==', userId);
        }
        /* istanbul ignore next */
        cov_1m4baz2k66().s[142]++;
        eventsQuery = eventsQuery.where('status', '==', 'completed');
        const eventsSnapshot =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[143]++, yield eventsQuery.get());
        const totalEvents =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[144]++, eventsSnapshot.size);
        /* istanbul ignore next */
        cov_1m4baz2k66().s[145]++;
        if (totalEvents === 0) {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[43][0]++;
          cov_1m4baz2k66().s[146]++;
          return 0;
        } else
        /* istanbul ignore next */
        {
          cov_1m4baz2k66().b[43][1]++;
        }
        // Obtener eventos con ratings
        const ratings =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[147]++, yield this.getUserRatings(userId, category));
        const eventsWithRatings =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[148]++, new Set(ratings.map(rating => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[36]++;
          cov_1m4baz2k66().s[149]++;
          return rating.eventId;
        })).size);
        /* istanbul ignore next */
        cov_1m4baz2k66().s[150]++;
        return Math.round(eventsWithRatings / totalEvents * 100);
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[151]++;
        loggerService_1.logger.error('RatingService: Error al calcular tasa de respuesta', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[44][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[44][1]++, new Error('Error desconocido')), {
          metadata: {
            userId,
            category
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[152]++;
        return 0;
      }
    });
  }
  /**
   * Actualizar estadísticas de rating del usuario
   */
  updateUserRatingStats(userId, category) {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[37]++;
    cov_1m4baz2k66().s[153]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[38]++;
      cov_1m4baz2k66().s[154]++;
      try {
        const stats =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[155]++, yield this.getUserRatingStats(userId, category));
        const userDoc =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[156]++, firebase_1.db.collection('users').doc(userId));
        const updateData =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[157]++, {});
        /* istanbul ignore next */
        cov_1m4baz2k66().s[158]++;
        if (category === 'musician') {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[45][0]++;
          cov_1m4baz2k66().s[159]++;
          updateData.musicianRatingStats = stats;
        } else {
          /* istanbul ignore next */
          cov_1m4baz2k66().b[45][1]++;
          cov_1m4baz2k66().s[160]++;
          updateData.eventCreatorRatingStats = stats;
        }
        /* istanbul ignore next */
        cov_1m4baz2k66().s[161]++;
        yield userDoc.update(updateData);
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[162]++;
        loggerService_1.logger.error('RatingService: Error al actualizar estadísticas de usuario', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[46][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[46][1]++, new Error('Error desconocido')), {
          metadata: {
            userId,
            category
          }
        });
      }
    });
  }
  /**
   * Obtener top músicos por rating
   */
  getTopRatedMusicians() {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[39]++;
    cov_1m4baz2k66().s[163]++;
    return __awaiter(this, arguments, void 0, function* (limit =
    /* istanbul ignore next */
    (cov_1m4baz2k66().b[47][0]++, 10), minRatings =
    /* istanbul ignore next */
    (cov_1m4baz2k66().b[48][0]++, 5)) {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[40]++;
      cov_1m4baz2k66().s[164]++;
      try {
        // Obtener todos los usuarios músicos
        const usersSnapshot =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[165]++, yield firebase_1.db.collection('users').where('roll', '==', 'musico').where('isApproved', '==', true).get());
        const musicians =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[166]++, usersSnapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[41]++;
          cov_1m4baz2k66().s[167]++;
          return doc.data();
        }));
        // Obtener estadísticas de rating para cada músico
        const musiciansWithStats =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[168]++, yield Promise.all(musicians.map(musician => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[42]++;
          cov_1m4baz2k66().s[169]++;
          return __awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            cov_1m4baz2k66().f[43]++;
            const stats =
            /* istanbul ignore next */
            (cov_1m4baz2k66().s[170]++, yield this.getUserRatingStats(musician.id, 'musician'));
            /* istanbul ignore next */
            cov_1m4baz2k66().s[171]++;
            return {
              userId: musician.id,
              stats
            };
          });
        })));
        // Filtrar por mínimo de ratings y ordenar por rating promedio
        /* istanbul ignore next */
        cov_1m4baz2k66().s[172]++;
        return musiciansWithStats.filter(musician => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[44]++;
          cov_1m4baz2k66().s[173]++;
          return musician.stats.totalRatings >= minRatings;
        }).sort((a, b) => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[45]++;
          cov_1m4baz2k66().s[174]++;
          return b.stats.averageRating - a.stats.averageRating;
        }).slice(0, limit);
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[175]++;
        loggerService_1.logger.error('RatingService: Error al obtener top músicos', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[49][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[49][1]++, new Error('Error desconocido')), {
          metadata: {
            limit,
            minRatings
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[176]++;
        throw error;
      }
    });
  }
  /**
   * Obtener análisis de tendencias de rating
   */
  getRatingTrends() {
    /* istanbul ignore next */
    cov_1m4baz2k66().f[46]++;
    cov_1m4baz2k66().s[177]++;
    return __awaiter(this, arguments, void 0, function* (days =
    /* istanbul ignore next */
    (cov_1m4baz2k66().b[50][0]++, 30)) {
      /* istanbul ignore next */
      cov_1m4baz2k66().f[47]++;
      cov_1m4baz2k66().s[178]++;
      try {
        const startDate =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[179]++, new Date());
        /* istanbul ignore next */
        cov_1m4baz2k66().s[180]++;
        startDate.setDate(startDate.getDate() - days);
        const snapshot =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[181]++, yield firebase_1.db.collection(this.collection).where('createdAt', '>=', startDate).where('isActive', '==', true).orderBy('createdAt', 'asc').get());
        const ratings =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[182]++, snapshot.docs.map(doc => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[48]++;
          cov_1m4baz2k66().s[183]++;
          return doc.data();
        }));
        const averageRatingByDay =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[184]++, {});
        const totalRatingsByDay =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[185]++, {});
        const categoryDistribution =
        /* istanbul ignore next */
        (cov_1m4baz2k66().s[186]++, {});
        // Agrupar por día
        /* istanbul ignore next */
        cov_1m4baz2k66().s[187]++;
        ratings.forEach(rating => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[49]++;
          const date =
          /* istanbul ignore next */
          (cov_1m4baz2k66().s[188]++, rating.createdAt.toDateString());
          /* istanbul ignore next */
          cov_1m4baz2k66().s[189]++;
          if (!averageRatingByDay[date]) {
            /* istanbul ignore next */
            cov_1m4baz2k66().b[51][0]++;
            cov_1m4baz2k66().s[190]++;
            averageRatingByDay[date] = 0;
            /* istanbul ignore next */
            cov_1m4baz2k66().s[191]++;
            totalRatingsByDay[date] = 0;
          } else
          /* istanbul ignore next */
          {
            cov_1m4baz2k66().b[51][1]++;
          }
          cov_1m4baz2k66().s[192]++;
          averageRatingByDay[date] += rating.rating;
          /* istanbul ignore next */
          cov_1m4baz2k66().s[193]++;
          totalRatingsByDay[date]++;
          // Distribución por categoría
          /* istanbul ignore next */
          cov_1m4baz2k66().s[194]++;
          categoryDistribution[rating.category] = (
          /* istanbul ignore next */
          (cov_1m4baz2k66().b[52][0]++, categoryDistribution[rating.category]) ||
          /* istanbul ignore next */
          (cov_1m4baz2k66().b[52][1]++, 0)) + 1;
        });
        // Calcular promedios
        /* istanbul ignore next */
        cov_1m4baz2k66().s[195]++;
        Object.keys(averageRatingByDay).forEach(date => {
          /* istanbul ignore next */
          cov_1m4baz2k66().f[50]++;
          cov_1m4baz2k66().s[196]++;
          averageRatingByDay[date] = Math.round(averageRatingByDay[date] / totalRatingsByDay[date] * 100) / 100;
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[197]++;
        return {
          averageRatingByDay,
          totalRatingsByDay,
          categoryDistribution
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1m4baz2k66().s[198]++;
        loggerService_1.logger.error('RatingService: Error al obtener tendencias de rating', error instanceof Error ?
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[53][0]++, error) :
        /* istanbul ignore next */
        (cov_1m4baz2k66().b[53][1]++, new Error('Error desconocido')), {
          metadata: {
            days
          }
        });
        /* istanbul ignore next */
        cov_1m4baz2k66().s[199]++;
        throw error;
      }
    });
  }
}
/* istanbul ignore next */
cov_1m4baz2k66().s[200]++;
exports.RatingService = RatingService;
/* istanbul ignore next */
cov_1m4baz2k66().s[201]++;
exports.ratingService = new RatingService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,