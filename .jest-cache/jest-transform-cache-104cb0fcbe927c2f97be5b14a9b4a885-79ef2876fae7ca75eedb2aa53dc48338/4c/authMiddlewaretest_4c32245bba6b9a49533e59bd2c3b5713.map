{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\authMiddleware.test.ts","mappings":";;;;;AAKA,uBAAuB;AACvB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAL1B,gEAA+B;AAC/B,iEAA8D;AAC9D,mCAAgE;AAKhE,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,WAA6B,CAAC;IAClC,IAAI,YAA+B,CAAC;IACpC,IAAI,QAAsB,CAAC;IAC3B,IAAI,QAAmB,CAAC;IACxB,IAAI,UAAqB,CAAC;IAE1B,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACrB,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;QAE3D,YAAY,GAAG;YACb,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,QAAQ;SACf,CAAC;QAEF,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAErB,2BAA2B;QAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,SAAS,GAAG,iBAAiB,CAAC;YACpC,MAAM,WAAW,GAAG;gBAClB,EAAE,EAAE,SAAS;gBACb,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,QAAQ;aACf,CAAC;YAEF,WAAW,GAAG,IAAA,yBAAiB,EAAC;gBAC9B,OAAO,EAAE;oBACP,aAAa,EAAE,UAAU,SAAS,EAAE;iBACrC;aACF,CAAC,CAAC;YAEF,sBAAG,CAAC,MAAoB,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAEvD,IAAA,+BAAc,EAAC,WAAsB,EAAE,YAAwB,EAAE,QAAQ,CAAC,CAAC;YAE3E,MAAM,CAAC,sBAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAClE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC9C,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,WAAW,GAAG,IAAA,yBAAiB,EAAC;gBAC9B,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC;YAEH,IAAA,+BAAc,EAAC,WAAsB,EAAE,YAAwB,EAAE,QAAQ,CAAC,CAAC;YAE3E,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YACtD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBAC7C,OAAO,EAAE,wBAAwB;aAClC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wEAAwE,EAAE,GAAG,EAAE;YAChF,WAAW,GAAG,IAAA,yBAAiB,EAAC;gBAC9B,OAAO,EAAE;oBACP,aAAa,EAAE,cAAc;iBAC9B;aACF,CAAC,CAAC;YAEH,IAAA,+BAAc,EAAC,WAAsB,EAAE,YAAwB,EAAE,QAAQ,CAAC,CAAC;YAE3E,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YACtD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBAC7C,OAAO,EAAE,wBAAwB;aAClC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,SAAS,GAAG,mBAAmB,CAAC;YAEtC,WAAW,GAAG,IAAA,yBAAiB,EAAC;gBAC9B,OAAO,EAAE;oBACP,aAAa,EAAE,UAAU,SAAS,EAAE;iBACrC;aACF,CAAC,CAAC;YAEF,sBAAG,CAAC,MAAoB,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAChD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,IAAA,+BAAc,EAAC,WAAsB,EAAE,YAAwB,EAAE,QAAQ,CAAC,CAAC;YAE3E,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YACtD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBAC7C,OAAO,EAAE,2BAA2B;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,SAAS,GAAG,mBAAmB,CAAC;YAEtC,WAAW,GAAG,IAAA,yBAAiB,EAAC;gBAC9B,OAAO,EAAE;oBACP,aAAa,EAAE,UAAU,SAAS,EAAE;iBACrC;aACF,CAAC,CAAC;YAEF,sBAAG,CAAC,MAAoB,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAChD,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,IAAA,+BAAc,EAAC,WAAsB,EAAE,YAAwB,EAAE,QAAQ,CAAC,CAAC;YAE3E,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YACtD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBAC7C,OAAO,EAAE,2BAA2B;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,WAAW,GAAG,IAAA,yBAAiB,EAAC;gBAC9B,OAAO,EAAE;oBACP,aAAa,EAAE,SAAS;iBACzB;aACF,CAAC,CAAC;YAEH,IAAA,+BAAc,EAAC,WAAsB,EAAE,YAAwB,EAAE,QAAQ,CAAC,CAAC;YAE3E,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YACtD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBAC7C,OAAO,EAAE,2BAA2B;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\authMiddleware.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport jwt from 'jsonwebtoken';\r\nimport { authMiddleware } from '../middleware/authMiddleware';\r\nimport { createMockRequest, createMockResponse } from './setup';\r\n\r\n// Mock de jsonwebtoken\r\njest.mock('jsonwebtoken');\r\n\r\ndescribe('AuthMiddleware', () => {\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockNext: NextFunction;\r\n  let mockJson: jest.Mock;\r\n  let mockStatus: jest.Mock;\r\n\r\n  beforeEach(() => {\r\n    mockJson = jest.fn();\r\n    mockStatus = jest.fn().mockReturnValue({ json: mockJson });\r\n    \r\n    mockResponse = {\r\n      status: mockStatus,\r\n      json: mockJson\r\n    };\r\n\r\n    mockNext = jest.fn();\r\n\r\n    // Reset de todos los mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('authMiddleware', () => {\r\n    it('should call next() when valid token is provided', () => {\r\n      const mockToken = 'valid.jwt.token';\r\n      const mockDecoded = {\r\n        id: 'user123',\r\n        email: 'user@example.com',\r\n        roll: 'musico'\r\n      };\r\n\r\n      mockRequest = createMockRequest({\r\n        headers: {\r\n          authorization: `Bearer ${mockToken}`\r\n        }\r\n      });\r\n\r\n      (jwt.verify as jest.Mock).mockReturnValue(mockDecoded);\r\n\r\n      authMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(jwt.verify).toHaveBeenCalledWith(mockToken, '0ch1n@gu@01');\r\n      expect(mockRequest.user).toEqual(mockDecoded);\r\n      expect(mockNext).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should return 401 when no authorization header is provided', () => {\r\n      mockRequest = createMockRequest({\r\n        headers: {}\r\n      });\r\n\r\n      authMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        message: 'Token no proporcionado'\r\n      });\r\n    });\r\n\r\n    it('should return 401 when authorization header does not start with Bearer', () => {\r\n      mockRequest = createMockRequest({\r\n        headers: {\r\n          authorization: 'InvalidToken'\r\n        }\r\n      });\r\n\r\n      authMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        message: 'Token no proporcionado'\r\n      });\r\n    });\r\n\r\n    it('should return 401 when token is invalid', () => {\r\n      const mockToken = 'invalid.jwt.token';\r\n\r\n      mockRequest = createMockRequest({\r\n        headers: {\r\n          authorization: `Bearer ${mockToken}`\r\n        }\r\n      });\r\n\r\n      (jwt.verify as jest.Mock).mockImplementation(() => {\r\n        throw new Error('Invalid token');\r\n      });\r\n\r\n      authMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        message: 'Token inválido o expirado'\r\n      });\r\n    });\r\n\r\n    it('should return 401 when token is expired', () => {\r\n      const mockToken = 'expired.jwt.token';\r\n\r\n      mockRequest = createMockRequest({\r\n        headers: {\r\n          authorization: `Bearer ${mockToken}`\r\n        }\r\n      });\r\n\r\n      (jwt.verify as jest.Mock).mockImplementation(() => {\r\n        throw new Error('TokenExpiredError');\r\n      });\r\n\r\n      authMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        message: 'Token inválido o expirado'\r\n      });\r\n    });\r\n\r\n    it('should handle empty token after Bearer', () => {\r\n      mockRequest = createMockRequest({\r\n        headers: {\r\n          authorization: 'Bearer '\r\n        }\r\n      });\r\n\r\n      authMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        message: 'Token inválido o expirado'\r\n      });\r\n    });\r\n  });\r\n}); "],"version":3}