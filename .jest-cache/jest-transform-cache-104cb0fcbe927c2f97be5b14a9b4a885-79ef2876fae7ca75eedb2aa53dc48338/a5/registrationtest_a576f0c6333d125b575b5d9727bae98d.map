{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\registration.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\registration.test.ts"],"sourcesContent":["// Tests para el sistema de registro con verificación por email\r\nimport { musicianRegisterSchema } from '../utils/validationSchemas';\r\n\r\ndescribe('Sistema de Registro con Verificación', () => {\r\n  describe('Esquema de Registro de Músicos', () => {\r\n    test('should validate correct musician registration data', () => {\r\n      const validData = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'juan@example.com',\r\n        userPassword: 'Password123!',\r\n        roll: 'musico'\r\n      };\r\n\r\n      const { error } = musicianRegisterSchema.validate(validData);\r\n      expect(error).toBeUndefined();\r\n    });\r\n\r\n    test('should validate correct event creator registration data', () => {\r\n      const validData = {\r\n        name: 'María',\r\n        lastName: 'García',\r\n        userEmail: 'maria@example.com',\r\n        userPassword: 'Password123!',\r\n        roll: 'eventCreator'\r\n      };\r\n\r\n      const { error } = musicianRegisterSchema.validate(validData);\r\n      expect(error).toBeUndefined();\r\n    });\r\n\r\n    test('should reject invalid roll', () => {\r\n      const invalidData = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'juan@example.com',\r\n        userPassword: 'Password123!',\r\n        roll: 'admin' // Rol no permitido\r\n      };\r\n\r\n      const { error } = musicianRegisterSchema.validate(invalidData);\r\n      expect(error).toBeDefined();\r\n      expect(error?.details[0].path).toContain('roll');\r\n    });\r\n\r\n    test('should reject missing roll', () => {\r\n      const invalidData = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'juan@example.com',\r\n        userPassword: 'Password123!'\r\n        // roll faltante\r\n      };\r\n\r\n      const { error } = musicianRegisterSchema.validate(invalidData);\r\n      expect(error).toBeDefined();\r\n      expect(error?.details[0].path).toContain('roll');\r\n    });\r\n\r\n    test('should reject weak password', () => {\r\n      const invalidData = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'juan@example.com',\r\n        userPassword: '123', // Contraseña débil\r\n        roll: 'musico'\r\n      };\r\n\r\n      const { error } = musicianRegisterSchema.validate(invalidData);\r\n      expect(error).toBeDefined();\r\n      expect(error?.details[0].path).toContain('userPassword');\r\n    });\r\n\r\n    test('should reject invalid email', () => {\r\n      const invalidData = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'invalid-email', // Email inválido\r\n        userPassword: 'Password123!',\r\n        roll: 'musico'\r\n      };\r\n\r\n      const { error } = musicianRegisterSchema.validate(invalidData);\r\n      expect(error).toBeDefined();\r\n      expect(error?.details[0].path).toContain('userEmail');\r\n    });\r\n  });\r\n\r\n  describe('Flujo de Registro', () => {\r\n    test('should follow correct registration flow', () => {\r\n      // 1. Usuario solicita verificación\r\n      const registrationData = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'juan@example.com',\r\n        userPassword: 'Password123!',\r\n        roll: 'musico'\r\n      };\r\n\r\n      // 2. Validar datos de entrada\r\n      const { error } = musicianRegisterSchema.validate(registrationData);\r\n      expect(error).toBeUndefined();\r\n\r\n      // 3. Simular envío de email (esto se probaría en integración)\r\n      expect(registrationData.userEmail).toBe('juan@example.com');\r\n      expect(registrationData.roll).toBe('musico');\r\n\r\n      // 4. Simular verificación de código (esto se probaría en integración)\r\n      const verificationData = {\r\n        userEmail: 'juan@example.com',\r\n        code: '123456'\r\n      };\r\n\r\n      expect(verificationData.userEmail).toBe(registrationData.userEmail);\r\n      expect(verificationData.code).toHaveLength(6);\r\n    });\r\n  });\r\n\r\n  describe('Validación de Roles', () => {\r\n    test('should accept musico role', () => {\r\n      const data = {\r\n        name: 'Juan',\r\n        lastName: 'Pérez',\r\n        userEmail: 'juan@example.com',\r\n        userPassword: 'Password123!',\r\n        roll: 'musico'\r\n      };\r\n\r\n      const { error } = musicianRegisterSchema.validate(data);\r\n      expect(error).toBeUndefined();\r\n    });\r\n\r\n    test('should accept eventCreator role', () => {\r\n      const data = {\r\n        name: 'María',\r\n        lastName: 'García',\r\n        userEmail: 'maria@example.com',\r\n        userPassword: 'Password123!',\r\n        roll: 'eventCreator'\r\n      };\r\n\r\n      const { error } = musicianRegisterSchema.validate(data);\r\n      expect(error).toBeUndefined();\r\n    });\r\n\r\n    test('should reject other roles', () => {\r\n      const invalidRoles = ['admin', 'superadmin', 'usuario', 'adminJunior'];\r\n      \r\n      invalidRoles.forEach(role => {\r\n        const data = {\r\n          name: 'Juan',\r\n          lastName: 'Pérez',\r\n          userEmail: 'juan@example.com',\r\n          userPassword: 'Password123!',\r\n          roll: role\r\n        };\r\n\r\n        const { error } = musicianRegisterSchema.validate(data);\r\n        expect(error).toBeDefined();\r\n        expect(error?.details[0].path).toContain('roll');\r\n      });\r\n    });\r\n  });\r\n}); "],"version":3}