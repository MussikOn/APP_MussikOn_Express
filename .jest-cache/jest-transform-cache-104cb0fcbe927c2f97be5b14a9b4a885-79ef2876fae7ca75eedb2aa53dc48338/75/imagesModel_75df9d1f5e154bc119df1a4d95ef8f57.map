{"version":3,"names":["cov_1g5xzar55g","actualCoverage","client_s3_1","s","require","s3_request_presigner_1","firebase_1","loggerService_1","s3Client","S3Client","region","b","process","env","IDRIVE_E2_REGION","endpoint","IDRIVE_E2_ENDPOINT","credentials","accessKeyId","IDRIVE_E2_ACCESS_KEY","secretAccessKey","IDRIVE_E2_SECRET_KEY","forcePathStyle","BUCKET_NAME","IDRIVE_E2_BUCKET_NAME","MAX_FILE_SIZE","ALLOWED_MIME_TYPES","validateFile","file","f","size","Error","includes","mimetype","generateFileName","originalName","category","userId","timestamp","Date","now","randomString","Math","random","toString","substring","extension","split","pop","uploadImageToS3","key","__awaiter","command","PutObjectCommand","Bucket","Key","Body","buffer","ContentType","Metadata","originalname","uploadedBy","uploadedAt","toISOString","send","console","log","error","logger","exports","generateSignedUrl","key_1","args_1","expiresIn","GetObjectCommand","signedUrl","getSignedUrl","createImageRecord","imageData","imageRef","db","collection","doc","image","Object","assign","id","createdAt","updatedAt","set","uploadImage","file_1","userId_1","category_1","metadata","uploadResult","url","fileName","description","tags","customMetadata","isPublic","undefined","isActive","getImageById","imageId","imageDoc","get","exists","data","expiresMatch","match","expiresAt","parseInt","floor","ref","update","listImages","filters","query","where","entries","forEach","value","orderBy","limit","offset","snapshot","images","docs","map","imagesWithUrls","Promise","all","length","updateImage","updateData","updateFields","updatedDoc","updatedImage","deleteImage","userDoc","_a","roll","deleteImageFromS3","DeleteObjectCommand","getImageStats","totalImages","totalSize","reduce","sum","img","imagesByCategory","imagesByUser","recentUploads","sort","a","getTime","slice","stats","getUserProfileImages","getPostImages","getEventImages","eventId","cleanupExpiredImages","deletedCount"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\models\\imagesModel.ts"],"sourcesContent":["import {\r\n  S3Client,\r\n  PutObjectCommand,\r\n  DeleteObjectCommand,\r\n  GetObjectCommand,\r\n  ListObjectsV2Command,\r\n  CopyObjectCommand,\r\n  HeadObjectCommand,\r\n} from '@aws-sdk/client-s3';\r\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\r\nimport {\r\n  Image,\r\n  ImageFilters,\r\n  ImageStats,\r\n  ImageUpdateRequest,\r\n} from '../utils/DataTypes';\r\nimport { db } from '../utils/firebase';\r\nimport * as admin from 'firebase-admin';\r\nimport { logger } from '../services/loggerService';\r\n\r\n// Configuración de idriveE2\r\nconst s3Client = new S3Client({\r\n  region: process.env.IDRIVE_E2_REGION || 'us-east-1',\r\n  endpoint: process.env.IDRIVE_E2_ENDPOINT,\r\n  credentials: {\r\n    accessKeyId: process.env.IDRIVE_E2_ACCESS_KEY!,\r\n    secretAccessKey: process.env.IDRIVE_E2_SECRET_KEY!,\r\n  },\r\n  forcePathStyle: true,\r\n});\r\n\r\nconst BUCKET_NAME = process.env.IDRIVE_E2_BUCKET_NAME!;\r\n\r\n// Configuración de validación\r\nconst MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\r\nconst ALLOWED_MIME_TYPES = [\r\n  'image/jpeg',\r\n  'image/png',\r\n  'image/gif',\r\n  'image/webp',\r\n  'image/svg+xml',\r\n];\r\n\r\n/**\r\n * Validar archivo antes de subir\r\n */\r\nconst validateFile = (file: Express.Multer.File): void => {\r\n  if (file.size > MAX_FILE_SIZE) {\r\n    throw new Error(\r\n      `El archivo es demasiado grande. Máximo ${MAX_FILE_SIZE / 1024 / 1024}MB`\r\n    );\r\n  }\r\n\r\n  if (!ALLOWED_MIME_TYPES.includes(file.mimetype)) {\r\n    throw new Error(\r\n      'Tipo de archivo no permitido. Solo se permiten imágenes (JPEG, PNG, GIF, WebP, SVG)'\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Generar nombre único para el archivo\r\n */\r\nconst generateFileName = (\r\n  originalName: string,\r\n  category: string,\r\n  userId: string\r\n): string => {\r\n  const timestamp = Date.now();\r\n  const randomString = Math.random().toString(36).substring(2, 15);\r\n  const extension = originalName.split('.').pop();\r\n  return `${category}/${userId}/${timestamp}_${randomString}.${extension}`;\r\n};\r\n\r\n/**\r\n * Subir imagen a idriveE2\r\n */\r\nexport const uploadImageToS3 = async (\r\n  file: Express.Multer.File,\r\n  key: string\r\n): Promise<{ key: string; size: number; mimetype: string }> => {\r\n  try {\r\n    validateFile(file);\r\n\r\n    const command = new PutObjectCommand({\r\n      Bucket: BUCKET_NAME,\r\n      Key: key,\r\n      Body: file.buffer,\r\n      ContentType: file.mimetype,\r\n      Metadata: {\r\n        originalName: file.originalname,\r\n        uploadedBy: 'mussikon-system',\r\n        uploadedAt: new Date().toISOString(),\r\n      },\r\n    });\r\n\r\n    await s3Client.send(command);\r\n\r\n    console.log(\r\n      `[src/models/imagesModel.ts:uploadImageToS3] Imagen subida a idriveE2: ${key}`\r\n    );\r\n\r\n    return {\r\n      key,\r\n      size: file.size,\r\n      mimetype: file.mimetype,\r\n    };\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:uploadImageToS3] Error al subir imagen a idriveE2:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Generar URL firmada para acceso a imagen\r\n */\r\nexport const generateSignedUrl = async (\r\n  key: string,\r\n  expiresIn: number = 3600\r\n): Promise<string> => {\r\n  try {\r\n    const command = new GetObjectCommand({\r\n      Bucket: BUCKET_NAME,\r\n      Key: key,\r\n    });\r\n\r\n    const signedUrl = await getSignedUrl(s3Client, command, { expiresIn });\r\n    return signedUrl;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:generateSignedUrl] Error al generar URL firmada:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Crear registro de imagen en Firestore\r\n */\r\nexport const createImageRecord = async (\r\n  imageData: Omit<Image, 'id' | 'createdAt' | 'updatedAt'>\r\n): Promise<Image> => {\r\n  try {\r\n    const now = new Date().toISOString();\r\n    const imageRef = db.collection('images').doc();\r\n\r\n    const image: Image = {\r\n      id: imageRef.id,\r\n      ...imageData,\r\n      createdAt: now,\r\n      updatedAt: now,\r\n    };\r\n\r\n    await imageRef.set(image);\r\n    console.log(\r\n      `[src/models/imagesModel.ts:createImageRecord] Registro de imagen creado en Firestore: ${image.id}`\r\n    );\r\n    return image;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:createImageRecord] Error al crear registro de imagen:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Subir imagen completa (idriveE2 + Firestore)\r\n */\r\nexport const uploadImage = async (\r\n  file: Express.Multer.File,\r\n  userId: string,\r\n  category: Image['category'],\r\n  metadata: {\r\n    description?: string;\r\n    tags?: string[];\r\n    isPublic?: boolean;\r\n    customMetadata?: Record<string, any>;\r\n  } = {}\r\n): Promise<Image> => {\r\n  try {\r\n    // Generar nombre único para el archivo\r\n    const key = generateFileName(file.originalname, category, userId);\r\n\r\n    // Subir a idriveE2\r\n    const uploadResult = await uploadImageToS3(file, key);\r\n\r\n    // Generar URL firmada\r\n    const url = await generateSignedUrl(key);\r\n\r\n    // Crear registro en Firestore\r\n    const imageData: Omit<Image, 'id' | 'createdAt' | 'updatedAt'> = {\r\n      key,\r\n      url,\r\n      originalName: file.originalname,\r\n      fileName: key.split('/').pop() || file.originalname,\r\n      size: uploadResult.size,\r\n      mimetype: uploadResult.mimetype,\r\n      category,\r\n      userId,\r\n      description: metadata.description || '',\r\n      tags: metadata.tags || [],\r\n      metadata: metadata.customMetadata || {},\r\n      isPublic: metadata.isPublic !== undefined ? metadata.isPublic : true,\r\n      isActive: true,\r\n    };\r\n\r\n    const image = await createImageRecord(imageData);\r\n    console.log(\r\n      `[src/models/imagesModel.ts:uploadImage] Imagen subida exitosamente: ${image.id}`\r\n    );\r\n    return image;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:uploadImage] Error al subir imagen:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtener imagen por ID\r\n */\r\nexport const getImageById = async (imageId: string): Promise<Image | null> => {\r\n  try {\r\n    const imageDoc = await db.collection('images').doc(imageId).get();\r\n\r\n    if (!imageDoc.exists) {\r\n      return null;\r\n    }\r\n\r\n    const image = imageDoc.data() as Image;\r\n\r\n    // Regenerar URL firmada si es necesario\r\n    if (image.url && image.url.includes('expires=')) {\r\n      const expiresMatch = image.url.match(/expires=(\\d+)/);\r\n      if (expiresMatch) {\r\n        const expiresAt = parseInt(expiresMatch[1]);\r\n        const now = Math.floor(Date.now() / 1000);\r\n\r\n        if (expiresAt <= now + 300) {\r\n          // Regenerar si expira en menos de 5 minutos\r\n          image.url = await generateSignedUrl(image.key);\r\n          await imageDoc.ref.update({\r\n            url: image.url,\r\n            updatedAt: new Date().toISOString(),\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      // Si no tiene URL firmada, generarla\r\n      image.url = await generateSignedUrl(image.key);\r\n      await imageDoc.ref.update({\r\n        url: image.url,\r\n        updatedAt: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    return image;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:getImageById] Error al obtener imagen:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Listar imágenes con filtros\r\n */\r\nexport const listImages = async (\r\n  filters: ImageFilters = {}\r\n): Promise<Image[]> => {\r\n  try {\r\n    let query: any = db.collection('images');\r\n\r\n    // Aplicar filtros\r\n    if (filters.category) {\r\n      query = query.where('category', '==', filters.category);\r\n    }\r\n    if (filters.userId) {\r\n      query = query.where('userId', '==', filters.userId);\r\n    }\r\n    if (filters.isPublic !== undefined) {\r\n      query = query.where('isPublic', '==', filters.isPublic);\r\n    }\r\n    if (filters.isActive !== undefined) {\r\n      query = query.where('isActive', '==', filters.isActive);\r\n    }\r\n    if (filters.metadata) {\r\n      Object.entries(filters.metadata).forEach(([key, value]) => {\r\n        query = query.where(`metadata.${key}`, '==', value);\r\n      });\r\n    }\r\n\r\n    // Ordenar por fecha de creación (más reciente primero)\r\n    query = query.orderBy('createdAt', 'desc');\r\n\r\n    // Aplicar límites\r\n    if (filters.limit) {\r\n      query = query.limit(filters.limit);\r\n    }\r\n    if (filters.offset) {\r\n      query = query.offset(filters.offset);\r\n    }\r\n\r\n    const snapshot = await query.get();\r\n    const images = snapshot.docs.map((doc: any) => doc.data() as Image);\r\n\r\n    // Regenerar URLs firmadas si es necesario\r\n    const imagesWithUrls = await Promise.all(\r\n      images.map(async (image: Image) => {\r\n        try {\r\n          if (image.url && image.url.includes('expires=')) {\r\n            const expiresMatch = image.url.match(/expires=(\\d+)/);\r\n            if (expiresMatch) {\r\n              const expiresAt = parseInt(expiresMatch[1]);\r\n              const now = Math.floor(Date.now() / 1000);\r\n\r\n              if (expiresAt <= now + 300) {\r\n                // Regenerar si expira en menos de 5 minutos\r\n                image.url = await generateSignedUrl(image.key);\r\n                await db.collection('images').doc(image.id).update({\r\n                  url: image.url,\r\n                  updatedAt: new Date().toISOString(),\r\n                });\r\n              }\r\n            }\r\n          } else {\r\n            // Si no tiene URL firmada, generarla\r\n            image.url = await generateSignedUrl(image.key);\r\n            await db.collection('images').doc(image.id).update({\r\n              url: image.url,\r\n              updatedAt: new Date().toISOString(),\r\n            });\r\n          }\r\n          return image;\r\n        } catch (error) {\r\n          console.error(\r\n            `[src/models/imagesModel.ts:listImages] Error al regenerar URL para imagen ${image.id}:`,\r\n            error\r\n          );\r\n          return image;\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      `[src/models/imagesModel.ts:listImages] ${imagesWithUrls.length} imágenes encontradas`\r\n    );\r\n    return imagesWithUrls;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:listImages] Error al listar imágenes:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Actualizar imagen\r\n */\r\nexport const updateImage = async (\r\n  imageId: string,\r\n  updateData: ImageUpdateRequest\r\n): Promise<Image> => {\r\n  try {\r\n    const imageRef = db.collection('images').doc(imageId);\r\n    const imageDoc = await imageRef.get();\r\n\r\n    if (!imageDoc.exists) {\r\n      throw new Error('Imagen no encontrada');\r\n    }\r\n\r\n    const updateFields: Partial<Image> = {\r\n      ...updateData,\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    await imageRef.update(updateFields);\r\n\r\n    // Obtener imagen actualizada\r\n    const updatedDoc = await imageRef.get();\r\n    const updatedImage = updatedDoc.data() as Image;\r\n\r\n    console.log(\r\n      `[src/models/imagesModel.ts:updateImage] Imagen actualizada: ${imageId}`\r\n    );\r\n    return updatedImage;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:updateImage] Error al actualizar imagen:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Eliminar imagen (soft delete)\r\n */\r\nexport const deleteImage = async (\r\n  imageId: string,\r\n  userId: string\r\n): Promise<boolean> => {\r\n  try {\r\n    const imageRef = db.collection('images').doc(imageId);\r\n    const imageDoc = await imageRef.get();\r\n\r\n    if (!imageDoc.exists) {\r\n      throw new Error('Imagen no encontrada');\r\n    }\r\n\r\n    const image = imageDoc.data() as Image;\r\n\r\n    // Verificar permisos (solo el propietario o admin puede eliminar)\r\n    if (image.userId !== userId) {\r\n      // Verificar si el usuario es admin\r\n      const userDoc = await db.collection('users').doc(userId).get();\r\n      if (!userDoc.exists || userDoc.data()?.roll !== 'admin') {\r\n        throw new Error('No tienes permisos para eliminar esta imagen');\r\n      }\r\n    }\r\n\r\n    // Soft delete - marcar como inactiva\r\n    await imageRef.update({\r\n      isActive: false,\r\n      updatedAt: new Date().toISOString(),\r\n    });\r\n\r\n    console.log(\r\n      `[src/models/imagesModel.ts:deleteImage] Imagen marcada como eliminada: ${imageId}`\r\n    );\r\n    return true;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:deleteImage] Error al eliminar imagen:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Eliminar imagen de idriveE2 (hard delete)\r\n */\r\nexport const deleteImageFromS3 = async (key: string): Promise<boolean> => {\r\n  try {\r\n    const command = new DeleteObjectCommand({\r\n      Bucket: BUCKET_NAME,\r\n      Key: key,\r\n    });\r\n\r\n    await s3Client.send(command);\r\n    console.log(\r\n      `[src/models/imagesModel.ts:deleteImageFromS3] Imagen eliminada de idriveE2: ${key}`\r\n    );\r\n    return true;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:deleteImageFromS3] Error al eliminar imagen de idriveE2:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtener estadísticas de imágenes\r\n */\r\nexport const getImageStats = async (): Promise<ImageStats> => {\r\n  try {\r\n    const snapshot = await db\r\n      .collection('images')\r\n      .where('isActive', '==', true)\r\n      .get();\r\n    const images = snapshot.docs.map(doc => doc.data() as Image);\r\n\r\n    const totalImages = images.length;\r\n    const totalSize = images.reduce((sum, img) => sum + img.size, 0);\r\n\r\n    const imagesByCategory: Record<string, number> = {};\r\n    const imagesByUser: Record<string, number> = {};\r\n\r\n    images.forEach(image => {\r\n      imagesByCategory[image.category] =\r\n        (imagesByCategory[image.category] || 0) + 1;\r\n      imagesByUser[image.userId] = (imagesByUser[image.userId] || 0) + 1;\r\n    });\r\n\r\n    const recentUploads = images\r\n      .sort(\r\n        (a, b) =>\r\n          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\r\n      )\r\n      .slice(0, 10);\r\n\r\n    const stats: ImageStats = {\r\n      totalImages,\r\n      totalSize,\r\n      imagesByCategory,\r\n      imagesByUser,\r\n      recentUploads,\r\n    };\r\n\r\n    console.log(\r\n      `[src/models/imagesModel.ts:getImageStats] Estadísticas generadas: ${totalImages} imágenes, ${totalSize} bytes`\r\n    );\r\n    return stats;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:getImageStats] Error al obtener estadísticas:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtener imágenes de perfil de usuario\r\n */\r\nexport const getUserProfileImages = async (\r\n  userId: string\r\n): Promise<Image[]> => {\r\n  try {\r\n    return await listImages({\r\n      userId,\r\n      category: 'profile',\r\n      isActive: true,\r\n    });\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:getUserProfileImages] Error al obtener imágenes de perfil:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtener imágenes de posts\r\n */\r\nexport const getPostImages = async (userId?: string): Promise<Image[]> => {\r\n  try {\r\n    const filters: ImageFilters = {\r\n      category: 'post',\r\n      isActive: true,\r\n      isPublic: true,\r\n    };\r\n\r\n    if (userId) {\r\n      filters.userId = userId;\r\n    }\r\n\r\n    return await listImages(filters);\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:getPostImages] Error al obtener imágenes de posts:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtener imágenes de eventos\r\n */\r\nexport const getEventImages = async (eventId?: string): Promise<Image[]> => {\r\n  try {\r\n    const filters: ImageFilters = {\r\n      category: 'event',\r\n      isActive: true,\r\n    };\r\n\r\n    if (eventId) {\r\n      filters.metadata = { eventId };\r\n    }\r\n\r\n    return await listImages(filters);\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:getEventImages] Error al obtener imágenes de eventos:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Limpiar imágenes expiradas (tareas de mantenimiento)\r\n */\r\nexport const cleanupExpiredImages = async (): Promise<number> => {\r\n  try {\r\n    const now = new Date();\r\n    const snapshot = await db\r\n      .collection('images')\r\n      .where('expiresAt', '<=', now.toISOString())\r\n      .where('isActive', '==', true)\r\n      .get();\r\n\r\n    let deletedCount = 0;\r\n\r\n    for (const doc of snapshot.docs) {\r\n      const image = doc.data() as Image;\r\n\r\n      // Eliminar de idriveE2\r\n      await deleteImageFromS3(image.key);\r\n\r\n      // Marcar como inactiva en Firestore\r\n      await doc.ref.update({\r\n        isActive: false,\r\n        updatedAt: now.toISOString(),\r\n      });\r\n\r\n      deletedCount++;\r\n    }\r\n\r\n    console.log(\r\n      `[src/models/imagesModel.ts:cleanupExpiredImages] ${deletedCount} imágenes expiradas eliminadas`\r\n    );\r\n    return deletedCount;\r\n  } catch (error) {\r\n    logger.error('[src/models/imagesModel.ts:cleanupExpiredImages] Error al limpiar imágenes expiradas:', error as Error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBA;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlBA,MAAAE,WAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,QAAAC,OAAA;AASA,MAAAC,sBAAA;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,QAAAC,OAAA;AAOA,MAAAE,UAAA;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,QAAAC,OAAA;AAEA,MAAAG,eAAA;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,QAAAC,OAAA;AAEA;AACA,MAAMI,QAAQ;AAAA;AAAA,CAAAR,cAAA,GAAAG,CAAA,QAAG,IAAID,WAAA,CAAAO,QAAQ,CAAC;EAC5BC,MAAM;EAAE;EAAA,CAAAV,cAAA,GAAAW,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACC,gBAAgB;EAAA;EAAA,CAAAd,cAAA,GAAAW,CAAA,UAAI,WAAW;EACnDI,QAAQ,EAAEH,OAAO,CAACC,GAAG,CAACG,kBAAkB;EACxCC,WAAW,EAAE;IACXC,WAAW,EAAEN,OAAO,CAACC,GAAG,CAACM,oBAAqB;IAC9CC,eAAe,EAAER,OAAO,CAACC,GAAG,CAACQ;GAC9B;EACDC,cAAc,EAAE;CACjB,CAAC;AAEF,MAAMC,WAAW;AAAA;AAAA,CAAAvB,cAAA,GAAAG,CAAA,QAAGS,OAAO,CAACC,GAAG,CAACW,qBAAsB;AAEtD;AACA,MAAMC,aAAa;AAAA;AAAA,CAAAzB,cAAA,GAAAG,CAAA,QAAG,EAAE,GAAG,IAAI,GAAG,IAAI,EAAC,CAAC;AACxC,MAAMuB,kBAAkB;AAAA;AAAA,CAAA1B,cAAA,GAAAG,CAAA,QAAG,CACzB,YAAY,EACZ,WAAW,EACX,WAAW,EACX,YAAY,EACZ,eAAe,CAChB;AAED;;;AAAA;AAAAH,cAAA,GAAAG,CAAA;AAGA,MAAMwB,YAAY,GAAIC,IAAyB,IAAU;EAAA;EAAA5B,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EACvD,IAAIyB,IAAI,CAACE,IAAI,GAAGL,aAAa,EAAE;IAAA;IAAAzB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAG,CAAA;IAC7B,MAAM,IAAI4B,KAAK,CACb,0CAA0CN,aAAa,GAAG,IAAI,GAAG,IAAI,IAAI,CAC1E;EACH,CAAC;EAAA;EAAA;IAAAzB,cAAA,GAAAW,CAAA;EAAA;EAAAX,cAAA,GAAAG,CAAA;EAED,IAAI,CAACuB,kBAAkB,CAACM,QAAQ,CAACJ,IAAI,CAACK,QAAQ,CAAC,EAAE;IAAA;IAAAjC,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAG,CAAA;IAC/C,MAAM,IAAI4B,KAAK,CACb,qFAAqF,CACtF;EACH,CAAC;EAAA;EAAA;IAAA/B,cAAA,GAAAW,CAAA;EAAA;AACH,CAAC;AAED;;;AAAA;AAAAX,cAAA,GAAAG,CAAA;AAGA,MAAM+B,gBAAgB,GAAGA,CACvBC,YAAoB,EACpBC,QAAgB,EAChBC,MAAc,KACJ;EAAA;EAAArC,cAAA,GAAA6B,CAAA;EACV,MAAMS,SAAS;EAAA;EAAA,CAAAtC,cAAA,GAAAG,CAAA,QAAGoC,IAAI,CAACC,GAAG,EAAE;EAC5B,MAAMC,YAAY;EAAA;EAAA,CAAAzC,cAAA,GAAAG,CAAA,QAAGuC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EAChE,MAAMC,SAAS;EAAA;EAAA,CAAA9C,cAAA,GAAAG,CAAA,QAAGgC,YAAY,CAACY,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE;EAAC;EAAAhD,cAAA,GAAAG,CAAA;EAChD,OAAO,GAAGiC,QAAQ,IAAIC,MAAM,IAAIC,SAAS,IAAIG,YAAY,IAAIK,SAAS,EAAE;AAC1E,CAAC;AAED;;;AAAA;AAAA9C,cAAA,GAAAG,CAAA;AAGO,MAAM8C,eAAe,GAAGA,CAC7BrB,IAAyB,EACzBsB,GAAW,KACiD;EAAA;EAAAlD,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IAC5D,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACFwB,YAAY,CAACC,IAAI,CAAC;MAElB,MAAMwB,OAAO;MAAA;MAAA,CAAApD,cAAA,GAAAG,CAAA,QAAG,IAAID,WAAA,CAAAmD,gBAAgB,CAAC;QACnCC,MAAM,EAAE/B,WAAW;QACnBgC,GAAG,EAAEL,GAAG;QACRM,IAAI,EAAE5B,IAAI,CAAC6B,MAAM;QACjBC,WAAW,EAAE9B,IAAI,CAACK,QAAQ;QAC1B0B,QAAQ,EAAE;UACRxB,YAAY,EAAEP,IAAI,CAACgC,YAAY;UAC/BC,UAAU,EAAE,iBAAiB;UAC7BC,UAAU,EAAE,IAAIvB,IAAI,EAAE,CAACwB,WAAW;;OAErC,CAAC;MAAC;MAAA/D,cAAA,GAAAG,CAAA;MAEH,MAAMK,QAAQ,CAACwD,IAAI,CAACZ,OAAO,CAAC;MAAC;MAAApD,cAAA,GAAAG,CAAA;MAE7B8D,OAAO,CAACC,GAAG,CACT,yEAAyEhB,GAAG,EAAE,CAC/E;MAAC;MAAAlD,cAAA,GAAAG,CAAA;MAEF,OAAO;QACL+C,GAAG;QACHpB,IAAI,EAAEF,IAAI,CAACE,IAAI;QACfG,QAAQ,EAAEL,IAAI,CAACK;OAChB;IACH,CAAC,CAAC,OAAOkC,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,+EAA+E,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC9G,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAlCWkE,OAAA,CAAApB,eAAe,GAAAA,eAAA;AAoC5B;;;AAAA;AAAAjD,cAAA,GAAAG,CAAA;AAGO,MAAMmE,iBAAiB,GAAGA,CAAAC,KAAA,KAAAC,MAAA,KAGZ;EAAA;EAAAxE,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA,UAAAoB,KAAA,KAAAC,MAAA,sBAFnBtB,GAAW,EACXuB,SAAA;EAAA;EAAA,CAAAzE,cAAA,GAAAW,CAAA,UAAoB,IAAI;IAAA;IAAAX,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IAExB,IAAI;MACF,MAAMiD,OAAO;MAAA;MAAA,CAAApD,cAAA,GAAAG,CAAA,QAAG,IAAID,WAAA,CAAAwE,gBAAgB,CAAC;QACnCpB,MAAM,EAAE/B,WAAW;QACnBgC,GAAG,EAAEL;OACN,CAAC;MAEF,MAAMyB,SAAS;MAAA;MAAA,CAAA3E,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAAE,sBAAA,CAAAuE,YAAY,EAACpE,QAAQ,EAAE4C,OAAO,EAAE;QAAEqB;MAAS,CAAE,CAAC;MAAC;MAAAzE,cAAA,GAAAG,CAAA;MACvE,OAAOwE,SAAS;IAClB,CAAC,CAAC,OAAOR,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,6EAA6E,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC5G,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAhBWkE,OAAA,CAAAC,iBAAiB,GAAAA,iBAAA;AAkB9B;;;AAAA;AAAAtE,cAAA,GAAAG,CAAA;AAGO,MAAM0E,iBAAiB,GAC5BC,SAAwD,IACtC;EAAA;EAAA9E,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IAClB,IAAI;MACF,MAAMqC,GAAG;MAAA;MAAA,CAAAxC,cAAA,GAAAG,CAAA,QAAG,IAAIoC,IAAI,EAAE,CAACwB,WAAW,EAAE;MACpC,MAAMgB,QAAQ;MAAA;MAAA,CAAA/E,cAAA,GAAAG,CAAA,QAAGG,UAAA,CAAA0E,EAAE,CAACC,UAAU,CAAC,QAAQ,CAAC,CAACC,GAAG,EAAE;MAE9C,MAAMC,KAAK;MAAA;MAAA,CAAAnF,cAAA,GAAAG,CAAA,QAAAiF,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA;QACTC,EAAE,EAAEP,QAAQ,CAACO;MAAE,GACZR,SAAS;QACZS,SAAS,EAAE/C,GAAG;QACdgD,SAAS,EAAEhD;MAAG,EACf;MAAC;MAAAxC,cAAA,GAAAG,CAAA;MAEF,MAAM4E,QAAQ,CAACU,GAAG,CAACN,KAAK,CAAC;MAAC;MAAAnF,cAAA,GAAAG,CAAA;MAC1B8D,OAAO,CAACC,GAAG,CACT,yFAAyFiB,KAAK,CAACG,EAAE,EAAE,CACpG;MAAC;MAAAtF,cAAA,GAAAG,CAAA;MACF,OAAOgF,KAAK;IACd,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,kFAAkF,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MACjH,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAvBWkE,OAAA,CAAAQ,iBAAiB,GAAAA,iBAAA;AAyB9B;;;AAAA;AAAA7E,cAAA,GAAAG,CAAA;AAGO,MAAMuF,WAAW,GAAGA,CAAAC,MAAA,EAAAC,QAAA,EAAAC,UAAA,KAAArB,MAAA,KAUP;EAAA;EAAAxE,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA,UAAAwC,MAAA,EAAAC,QAAA,EAAAC,UAAA,KAAArB,MAAA,sBATlB5C,IAAyB,EACzBS,MAAc,EACdD,QAA2B,EAC3B0D,QAAA;EAAA;EAAA,CAAA9F,cAAA,GAAAW,CAAA,UAKI,EAAE;IAAA;IAAAX,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IAEN,IAAI;MACF;MACA,MAAM+C,GAAG;MAAA;MAAA,CAAAlD,cAAA,GAAAG,CAAA,QAAG+B,gBAAgB,CAACN,IAAI,CAACgC,YAAY,EAAExB,QAAQ,EAAEC,MAAM,CAAC;MAEjE;MACA,MAAM0D,YAAY;MAAA;MAAA,CAAA/F,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAAkE,OAAA,CAAApB,eAAe,EAACrB,IAAI,EAAEsB,GAAG,CAAC;MAErD;MACA,MAAM8C,GAAG;MAAA;MAAA,CAAAhG,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAAkE,OAAA,CAAAC,iBAAiB,EAACpB,GAAG,CAAC;MAExC;MACA,MAAM4B,SAAS;MAAA;MAAA,CAAA9E,cAAA,GAAAG,CAAA,QAAkD;QAC/D+C,GAAG;QACH8C,GAAG;QACH7D,YAAY,EAAEP,IAAI,CAACgC,YAAY;QAC/BqC,QAAQ;QAAE;QAAA,CAAAjG,cAAA,GAAAW,CAAA,WAAAuC,GAAG,CAACH,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE;QAAA;QAAA,CAAAhD,cAAA,GAAAW,CAAA,WAAIiB,IAAI,CAACgC,YAAY;QACnD9B,IAAI,EAAEiE,YAAY,CAACjE,IAAI;QACvBG,QAAQ,EAAE8D,YAAY,CAAC9D,QAAQ;QAC/BG,QAAQ;QACRC,MAAM;QACN6D,WAAW;QAAE;QAAA,CAAAlG,cAAA,GAAAW,CAAA,WAAAmF,QAAQ,CAACI,WAAW;QAAA;QAAA,CAAAlG,cAAA,GAAAW,CAAA,WAAI,EAAE;QACvCwF,IAAI;QAAE;QAAA,CAAAnG,cAAA,GAAAW,CAAA,WAAAmF,QAAQ,CAACK,IAAI;QAAA;QAAA,CAAAnG,cAAA,GAAAW,CAAA,WAAI,EAAE;QACzBmF,QAAQ;QAAE;QAAA,CAAA9F,cAAA,GAAAW,CAAA,WAAAmF,QAAQ,CAACM,cAAc;QAAA;QAAA,CAAApG,cAAA,GAAAW,CAAA,WAAI,EAAE;QACvC0F,QAAQ,EAAEP,QAAQ,CAACO,QAAQ,KAAKC,SAAS;QAAA;QAAA,CAAAtG,cAAA,GAAAW,CAAA,WAAGmF,QAAQ,CAACO,QAAQ;QAAA;QAAA,CAAArG,cAAA,GAAAW,CAAA,WAAG,IAAI;QACpE4F,QAAQ,EAAE;OACX;MAED,MAAMpB,KAAK;MAAA;MAAA,CAAAnF,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAAkE,OAAA,CAAAQ,iBAAiB,EAACC,SAAS,CAAC;MAAC;MAAA9E,cAAA,GAAAG,CAAA;MACjD8D,OAAO,CAACC,GAAG,CACT,uEAAuEiB,KAAK,CAACG,EAAE,EAAE,CAClF;MAAC;MAAAtF,cAAA,GAAAG,CAAA;MACF,OAAOgF,KAAK;IACd,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,gEAAgE,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC/F,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AA/CWkE,OAAA,CAAAqB,WAAW,GAAAA,WAAA;AAiDxB;;;AAAA;AAAA1F,cAAA,GAAAG,CAAA;AAGO,MAAMqG,YAAY,GAAUC,OAAe,IAA2B;EAAA;EAAAzG,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IAC3E,IAAI;MACF,MAAMuG,QAAQ;MAAA;MAAA,CAAA1G,cAAA,GAAAG,CAAA,QAAG,MAAMG,UAAA,CAAA0E,EAAE,CAACC,UAAU,CAAC,QAAQ,CAAC,CAACC,GAAG,CAACuB,OAAO,CAAC,CAACE,GAAG,EAAE;MAAC;MAAA3G,cAAA,GAAAG,CAAA;MAElE,IAAI,CAACuG,QAAQ,CAACE,MAAM,EAAE;QAAA;QAAA5G,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACpB,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAW,CAAA;MAAA;MAED,MAAMwE,KAAK;MAAA;MAAA,CAAAnF,cAAA,GAAAG,CAAA,QAAGuG,QAAQ,CAACG,IAAI,EAAW;MAEtC;MAAA;MAAA7G,cAAA,GAAAG,CAAA;MACA;MAAI;MAAA,CAAAH,cAAA,GAAAW,CAAA,WAAAwE,KAAK,CAACa,GAAG;MAAA;MAAA,CAAAhG,cAAA,GAAAW,CAAA,WAAIwE,KAAK,CAACa,GAAG,CAAChE,QAAQ,CAAC,UAAU,CAAC,GAAE;QAAA;QAAAhC,cAAA,GAAAW,CAAA;QAC/C,MAAMmG,YAAY;QAAA;QAAA,CAAA9G,cAAA,GAAAG,CAAA,QAAGgF,KAAK,CAACa,GAAG,CAACe,KAAK,CAAC,eAAe,CAAC;QAAC;QAAA/G,cAAA,GAAAG,CAAA;QACtD,IAAI2G,YAAY,EAAE;UAAA;UAAA9G,cAAA,GAAAW,CAAA;UAChB,MAAMqG,SAAS;UAAA;UAAA,CAAAhH,cAAA,GAAAG,CAAA,QAAG8G,QAAQ,CAACH,YAAY,CAAC,CAAC,CAAC,CAAC;UAC3C,MAAMtE,GAAG;UAAA;UAAA,CAAAxC,cAAA,GAAAG,CAAA,QAAGuC,IAAI,CAACwE,KAAK,CAAC3E,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC;UAAC;UAAAxC,cAAA,GAAAG,CAAA;UAE1C,IAAI6G,SAAS,IAAIxE,GAAG,GAAG,GAAG,EAAE;YAAA;YAAAxC,cAAA,GAAAW,CAAA;YAAAX,cAAA,GAAAG,CAAA;YAC1B;YACAgF,KAAK,CAACa,GAAG,GAAG,MAAM,IAAA3B,OAAA,CAAAC,iBAAiB,EAACa,KAAK,CAACjC,GAAG,CAAC;YAAC;YAAAlD,cAAA,GAAAG,CAAA;YAC/C,MAAMuG,QAAQ,CAACS,GAAG,CAACC,MAAM,CAAC;cACxBpB,GAAG,EAAEb,KAAK,CAACa,GAAG;cACdR,SAAS,EAAE,IAAIjD,IAAI,EAAE,CAACwB,WAAW;aAClC,CAAC;UACJ,CAAC;UAAA;UAAA;YAAA/D,cAAA,GAAAW,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAX,cAAA,GAAAW,CAAA;QAAA;MACH,CAAC,MAAM;QAAA;QAAAX,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACL;QACAgF,KAAK,CAACa,GAAG,GAAG,MAAM,IAAA3B,OAAA,CAAAC,iBAAiB,EAACa,KAAK,CAACjC,GAAG,CAAC;QAAC;QAAAlD,cAAA,GAAAG,CAAA;QAC/C,MAAMuG,QAAQ,CAACS,GAAG,CAACC,MAAM,CAAC;UACxBpB,GAAG,EAAEb,KAAK,CAACa,GAAG;UACdR,SAAS,EAAE,IAAIjD,IAAI,EAAE,CAACwB,WAAW;SAClC,CAAC;MACJ;MAAC;MAAA/D,cAAA,GAAAG,CAAA;MAED,OAAOgF,KAAK;IACd,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,mEAAmE,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAClG,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAxCWkE,OAAA,CAAAmC,YAAY,GAAAA,YAAA;AA0CzB;;;AAAA;AAAAxG,cAAA,GAAAG,CAAA;AAGO,MAAMkH,UAAU,GAAGA,CAAA,GAAA7C,MAAA,KAEJ;EAAA;EAAAxE,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA,aAAAqB,MAAA,sBADpB8C,OAAA;EAAA;EAAA,CAAAtH,cAAA,GAAAW,CAAA,WAAwB,EAAE;IAAA;IAAAX,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IAE1B,IAAI;MACF,IAAIoH,KAAK;MAAA;MAAA,CAAAvH,cAAA,GAAAG,CAAA,SAAQG,UAAA,CAAA0E,EAAE,CAACC,UAAU,CAAC,QAAQ,CAAC;MAExC;MAAA;MAAAjF,cAAA,GAAAG,CAAA;MACA,IAAImH,OAAO,CAAClF,QAAQ,EAAE;QAAA;QAAApC,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACpBoH,KAAK,GAAGA,KAAK,CAACC,KAAK,CAAC,UAAU,EAAE,IAAI,EAAEF,OAAO,CAAClF,QAAQ,CAAC;MACzD,CAAC;MAAA;MAAA;QAAApC,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACD,IAAImH,OAAO,CAACjF,MAAM,EAAE;QAAA;QAAArC,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAClBoH,KAAK,GAAGA,KAAK,CAACC,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEF,OAAO,CAACjF,MAAM,CAAC;MACrD,CAAC;MAAA;MAAA;QAAArC,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACD,IAAImH,OAAO,CAACjB,QAAQ,KAAKC,SAAS,EAAE;QAAA;QAAAtG,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAClCoH,KAAK,GAAGA,KAAK,CAACC,KAAK,CAAC,UAAU,EAAE,IAAI,EAAEF,OAAO,CAACjB,QAAQ,CAAC;MACzD,CAAC;MAAA;MAAA;QAAArG,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACD,IAAImH,OAAO,CAACf,QAAQ,KAAKD,SAAS,EAAE;QAAA;QAAAtG,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAClCoH,KAAK,GAAGA,KAAK,CAACC,KAAK,CAAC,UAAU,EAAE,IAAI,EAAEF,OAAO,CAACf,QAAQ,CAAC;MACzD,CAAC;MAAA;MAAA;QAAAvG,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACD,IAAImH,OAAO,CAACxB,QAAQ,EAAE;QAAA;QAAA9F,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACpBiF,MAAM,CAACqC,OAAO,CAACH,OAAO,CAACxB,QAAQ,CAAC,CAAC4B,OAAO,CAAC,CAAC,CAACxE,GAAG,EAAEyE,KAAK,CAAC,KAAI;UAAA;UAAA3H,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAG,CAAA;UACxDoH,KAAK,GAAGA,KAAK,CAACC,KAAK,CAAC,YAAYtE,GAAG,EAAE,EAAE,IAAI,EAAEyE,KAAK,CAAC;QACrD,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA3H,cAAA,GAAAW,CAAA;MAAA;MAED;MAAAX,cAAA,GAAAG,CAAA;MACAoH,KAAK,GAAGA,KAAK,CAACK,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC;MAE1C;MAAA;MAAA5H,cAAA,GAAAG,CAAA;MACA,IAAImH,OAAO,CAACO,KAAK,EAAE;QAAA;QAAA7H,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACjBoH,KAAK,GAAGA,KAAK,CAACM,KAAK,CAACP,OAAO,CAACO,KAAK,CAAC;MACpC,CAAC;MAAA;MAAA;QAAA7H,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACD,IAAImH,OAAO,CAACQ,MAAM,EAAE;QAAA;QAAA9H,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAClBoH,KAAK,GAAGA,KAAK,CAACO,MAAM,CAACR,OAAO,CAACQ,MAAM,CAAC;MACtC,CAAC;MAAA;MAAA;QAAA9H,cAAA,GAAAW,CAAA;MAAA;MAED,MAAMoH,QAAQ;MAAA;MAAA,CAAA/H,cAAA,GAAAG,CAAA,SAAG,MAAMoH,KAAK,CAACZ,GAAG,EAAE;MAClC,MAAMqB,MAAM;MAAA;MAAA,CAAAhI,cAAA,GAAAG,CAAA,SAAG4H,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAEhD,GAAQ,IAAK;QAAA;QAAAlF,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAG,CAAA;QAAA,OAAA+E,GAAG,CAAC2B,IAAI,EAAW;MAAX,CAAW,CAAC;MAEnE;MACA,MAAMsB,cAAc;MAAA;MAAA,CAAAnI,cAAA,GAAAG,CAAA,SAAG,MAAMiI,OAAO,CAACC,GAAG,CACtCL,MAAM,CAACE,GAAG,CAAQ/C,KAAY,IAAI;QAAA;QAAAnF,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAG,CAAA;QAAA,OAAAgD,SAAA;UAAA;UAAAnD,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAG,CAAA;UAChC,IAAI;YAAA;YAAAH,cAAA,GAAAG,CAAA;YACF;YAAI;YAAA,CAAAH,cAAA,GAAAW,CAAA,WAAAwE,KAAK,CAACa,GAAG;YAAA;YAAA,CAAAhG,cAAA,GAAAW,CAAA,WAAIwE,KAAK,CAACa,GAAG,CAAChE,QAAQ,CAAC,UAAU,CAAC,GAAE;cAAA;cAAAhC,cAAA,GAAAW,CAAA;cAC/C,MAAMmG,YAAY;cAAA;cAAA,CAAA9G,cAAA,GAAAG,CAAA,SAAGgF,KAAK,CAACa,GAAG,CAACe,KAAK,CAAC,eAAe,CAAC;cAAC;cAAA/G,cAAA,GAAAG,CAAA;cACtD,IAAI2G,YAAY,EAAE;gBAAA;gBAAA9G,cAAA,GAAAW,CAAA;gBAChB,MAAMqG,SAAS;gBAAA;gBAAA,CAAAhH,cAAA,GAAAG,CAAA,SAAG8G,QAAQ,CAACH,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC3C,MAAMtE,GAAG;gBAAA;gBAAA,CAAAxC,cAAA,GAAAG,CAAA,SAAGuC,IAAI,CAACwE,KAAK,CAAC3E,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC;gBAAC;gBAAAxC,cAAA,GAAAG,CAAA;gBAE1C,IAAI6G,SAAS,IAAIxE,GAAG,GAAG,GAAG,EAAE;kBAAA;kBAAAxC,cAAA,GAAAW,CAAA;kBAAAX,cAAA,GAAAG,CAAA;kBAC1B;kBACAgF,KAAK,CAACa,GAAG,GAAG,MAAM,IAAA3B,OAAA,CAAAC,iBAAiB,EAACa,KAAK,CAACjC,GAAG,CAAC;kBAAC;kBAAAlD,cAAA,GAAAG,CAAA;kBAC/C,MAAMG,UAAA,CAAA0E,EAAE,CAACC,UAAU,CAAC,QAAQ,CAAC,CAACC,GAAG,CAACC,KAAK,CAACG,EAAE,CAAC,CAAC8B,MAAM,CAAC;oBACjDpB,GAAG,EAAEb,KAAK,CAACa,GAAG;oBACdR,SAAS,EAAE,IAAIjD,IAAI,EAAE,CAACwB,WAAW;mBAClC,CAAC;gBACJ,CAAC;gBAAA;gBAAA;kBAAA/D,cAAA,GAAAW,CAAA;gBAAA;cACH,CAAC;cAAA;cAAA;gBAAAX,cAAA,GAAAW,CAAA;cAAA;YACH,CAAC,MAAM;cAAA;cAAAX,cAAA,GAAAW,CAAA;cAAAX,cAAA,GAAAG,CAAA;cACL;cACAgF,KAAK,CAACa,GAAG,GAAG,MAAM,IAAA3B,OAAA,CAAAC,iBAAiB,EAACa,KAAK,CAACjC,GAAG,CAAC;cAAC;cAAAlD,cAAA,GAAAG,CAAA;cAC/C,MAAMG,UAAA,CAAA0E,EAAE,CAACC,UAAU,CAAC,QAAQ,CAAC,CAACC,GAAG,CAACC,KAAK,CAACG,EAAE,CAAC,CAAC8B,MAAM,CAAC;gBACjDpB,GAAG,EAAEb,KAAK,CAACa,GAAG;gBACdR,SAAS,EAAE,IAAIjD,IAAI,EAAE,CAACwB,WAAW;eAClC,CAAC;YACJ;YAAC;YAAA/D,cAAA,GAAAG,CAAA;YACD,OAAOgF,KAAK;UACd,CAAC,CAAC,OAAOhB,KAAK,EAAE;YAAA;YAAAnE,cAAA,GAAAG,CAAA;YACd8D,OAAO,CAACE,KAAK,CACX,6EAA6EgB,KAAK,CAACG,EAAE,GAAG,EACxFnB,KAAK,CACN;YAAC;YAAAnE,cAAA,GAAAG,CAAA;YACF,OAAOgF,KAAK;UACd;QACF,CAAC;MAAA,EAAC,CACH;MAAC;MAAAnF,cAAA,GAAAG,CAAA;MAEF8D,OAAO,CAACC,GAAG,CACT,0CAA0CiE,cAAc,CAACG,MAAM,uBAAuB,CACvF;MAAC;MAAAtI,cAAA,GAAAG,CAAA;MACF,OAAOgI,cAAc;IACvB,CAAC,CAAC,OAAOhE,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,kEAAkE,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MACjG,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AArFWkE,OAAA,CAAAgD,UAAU,GAAAA,UAAA;AAuFvB;;;AAAA;AAAArH,cAAA,GAAAG,CAAA;AAGO,MAAMoI,WAAW,GAAGA,CACzB9B,OAAe,EACf+B,UAA8B,KACZ;EAAA;EAAAxI,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IAClB,IAAI;MACF,MAAM4E,QAAQ;MAAA;MAAA,CAAA/E,cAAA,GAAAG,CAAA,SAAGG,UAAA,CAAA0E,EAAE,CAACC,UAAU,CAAC,QAAQ,CAAC,CAACC,GAAG,CAACuB,OAAO,CAAC;MACrD,MAAMC,QAAQ;MAAA;MAAA,CAAA1G,cAAA,GAAAG,CAAA,SAAG,MAAM4E,QAAQ,CAAC4B,GAAG,EAAE;MAAC;MAAA3G,cAAA,GAAAG,CAAA;MAEtC,IAAI,CAACuG,QAAQ,CAACE,MAAM,EAAE;QAAA;QAAA5G,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACpB,MAAM,IAAI4B,KAAK,CAAC,sBAAsB,CAAC;MACzC,CAAC;MAAA;MAAA;QAAA/B,cAAA,GAAAW,CAAA;MAAA;MAED,MAAM8H,YAAY;MAAA;MAAA,CAAAzI,cAAA,GAAAG,CAAA,SAAAiF,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACbmD,UAAU;QACbhD,SAAS,EAAE,IAAIjD,IAAI,EAAE,CAACwB,WAAW;MAAE,EACpC;MAAC;MAAA/D,cAAA,GAAAG,CAAA;MAEF,MAAM4E,QAAQ,CAACqC,MAAM,CAACqB,YAAY,CAAC;MAEnC;MACA,MAAMC,UAAU;MAAA;MAAA,CAAA1I,cAAA,GAAAG,CAAA,SAAG,MAAM4E,QAAQ,CAAC4B,GAAG,EAAE;MACvC,MAAMgC,YAAY;MAAA;MAAA,CAAA3I,cAAA,GAAAG,CAAA,SAAGuI,UAAU,CAAC7B,IAAI,EAAW;MAAC;MAAA7G,cAAA,GAAAG,CAAA;MAEhD8D,OAAO,CAACC,GAAG,CACT,+DAA+DuC,OAAO,EAAE,CACzE;MAAC;MAAAzG,cAAA,GAAAG,CAAA;MACF,OAAOwI,YAAY;IACrB,CAAC,CAAC,OAAOxE,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,qEAAqE,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MACpG,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AA/BWkE,OAAA,CAAAkE,WAAW,GAAAA,WAAA;AAiCxB;;;AAAA;AAAAvI,cAAA,GAAAG,CAAA;AAGO,MAAMyI,WAAW,GAAGA,CACzBnC,OAAe,EACfpE,MAAc,KACM;EAAA;EAAArC,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;;;;IACpB,IAAI;MACF,MAAMkD,QAAQ;MAAA;MAAA,CAAA/E,cAAA,GAAAG,CAAA,SAAGG,UAAA,CAAA0E,EAAE,CAACC,UAAU,CAAC,QAAQ,CAAC,CAACC,GAAG,CAACuB,OAAO,CAAC;MACrD,MAAMC,QAAQ;MAAA;MAAA,CAAA1G,cAAA,GAAAG,CAAA,SAAG,MAAM4E,QAAQ,CAAC4B,GAAG,EAAE;MAAC;MAAA3G,cAAA,GAAAG,CAAA;MAEtC,IAAI,CAACuG,QAAQ,CAACE,MAAM,EAAE;QAAA;QAAA5G,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACpB,MAAM,IAAI4B,KAAK,CAAC,sBAAsB,CAAC;MACzC,CAAC;MAAA;MAAA;QAAA/B,cAAA,GAAAW,CAAA;MAAA;MAED,MAAMwE,KAAK;MAAA;MAAA,CAAAnF,cAAA,GAAAG,CAAA,SAAGuG,QAAQ,CAACG,IAAI,EAAW;MAEtC;MAAA;MAAA7G,cAAA,GAAAG,CAAA;MACA,IAAIgF,KAAK,CAAC9C,MAAM,KAAKA,MAAM,EAAE;QAAA;QAAArC,cAAA,GAAAW,CAAA;QAC3B;QACA,MAAMkI,OAAO;QAAA;QAAA,CAAA7I,cAAA,GAAAG,CAAA,SAAG,MAAMG,UAAA,CAAA0E,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAAC7C,MAAM,CAAC,CAACsE,GAAG,EAAE;QAAC;QAAA3G,cAAA,GAAAG,CAAA;QAC/D;QAAI;QAAA,CAAAH,cAAA,GAAAW,CAAA,YAACkI,OAAO,CAACjC,MAAM;QAAA;QAAA,CAAA5G,cAAA,GAAAW,CAAA,WAAI;QAAA;QAAA,CAAAX,cAAA,GAAAW,CAAA,YAAAmI,EAAA,GAAAD,OAAO,CAAChC,IAAI,EAAE;QAAA;QAAA,CAAA7G,cAAA,GAAAW,CAAA,WAAAmI,EAAA;QAAA;QAAA,CAAA9I,cAAA,GAAAW,CAAA;QAAA;QAAA,CAAAX,cAAA,GAAAW,CAAA,WAAAmI,EAAA,CAAEC,IAAI,OAAK,OAAO,GAAE;UAAA;UAAA/I,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAG,CAAA;UACvD,MAAM,IAAI4B,KAAK,CAAC,8CAA8C,CAAC;QACjE,CAAC;QAAA;QAAA;UAAA/B,cAAA,GAAAW,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAAX,cAAA,GAAAW,CAAA;MAAA;MAED;MAAAX,cAAA,GAAAG,CAAA;MACA,MAAM4E,QAAQ,CAACqC,MAAM,CAAC;QACpBb,QAAQ,EAAE,KAAK;QACff,SAAS,EAAE,IAAIjD,IAAI,EAAE,CAACwB,WAAW;OAClC,CAAC;MAAC;MAAA/D,cAAA,GAAAG,CAAA;MAEH8D,OAAO,CAACC,GAAG,CACT,0EAA0EuC,OAAO,EAAE,CACpF;MAAC;MAAAzG,cAAA,GAAAG,CAAA;MACF,OAAO,IAAI;IACb,CAAC,CAAC,OAAOgE,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,mEAAmE,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAClG,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AArCWkE,OAAA,CAAAuE,WAAW,GAAAA,WAAA;AAuCxB;;;AAAA;AAAA5I,cAAA,GAAAG,CAAA;AAGO,MAAM6I,iBAAiB,GAAU9F,GAAW,IAAsB;EAAA;EAAAlD,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IACvE,IAAI;MACF,MAAMiD,OAAO;MAAA;MAAA,CAAApD,cAAA,GAAAG,CAAA,SAAG,IAAID,WAAA,CAAA+I,mBAAmB,CAAC;QACtC3F,MAAM,EAAE/B,WAAW;QACnBgC,GAAG,EAAEL;OACN,CAAC;MAAC;MAAAlD,cAAA,GAAAG,CAAA;MAEH,MAAMK,QAAQ,CAACwD,IAAI,CAACZ,OAAO,CAAC;MAAC;MAAApD,cAAA,GAAAG,CAAA;MAC7B8D,OAAO,CAACC,GAAG,CACT,+EAA+EhB,GAAG,EAAE,CACrF;MAAC;MAAAlD,cAAA,GAAAG,CAAA;MACF,OAAO,IAAI;IACb,CAAC,CAAC,OAAOgE,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,qFAAqF,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MACpH,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAhBWkE,OAAA,CAAA2E,iBAAiB,GAAAA,iBAAA;AAkB9B;;;AAAA;AAAAhJ,cAAA,GAAAG,CAAA;AAGO,MAAM+I,aAAa,GAAGA,CAAA,KAAgC;EAAA;EAAAlJ,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IAC3D,IAAI;MACF,MAAM4H,QAAQ;MAAA;MAAA,CAAA/H,cAAA,GAAAG,CAAA,SAAG,MAAMG,UAAA,CAAA0E,EAAE,CACtBC,UAAU,CAAC,QAAQ,CAAC,CACpBuC,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAC7Bb,GAAG,EAAE;MACR,MAAMqB,MAAM;MAAA;MAAA,CAAAhI,cAAA,GAAAG,CAAA,SAAG4H,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAChD,GAAG,IAAI;QAAA;QAAAlF,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAG,CAAA;QAAA,OAAA+E,GAAG,CAAC2B,IAAI,EAAW;MAAX,CAAW,CAAC;MAE5D,MAAMsC,WAAW;MAAA;MAAA,CAAAnJ,cAAA,GAAAG,CAAA,SAAG6H,MAAM,CAACM,MAAM;MACjC,MAAMc,SAAS;MAAA;MAAA,CAAApJ,cAAA,GAAAG,CAAA,SAAG6H,MAAM,CAACqB,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;QAAA;QAAAvJ,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAG,CAAA;QAAA,OAAAmJ,GAAG,GAAGC,GAAG,CAACzH,IAAI;MAAJ,CAAI,EAAE,CAAC,CAAC;MAEhE,MAAM0H,gBAAgB;MAAA;MAAA,CAAAxJ,cAAA,GAAAG,CAAA,SAA2B,EAAE;MACnD,MAAMsJ,YAAY;MAAA;MAAA,CAAAzJ,cAAA,GAAAG,CAAA,SAA2B,EAAE;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEhD6H,MAAM,CAACN,OAAO,CAACvC,KAAK,IAAG;QAAA;QAAAnF,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAG,CAAA;QACrBqJ,gBAAgB,CAACrE,KAAK,CAAC/C,QAAQ,CAAC,GAC9B;QAAC;QAAA,CAAApC,cAAA,GAAAW,CAAA,WAAA6I,gBAAgB,CAACrE,KAAK,CAAC/C,QAAQ,CAAC;QAAA;QAAA,CAAApC,cAAA,GAAAW,CAAA,WAAI,CAAC,KAAI,CAAC;QAAC;QAAAX,cAAA,GAAAG,CAAA;QAC9CsJ,YAAY,CAACtE,KAAK,CAAC9C,MAAM,CAAC,GAAG;QAAC;QAAA,CAAArC,cAAA,GAAAW,CAAA,WAAA8I,YAAY,CAACtE,KAAK,CAAC9C,MAAM,CAAC;QAAA;QAAA,CAAArC,cAAA,GAAAW,CAAA,WAAI,CAAC,KAAI,CAAC;MACpE,CAAC,CAAC;MAEF,MAAM+I,aAAa;MAAA;MAAA,CAAA1J,cAAA,GAAAG,CAAA,SAAG6H,MAAM,CACzB2B,IAAI,CACH,CAACC,CAAC,EAAEjJ,CAAC,KACH;QAAA;QAAAX,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAG,CAAA;QAAA,WAAIoC,IAAI,CAAC5B,CAAC,CAAC4E,SAAS,CAAC,CAACsE,OAAO,EAAE,GAAG,IAAItH,IAAI,CAACqH,CAAC,CAACrE,SAAS,CAAC,CAACsE,OAAO,EAAE;MAAF,CAAE,CACpE,CACAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MAEf,MAAMC,KAAK;MAAA;MAAA,CAAA/J,cAAA,GAAAG,CAAA,SAAe;QACxBgJ,WAAW;QACXC,SAAS;QACTI,gBAAgB;QAChBC,YAAY;QACZC;OACD;MAAC;MAAA1J,cAAA,GAAAG,CAAA;MAEF8D,OAAO,CAACC,GAAG,CACT,qEAAqEiF,WAAW,cAAcC,SAAS,QAAQ,CAChH;MAAC;MAAApJ,cAAA,GAAAG,CAAA;MACF,OAAO4J,KAAK;IACd,CAAC,CAAC,OAAO5F,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,0EAA0E,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MACzG,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AA3CWkE,OAAA,CAAA6E,aAAa,GAAAA,aAAA;AA6C1B;;;AAAA;AAAAlJ,cAAA,GAAAG,CAAA;AAGO,MAAM6J,oBAAoB,GAC/B3H,MAAc,IACM;EAAA;EAAArC,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IACpB,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAAkE,OAAA,CAAAgD,UAAU,EAAC;QACtBhF,MAAM;QACND,QAAQ,EAAE,SAAS;QACnBmE,QAAQ,EAAE;OACX,CAAC;IACJ,CAAC,CAAC,OAAOpC,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,uFAAuF,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MACtH,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAbWkE,OAAA,CAAA2F,oBAAoB,GAAAA,oBAAA;AAejC;;;AAAA;AAAAhK,cAAA,GAAAG,CAAA;AAGO,MAAM8J,aAAa,GAAU5H,MAAe,IAAsB;EAAA;EAAArC,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IACvE,IAAI;MACF,MAAMmH,OAAO;MAAA;MAAA,CAAAtH,cAAA,GAAAG,CAAA,SAAiB;QAC5BiC,QAAQ,EAAE,MAAM;QAChBmE,QAAQ,EAAE,IAAI;QACdF,QAAQ,EAAE;OACX;MAAC;MAAArG,cAAA,GAAAG,CAAA;MAEF,IAAIkC,MAAM,EAAE;QAAA;QAAArC,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACVmH,OAAO,CAACjF,MAAM,GAAGA,MAAM;MACzB,CAAC;MAAA;MAAA;QAAArC,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MAED,OAAO,MAAM,IAAAkE,OAAA,CAAAgD,UAAU,EAACC,OAAO,CAAC;IAClC,CAAC,CAAC,OAAOnD,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,+EAA+E,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC9G,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAjBWkE,OAAA,CAAA4F,aAAa,GAAAA,aAAA;AAmB1B;;;AAAA;AAAAjK,cAAA,GAAAG,CAAA;AAGO,MAAM+J,cAAc,GAAUC,OAAgB,IAAsB;EAAA;EAAAnK,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IACzE,IAAI;MACF,MAAMmH,OAAO;MAAA;MAAA,CAAAtH,cAAA,GAAAG,CAAA,SAAiB;QAC5BiC,QAAQ,EAAE,OAAO;QACjBmE,QAAQ,EAAE;OACX;MAAC;MAAAvG,cAAA,GAAAG,CAAA;MAEF,IAAIgK,OAAO,EAAE;QAAA;QAAAnK,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACXmH,OAAO,CAACxB,QAAQ,GAAG;UAAEqE;QAAO,CAAE;MAChC,CAAC;MAAA;MAAA;QAAAnK,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MAED,OAAO,MAAM,IAAAkE,OAAA,CAAAgD,UAAU,EAACC,OAAO,CAAC;IAClC,CAAC,CAAC,OAAOnD,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,kFAAkF,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MACjH,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAhBWkE,OAAA,CAAA6F,cAAc,GAAAA,cAAA;AAkB3B;;;AAAA;AAAAlK,cAAA,GAAAG,CAAA;AAGO,MAAMiK,oBAAoB,GAAGA,CAAA,KAA4B;EAAA;EAAApK,cAAA,GAAA6B,CAAA;EAAA7B,cAAA,GAAAG,CAAA;EAAA,OAAAgD,SAAA;IAAA;IAAAnD,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAG,CAAA;IAC9D,IAAI;MACF,MAAMqC,GAAG;MAAA;MAAA,CAAAxC,cAAA,GAAAG,CAAA,SAAG,IAAIoC,IAAI,EAAE;MACtB,MAAMwF,QAAQ;MAAA;MAAA,CAAA/H,cAAA,GAAAG,CAAA,SAAG,MAAMG,UAAA,CAAA0E,EAAE,CACtBC,UAAU,CAAC,QAAQ,CAAC,CACpBuC,KAAK,CAAC,WAAW,EAAE,IAAI,EAAEhF,GAAG,CAACuB,WAAW,EAAE,CAAC,CAC3CyD,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAC7Bb,GAAG,EAAE;MAER,IAAI0D,YAAY;MAAA;MAAA,CAAArK,cAAA,GAAAG,CAAA,SAAG,CAAC;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAErB,KAAK,MAAM+E,GAAG,IAAI6C,QAAQ,CAACE,IAAI,EAAE;QAC/B,MAAM9C,KAAK;QAAA;QAAA,CAAAnF,cAAA,GAAAG,CAAA,SAAG+E,GAAG,CAAC2B,IAAI,EAAW;QAEjC;QAAA;QAAA7G,cAAA,GAAAG,CAAA;QACA,MAAM,IAAAkE,OAAA,CAAA2E,iBAAiB,EAAC7D,KAAK,CAACjC,GAAG,CAAC;QAElC;QAAA;QAAAlD,cAAA,GAAAG,CAAA;QACA,MAAM+E,GAAG,CAACiC,GAAG,CAACC,MAAM,CAAC;UACnBb,QAAQ,EAAE,KAAK;UACff,SAAS,EAAEhD,GAAG,CAACuB,WAAW;SAC3B,CAAC;QAAC;QAAA/D,cAAA,GAAAG,CAAA;QAEHkK,YAAY,EAAE;MAChB;MAAC;MAAArK,cAAA,GAAAG,CAAA;MAED8D,OAAO,CAACC,GAAG,CACT,oDAAoDmG,YAAY,gCAAgC,CACjG;MAAC;MAAArK,cAAA,GAAAG,CAAA;MACF,OAAOkK,YAAY;IACrB,CAAC,CAAC,OAAOlG,KAAK,EAAE;MAAA;MAAAnE,cAAA,GAAAG,CAAA;MACdI,eAAA,CAAA6D,MAAM,CAACD,KAAK,CAAC,uFAAuF,EAAEA,KAAc,CAAC;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MACtH,MAAMgE,KAAK;IACb;EACF,CAAC;AAAA;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAlCWkE,OAAA,CAAA+F,oBAAoB,GAAAA,oBAAA","ignoreList":[]}