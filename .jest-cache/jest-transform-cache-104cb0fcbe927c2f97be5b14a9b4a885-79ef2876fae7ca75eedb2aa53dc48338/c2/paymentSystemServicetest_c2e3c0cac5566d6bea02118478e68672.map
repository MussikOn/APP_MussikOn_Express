{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\paymentSystemService.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\paymentSystemService.test.ts"],"sourcesContent":["import { PaymentSystemService } from '../services/paymentSystemService';\nimport { db } from '../utils/firebase';\nimport { uploadToS3 } from '../utils/idriveE2';\n\n// Mock Firebase\njest.mock('../utils/firebase', () => ({\n  db: {\n    collection: jest.fn(),\n  },\n}));\n\n// Mock S3 upload\njest.mock('../utils/idriveE2', () => ({\n  uploadToS3: jest.fn(),\n}));\n\n// Mock logger\njest.mock('../services/loggerService', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn()\n  }\n}));\n\ndescribe('PaymentSystemService', () => {\n  let paymentService: PaymentSystemService;\n  let mockFirestore: any;\n  let mockCollection: any;\n  let mockDoc: any;\n\n  beforeEach(() => {\n    paymentService = new PaymentSystemService();\n    \n    mockDoc = {\n      get: jest.fn(),\n      set: jest.fn(),\n      update: jest.fn(),\n      exists: false,\n      data: jest.fn()\n    };\n\n    mockCollection = {\n      doc: jest.fn().mockReturnValue(mockDoc),\n      where: jest.fn().mockReturnThis(),\n      get: jest.fn(),\n      set: jest.fn(),\n      update: jest.fn(),\n      add: jest.fn(),\n      orderBy: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      exists: false,\n      data: jest.fn(),\n      size: 0,\n      docs: []\n    };\n\n    // Configurar mocks para que funcionen correctamente\n    (db.collection as jest.Mock).mockReturnValue(mockCollection);\n    (db as any).doc = jest.fn().mockReturnValue(mockDoc);\n    \n    // Configurar mockDoc.get para que retorne el mockDoc\n    mockDoc.get.mockResolvedValue(mockDoc);\n    \n    // Configurar mockCollection.get para que retorne un objeto con docs\n    mockCollection.get.mockResolvedValue({\n      docs: [],\n      size: 0\n    });\n    \n    jest.clearAllMocks();\n  });\n\n  describe('getUserBalance', () => {\n    it('should return existing user balance', async () => {\n      // Arrange\n      const userId = 'user123';\n      const mockBalance = {\n        userId,\n        balance: 1000,\n        currency: 'RD$',\n        lastUpdated: new Date().toISOString(),\n        totalDeposits: 2000,\n        totalEarnings: 1500,\n        totalWithdrawals: 500\n      };\n\n      mockDoc.exists = true;\n      mockDoc.data.mockReturnValue(mockBalance);\n      mockDoc.get.mockResolvedValue(mockDoc);\n\n      // Act\n      const result = await paymentService.getUserBalance(userId);\n\n      // Assert\n      expect(mockCollection.doc).toHaveBeenCalledWith(userId);\n      expect(mockDoc.get).toHaveBeenCalled();\n      expect(result).toEqual(mockBalance);\n    });\n\n    it('should create initial balance when user has no balance', async () => {\n      // Arrange\n      const userId = 'user123';\n      mockDoc.exists = false;\n      mockDoc.get.mockResolvedValue(mockDoc);\n\n      // Act\n      const result = await paymentService.getUserBalance(userId);\n\n      // Assert\n      expect(mockDoc.set).toHaveBeenCalledWith({\n        userId,\n        balance: 0,\n        currency: 'RD$',\n        lastUpdated: expect.any(String),\n        totalDeposits: 0,\n        totalWithdrawals: 0,\n        totalEarnings: 0\n      });\n      expect(result.balance).toBe(0);\n      expect(result.currency).toBe('RD$');\n    });\n  });\n\n  describe('registerBankAccount', () => {\n    it('should register bank account successfully', async () => {\n      // Arrange\n      const userId = 'user123';\n      const accountData = {\n        accountHolder: 'John Doe',\n        accountNumber: '1234567890',\n        accountType: 'savings' as const,\n        bankName: 'Banco Popular',\n        routingNumber: '123456789'\n      };\n\n      mockCollection.get.mockResolvedValue({\n        docs: [],\n        size: 0\n      });\n\n      // Act\n      const result = await paymentService.registerBankAccount(userId, accountData);\n\n      // Assert\n      expect(mockDoc.set).toHaveBeenCalledWith(expect.objectContaining({\n        userId,\n        ...accountData,\n        isVerified: false,\n        isDefault: false\n      }));\n      expect(result.isDefault).toBe(false);\n    });\n\n    it('should set first account as default', async () => {\n      // Arrange\n      const userId = 'user123';\n      const accountData = {\n        accountHolder: 'John Doe',\n        accountNumber: '1234567890',\n        accountType: 'savings' as const,\n        bankName: 'Banco Popular',\n        routingNumber: '123456789'\n      };\n\n      mockCollection.get.mockResolvedValue({\n        docs: [{\n          data: () => ({ id: 'existing_account' }),\n          id: 'existing_account'\n        }],\n        size: 1\n      });\n\n      // Act\n      const result = await paymentService.registerBankAccount(userId, accountData);\n\n      // Assert\n      expect(mockDoc.update).toHaveBeenCalledWith({ isDefault: true });\n      expect(result.isDefault).toBe(true);\n    });\n  });\n\n  describe('getUserBankAccounts', () => {\n    it('should return user bank accounts with optimized query', async () => {\n      // Arrange\n      const userId = 'user123';\n      const mockAccounts = [\n        {\n          id: 'bank1',\n          userId,\n          accountHolder: 'John Doe',\n          accountNumber: '1234567890',\n          accountType: 'savings' as const,\n          bankName: 'Banco Popular',\n          routingNumber: '123456789',\n          isVerified: true,\n          isDefault: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      ];\n\n      mockCollection.get.mockResolvedValue({\n        docs: mockAccounts.map(account => ({\n          data: () => account,\n          id: account.id\n        })),\n        size: mockAccounts.length\n      });\n\n      // Act\n      const result = await paymentService.getUserBankAccounts(userId);\n\n      // Assert\n      expect(mockCollection.where).toHaveBeenCalledWith('userId', '==', userId);\n      expect(mockCollection.orderBy).toHaveBeenCalledWith('isDefault', 'desc');\n      expect(result).toEqual(mockAccounts);\n    });\n\n    it('should fallback to memory sorting when index is not available', async () => {\n      // Arrange\n      const userId = 'user123';\n      mockCollection.get.mockRejectedValue(new Error('Index not available'));\n\n      // Act & Assert\n      await expect(paymentService.getUserBankAccounts(userId)).rejects.toThrow('Error obteniendo cuentas bancarias');\n    });\n  });\n\n  describe('uploadDepositVoucher', () => {\n    it('should upload deposit voucher successfully', async () => {\n      // Arrange\n      const userId = 'user123';\n      const depositData = {\n        amount: 1000,\n        voucherFile: {\n          fieldname: 'voucher',\n          originalname: 'voucher.jpg',\n          encoding: '7bit',\n          mimetype: 'image/jpeg',\n          buffer: Buffer.from('test'),\n          size: 1024,\n          stream: {} as any,\n          destination: '',\n          filename: 'voucher.jpg',\n          path: ''\n        },\n        accountHolderName: 'Juan Pérez',\n        bankName: 'Banco Popular'\n      };\n\n      const mockS3Url = 'https://s3.amazonaws.com/voucher.jpg';\n      (uploadToS3 as jest.Mock).mockResolvedValue(mockS3Url);\n\n      // Act\n      const result = await paymentService.uploadDepositVoucher(userId, depositData);\n\n      // Assert\n      expect(uploadToS3).toHaveBeenCalledWith(\n        depositData.voucherFile.buffer,\n        'voucher.jpg',\n        'image/jpeg',\n        'deposits'\n      );\n      expect(mockDoc.set).toHaveBeenCalledWith(expect.objectContaining({\n        userId,\n        amount: depositData.amount,\n        status: 'pending',\n        accountHolderName: depositData.accountHolderName,\n        bankName: depositData.bankName\n      }));\n      expect(result.status).toBe('pending');\n    });\n  });\n\n  describe('verifyDeposit', () => {\n    it('should verify deposit successfully', async () => {\n      // Arrange\n      const depositId = 'deposit123';\n      const adminId = 'admin123';\n      const approved = true;\n      const notes = 'Depósito verificado';\n      const verificationData = {\n        bankDepositDate: '2024-01-15',\n        bankDepositTime: '14:30',\n        referenceNumber: 'REF123456',\n        accountLastFourDigits: '1234',\n        verifiedBy: 'admin123'\n      };\n\n      const mockDeposit = {\n        id: depositId,\n        userId: 'user123',\n        amount: 1000,\n        status: 'pending'\n      };\n\n      mockDoc.exists = true;\n      mockDoc.data.mockReturnValue(mockDeposit);\n      mockDoc.get.mockResolvedValue(mockDoc);\n\n      // Act\n      await paymentService.verifyDeposit(depositId, adminId, approved, notes, verificationData);\n\n      // Assert\n      expect(mockDoc.update).toHaveBeenCalledWith(expect.objectContaining({\n        status: 'approved',\n        verifiedBy: adminId,\n        verifiedAt: expect.any(String),\n        notes,\n        verificationData\n      }));\n    });\n\n    it('should reject deposit successfully', async () => {\n      // Arrange\n      const depositId = 'deposit123';\n      const adminId = 'admin123';\n      const approved = false;\n      const notes = 'Comprobante inválido';\n\n      const mockDeposit = {\n        id: depositId,\n        userId: 'user123',\n        amount: 1000,\n        status: 'pending'\n      };\n\n      mockDoc.exists = true;\n      mockDoc.data.mockReturnValue(mockDeposit);\n      mockDoc.get.mockResolvedValue(mockDoc);\n\n      // Act\n      await paymentService.verifyDeposit(depositId, adminId, approved, notes);\n\n      // Assert\n      expect(mockDoc.update).toHaveBeenCalledWith(expect.objectContaining({\n        status: 'rejected',\n        verifiedBy: adminId,\n        verifiedAt: expect.any(String),\n        notes\n      }));\n    });\n  });\n\n  describe('processEventPayment', () => {\n    it('should process event payment successfully', async () => {\n      // Arrange\n      const paymentData = {\n        eventId: 'event123',\n        organizerId: 'organizer123',\n        musicianId: 'musician123',\n        amount: 500,\n        paymentMethod: 'balance' as const,\n        description: 'Pago por evento'\n      };\n\n      const mockBalance = {\n        userId: 'organizer123',\n        balance: 1000,\n        currency: 'RD$',\n        lastUpdated: new Date().toISOString(),\n        totalDeposits: 2000,\n        totalEarnings: 0,\n        totalWithdrawals: 0\n      };\n\n      mockDoc.exists = true;\n      mockDoc.data.mockReturnValue(mockBalance);\n      mockDoc.get.mockResolvedValue(mockDoc);\n\n      // Act\n      const result = await paymentService.processEventPayment(paymentData);\n\n      // Assert\n      expect(mockDoc.set).toHaveBeenCalledWith(expect.objectContaining({\n        eventId: paymentData.eventId,\n        organizerId: paymentData.organizerId,\n        musicianId: paymentData.musicianId,\n        amount: paymentData.amount,\n        status: 'completed'\n      }));\n      expect(result.status).toBe('completed');\n    });\n  });\n\n  describe('requestWithdrawal', () => {\n    it('should request withdrawal successfully', async () => {\n      // Arrange\n      const musicianId = 'musician123';\n      const withdrawalData = {\n        amount: 200,\n        bankAccountId: 'bank123',\n        description: 'Retiro de ganancias'\n      };\n\n      const mockEarnings = {\n        totalEarnings: 500,\n        availableBalance: 300\n      };\n\n      mockDoc.exists = true;\n      mockDoc.data.mockReturnValue(mockEarnings);\n      mockDoc.get.mockResolvedValue(mockDoc);\n\n      // Act\n      const result = await paymentService.requestWithdrawal(musicianId, withdrawalData);\n\n      // Assert\n      expect(mockDoc.set).toHaveBeenCalledWith(expect.objectContaining({\n        musicianId,\n        amount: withdrawalData.amount,\n        bankAccountId: withdrawalData.bankAccountId,\n        status: 'pending'\n      }));\n      expect(result.status).toBe('pending');\n    });\n  });\n\n  describe('processWithdrawal', () => {\n    it('should process withdrawal successfully', async () => {\n      // Arrange\n      const withdrawalId = 'withdrawal123';\n      const adminId = 'admin123';\n      const approved = true;\n      const notes = 'Retiro aprobado';\n\n      const mockWithdrawal = {\n        id: withdrawalId,\n        musicianId: 'musician123',\n        amount: 200,\n        status: 'pending'\n      };\n\n      mockDoc.exists = true;\n      mockDoc.data.mockReturnValue(mockWithdrawal);\n      mockDoc.get.mockResolvedValue(mockDoc);\n\n      // Act\n      await paymentService.processWithdrawal(withdrawalId, adminId, approved, notes);\n\n      // Assert\n      expect(mockDoc.update).toHaveBeenCalledWith(expect.objectContaining({\n        status: 'approved',\n        processedBy: adminId,\n        processedAt: expect.any(String),\n        notes\n      }));\n    });\n  });\n\n  describe('getPaymentStatistics', () => {\n    it('should return payment statistics', async () => {\n      // Arrange\n      const mockStats = {\n        totalUsers: 100,\n        totalMusicians: 50,\n        totalEvents: 200,\n        totalRevenue: 50000,\n        totalCommissions: 5000,\n        averageEventValue: 250,\n        monthlyGrowth: 15.5\n      };\n\n      mockCollection.get.mockResolvedValue({\n        docs: [],\n        size: 100\n      });\n\n      // Act\n      const result = await paymentService.getPaymentStatistics();\n\n      // Assert\n      expect(result).toEqual(expect.objectContaining({\n        totalUsers: expect.any(Number),\n        totalMusicians: expect.any(Number),\n        totalEvents: expect.any(Number)\n      }));\n    });\n  });\n\n  describe('getPendingDeposits', () => {\n    it('should return pending deposits', async () => {\n      // Arrange\n      const mockDeposits = [\n        {\n          id: 'deposit1',\n          userId: 'user123',\n          amount: 1000,\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }\n      ];\n\n      mockCollection.get.mockResolvedValue({\n        docs: mockDeposits.map(deposit => ({\n          data: () => deposit,\n          id: deposit.id\n        })),\n        size: mockDeposits.length\n      });\n\n      // Act\n      const result = await paymentService.getPendingDeposits();\n\n      // Assert\n      expect(mockCollection.where).toHaveBeenCalledWith('status', '==', 'pending');\n      expect(mockCollection.orderBy).toHaveBeenCalledWith('createdAt', 'desc');\n      expect(result).toEqual(mockDeposits);\n    });\n  });\n\n  describe('getPendingWithdrawals', () => {\n    it('should return pending withdrawals', async () => {\n      // Arrange\n      const mockWithdrawals = [\n        {\n          id: 'withdrawal1',\n          musicianId: 'musician123',\n          amount: 200,\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }\n      ];\n\n      mockCollection.get.mockResolvedValue({\n        docs: mockWithdrawals.map(withdrawal => ({\n          data: () => withdrawal,\n          id: withdrawal.id\n        })),\n        size: mockWithdrawals.length\n      });\n\n      // Act\n      const result = await paymentService.getPendingWithdrawals();\n\n      // Assert\n      expect(mockCollection.where).toHaveBeenCalledWith('status', '==', 'pending');\n      expect(mockCollection.orderBy).toHaveBeenCalledWith('createdAt', 'desc');\n      expect(result).toEqual(mockWithdrawals);\n    });\n  });\n\n  describe('getMusicianEarnings', () => {\n    it('should return musician earnings', async () => {\n      // Arrange\n      const musicianId = 'musician123';\n      const mockEarnings = [\n        {\n          id: 'earning1',\n          musicianId,\n          eventId: 'event123',\n          amount: 500,\n          commission: 50,\n          netAmount: 450,\n          createdAt: new Date().toISOString()\n        }\n      ];\n\n      mockCollection.get.mockResolvedValue({\n        docs: mockEarnings.map(earning => ({\n          data: () => earning,\n          id: earning.id\n        })),\n        size: mockEarnings.length\n      });\n\n      // Act\n      const result = await paymentService.getMusicianEarnings(musicianId);\n\n      // Assert\n      expect(mockCollection.where).toHaveBeenCalledWith('musicianId', '==', musicianId);\n      expect(mockCollection.orderBy).toHaveBeenCalledWith('createdAt', 'desc');\n      expect(result).toEqual(mockEarnings);\n    });\n  });\n}); "],"version":3}