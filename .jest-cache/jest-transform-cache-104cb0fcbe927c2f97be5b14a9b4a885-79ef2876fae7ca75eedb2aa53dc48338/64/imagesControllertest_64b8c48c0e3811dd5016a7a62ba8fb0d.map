{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\imagesController.test.ts","mappings":";;;;;;;;;;;AAcA,uBAAuB;AACvB,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;AAdnC,sEAUyC;AAKzC,MAAM,eAAe,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAEzD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,WAA6B,CAAC;IAClC,IAAI,YAA+B,CAAC;IACpC,IAAI,UAAqB,CAAC;IAC1B,IAAI,QAAmB,CAAC;IAExB,UAAU,CAAC,GAAG,EAAE;QACd,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE,CAAC;QACxC,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE,CAAC;QACtC,YAAY,GAAG;YACb,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,QAAQ;SACf,CAAC;QACF,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,kCAAkC,EAAE,GAAS,EAAE;YAChD,UAAU;YACV,MAAM,MAAM,GAAG,SAAS,CAAC;YACzB,MAAM,QAAQ,GAAG;gBACf,SAAS,EAAE,OAAO;gBAClB,YAAY,EAAE,UAAU;gBACxB,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,YAAY;gBACtB,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;gBACjC,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,EAAS;gBACjB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,UAAU;gBACpB,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,MAAM,gBAAgB,GAAG;gBACvB,EAAE,EAAE,SAAS;gBACb,MAAM,EAAE,SAAS;gBACjB,GAAG,EAAE,gBAAgB;gBACrB,YAAY,EAAE,UAAU;gBACxB,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,YAAY;gBACtB,IAAI,EAAE,IAAI;gBACV,GAAG,EAAE,8BAA8B;gBACnC,QAAQ,EAAE,SAAkB;gBAC5B,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC;YAEF,WAAW,GAAG;gBACZ,IAAI,EAAE;oBACJ,MAAM,EAAE,MAAM;oBACd,SAAS,EAAE,MAAM;oBACjB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;gBACD,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;aAC9B,CAAC;YAEF,eAAe,CAAC,WAAW,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;YAEhE,MAAM;YACN,MAAM,IAAA,wCAAqB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAE9E,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;gBACpF,WAAW,EAAE,EAAE;gBACf,IAAI,EAAE,EAAE;gBACR,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;YACH,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,4BAA4B;gBACrC,KAAK,EAAE,gBAAgB;aACxB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAS,EAAE;YACzD,UAAU;YACV,MAAM,MAAM,GAAG,SAAS,CAAC;YACzB,WAAW,GAAG;gBACZ,IAAI,EAAE;oBACJ,MAAM,EAAE,MAAM;oBACd,SAAS,EAAE,MAAM;oBACjB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;gBACD,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;aAC9B,CAAC;YAEF,MAAM;YACN,MAAM,IAAA,wCAAqB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAE9E,SAAS;YACT,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,KAAK,EAAE,kCAAkC;aAC1C,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAS,EAAE;YAClE,UAAU;YACV,WAAW,GAAG;gBACZ,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE;oBACJ,SAAS,EAAE,OAAO;oBAClB,YAAY,EAAE,UAAU;oBACxB,QAAQ,EAAE,MAAM;oBAChB,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBAC3B,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,EAAS;oBACjB,WAAW,EAAE,EAAE;oBACf,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,EAAE;iBACT;gBACD,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;aAC9B,CAAC;YAEF,MAAM;YACN,MAAM,IAAA,wCAAqB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAE9E,SAAS;YACT,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,KAAK,EAAE,wBAAwB;aAChC,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,GAAS,EAAE;YAC5C,UAAU;YACV,MAAM,MAAM,GAAG,SAAS,CAAC;YACzB,MAAM,QAAQ,GAAG;gBACf,SAAS,EAAE,OAAO;gBAClB,YAAY,EAAE,UAAU;gBACxB,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,YAAY;gBACtB,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;gBACjC,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,EAAS;gBACjB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,UAAU;gBACpB,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,WAAW,GAAG;gBACZ,IAAI,EAAE;oBACJ,MAAM,EAAE,MAAM;oBACd,SAAS,EAAE,MAAM;oBACjB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;gBACD,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;aAC9B,CAAC;YAEF,eAAe,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YAE1E,MAAM;YACN,MAAM,IAAA,wCAAqB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAE9E,SAAS;YACT,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,eAAe;aACzB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,qCAAqC,EAAE,GAAS,EAAE;YACnD,UAAU;YACV,MAAM,OAAO,GAAG,UAAU,CAAC;YAC3B,MAAM,SAAS,GAAG;gBAChB,EAAE,EAAE,OAAO;gBACX,MAAM,EAAE,SAAS;gBACjB,GAAG,EAAE,gBAAgB;gBACrB,YAAY,EAAE,UAAU;gBACxB,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,YAAY;gBACtB,IAAI,EAAE,IAAI;gBACV,GAAG,EAAE,8BAA8B;gBACnC,QAAQ,EAAE,SAAkB;gBAC5B,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC;YAEF,WAAW,GAAG;gBACZ,MAAM,EAAE,EAAE,OAAO,EAAE;gBACnB,IAAI,EAAE;oBACJ,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,SAAS;oBACpB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;aACF,CAAC;YAEF,eAAe,CAAC,YAAY,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAE1D,MAAM;YACN,MAAM,IAAA,yCAAsB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAE/E,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YACnE,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,SAAS;aACjB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAS,EAAE;YACtD,UAAU;YACV,MAAM,OAAO,GAAG,aAAa,CAAC;YAC9B,WAAW,GAAG;gBACZ,MAAM,EAAE,EAAE,OAAO,EAAE;gBACnB,IAAI,EAAE;oBACJ,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,SAAS;oBACpB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;aACF,CAAC;YAEF,eAAe,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAErD,MAAM;YACN,MAAM,IAAA,yCAAsB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAE/E,SAAS;YACT,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,KAAK,EAAE,sBAAsB;aAC9B,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,iCAAiC,EAAE,GAAS,EAAE;YAC/C,UAAU;YACV,MAAM,UAAU,GAAG;gBACjB;oBACE,EAAE,EAAE,QAAQ;oBACZ,MAAM,EAAE,SAAS;oBACjB,GAAG,EAAE,YAAY;oBACjB,YAAY,EAAE,YAAY;oBAC1B,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,YAAY;oBACtB,IAAI,EAAE,IAAI;oBACV,GAAG,EAAE,gCAAgC;oBACrC,QAAQ,EAAE,SAAkB;oBAC5B,QAAQ,EAAE,KAAK;oBACf,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACpC;gBACD;oBACE,EAAE,EAAE,QAAQ;oBACZ,MAAM,EAAE,SAAS;oBACjB,GAAG,EAAE,YAAY;oBACjB,YAAY,EAAE,YAAY;oBAC1B,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,YAAY;oBACtB,IAAI,EAAE,IAAI;oBACV,GAAG,EAAE,gCAAgC;oBACrC,QAAQ,EAAE,MAAe;oBACzB,QAAQ,EAAE,IAAI;oBACd,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACpC;aACF,CAAC;YAEF,WAAW,GAAG;gBACZ,KAAK,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE;gBACjC,IAAI,EAAE;oBACJ,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,SAAS;oBACpB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;aACF,CAAC;YAEF,eAAe,CAAC,UAAU,CAAC,iBAAiB,CAAC;gBAC3C,MAAM,EAAE,UAAU;gBAClB,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE,CAAC;gBACP,UAAU,EAAE,CAAC;gBACb,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;YAEH,MAAM;YACN,MAAM,IAAA,uCAAoB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAE7E,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC;gBACtD,KAAK,EAAE,EAAE;aACV,CAAC,CAAC;YACH,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,MAAM,EAAE;oBACN,MAAM,EAAE,UAAU;oBAClB,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,UAAU,EAAE,CAAC;oBACb,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,KAAK;iBACf;gBACD,KAAK,EAAE,SAAS;gBAChB,OAAO,EAAE;oBACP,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,kCAAkC,EAAE,GAAS,EAAE;YAChD,UAAU;YACV,MAAM,OAAO,GAAG,UAAU,CAAC;YAC3B,MAAM,UAAU,GAAG;gBACjB,WAAW,EAAE,qBAAqB;gBAClC,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;gBACtB,QAAQ,EAAE,KAAK;aAChB,CAAC;YAEF,MAAM,gBAAgB,mBACpB,EAAE,EAAE,OAAO,EACX,MAAM,EAAE,SAAS,EACjB,GAAG,EAAE,gBAAgB,EACrB,YAAY,EAAE,UAAU,EACxB,QAAQ,EAAE,UAAU,EACpB,QAAQ,EAAE,YAAY,EACtB,IAAI,EAAE,IAAI,EACV,GAAG,EAAE,8BAA8B,EACnC,QAAQ,EAAE,SAAkB,EAC5B,QAAQ,EAAE,IAAI,EACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,IAChC,UAAU,CACd,CAAC;YAEF,WAAW,GAAG;gBACZ,MAAM,EAAE,EAAE,OAAO,EAAE;gBACnB,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE;oBACJ,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,SAAS;oBACpB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;aACF,CAAC;YAEF,eAAe,CAAC,YAAY,CAAC,iBAAiB,CAAC;gBAC7C,EAAE,EAAE,OAAO;gBACX,MAAM,EAAE,SAAS;gBACjB,GAAG,EAAE,gBAAgB;gBACrB,YAAY,EAAE,UAAU;gBACxB,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,YAAY;gBACtB,IAAI,EAAE,IAAI;gBACV,GAAG,EAAE,8BAA8B;gBACnC,QAAQ,EAAE,SAAkB;gBAC5B,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;YACH,eAAe,CAAC,WAAW,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;YAEhE,MAAM;YACN,MAAM,IAAA,wCAAqB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAE9E,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAC9E,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAE,gBAAgB;aACxB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,kCAAkC,EAAE,GAAS,EAAE;YAChD,UAAU;YACV,MAAM,OAAO,GAAG,UAAU,CAAC;YAC3B,WAAW,GAAG;gBACZ,MAAM,EAAE,EAAE,OAAO,EAAE;gBACnB,IAAI,EAAE;oBACJ,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,SAAS;oBACpB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;aACF,CAAC;YAEF,eAAe,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEpD,MAAM;YACN,MAAM,IAAA,wCAAqB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAE9E,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAC7E,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,+BAA+B;aACzC,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,qCAAqC,EAAE,GAAS,EAAE;YACnD,UAAU;YACV,MAAM,SAAS,GAAG;gBAChB,WAAW,EAAE,GAAG;gBAChB,SAAS,EAAE,OAAO;gBAClB,WAAW,EAAE,KAAK;gBAClB,gBAAgB,EAAE;oBAChB,OAAO,EAAE,EAAE;oBACX,IAAI,EAAE,EAAE;oBACR,KAAK,EAAE,EAAE;oBACT,OAAO,EAAE,EAAE;iBACZ;gBACD,YAAY,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;gBAC9C,aAAa,EAAE,CAAC;wBACd,EAAE,EAAE,QAAQ;wBACZ,MAAM,EAAE,SAAS;wBACjB,GAAG,EAAE,YAAY;wBACjB,YAAY,EAAE,YAAY;wBAC1B,QAAQ,EAAE,YAAY;wBACtB,QAAQ,EAAE,YAAY;wBACtB,IAAI,EAAE,IAAI;wBACV,GAAG,EAAE,gCAAgC;wBACrC,QAAQ,EAAE,SAAkB;wBAC5B,QAAQ,EAAE,KAAK;wBACf,QAAQ,EAAE,IAAI;wBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;wBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;qBACpC,CAAC;aACH,CAAC;YAEF,WAAW,GAAG;gBACZ,IAAI,EAAE;oBACJ,MAAM,EAAE,UAAU;oBAClB,SAAS,EAAE,UAAU;oBACrB,KAAK,EAAE,mBAAmB;oBAC1B,IAAI,EAAE,aAAa;oBACnB,IAAI,EAAE,aAAa;oBACnB,IAAI,EAAE,YAAY;iBACnB;aACF,CAAC;YAEF,eAAe,CAAC,aAAa,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAE3D,MAAM;YACN,MAAM,IAAA,0CAAuB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAEhF,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACzD,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,SAAS;aACjB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,6CAA6C,EAAE,GAAS,EAAE;YAC3D,UAAU;YACV,MAAM,MAAM,GAAG,SAAS,CAAC;YACzB,MAAM,UAAU,GAAG;gBACjB;oBACE,EAAE,EAAE,QAAQ;oBACZ,MAAM,EAAE,SAAS;oBACjB,GAAG,EAAE,YAAY;oBACjB,YAAY,EAAE,YAAY;oBAC1B,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,YAAY;oBACtB,IAAI,EAAE,IAAI;oBACV,GAAG,EAAE,gCAAgC;oBACrC,QAAQ,EAAE,SAAkB;oBAC5B,QAAQ,EAAE,KAAK;oBACf,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACpC;aACF,CAAC;YAEF,WAAW,GAAG;gBACZ,MAAM,EAAE,EAAE,MAAM,EAAE;gBAClB,IAAI,EAAE;oBACJ,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,SAAS;oBACpB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;aACF,CAAC;YAEF,eAAe,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAEnE,MAAM;YACN,MAAM,IAAA,iDAA8B,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAEvF,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC1E,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,MAAM,EAAE,UAAU;aACnB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,qCAAqC,EAAE,GAAS,EAAE;YACnD,UAAU;YACV,MAAM,MAAM,GAAG,SAAS,CAAC;YACzB,MAAM,UAAU,GAAG;gBACjB;oBACE,EAAE,EAAE,QAAQ;oBACZ,MAAM,EAAE,SAAS;oBACjB,GAAG,EAAE,YAAY;oBACjB,YAAY,EAAE,YAAY;oBAC1B,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,YAAY;oBACtB,IAAI,EAAE,IAAI;oBACV,GAAG,EAAE,gCAAgC;oBACrC,QAAQ,EAAE,MAAe;oBACzB,QAAQ,EAAE,IAAI;oBACd,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACpC;aACF,CAAC;YAEF,WAAW,GAAG;gBACZ,KAAK,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE;gBAC5B,IAAI,EAAE;oBACJ,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,SAAS;oBACpB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;aACF,CAAC;YAEF,eAAe,CAAC,aAAa,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAE5D,MAAM;YACN,MAAM,IAAA,0CAAuB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAEhF,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;YACtE,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,MAAM,EAAE,UAAU;aACnB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,sCAAsC,EAAE,GAAS,EAAE;YACpD,UAAU;YACV,MAAM,OAAO,GAAG,UAAU,CAAC;YAC3B,MAAM,UAAU,GAAG;gBACjB;oBACE,EAAE,EAAE,QAAQ;oBACZ,MAAM,EAAE,SAAS;oBACjB,GAAG,EAAE,YAAY;oBACjB,YAAY,EAAE,YAAY;oBAC1B,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,YAAY;oBACtB,IAAI,EAAE,IAAI;oBACV,GAAG,EAAE,gCAAgC;oBACrC,QAAQ,EAAE,OAAgB;oBAC1B,QAAQ,EAAE,IAAI;oBACd,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACpC;aACF,CAAC;YAEF,WAAW,GAAG;gBACZ,KAAK,EAAE,EAAE,OAAO,EAAE;gBAClB,IAAI,EAAE;oBACJ,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,SAAS;oBACpB,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;iBAClB;aACF,CAAC;YAEF,eAAe,CAAC,cAAc,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAE7D,MAAM;YACN,MAAM,IAAA,2CAAwB,EAAC,WAAsB,EAAE,YAAwB,CAAC,CAAC;YAEjF,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YACrE,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,MAAM,EAAE,UAAU;aACnB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAOL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\imagesController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { \n  uploadImageController,\n  getImageByIdController,\n  listImagesController,\n  updateImageController,\n  deleteImageController,\n  getImageStatsController,\n  getUserProfileImagesController,\n  getPostImagesController,\n  getEventImagesController\n} from '../controllers/imagesController';\nimport { ImageService } from '../services/imageService';\n\n// Mock the imagesModel\njest.mock('../models/imagesModel');\nconst mockImagesModel = require('../models/imagesModel');\n\ndescribe('ImagesController', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockStatus: jest.Mock;\n  let mockJson: jest.Mock;\n\n  beforeEach(() => {\n    mockStatus = jest.fn().mockReturnThis();\n    mockJson = jest.fn().mockReturnThis();\n    mockResponse = {\n      status: mockStatus,\n      json: mockJson\n    };\n    jest.clearAllMocks();\n  });\n\n  describe('uploadImageController', () => {\n    it('should upload image successfully', async () => {\n      // Arrange\n      const userId = 'user123';\n      const mockFile = {\n        fieldname: 'image',\n        originalname: 'test.jpg',\n        encoding: '7bit',\n        mimetype: 'image/jpeg',\n        buffer: Buffer.from('test image'),\n        size: 1024,\n        stream: {} as any,\n        destination: '',\n        filename: 'test.jpg',\n        path: ''\n      };\n\n      const mockUploadResult = {\n        id: 'image-1',\n        userId: 'user123',\n        key: 'test-image-key',\n        originalName: 'test.jpg',\n        fileName: 'test.jpg',\n        mimetype: 'image/jpeg',\n        size: 1024,\n        url: 'https://example.com/test.jpg',\n        category: 'profile' as const,\n        isPublic: false,\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      mockRequest = {\n        user: { \n          userId: userId,\n          userEmail: userId,\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        },\n        file: mockFile,\n        body: { category: 'profile' }\n      };\n\n      mockImagesModel.uploadImage.mockResolvedValue(mockUploadResult);\n\n      // Act\n      await uploadImageController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockImagesModel.uploadImage).toHaveBeenCalledWith(mockFile, userId, 'profile', {\n        description: '',\n        tags: [],\n        isPublic: true\n      });\n      expect(mockStatus).toHaveBeenCalledWith(201);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        message: 'Imagen subida exitosamente',\n        image: mockUploadResult\n      });\n    });\n\n    it('should return error when no file provided', async () => {\n      // Arrange\n      const userId = 'user123';\n      mockRequest = {\n        user: { \n          userId: userId,\n          userEmail: userId,\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        },\n        file: undefined,\n        body: { category: 'profile' }\n      };\n\n      // Act\n      await uploadImageController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        error: 'No se proporcionó ningún archivo'\n      });\n    });\n\n    it('should return error when user is not authenticated', async () => {\n      // Arrange\n      mockRequest = {\n        user: undefined,\n        file: { \n          fieldname: 'image',\n          originalname: 'test.jpg',\n          encoding: '7bit',\n          mimetype: 'image/jpeg',\n          buffer: Buffer.from('test'),\n          size: 1024,\n          stream: {} as any,\n          destination: '',\n          filename: 'test.jpg',\n          path: ''\n        },\n        body: { category: 'profile' }\n      };\n\n      // Act\n      await uploadImageController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(401);\n      expect(mockJson).toHaveBeenCalledWith({\n        error: 'Usuario no autenticado'\n      });\n    });\n\n    it('should handle service errors', async () => {\n      // Arrange\n      const userId = 'user123';\n      const mockFile = {\n        fieldname: 'image',\n        originalname: 'test.jpg',\n        encoding: '7bit',\n        mimetype: 'image/jpeg',\n        buffer: Buffer.from('test image'),\n        size: 1024,\n        stream: {} as any,\n        destination: '',\n        filename: 'test.jpg',\n        path: ''\n      };\n\n      mockRequest = {\n        user: { \n          userId: userId,\n          userEmail: userId,\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        },\n        file: mockFile,\n        body: { category: 'profile' }\n      };\n\n      mockImagesModel.uploadImage.mockRejectedValue(new Error('Upload failed'));\n\n      // Act\n      await uploadImageController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(500);\n      expect(mockJson).toHaveBeenCalledWith({\n        error: 'Error al subir imagen',\n        details: 'Upload failed'\n      });\n    });\n  });\n\n  describe('getImageByIdController', () => {\n    it('should get image by id successfully', async () => {\n      // Arrange\n      const imageId = 'image123';\n      const mockImage = {\n        id: imageId,\n        userId: 'user123',\n        key: 'test-image-key',\n        originalName: 'test.jpg',\n        fileName: 'test.jpg',\n        mimetype: 'image/jpeg',\n        size: 1024,\n        url: 'https://example.com/test.jpg',\n        category: 'profile' as const,\n        isPublic: false,\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      mockRequest = {\n        params: { imageId },\n        user: { \n          userId: 'user123',\n          userEmail: 'user123',\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockImagesModel.getImageById.mockResolvedValue(mockImage);\n\n      // Act\n      await getImageByIdController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockImagesModel.getImageById).toHaveBeenCalledWith(imageId);\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        image: mockImage\n      });\n    });\n\n    it('should return 404 when image not found', async () => {\n      // Arrange\n      const imageId = 'nonexistent';\n      mockRequest = {\n        params: { imageId },\n        user: { \n          userId: 'user123',\n          userEmail: 'user123',\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockImagesModel.getImageById.mockResolvedValue(null);\n\n      // Act\n      await getImageByIdController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(404);\n      expect(mockJson).toHaveBeenCalledWith({\n        error: 'Imagen no encontrada'\n      });\n    });\n  });\n\n  describe('listImagesController', () => {\n    it('should list images successfully', async () => {\n      // Arrange\n      const mockImages = [\n        {\n          id: 'image1',\n          userId: 'user123',\n          key: 'image1-key',\n          originalName: 'image1.jpg',\n          fileName: 'image1.jpg',\n          mimetype: 'image/jpeg',\n          size: 1024,\n          url: 'https://example.com/image1.jpg',\n          category: 'profile' as const,\n          isPublic: false,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        },\n        {\n          id: 'image2',\n          userId: 'user123',\n          key: 'image2-key',\n          originalName: 'image2.jpg',\n          fileName: 'image2.jpg',\n          mimetype: 'image/jpeg',\n          size: 2048,\n          url: 'https://example.com/image2.jpg',\n          category: 'post' as const,\n          isPublic: true,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      ];\n\n      mockRequest = {\n        query: { page: '1', limit: '10' },\n        user: { \n          userId: 'user123',\n          userEmail: 'user123',\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockImagesModel.listImages.mockResolvedValue({\n        images: mockImages,\n        total: 2,\n        page: 1,\n        totalPages: 1,\n        hasNext: false,\n        hasPrev: false\n      });\n\n      // Act\n      await listImagesController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockImagesModel.listImages).toHaveBeenCalledWith({\n        limit: 10\n      });\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        images: {\n          images: mockImages,\n          total: 2,\n          page: 1,\n          totalPages: 1,\n          hasNext: false,\n          hasPrev: false\n        },\n        total: undefined,\n        filters: {\n          limit: 10\n        }\n      });\n    });\n  });\n\n  describe('updateImageController', () => {\n    it('should update image successfully', async () => {\n      // Arrange\n      const imageId = 'image123';\n      const updateData = {\n        description: 'Updated description',\n        tags: ['tag1', 'tag2'],\n        isPublic: false\n      };\n\n      const mockUpdatedImage = {\n        id: imageId,\n        userId: 'user123',\n        key: 'test-image-key',\n        originalName: 'test.jpg',\n        fileName: 'test.jpg',\n        mimetype: 'image/jpeg',\n        size: 1024,\n        url: 'https://example.com/test.jpg',\n        category: 'profile' as const,\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        ...updateData\n      };\n\n      mockRequest = {\n        params: { imageId },\n        body: updateData,\n        user: { \n          userId: 'user123',\n          userEmail: 'user123',\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockImagesModel.getImageById.mockResolvedValue({\n        id: imageId,\n        userId: 'user123',\n        key: 'test-image-key',\n        originalName: 'test.jpg',\n        fileName: 'test.jpg',\n        mimetype: 'image/jpeg',\n        size: 1024,\n        url: 'https://example.com/test.jpg',\n        category: 'profile' as const,\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n      mockImagesModel.updateImage.mockResolvedValue(mockUpdatedImage);\n\n      // Act\n      await updateImageController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockImagesModel.updateImage).toHaveBeenCalledWith(imageId, updateData);\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        message: 'Imagen actualizada exitosamente',\n        image: mockUpdatedImage\n      });\n    });\n  });\n\n  describe('deleteImageController', () => {\n    it('should delete image successfully', async () => {\n      // Arrange\n      const imageId = 'image123';\n      mockRequest = {\n        params: { imageId },\n        user: { \n          userId: 'user123',\n          userEmail: 'user123',\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockImagesModel.deleteImage.mockResolvedValue(true);\n\n      // Act\n      await deleteImageController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockImagesModel.deleteImage).toHaveBeenCalledWith(imageId, 'user123');\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        message: 'Imagen eliminada exitosamente'\n      });\n    });\n  });\n\n  describe('getImageStatsController', () => {\n    it('should get image stats successfully', async () => {\n      // Arrange\n      const mockStats = {\n        totalImages: 100,\n        totalSize: 1024000,\n        averageSize: 10240,\n        imagesByCategory: {\n          profile: 20,\n          post: 30,\n          event: 25,\n          gallery: 25\n        },\n        imagesByUser: { 'user123': 50, 'user456': 50 },\n        recentUploads: [{\n          id: 'image1',\n          userId: 'user123',\n          key: 'image1-key',\n          originalName: 'image1.jpg',\n          fileName: 'image1.jpg',\n          mimetype: 'image/jpeg',\n          size: 1024,\n          url: 'https://example.com/image1.jpg',\n          category: 'profile' as const,\n          isPublic: false,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }]\n      };\n\n      mockRequest = {\n        user: { \n          userId: 'admin123',\n          userEmail: 'admin123',\n          email: 'admin@example.com',\n          role: 'adminSenior',\n          roll: 'adminSenior',\n          name: 'Admin User'\n        }\n      };\n\n      mockImagesModel.getImageStats.mockResolvedValue(mockStats);\n\n      // Act\n      await getImageStatsController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockImagesModel.getImageStats).toHaveBeenCalled();\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        stats: mockStats\n      });\n    });\n  });\n\n  describe('getUserProfileImagesController', () => {\n    it('should get user profile images successfully', async () => {\n      // Arrange\n      const userId = 'user123';\n      const mockImages = [\n        {\n          id: 'image1',\n          userId: 'user123',\n          key: 'image1-key',\n          originalName: 'image1.jpg',\n          fileName: 'image1.jpg',\n          mimetype: 'image/jpeg',\n          size: 1024,\n          url: 'https://example.com/image1.jpg',\n          category: 'profile' as const,\n          isPublic: false,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      ];\n\n      mockRequest = {\n        params: { userId },\n        user: { \n          userId: 'user123',\n          userEmail: 'user123',\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockImagesModel.getUserProfileImages.mockResolvedValue(mockImages);\n\n      // Act\n      await getUserProfileImagesController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockImagesModel.getUserProfileImages).toHaveBeenCalledWith(userId);\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        images: mockImages\n      });\n    });\n  });\n\n  describe('getPostImagesController', () => {\n    it('should get post images successfully', async () => {\n      // Arrange\n      const postId = 'post123';\n      const mockImages = [\n        {\n          id: 'image1',\n          userId: 'user123',\n          key: 'image1-key',\n          originalName: 'image1.jpg',\n          fileName: 'image1.jpg',\n          mimetype: 'image/jpeg',\n          size: 1024,\n          url: 'https://example.com/image1.jpg',\n          category: 'post' as const,\n          isPublic: true,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      ];\n\n      mockRequest = {\n        query: { userId: 'user123' },\n        user: { \n          userId: 'user123',\n          userEmail: 'user123',\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockImagesModel.getPostImages.mockResolvedValue(mockImages);\n\n      // Act\n      await getPostImagesController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockImagesModel.getPostImages).toHaveBeenCalledWith('user123');\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        images: mockImages\n      });\n    });\n  });\n\n  describe('getEventImagesController', () => {\n    it('should get event images successfully', async () => {\n      // Arrange\n      const eventId = 'event123';\n      const mockImages = [\n        {\n          id: 'image1',\n          userId: 'user123',\n          key: 'image1-key',\n          originalName: 'image1.jpg',\n          fileName: 'image1.jpg',\n          mimetype: 'image/jpeg',\n          size: 1024,\n          url: 'https://example.com/image1.jpg',\n          category: 'event' as const,\n          isPublic: true,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      ];\n\n      mockRequest = {\n        query: { eventId },\n        user: { \n          userId: 'user123',\n          userEmail: 'user123',\n          email: 'test@example.com',\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockImagesModel.getEventImages.mockResolvedValue(mockImages);\n\n      // Act\n      await getEventImagesController(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockImagesModel.getEventImages).toHaveBeenCalledWith(eventId);\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        images: mockImages\n      });\n    });\n  });\n\n\n\n\n\n\n}); "],"version":3}