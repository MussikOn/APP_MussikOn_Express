1887b2ba36b107b7219a57181ac2887a
"use strict";

/* istanbul ignore next */
function cov_1yhl2vu5it() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\cacheService.ts";
  var hash = "4f434f3360f56e2383d760ae35d03d117781cf3d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\cacheService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 53
        }
      },
      "14": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 50
        }
      },
      "15": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "16": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 31
        }
      },
      "17": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 34
        }
      },
      "18": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 31
        }
      },
      "19": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "20": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 55
        }
      },
      "21": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 37
        }
      },
      "22": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 57,
          column: 11
        }
      },
      "23": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "24": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 51,
          column: 17
        }
      },
      "25": {
        start: {
          line: 32,
          column: 34
        },
        end: {
          line: 32,
          column: 52
        }
      },
      "26": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 37,
          column: 23
        }
      },
      "27": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 41,
          column: 23
        }
      },
      "28": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 48
        }
      },
      "29": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 40,
          column: 133
        }
      },
      "30": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 45,
          column: 23
        }
      },
      "31": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 43,
          column: 49
        }
      },
      "32": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 44,
          column: 129
        }
      },
      "33": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 47
        }
      },
      "34": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 142
        }
      },
      "35": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 43
        }
      },
      "36": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 133
        }
      },
      "37": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 39
        }
      },
      "38": {
        start: {
          line: 60,
          column: 26
        },
        end: {
          line: 60,
          column: 47
        }
      },
      "39": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 36
        }
      },
      "40": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "41": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 95,
          column: 13
        }
      },
      "42": {
        start: {
          line: 66,
          column: 32
        },
        end: {
          line: 66,
          column: 56
        }
      },
      "43": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 87,
          column: 17
        }
      },
      "44": {
        start: {
          line: 68,
          column: 33
        },
        end: {
          line: 68,
          column: 62
        }
      },
      "45": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 76,
          column: 21
        }
      },
      "46": {
        start: {
          line: 70,
          column: 39
        },
        end: {
          line: 70,
          column: 55
        }
      },
      "47": {
        start: {
          line: 71,
          column: 24
        },
        end: {
          line: 74,
          column: 25
        }
      },
      "48": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 72,
          column: 59
        }
      },
      "49": {
        start: {
          line: 73,
          column: 28
        },
        end: {
          line: 73,
          column: 40
        }
      },
      "50": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 43
        }
      },
      "51": {
        start: {
          line: 80,
          column: 33
        },
        end: {
          line: 80,
          column: 56
        }
      },
      "52": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 86,
          column: 21
        }
      },
      "53": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 41
        }
      },
      "54": {
        start: {
          line: 84,
          column: 25
        },
        end: {
          line: 86,
          column: 21
        }
      },
      "55": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 85,
          column: 51
        }
      },
      "56": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 28
        }
      },
      "57": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 93,
          column: 19
        }
      },
      "58": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 28
        }
      },
      "59": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "60": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "61": {
        start: {
          line: 101,
          column: 32
        },
        end: {
          line: 101,
          column: 64
        }
      },
      "62": {
        start: {
          line: 102,
          column: 28
        },
        end: {
          line: 102,
          column: 58
        }
      },
      "63": {
        start: {
          line: 103,
          column: 34
        },
        end: {
          line: 107,
          column: 17
        }
      },
      "64": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 117,
          column: 17
        }
      },
      "65": {
        start: {
          line: 109,
          column: 20
        },
        end: {
          line: 109,
          column: 84
        }
      },
      "66": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 55
        }
      },
      "67": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 116,
          column: 35
        }
      },
      "68": {
        start: {
          line: 115,
          column: 24
        },
        end: {
          line: 115,
          column: 51
        }
      },
      "69": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 120,
          column: 19
        }
      },
      "70": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 125,
          column: 19
        }
      },
      "71": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "72": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "73": {
        start: {
          line: 132,
          column: 32
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "74": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 138,
          column: 17
        }
      },
      "75": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 50
        }
      },
      "76": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 137,
          column: 47
        }
      },
      "77": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 141,
          column: 19
        }
      },
      "78": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 146,
          column: 19
        }
      },
      "79": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 177,
          column: 11
        }
      },
      "80": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "81": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 153,
          column: 56
        }
      },
      "82": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "83": {
        start: {
          line: 155,
          column: 33
        },
        end: {
          line: 155,
          column: 63
        }
      },
      "84": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 158,
          column: 21
        }
      },
      "85": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 157,
          column: 54
        }
      },
      "86": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 166,
          column: 21
        }
      },
      "87": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 165,
          column: 25
        }
      },
      "88": {
        start: {
          line: 164,
          column: 28
        },
        end: {
          line: 164,
          column: 51
        }
      },
      "89": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 170,
          column: 19
        }
      },
      "90": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 175,
          column: 19
        }
      },
      "91": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      },
      "92": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "93": {
        start: {
          line: 182,
          column: 32
        },
        end: {
          line: 182,
          column: 56
        }
      },
      "94": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 189,
          column: 17
        }
      },
      "95": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 184,
          column: 68
        }
      },
      "96": {
        start: {
          line: 187,
          column: 33
        },
        end: {
          line: 187,
          column: 56
        }
      },
      "97": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 188,
          column: 57
        }
      },
      "98": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 194,
          column: 19
        }
      },
      "99": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 29
        }
      },
      "100": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 64
        }
      },
      "101": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 221,
          column: 11
        }
      },
      "102": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "103": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "104": {
        start: {
          line: 206,
          column: 33
        },
        end: {
          line: 206,
          column: 63
        }
      },
      "105": {
        start: {
          line: 207,
          column: 33
        },
        end: {
          line: 207,
          column: 58
        }
      },
      "106": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 56
        }
      },
      "107": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 212,
          column: 73
        }
      },
      "108": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 218,
          column: 19
        }
      },
      "109": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 55
        }
      },
      "110": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 237,
          column: 11
        }
      },
      "111": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "112": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "113": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 50
        }
      },
      "114": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 45
        }
      },
      "115": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 119
        }
      },
      "116": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 235,
          column: 19
        }
      },
      "117": {
        start: {
          line: 240,
          column: 0
        },
        end: {
          line: 240,
          column: 36
        }
      },
      "118": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 242,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 15
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 21
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 22
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 27
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 28,
            column: 47
          },
          end: {
            line: 28,
            column: 48
          }
        },
        loc: {
          start: {
            line: 28,
            column: 60
          },
          end: {
            line: 57,
            column: 9
          }
        },
        line: 28
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 38,
            column: 45
          },
          end: {
            line: 38,
            column: 46
          }
        },
        loc: {
          start: {
            line: 38,
            column: 51
          },
          end: {
            line: 41,
            column: 21
          }
        },
        line: 38
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 42,
            column: 43
          },
          end: {
            line: 42,
            column: 44
          }
        },
        loc: {
          start: {
            line: 42,
            column: 54
          },
          end: {
            line: 45,
            column: 21
          }
        },
        line: 42
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 59
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 21
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 63
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 64,
            column: 47
          },
          end: {
            line: 64,
            column: 48
          }
        },
        loc: {
          start: {
            line: 64,
            column: 60
          },
          end: {
            line: 96,
            column: 9
          }
        },
        line: 64
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 23
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 98
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 99,
            column: 50
          },
          end: {
            line: 99,
            column: 51
          }
        },
        loc: {
          start: {
            line: 99,
            column: 86
          },
          end: {
            line: 127,
            column: 9
          }
        },
        line: 99
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 114,
            column: 31
          },
          end: {
            line: 114,
            column: 32
          }
        },
        loc: {
          start: {
            line: 114,
            column: 37
          },
          end: {
            line: 116,
            column: 21
          }
        },
        line: 114
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 24
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 129
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 130,
            column: 47
          },
          end: {
            line: 130,
            column: 48
          }
        },
        loc: {
          start: {
            line: 130,
            column: 60
          },
          end: {
            line: 148,
            column: 9
          }
        },
        line: 130
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 18
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 150
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 151,
            column: 47
          },
          end: {
            line: 151,
            column: 48
          }
        },
        loc: {
          start: {
            line: 151,
            column: 60
          },
          end: {
            line: 177,
            column: 9
          }
        },
        line: 151
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        loc: {
          start: {
            line: 179,
            column: 24
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 179
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 180,
            column: 47
          },
          end: {
            line: 180,
            column: 48
          }
        },
        loc: {
          start: {
            line: 180,
            column: 60
          },
          end: {
            line: 197,
            column: 9
          }
        },
        line: 180
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 25
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 199
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 15
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 202
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 203,
            column: 47
          },
          end: {
            line: 203,
            column: 48
          }
        },
        loc: {
          start: {
            line: 203,
            column: 60
          },
          end: {
            line: 221,
            column: 9
          }
        },
        line: 203
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 17
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 223
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 224,
            column: 47
          },
          end: {
            line: 224,
            column: 48
          }
        },
        loc: {
          start: {
            line: 224,
            column: 60
          },
          end: {
            line: 237,
            column: 9
          }
        },
        line: 224
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "6": {
        loc: {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        }, {
          start: {
            line: 48,
            column: 21
          },
          end: {
            line: 51,
            column: 17
          }
        }],
        line: 31
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 26
          },
          end: {
            line: 60,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 26
          },
          end: {
            line: 60,
            column: 32
          }
        }, {
          start: {
            line: 60,
            column: 36
          },
          end: {
            line: 60,
            column: 47
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        }, {
          start: {
            line: 78,
            column: 21
          },
          end: {
            line: 87,
            column: 17
          }
        }],
        line: 67
      },
      "9": {
        loc: {
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 67,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 67,
            column: 36
          }
        }, {
          start: {
            line: 67,
            column: 40
          },
          end: {
            line: 67,
            column: 61
          }
        }],
        line: 67
      },
      "10": {
        loc: {
          start: {
            line: 69,
            column: 20
          },
          end: {
            line: 76,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 20
          },
          end: {
            line: 76,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "11": {
        loc: {
          start: {
            line: 71,
            column: 24
          },
          end: {
            line: 74,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 24
          },
          end: {
            line: 74,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "12": {
        loc: {
          start: {
            line: 81,
            column: 20
          },
          end: {
            line: 86,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 20
          },
          end: {
            line: 86,
            column: 21
          }
        }, {
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 86,
            column: 21
          }
        }],
        line: 81
      },
      "13": {
        loc: {
          start: {
            line: 81,
            column: 24
          },
          end: {
            line: 81,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 24
          },
          end: {
            line: 81,
            column: 28
          }
        }, {
          start: {
            line: 81,
            column: 32
          },
          end: {
            line: 81,
            column: 53
          }
        }],
        line: 81
      },
      "14": {
        loc: {
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 86,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 86,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "15": {
        loc: {
          start: {
            line: 99,
            column: 72
          },
          end: {
            line: 99,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 99,
            column: 82
          },
          end: {
            line: 99,
            column: 84
          }
        }],
        line: 99
      },
      "16": {
        loc: {
          start: {
            line: 102,
            column: 28
          },
          end: {
            line: 102,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 28
          },
          end: {
            line: 102,
            column: 39
          }
        }, {
          start: {
            line: 102,
            column: 43
          },
          end: {
            line: 102,
            column: 58
          }
        }],
        line: 102
      },
      "17": {
        loc: {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        }, {
          start: {
            line: 111,
            column: 21
          },
          end: {
            line: 117,
            column: 17
          }
        }],
        line: 108
      },
      "18": {
        loc: {
          start: {
            line: 108,
            column: 20
          },
          end: {
            line: 108,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 20
          },
          end: {
            line: 108,
            column: 36
          }
        }, {
          start: {
            line: 108,
            column: 40
          },
          end: {
            line: 108,
            column: 61
          }
        }],
        line: 108
      },
      "19": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        }, {
          start: {
            line: 136,
            column: 21
          },
          end: {
            line: 138,
            column: 17
          }
        }],
        line: 133
      },
      "20": {
        loc: {
          start: {
            line: 133,
            column: 20
          },
          end: {
            line: 133,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 20
          },
          end: {
            line: 133,
            column: 36
          }
        }, {
          start: {
            line: 133,
            column: 40
          },
          end: {
            line: 133,
            column: 61
          }
        }],
        line: 133
      },
      "21": {
        loc: {
          start: {
            line: 154,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        }, {
          start: {
            line: 160,
            column: 21
          },
          end: {
            line: 167,
            column: 17
          }
        }],
        line: 154
      },
      "22": {
        loc: {
          start: {
            line: 154,
            column: 20
          },
          end: {
            line: 154,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 20
          },
          end: {
            line: 154,
            column: 36
          }
        }, {
          start: {
            line: 154,
            column: 40
          },
          end: {
            line: 154,
            column: 61
          }
        }],
        line: 154
      },
      "23": {
        loc: {
          start: {
            line: 156,
            column: 20
          },
          end: {
            line: 158,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 20
          },
          end: {
            line: 158,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "24": {
        loc: {
          start: {
            line: 163,
            column: 24
          },
          end: {
            line: 165,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 24
          },
          end: {
            line: 165,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "25": {
        loc: {
          start: {
            line: 163,
            column: 43
          },
          end: {
            line: 163,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 43
          },
          end: {
            line: 163,
            column: 49
          }
        }, {
          start: {
            line: 163,
            column: 53
          },
          end: {
            line: 163,
            column: 64
          }
        }],
        line: 163
      },
      "26": {
        loc: {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 189,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 189,
            column: 17
          }
        }, {
          start: {
            line: 186,
            column: 21
          },
          end: {
            line: 189,
            column: 17
          }
        }],
        line: 183
      },
      "27": {
        loc: {
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 183,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 183,
            column: 36
          }
        }, {
          start: {
            line: 183,
            column: 40
          },
          end: {
            line: 183,
            column: 61
          }
        }],
        line: 183
      },
      "28": {
        loc: {
          start: {
            line: 188,
            column: 27
          },
          end: {
            line: 188,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 27
          },
          end: {
            line: 188,
            column: 31
          }
        }, {
          start: {
            line: 188,
            column: 35
          },
          end: {
            line: 188,
            column: 56
          }
        }],
        line: 188
      },
      "29": {
        loc: {
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        }, {
          start: {
            line: 211,
            column: 21
          },
          end: {
            line: 213,
            column: 17
          }
        }],
        line: 205
      },
      "30": {
        loc: {
          start: {
            line: 205,
            column: 20
          },
          end: {
            line: 205,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 20
          },
          end: {
            line: 205,
            column: 36
          }
        }, {
          start: {
            line: 205,
            column: 40
          },
          end: {
            line: 205,
            column: 61
          }
        }],
        line: 205
      },
      "31": {
        loc: {
          start: {
            line: 226,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "32": {
        loc: {
          start: {
            line: 226,
            column: 20
          },
          end: {
            line: 226,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 20
          },
          end: {
            line: 226,
            column: 36
          }
        }, {
          start: {
            line: 226,
            column: 40
          },
          end: {
            line: 226,
            column: 50
          }
        }, {
          start: {
            line: 226,
            column: 54
          },
          end: {
            line: 226,
            column: 75
          }
        }],
        line: 226
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0]
    },
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\cacheService.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\cacheService.ts"],
      sourcesContent: ["import { logger } from './loggerService';\r\n\r\nexport interface CacheOptions {\r\n  ttl?: number; // Time to live in seconds\r\n  prefix?: string;\r\n}\r\n\r\nexport interface CacheData<T = any> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number;\r\n}\r\n\r\nexport class CacheService {\r\n  private static instance: CacheService;\r\n  private redis: any;\r\n  private isConnected: boolean = false;\r\n  private readonly defaultTTL: number = 3600; // 1 hour\r\n  private readonly prefix: string = 'mussikon:';\r\n\r\n  private constructor() {\r\n    this.initializeRedis();\r\n  }\r\n\r\n  public static getInstance(): CacheService {\r\n    if (!CacheService.instance) {\r\n      CacheService.instance = new CacheService();\r\n    }\r\n    return CacheService.instance;\r\n  }\r\n\r\n  private async initializeRedis(): Promise<void> {\r\n    try {\r\n      // Use Redis if available, otherwise fallback to in-memory cache\r\n      if (process.env.REDIS_URL) {\r\n        const Redis = require('ioredis');\r\n        this.redis = new Redis(process.env.REDIS_URL, {\r\n          retryDelayOnFailover: 100,\r\n          maxRetriesPerRequest: 3,\r\n          lazyConnect: true,\r\n        });\r\n\r\n        this.redis.on('connect', () => {\r\n          this.isConnected = true;\r\n          logger.info('Redis cache connected successfully', { metadata: { service: 'CacheService' } });\r\n        });\r\n\r\n        this.redis.on('error', (error: Error) => {\r\n          this.isConnected = false;\r\n          logger.error('Redis connection error', error, { metadata: { service: 'CacheService' } });\r\n        });\r\n\r\n        await this.redis.connect();\r\n      } else {\r\n        logger.warn('Redis URL not configured, using in-memory cache', { metadata: { service: 'CacheService' } });\r\n        this.redis = new Map();\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to initialize cache service', error as Error, { metadata: { service: 'CacheService' } });\r\n      this.redis = new Map(); // Fallback to in-memory\r\n    }\r\n  }\r\n\r\n  private getKey(key: string, prefix?: string): string {\r\n    const keyPrefix = prefix || this.prefix;\r\n    return `${keyPrefix}${key}`;\r\n  }\r\n\r\n  public async get<T>(key: string, prefix?: string): Promise<T | null> {\r\n    try {\r\n      const fullKey = this.getKey(key, prefix);\r\n      \r\n      if (this.isConnected && process.env.REDIS_URL) {\r\n        const data = await this.redis.get(fullKey);\r\n        if (data) {\r\n          const parsed: CacheData<T> = JSON.parse(data);\r\n          if (this.isExpired(parsed)) {\r\n            await this.delete(key, prefix);\r\n            return null;\r\n          }\r\n          return parsed.data;\r\n        }\r\n      } else {\r\n        // In-memory cache\r\n        const data = this.redis.get(fullKey);\r\n        if (data && !this.isExpired(data)) {\r\n          return data.data;\r\n        } else if (data) {\r\n          this.redis.delete(fullKey);\r\n        }\r\n      }\r\n      \r\n      return null;\r\n    } catch (error) {\r\n      logger.error('Error getting cache data', error as Error, { \r\n        metadata: { service: 'CacheService', key, prefix } \r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async set<T>(key: string, data: T, options: CacheOptions = {}): Promise<void> {\r\n    try {\r\n      const fullKey = this.getKey(key, options.prefix);\r\n      const ttl = options.ttl || this.defaultTTL;\r\n      const cacheData: CacheData<T> = {\r\n        data,\r\n        timestamp: Date.now(),\r\n        ttl: ttl * 1000, // Convert to milliseconds\r\n      };\r\n\r\n      if (this.isConnected && process.env.REDIS_URL) {\r\n        await this.redis.setex(fullKey, ttl, JSON.stringify(cacheData));\r\n      } else {\r\n        // In-memory cache with expiration\r\n        this.redis.set(fullKey, cacheData);\r\n        setTimeout(() => {\r\n          this.redis.delete(fullKey);\r\n        }, ttl * 1000);\r\n      }\r\n\r\n      logger.debug('Cache data set successfully', { \r\n        metadata: { service: 'CacheService', key: fullKey, ttl } \r\n      });\r\n    } catch (error) {\r\n      logger.error('Error setting cache data', error as Error, { \r\n        metadata: { service: 'CacheService', key, prefix: options.prefix } \r\n      });\r\n    }\r\n  }\r\n\r\n  public async delete(key: string, prefix?: string): Promise<void> {\r\n    try {\r\n      const fullKey = this.getKey(key, prefix);\r\n      \r\n      if (this.isConnected && process.env.REDIS_URL) {\r\n        await this.redis.del(fullKey);\r\n      } else {\r\n        this.redis.delete(fullKey);\r\n      }\r\n\r\n      logger.debug('Cache data deleted successfully', { \r\n        metadata: { service: 'CacheService', key: fullKey } \r\n      });\r\n    } catch (error) {\r\n      logger.error('Error deleting cache data', error as Error, { \r\n        metadata: { service: 'CacheService', key, prefix } \r\n      });\r\n    }\r\n  }\r\n\r\n  public async clear(prefix?: string): Promise<void> {\r\n    try {\r\n      const pattern = this.getKey('*', prefix);\r\n      \r\n      if (this.isConnected && process.env.REDIS_URL) {\r\n        const keys = await this.redis.keys(pattern);\r\n        if (keys.length > 0) {\r\n          await this.redis.del(...keys);\r\n        }\r\n      } else {\r\n        // In-memory cache clear\r\n        for (const key of this.redis.keys()) {\r\n          if (key.startsWith(prefix || this.prefix)) {\r\n            this.redis.delete(key);\r\n          }\r\n        }\r\n      }\r\n\r\n      logger.info('Cache cleared successfully', { \r\n        metadata: { service: 'CacheService', pattern } \r\n      });\r\n    } catch (error) {\r\n      logger.error('Error clearing cache', error as Error, { \r\n        metadata: { service: 'CacheService', prefix } \r\n      });\r\n    }\r\n  }\r\n\r\n  public async exists(key: string, prefix?: string): Promise<boolean> {\r\n    try {\r\n      const fullKey = this.getKey(key, prefix);\r\n      \r\n      if (this.isConnected && process.env.REDIS_URL) {\r\n        return await this.redis.exists(fullKey) === 1;\r\n      } else {\r\n        const data = this.redis.get(fullKey);\r\n        return data && !this.isExpired(data);\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error checking cache existence', error as Error, { \r\n        metadata: { service: 'CacheService', key, prefix } \r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private isExpired(cacheData: CacheData): boolean {\r\n    return Date.now() - cacheData.timestamp > cacheData.ttl;\r\n  }\r\n\r\n  public async getStats(): Promise<{ hits: number; misses: number; keys: number }> {\r\n    try {\r\n      if (this.isConnected && process.env.REDIS_URL) {\r\n        const info = await this.redis.info('stats');\r\n        const keys = await this.redis.dbsize();\r\n        // Parse Redis info for hits/misses (simplified)\r\n        return { hits: 0, misses: 0, keys };\r\n      } else {\r\n        return { hits: 0, misses: 0, keys: this.redis.size };\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error getting cache stats', error as Error, { \r\n        metadata: { service: 'CacheService' } \r\n      });\r\n      return { hits: 0, misses: 0, keys: 0 };\r\n    }\r\n  }\r\n\r\n  public async disconnect(): Promise<void> {\r\n    try {\r\n      if (this.isConnected && this.redis && this.redis.disconnect) {\r\n        await this.redis.disconnect();\r\n        this.isConnected = false;\r\n        logger.info('Redis cache disconnected', { metadata: { service: 'CacheService' } });\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error disconnecting cache', error as Error, { \r\n        metadata: { service: 'CacheService' } \r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const cacheService = CacheService.getInstance(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4f434f3360f56e2383d760ae35d03d117781cf3d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1yhl2vu5it = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1yhl2vu5it();
var __awaiter =
/* istanbul ignore next */
(cov_1yhl2vu5it().s[0]++,
/* istanbul ignore next */
(cov_1yhl2vu5it().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1yhl2vu5it().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_1yhl2vu5it().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_1yhl2vu5it().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[1]++;
    cov_1yhl2vu5it().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_1yhl2vu5it().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_1yhl2vu5it().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[2]++;
      cov_1yhl2vu5it().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_1yhl2vu5it().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_1yhl2vu5it().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_1yhl2vu5it().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[4]++;
      cov_1yhl2vu5it().s[4]++;
      try {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[5]++;
      cov_1yhl2vu5it().s[7]++;
      try {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[6]++;
      cov_1yhl2vu5it().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_1yhl2vu5it().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_1yhl2vu5it().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_1yhl2vu5it().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_1yhl2vu5it().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_1yhl2vu5it().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_1yhl2vu5it().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1yhl2vu5it().s[13]++;
exports.cacheService = exports.CacheService = void 0;
const loggerService_1 =
/* istanbul ignore next */
(cov_1yhl2vu5it().s[14]++, require("./loggerService"));
class CacheService {
  constructor() {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[7]++;
    cov_1yhl2vu5it().s[15]++;
    this.isConnected = false;
    /* istanbul ignore next */
    cov_1yhl2vu5it().s[16]++;
    this.defaultTTL = 3600; // 1 hour
    /* istanbul ignore next */
    cov_1yhl2vu5it().s[17]++;
    this.prefix = 'mussikon:';
    /* istanbul ignore next */
    cov_1yhl2vu5it().s[18]++;
    this.initializeRedis();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[8]++;
    cov_1yhl2vu5it().s[19]++;
    if (!CacheService.instance) {
      /* istanbul ignore next */
      cov_1yhl2vu5it().b[5][0]++;
      cov_1yhl2vu5it().s[20]++;
      CacheService.instance = new CacheService();
    } else
    /* istanbul ignore next */
    {
      cov_1yhl2vu5it().b[5][1]++;
    }
    cov_1yhl2vu5it().s[21]++;
    return CacheService.instance;
  }
  initializeRedis() {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[9]++;
    cov_1yhl2vu5it().s[22]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[10]++;
      cov_1yhl2vu5it().s[23]++;
      try {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[24]++;
        // Use Redis if available, otherwise fallback to in-memory cache
        if (process.env.REDIS_URL) {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[6][0]++;
          const Redis =
          /* istanbul ignore next */
          (cov_1yhl2vu5it().s[25]++, require('ioredis'));
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[26]++;
          this.redis = new Redis(process.env.REDIS_URL, {
            retryDelayOnFailover: 100,
            maxRetriesPerRequest: 3,
            lazyConnect: true
          });
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[27]++;
          this.redis.on('connect', () => {
            /* istanbul ignore next */
            cov_1yhl2vu5it().f[11]++;
            cov_1yhl2vu5it().s[28]++;
            this.isConnected = true;
            /* istanbul ignore next */
            cov_1yhl2vu5it().s[29]++;
            loggerService_1.logger.info('Redis cache connected successfully', {
              metadata: {
                service: 'CacheService'
              }
            });
          });
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[30]++;
          this.redis.on('error', error => {
            /* istanbul ignore next */
            cov_1yhl2vu5it().f[12]++;
            cov_1yhl2vu5it().s[31]++;
            this.isConnected = false;
            /* istanbul ignore next */
            cov_1yhl2vu5it().s[32]++;
            loggerService_1.logger.error('Redis connection error', error, {
              metadata: {
                service: 'CacheService'
              }
            });
          });
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[33]++;
          yield this.redis.connect();
        } else {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[6][1]++;
          cov_1yhl2vu5it().s[34]++;
          loggerService_1.logger.warn('Redis URL not configured, using in-memory cache', {
            metadata: {
              service: 'CacheService'
            }
          });
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[35]++;
          this.redis = new Map();
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[36]++;
        loggerService_1.logger.error('Failed to initialize cache service', error, {
          metadata: {
            service: 'CacheService'
          }
        });
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[37]++;
        this.redis = new Map(); // Fallback to in-memory
      }
    });
  }
  getKey(key, prefix) {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[13]++;
    const keyPrefix =
    /* istanbul ignore next */
    (cov_1yhl2vu5it().s[38]++,
    /* istanbul ignore next */
    (cov_1yhl2vu5it().b[7][0]++, prefix) ||
    /* istanbul ignore next */
    (cov_1yhl2vu5it().b[7][1]++, this.prefix));
    /* istanbul ignore next */
    cov_1yhl2vu5it().s[39]++;
    return `${keyPrefix}${key}`;
  }
  get(key, prefix) {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[14]++;
    cov_1yhl2vu5it().s[40]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[15]++;
      cov_1yhl2vu5it().s[41]++;
      try {
        const fullKey =
        /* istanbul ignore next */
        (cov_1yhl2vu5it().s[42]++, this.getKey(key, prefix));
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[43]++;
        if (
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[9][0]++, this.isConnected) &&
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[9][1]++, process.env.REDIS_URL)) {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[8][0]++;
          const data =
          /* istanbul ignore next */
          (cov_1yhl2vu5it().s[44]++, yield this.redis.get(fullKey));
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[45]++;
          if (data) {
            /* istanbul ignore next */
            cov_1yhl2vu5it().b[10][0]++;
            const parsed =
            /* istanbul ignore next */
            (cov_1yhl2vu5it().s[46]++, JSON.parse(data));
            /* istanbul ignore next */
            cov_1yhl2vu5it().s[47]++;
            if (this.isExpired(parsed)) {
              /* istanbul ignore next */
              cov_1yhl2vu5it().b[11][0]++;
              cov_1yhl2vu5it().s[48]++;
              yield this.delete(key, prefix);
              /* istanbul ignore next */
              cov_1yhl2vu5it().s[49]++;
              return null;
            } else
            /* istanbul ignore next */
            {
              cov_1yhl2vu5it().b[11][1]++;
            }
            cov_1yhl2vu5it().s[50]++;
            return parsed.data;
          } else
          /* istanbul ignore next */
          {
            cov_1yhl2vu5it().b[10][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[8][1]++;
          // In-memory cache
          const data =
          /* istanbul ignore next */
          (cov_1yhl2vu5it().s[51]++, this.redis.get(fullKey));
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[52]++;
          if (
          /* istanbul ignore next */
          (cov_1yhl2vu5it().b[13][0]++, data) &&
          /* istanbul ignore next */
          (cov_1yhl2vu5it().b[13][1]++, !this.isExpired(data))) {
            /* istanbul ignore next */
            cov_1yhl2vu5it().b[12][0]++;
            cov_1yhl2vu5it().s[53]++;
            return data.data;
          } else {
            /* istanbul ignore next */
            cov_1yhl2vu5it().b[12][1]++;
            cov_1yhl2vu5it().s[54]++;
            if (data) {
              /* istanbul ignore next */
              cov_1yhl2vu5it().b[14][0]++;
              cov_1yhl2vu5it().s[55]++;
              this.redis.delete(fullKey);
            } else
            /* istanbul ignore next */
            {
              cov_1yhl2vu5it().b[14][1]++;
            }
          }
        }
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[56]++;
        return null;
      } catch (error) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[57]++;
        loggerService_1.logger.error('Error getting cache data', error, {
          metadata: {
            service: 'CacheService',
            key,
            prefix
          }
        });
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[58]++;
        return null;
      }
    });
  }
  set(key_1, data_1) {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[16]++;
    cov_1yhl2vu5it().s[59]++;
    return __awaiter(this, arguments, void 0, function* (key, data, options =
    /* istanbul ignore next */
    (cov_1yhl2vu5it().b[15][0]++, {})) {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[17]++;
      cov_1yhl2vu5it().s[60]++;
      try {
        const fullKey =
        /* istanbul ignore next */
        (cov_1yhl2vu5it().s[61]++, this.getKey(key, options.prefix));
        const ttl =
        /* istanbul ignore next */
        (cov_1yhl2vu5it().s[62]++,
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[16][0]++, options.ttl) ||
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[16][1]++, this.defaultTTL));
        const cacheData =
        /* istanbul ignore next */
        (cov_1yhl2vu5it().s[63]++, {
          data,
          timestamp: Date.now(),
          ttl: ttl * 1000 // Convert to milliseconds
        });
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[64]++;
        if (
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[18][0]++, this.isConnected) &&
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[18][1]++, process.env.REDIS_URL)) {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[17][0]++;
          cov_1yhl2vu5it().s[65]++;
          yield this.redis.setex(fullKey, ttl, JSON.stringify(cacheData));
        } else {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[17][1]++;
          cov_1yhl2vu5it().s[66]++;
          // In-memory cache with expiration
          this.redis.set(fullKey, cacheData);
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[67]++;
          setTimeout(() => {
            /* istanbul ignore next */
            cov_1yhl2vu5it().f[18]++;
            cov_1yhl2vu5it().s[68]++;
            this.redis.delete(fullKey);
          }, ttl * 1000);
        }
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[69]++;
        loggerService_1.logger.debug('Cache data set successfully', {
          metadata: {
            service: 'CacheService',
            key: fullKey,
            ttl
          }
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[70]++;
        loggerService_1.logger.error('Error setting cache data', error, {
          metadata: {
            service: 'CacheService',
            key,
            prefix: options.prefix
          }
        });
      }
    });
  }
  delete(key, prefix) {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[19]++;
    cov_1yhl2vu5it().s[71]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[20]++;
      cov_1yhl2vu5it().s[72]++;
      try {
        const fullKey =
        /* istanbul ignore next */
        (cov_1yhl2vu5it().s[73]++, this.getKey(key, prefix));
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[74]++;
        if (
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[20][0]++, this.isConnected) &&
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[20][1]++, process.env.REDIS_URL)) {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[19][0]++;
          cov_1yhl2vu5it().s[75]++;
          yield this.redis.del(fullKey);
        } else {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[19][1]++;
          cov_1yhl2vu5it().s[76]++;
          this.redis.delete(fullKey);
        }
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[77]++;
        loggerService_1.logger.debug('Cache data deleted successfully', {
          metadata: {
            service: 'CacheService',
            key: fullKey
          }
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[78]++;
        loggerService_1.logger.error('Error deleting cache data', error, {
          metadata: {
            service: 'CacheService',
            key,
            prefix
          }
        });
      }
    });
  }
  clear(prefix) {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[21]++;
    cov_1yhl2vu5it().s[79]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[22]++;
      cov_1yhl2vu5it().s[80]++;
      try {
        const pattern =
        /* istanbul ignore next */
        (cov_1yhl2vu5it().s[81]++, this.getKey('*', prefix));
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[82]++;
        if (
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[22][0]++, this.isConnected) &&
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[22][1]++, process.env.REDIS_URL)) {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[21][0]++;
          const keys =
          /* istanbul ignore next */
          (cov_1yhl2vu5it().s[83]++, yield this.redis.keys(pattern));
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[84]++;
          if (keys.length > 0) {
            /* istanbul ignore next */
            cov_1yhl2vu5it().b[23][0]++;
            cov_1yhl2vu5it().s[85]++;
            yield this.redis.del(...keys);
          } else
          /* istanbul ignore next */
          {
            cov_1yhl2vu5it().b[23][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[21][1]++;
          cov_1yhl2vu5it().s[86]++;
          // In-memory cache clear
          for (const key of this.redis.keys()) {
            /* istanbul ignore next */
            cov_1yhl2vu5it().s[87]++;
            if (key.startsWith(
            /* istanbul ignore next */
            (cov_1yhl2vu5it().b[25][0]++, prefix) ||
            /* istanbul ignore next */
            (cov_1yhl2vu5it().b[25][1]++, this.prefix))) {
              /* istanbul ignore next */
              cov_1yhl2vu5it().b[24][0]++;
              cov_1yhl2vu5it().s[88]++;
              this.redis.delete(key);
            } else
            /* istanbul ignore next */
            {
              cov_1yhl2vu5it().b[24][1]++;
            }
          }
        }
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[89]++;
        loggerService_1.logger.info('Cache cleared successfully', {
          metadata: {
            service: 'CacheService',
            pattern
          }
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[90]++;
        loggerService_1.logger.error('Error clearing cache', error, {
          metadata: {
            service: 'CacheService',
            prefix
          }
        });
      }
    });
  }
  exists(key, prefix) {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[23]++;
    cov_1yhl2vu5it().s[91]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[24]++;
      cov_1yhl2vu5it().s[92]++;
      try {
        const fullKey =
        /* istanbul ignore next */
        (cov_1yhl2vu5it().s[93]++, this.getKey(key, prefix));
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[94]++;
        if (
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[27][0]++, this.isConnected) &&
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[27][1]++, process.env.REDIS_URL)) {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[26][0]++;
          cov_1yhl2vu5it().s[95]++;
          return (yield this.redis.exists(fullKey)) === 1;
        } else {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[26][1]++;
          const data =
          /* istanbul ignore next */
          (cov_1yhl2vu5it().s[96]++, this.redis.get(fullKey));
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[97]++;
          return /* istanbul ignore next */(cov_1yhl2vu5it().b[28][0]++, data) &&
          /* istanbul ignore next */
          (cov_1yhl2vu5it().b[28][1]++, !this.isExpired(data));
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[98]++;
        loggerService_1.logger.error('Error checking cache existence', error, {
          metadata: {
            service: 'CacheService',
            key,
            prefix
          }
        });
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[99]++;
        return false;
      }
    });
  }
  isExpired(cacheData) {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[25]++;
    cov_1yhl2vu5it().s[100]++;
    return Date.now() - cacheData.timestamp > cacheData.ttl;
  }
  getStats() {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[26]++;
    cov_1yhl2vu5it().s[101]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[27]++;
      cov_1yhl2vu5it().s[102]++;
      try {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[103]++;
        if (
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[30][0]++, this.isConnected) &&
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[30][1]++, process.env.REDIS_URL)) {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[29][0]++;
          const info =
          /* istanbul ignore next */
          (cov_1yhl2vu5it().s[104]++, yield this.redis.info('stats'));
          const keys =
          /* istanbul ignore next */
          (cov_1yhl2vu5it().s[105]++, yield this.redis.dbsize());
          // Parse Redis info for hits/misses (simplified)
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[106]++;
          return {
            hits: 0,
            misses: 0,
            keys
          };
        } else {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[29][1]++;
          cov_1yhl2vu5it().s[107]++;
          return {
            hits: 0,
            misses: 0,
            keys: this.redis.size
          };
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[108]++;
        loggerService_1.logger.error('Error getting cache stats', error, {
          metadata: {
            service: 'CacheService'
          }
        });
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[109]++;
        return {
          hits: 0,
          misses: 0,
          keys: 0
        };
      }
    });
  }
  disconnect() {
    /* istanbul ignore next */
    cov_1yhl2vu5it().f[28]++;
    cov_1yhl2vu5it().s[110]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1yhl2vu5it().f[29]++;
      cov_1yhl2vu5it().s[111]++;
      try {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[112]++;
        if (
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[32][0]++, this.isConnected) &&
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[32][1]++, this.redis) &&
        /* istanbul ignore next */
        (cov_1yhl2vu5it().b[32][2]++, this.redis.disconnect)) {
          /* istanbul ignore next */
          cov_1yhl2vu5it().b[31][0]++;
          cov_1yhl2vu5it().s[113]++;
          yield this.redis.disconnect();
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[114]++;
          this.isConnected = false;
          /* istanbul ignore next */
          cov_1yhl2vu5it().s[115]++;
          loggerService_1.logger.info('Redis cache disconnected', {
            metadata: {
              service: 'CacheService'
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_1yhl2vu5it().b[31][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1yhl2vu5it().s[116]++;
        loggerService_1.logger.error('Error disconnecting cache', error, {
          metadata: {
            service: 'CacheService'
          }
        });
      }
    });
  }
}
/* istanbul ignore next */
cov_1yhl2vu5it().s[117]++;
exports.CacheService = CacheService;
// Export singleton instance
/* istanbul ignore next */
cov_1yhl2vu5it().s[118]++;
exports.cacheService = CacheService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,