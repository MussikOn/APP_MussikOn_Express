{"version":3,"names":["paymentSystemService_1","cov_2lmjziyldx","s","require","loggerService_1","firebase_1","PaymentSystemController","constructor","f","paymentService","PaymentSystemService","getUserBalance","req","res","userId","b","_a","user","userEmail","status","json","error","balance","success","data","logger","metadata","_b","registerBankAccount","accountData","body","accountHolder","accountNumber","bankName","bankAccount","getUserBankAccounts","accounts","uploadDepositVoucher","file","amount","accountHolderName","depositDate","depositTime","referenceNumber","comments","isNaN","Number","depositData","voucherFile","info","deposit","notifyAdminsAboutNewDeposit","message","adminsSnapshot","db","collection","where","get","adminEmails","docs","map","doc","notificationPromises","adminEmail","add","title","toLocaleString","type","category","isRead","createdAt","Date","updatedAt","depositId","id","voucherUrl","url","Promise","all","adminCount","length","pushNotificationService","resolve","then","__importStar","pushPromises","sendNotificationToUser","pushError","warn","getUserDeposits","payMusicianForEvent","eventId","params","musicianId","paymentData","organizerId","payment","processEventPayment","getMusicianEarnings","earnings","requestWithdrawal","bankAccountId","withdrawalData","withdrawal","getPendingDeposits","deposits","verifyDeposit","adminId","approved","notes","verificationData","bankDepositDate","notifyUserAboutDepositVerification","verifiedBy","verifiedAt","toISOString","userBalanceUpdated","depositDoc","exists","getPendingWithdrawals","withdrawals","processWithdrawal","withdrawalId","getPaymentStatistics","statistics","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\paymentSystemController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PaymentSystemService } from '../services/paymentSystemService';\r\nimport { logger } from '../services/loggerService';\r\nimport { db } from '../utils/firebase';\r\nimport { \r\n  BankAccountData, \r\n  DepositRequest, \r\n  WithdrawalRequestData, \r\n  EventPaymentRequest \r\n} from '../types/paymentTypes';\r\n\r\nexport class PaymentSystemController {\r\n  private paymentService: PaymentSystemService;\r\n\r\n  constructor() {\r\n    this.paymentService = new PaymentSystemService();\r\n  }\r\n\r\n  /**\r\n   * Obtener balance de usuario\r\n   */\r\n  async getUserBalance(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.userEmail;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({ error: 'Usuario no autenticado' });\r\n        return;\r\n      }\r\n\r\n      const balance = await this.paymentService.getUserBalance(userId);\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: balance\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error obteniendo balance de usuario', error as Error, { \r\n        metadata: { userId: (req as any).user?.userEmail } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error obteniendo balance de usuario'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registrar cuenta bancaria\r\n   */\r\n  async registerBankAccount(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.userEmail;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({ error: 'Usuario no autenticado' });\r\n        return;\r\n      }\r\n\r\n      const accountData: BankAccountData = req.body;\r\n      \r\n      // Validaciones básicas\r\n      if (!accountData.accountHolder || !accountData.accountNumber || !accountData.bankName) {\r\n        res.status(400).json({ error: 'Datos de cuenta bancaria incompletos' });\r\n        return;\r\n      }\r\n\r\n      const bankAccount = await this.paymentService.registerBankAccount(userId, accountData);\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: bankAccount\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error registrando cuenta bancaria', error as Error, { \r\n        metadata: { userId: (req as any).user?.userEmail } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error registrando cuenta bancaria'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener cuentas bancarias de usuario\r\n   */\r\n  async getUserBankAccounts(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.userEmail;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({ error: 'Usuario no autenticado' });\r\n        return;\r\n      }\r\n\r\n      const accounts = await this.paymentService.getUserBankAccounts(userId);\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: accounts\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error obteniendo cuentas bancarias', error as Error, { \r\n        metadata: { userId: (req as any).user?.userEmail } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error obteniendo cuentas bancarias'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subir comprobante de depósito\r\n   */\r\n  async uploadDepositVoucher(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.userEmail;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({ error: 'Usuario no autenticado' });\r\n        return;\r\n      }\r\n\r\n      if (!req.file) {\r\n        res.status(400).json({ error: 'No se proporcionó archivo de comprobante' });\r\n        return;\r\n      }\r\n\r\n      const { \r\n        amount, \r\n        accountHolderName, \r\n        accountNumber, \r\n        bankName, \r\n        depositDate, \r\n        depositTime, \r\n        referenceNumber, \r\n        comments \r\n      } = req.body;\r\n      \r\n      if (!amount || isNaN(Number(amount))) {\r\n        res.status(400).json({ error: 'Monto inválido' });\r\n        return;\r\n      }\r\n\r\n      if (!accountHolderName || !bankName) {\r\n        res.status(400).json({ error: 'Nombre del titular y banco son obligatorios' });\r\n        return;\r\n      }\r\n\r\n      const depositData: DepositRequest = {\r\n        amount: Number(amount),\r\n        voucherFile: req.file,\r\n        accountHolderName,\r\n        accountNumber,\r\n        bankName,\r\n        depositDate,\r\n        depositTime,\r\n        referenceNumber,\r\n        comments\r\n      };\r\n\r\n      logger.info('Subiendo comprobante de depósito', { metadata: { userId, amount } });\r\n\r\n      const deposit = await this.paymentService.uploadDepositVoucher(userId, depositData);\r\n      \r\n      // Notificar automáticamente a todos los administradores\r\n      await this.notifyAdminsAboutNewDeposit(deposit, userId);\r\n      \r\n      res.status(201).json({\r\n        success: true,\r\n        data: deposit,\r\n        message: 'Depósito subido exitosamente. Pendiente de verificación por administrador.'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error subiendo comprobante de depósito', error as Error, { \r\n        metadata: { userId: (req as any).user?.userEmail } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error subiendo comprobante de depósito'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notificar a administradores sobre nuevo depósito\r\n   */\r\n  private async notifyAdminsAboutNewDeposit(deposit: any, userId: string): Promise<void> {\r\n    try {\r\n      // Obtener todos los usuarios administradores\r\n      const adminsSnapshot = await db.collection('users')\r\n        .where('roll', 'in', ['admin', 'superadmin'])\r\n        .get();\r\n\r\n      const adminEmails = adminsSnapshot.docs.map(doc => doc.data().userEmail);\r\n\r\n      // Crear notificación para cada administrador\r\n      const notificationPromises = adminEmails.map(adminEmail => \r\n        db.collection('notifications').add({\r\n          userId: adminEmail,\r\n          title: 'Nuevo Depósito Pendiente',\r\n          message: `Usuario ${userId} ha subido un depósito de RD$ ${deposit.amount.toLocaleString()}`,\r\n          type: 'info',\r\n          category: 'payment',\r\n          isRead: false,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          metadata: {\r\n            depositId: deposit.id,\r\n            userId: userId,\r\n            amount: deposit.amount,\r\n            voucherUrl: deposit.voucherFile.url,\r\n            accountHolderName: deposit.accountHolderName,\r\n            bankName: deposit.bankName\r\n          }\r\n        })\r\n      );\r\n\r\n      await Promise.all(notificationPromises);\r\n\r\n      logger.info('Notificaciones enviadas a administradores', { \r\n        metadata: { \r\n          depositId: deposit.id, \r\n          adminCount: adminEmails.length \r\n        } \r\n      });\r\n\r\n      // Enviar push notifications si está disponible\r\n      try {\r\n        const { pushNotificationService } = await import('../services/pushNotificationService');\r\n        \r\n        const pushPromises = adminEmails.map(adminEmail =>\r\n                    pushNotificationService.sendNotificationToUser(adminEmail, {\r\n            title: 'Nuevo Depósito Pendiente',\r\n            body: `Usuario ${userId} ha subido un depósito de RD$ ${deposit.amount.toLocaleString()}`,\r\n            data: {\r\n              depositId: deposit.id,\r\n              type: 'new_deposit',\r\n              amount: deposit.amount,\r\n              userId: userId\r\n            },\r\n            type: 'payment',\r\n            category: 'deposit'\r\n          })\r\n        );\r\n\r\n        await Promise.all(pushPromises);\r\n      } catch (pushError) {\r\n        logger.warn('Error enviando push notifications a administradores', pushError as Error);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('Error notificando a administradores sobre nuevo depósito', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener depósitos del usuario\r\n   */\r\n  async getUserDeposits(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.userEmail;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({ error: 'Usuario no autenticado' });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar método en el servicio\r\n      res.status(200).json({\r\n        success: true,\r\n        data: [],\r\n        message: 'Funcionalidad en desarrollo'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error obteniendo depósitos del usuario', error as Error, { \r\n        metadata: { userId: (req as any).user?.userEmail } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error obteniendo depósitos del usuario'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pagar músico por evento\r\n   */\r\n  async payMusicianForEvent(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.userEmail;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({ error: 'Usuario no autenticado' });\r\n        return;\r\n      }\r\n\r\n      const { eventId } = req.params;\r\n      const { musicianId, amount } = req.body;\r\n      \r\n      if (!musicianId || !amount || isNaN(Number(amount))) {\r\n        res.status(400).json({ error: 'Datos de pago incompletos' });\r\n        return;\r\n      }\r\n\r\n      const paymentData: EventPaymentRequest = {\r\n        eventId,\r\n        organizerId: userId,\r\n        musicianId,\r\n        amount: Number(amount)\r\n      };\r\n\r\n      logger.info('Procesando pago de evento', { \r\n        metadata: { \r\n          eventId,\r\n          organizerId: userId,\r\n          musicianId,\r\n          amount\r\n        }\r\n      });\r\n\r\n      const payment = await this.paymentService.processEventPayment(paymentData);\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: payment\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error procesando pago de evento', error as Error, { \r\n        metadata: { eventId: req.params.eventId } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error procesando pago de evento'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener ganancias de músico\r\n   */\r\n  async getMusicianEarnings(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.userEmail;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({ error: 'Usuario no autenticado' });\r\n        return;\r\n      }\r\n\r\n      const earnings = await this.paymentService.getMusicianEarnings(userId);\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: earnings\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error obteniendo ganancias de músico', error as Error, { \r\n        metadata: { userId: (req as any).user?.userEmail } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error obteniendo ganancias de músico'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solicitar retiro de ganancias\r\n   */\r\n  async requestWithdrawal(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.userEmail;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({ error: 'Usuario no autenticado' });\r\n        return;\r\n      }\r\n\r\n      const { amount, bankAccountId } = req.body;\r\n      \r\n      if (!amount || !bankAccountId || isNaN(Number(amount))) {\r\n        res.status(400).json({ error: 'Datos de retiro incompletos' });\r\n        return;\r\n      }\r\n\r\n      const withdrawalData: WithdrawalRequestData = {\r\n        amount: Number(amount),\r\n        bankAccountId\r\n      };\r\n\r\n      logger.info('Solicitando retiro de ganancias', { metadata: { userId, amount: withdrawalData.amount } });\r\n\r\n      const withdrawal = await this.paymentService.requestWithdrawal(userId, withdrawalData);\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: withdrawal\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error solicitando retiro', error as Error, { \r\n        metadata: { userId: (req as any).user?.userEmail } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error solicitando retiro'\r\n      });\r\n    }\r\n  }\r\n\r\n  // ===== ENDPOINTS DE ADMINISTRACIÓN =====\r\n\r\n  /**\r\n   * Obtener depósitos pendientes (admin)\r\n   */\r\n  async getPendingDeposits(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const deposits = await this.paymentService.getPendingDeposits();\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: deposits\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error obteniendo depósitos pendientes', error as Error);\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error obteniendo depósitos pendientes'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verificar depósito (admin)\r\n   */\r\n  async verifyDeposit(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const adminId = (req as any).user?.userEmail;\r\n      const { depositId } = req.params;\r\n      const { approved, notes, verificationData } = req.body;\r\n      \r\n      if (typeof approved !== 'boolean') {\r\n        res.status(400).json({ error: 'Estado de aprobación inválido' });\r\n        return;\r\n      }\r\n\r\n      // Si se aprueba, validar que se proporcionen los datos de verificación\r\n      if (approved && (!verificationData || !verificationData.bankDepositDate || !verificationData.referenceNumber)) {\r\n        res.status(400).json({ \r\n          error: 'Para aprobar un depósito, debe proporcionar fecha del depósito y número de referencia' \r\n        });\r\n        return;\r\n      }\r\n\r\n      logger.info('Verificando depósito', { metadata: { depositId, adminId, approved } });\r\n\r\n      await this.paymentService.verifyDeposit(depositId, adminId, approved, notes, verificationData);\r\n      \r\n      // Notificar al usuario sobre el resultado\r\n      await this.notifyUserAboutDepositVerification(depositId, approved, notes);\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: {\r\n          depositId,\r\n          status: approved ? 'approved' : 'rejected',\r\n          verifiedBy: adminId,\r\n          verifiedAt: new Date().toISOString(),\r\n          userBalanceUpdated: approved\r\n        },\r\n        message: `Depósito ${approved ? 'aprobado' : 'rechazado'} exitosamente`\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error verificando depósito', error as Error, { \r\n        metadata: { depositId: req.params.depositId, adminId: (req as any).user?.userEmail } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error verificando depósito'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notificar al usuario sobre la verificación de su depósito\r\n   */\r\n  private async notifyUserAboutDepositVerification(depositId: string, approved: boolean, notes?: string): Promise<void> {\r\n    try {\r\n      // Obtener información del depósito\r\n      const depositDoc = await db.collection('user_deposits').doc(depositId).get();\r\n      if (!depositDoc.exists) return;\r\n\r\n      const deposit = depositDoc.data() as any;\r\n      const userId = deposit.userId;\r\n\r\n      // Crear notificación para el usuario\r\n      await db.collection('notifications').add({\r\n        userId: userId,\r\n        title: approved ? 'Depósito Aprobado' : 'Depósito Rechazado',\r\n        message: approved \r\n          ? `Tu depósito de RD$ ${deposit.amount.toLocaleString()} ha sido aprobado y agregado a tu balance`\r\n          : `Tu depósito ha sido rechazado: ${notes || 'Sin especificar'}`,\r\n        type: approved ? 'success' : 'error',\r\n        category: 'payment',\r\n        isRead: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        metadata: {\r\n          depositId: depositId,\r\n          amount: deposit.amount,\r\n          status: approved ? 'approved' : 'rejected',\r\n          notes: notes\r\n        }\r\n      });\r\n\r\n      // Enviar push notification si está disponible\r\n      try {\r\n        const { pushNotificationService } = await import('../services/pushNotificationService');\r\n        \r\n                await pushNotificationService.sendNotificationToUser(userId, {\r\n          title: approved ? 'Depósito Aprobado' : 'Depósito Rechazado',\r\n          body: approved\r\n            ? `Tu depósito de RD$ ${deposit.amount.toLocaleString()} ha sido aprobado`\r\n            : `Tu depósito ha sido rechazado: ${notes || 'Sin especificar'}`,\r\n          data: {\r\n            depositId: depositId,\r\n            type: approved ? 'deposit_approved' : 'deposit_rejected',\r\n            amount: deposit.amount\r\n          },\r\n          type: 'payment',\r\n          category: 'deposit'\r\n        });\r\n      } catch (pushError) {\r\n        logger.warn('Error enviando push notification al usuario', pushError as Error);\r\n      }\r\n\r\n      logger.info('Usuario notificado sobre verificación de depósito', { \r\n        metadata: { depositId, userId, approved } \r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Error notificando al usuario sobre verificación de depósito', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener retiros pendientes (admin)\r\n   */\r\n  async getPendingWithdrawals(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const withdrawals = await this.paymentService.getPendingWithdrawals();\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: withdrawals\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error obteniendo retiros pendientes', error as Error);\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error obteniendo retiros pendientes'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Procesar retiro (admin)\r\n   */\r\n  async processWithdrawal(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const adminId = (req as any).user?.userEmail;\r\n      const { withdrawalId } = req.params;\r\n      const { approved, notes } = req.body;\r\n      \r\n      if (typeof approved !== 'boolean') {\r\n        res.status(400).json({ error: 'Estado de aprobación inválido' });\r\n        return;\r\n      }\r\n\r\n      logger.info('Procesando retiro', { metadata: { withdrawalId, adminId, approved } });\r\n\r\n      await this.paymentService.processWithdrawal(withdrawalId, adminId, approved, notes);\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Retiro ${approved ? 'aprobado' : 'rechazado'} exitosamente`\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error procesando retiro', error as Error, { \r\n        metadata: { withdrawalId: req.params.withdrawalId, adminId: (req as any).user?.userEmail } \r\n      });\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error procesando retiro'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de pagos (admin)\r\n   */\r\n  async getPaymentStatistics(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const statistics = await this.paymentService.getPaymentStatistics();\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        data: statistics\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error obteniendo estadísticas de pagos', error as Error);\r\n      \r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Error obteniendo estadísticas de pagos'\r\n      });\r\n    }\r\n  }\r\n} "],"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","ignoreList":[]}