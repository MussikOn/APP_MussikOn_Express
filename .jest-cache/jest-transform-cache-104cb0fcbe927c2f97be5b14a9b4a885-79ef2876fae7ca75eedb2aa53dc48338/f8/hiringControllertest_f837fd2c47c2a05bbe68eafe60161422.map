{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\hiringController.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\hiringController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { HiringController } from '../controllers/hiringController';\r\nimport { HiringService, Message, HiringStats } from '../services/hiringService';\r\nimport { createMockRequest, createMockResponse } from './setup';\r\n\r\n// Mock del servicio\r\njest.mock('../services/hiringService');\r\n\r\ndescribe('HiringController', () => {\r\n  let hiringController: HiringController;\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockJson: jest.Mock;\r\n  let mockStatus: jest.Mock;\r\n  let mockHiringService: jest.Mocked<HiringService>;\r\n\r\n  beforeEach(() => {\r\n    mockJson = jest.fn();\r\n    mockStatus = jest.fn().mockReturnValue({ json: mockJson });\r\n    \r\n    mockResponse = {\r\n      status: mockStatus,\r\n      json: mockJson\r\n    };\r\n\r\n    // Mock del servicio\r\n    mockHiringService = {\r\n      createHiringRequest: jest.fn(),\r\n      getHiringRequestById: jest.fn(),\r\n      updateHiringRequestStatus: jest.fn(),\r\n      getHiringRequestsByUser: jest.fn(),\r\n      addMessage: jest.fn(),\r\n      markMessagesAsRead: jest.fn(),\r\n      getHiringStats: jest.fn()\r\n    } as any;\r\n\r\n    (HiringService as jest.Mock).mockImplementation(() => mockHiringService);\r\n    hiringController = new HiringController();\r\n\r\n    // Reset de todos los mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('createHiringRequest', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          email: 'user@example.com',\r\n          roll: 'eventCreator',\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com'\r\n        },\r\n        body: {\r\n          eventId: 'event123',\r\n          musicianId: 'musician123',\r\n          eventDetails: 'Evento de música en vivo',\r\n          terms: 'Pago por adelantado'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should create hiring request successfully', async () => {\r\n      const mockHiringRequest = {\r\n        id: 'hiring123',\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        status: 'pending' as const,\r\n        eventDetails: 'Evento de música en vivo',\r\n        terms: 'Pago por adelantado',\r\n        messages: [],\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n\r\n      mockHiringService.createHiringRequest.mockResolvedValue(mockHiringRequest);\r\n\r\n      await hiringController.createHiringRequest(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(201);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Solicitud de contratación creada exitosamente',\r\n        data: mockHiringRequest\r\n      });\r\n      expect(mockHiringService.createHiringRequest).toHaveBeenCalledWith({\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        eventDetails: 'Evento de música en vivo',\r\n        terms: 'Pago por adelantado'\r\n      });\r\n    });\r\n\r\n    it('should return error when user is not authenticated', async () => {\r\n      mockRequest = createMockRequest({\r\n        body: {\r\n          eventId: 'event123',\r\n          musicianId: 'musician123',\r\n          eventDetails: 'Evento de música en vivo',\r\n          terms: 'Pago por adelantado'\r\n        }\r\n      });\r\n\r\n      await hiringController.createHiringRequest(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(401);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Usuario no autenticado'\r\n      });\r\n    });\r\n\r\n    it('should return error when service fails', async () => {\r\n      mockHiringService.createHiringRequest.mockRejectedValue(new Error('Service error'));\r\n\r\n      await hiringController.createHiringRequest(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Service error'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getHiringRequestById', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          email: 'user@example.com',\r\n          roll: 'eventCreator',\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com'\r\n        },\r\n        params: {\r\n          requestId: 'hiring123'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should return hiring request by ID successfully', async () => {\r\n      const mockHiringRequest = {\r\n        id: 'hiring123',\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        status: 'pending' as const,\r\n        eventDetails: 'Evento de música en vivo',\r\n        terms: 'Pago por adelantado',\r\n        messages: [],\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n\r\n      mockHiringService.getHiringRequestById.mockResolvedValue(mockHiringRequest);\r\n\r\n      await hiringController.getHiringRequestById(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(200);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockHiringRequest\r\n      });\r\n      expect(mockHiringService.getHiringRequestById).toHaveBeenCalledWith('hiring123');\r\n    });\r\n\r\n    it('should return 404 when hiring request not found', async () => {\r\n      mockHiringService.getHiringRequestById.mockResolvedValue(null);\r\n\r\n      await hiringController.getHiringRequestById(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(404);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Solicitud de contratación no encontrada'\r\n      });\r\n    });\r\n\r\n    it('should return error when user is not authenticated', async () => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          requestId: 'hiring123'\r\n        }\r\n      });\r\n\r\n      await hiringController.getHiringRequestById(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(401);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Usuario no autenticado'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('updateHiringRequestStatus', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          email: 'user@example.com',\r\n          roll: 'eventCreator',\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com'\r\n        },\r\n        params: {\r\n          requestId: 'hiring123'\r\n        },\r\n        body: {\r\n          status: 'accepted'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should update hiring request status successfully', async () => {\r\n      const mockUpdatedRequest = {\r\n        id: 'hiring123',\r\n        eventId: 'event123',\r\n        musicianId: 'musician123',\r\n        eventCreatorId: 'user123',\r\n        status: 'accepted' as const,\r\n        eventDetails: 'Evento de música en vivo',\r\n        terms: 'Pago por adelantado',\r\n        messages: [],\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n\r\n      mockHiringService.updateHiringRequestStatus.mockResolvedValue(mockUpdatedRequest);\r\n\r\n      await hiringController.updateHiringRequestStatus(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(200);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Estado de solicitud actualizado exitosamente',\r\n        data: mockUpdatedRequest\r\n      });\r\n      expect(mockHiringService.updateHiringRequestStatus).toHaveBeenCalledWith('hiring123', 'accepted', 'user123');\r\n    });\r\n\r\n    it('should return error when user is not authenticated', async () => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          requestId: 'hiring123'\r\n        },\r\n        body: {\r\n          status: 'accepted'\r\n        }\r\n      });\r\n\r\n      await hiringController.updateHiringRequestStatus(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(401);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Usuario no autenticado'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getHiringRequestsByUser', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          email: 'user@example.com',\r\n          roll: 'eventCreator',\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com'\r\n        },\r\n        query: {\r\n          status: 'pending'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should return hiring requests by user successfully', async () => {\r\n      const mockRequests = [\r\n        {\r\n          id: 'hiring123',\r\n          eventId: 'event123',\r\n          musicianId: 'musician123',\r\n          eventCreatorId: 'user123',\r\n          status: 'pending' as const,\r\n          eventDetails: 'Evento de música en vivo',\r\n          terms: 'Pago por adelantado',\r\n          messages: [],\r\n          createdAt: new Date(),\r\n          updatedAt: new Date()\r\n        }\r\n      ];\r\n\r\n      mockHiringService.getHiringRequestsByUser.mockResolvedValue(mockRequests);\r\n\r\n      await hiringController.getHiringRequestsByUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(200);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockRequests,\r\n        count: mockRequests.length\r\n      });\r\n      expect(mockHiringService.getHiringRequestsByUser).toHaveBeenCalledWith('user123', 'eventCreator', 'pending');\r\n    });\r\n\r\n    it('should return error when user is not authenticated', async () => {\r\n      mockRequest = createMockRequest({\r\n        query: {\r\n          status: 'pending'\r\n        }\r\n      });\r\n\r\n      await hiringController.getHiringRequestsByUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(401);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Usuario no autenticado'\r\n      });\r\n    });\r\n\r\n    it('should return error when user role is invalid', async () => {\r\n      mockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          email: 'user@example.com',\r\n          roll: 'admin', // Rol inválido\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com'\r\n        },\r\n        query: {\r\n          status: 'pending'\r\n        }\r\n      });\r\n\r\n      await hiringController.getHiringRequestsByUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Rol de usuario inválido'\r\n      });\r\n    });\r\n\r\n    it('should return error when service fails', async () => {\r\n      mockHiringService.getHiringRequestsByUser.mockRejectedValue(new Error('Service error'));\r\n\r\n      await hiringController.getHiringRequestsByUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(500);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Error al obtener solicitudes de contratación'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('addMessage', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          email: 'user@example.com',\r\n          roll: 'eventCreator',\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com'\r\n        },\r\n        params: {\r\n          requestId: 'hiring123'\r\n        },\r\n        body: {\r\n          content: 'Mensaje de prueba'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should add message successfully', async () => {\r\n      const mockMessage: Message = {\r\n        id: 'msg123',\r\n        content: 'Mensaje de prueba',\r\n        senderId: 'user123',\r\n        senderType: 'eventCreator',\r\n        timestamp: new Date(),\r\n        isRead: false\r\n      };\r\n\r\n      mockHiringService.addMessage.mockResolvedValue(mockMessage);\r\n\r\n      await hiringController.addMessage(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(201);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Mensaje enviado exitosamente',\r\n        data: mockMessage\r\n      });\r\n      expect(mockHiringService.addMessage).toHaveBeenCalledWith('hiring123', 'user123', 'eventCreator', 'Mensaje de prueba');\r\n    });\r\n\r\n    it('should return error when user is not authenticated', async () => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          requestId: 'hiring123'\r\n        },\r\n        body: {\r\n          content: 'Mensaje de prueba'\r\n        }\r\n      });\r\n\r\n      await hiringController.addMessage(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(401);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Usuario no autenticado'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('markMessagesAsRead', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          email: 'user@example.com',\r\n          roll: 'eventCreator',\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com'\r\n        },\r\n        params: {\r\n          requestId: 'hiring123'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should mark messages as read successfully', async () => {\r\n      mockHiringService.markMessagesAsRead.mockResolvedValue();\r\n\r\n      await hiringController.markMessagesAsRead(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(200);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Mensajes marcados como leídos exitosamente'\r\n      });\r\n      expect(mockHiringService.markMessagesAsRead).toHaveBeenCalledWith('hiring123', 'user123');\r\n    });\r\n\r\n    it('should return error when user is not authenticated', async () => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          requestId: 'hiring123'\r\n        }\r\n      });\r\n\r\n      await hiringController.markMessagesAsRead(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(401);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Usuario no autenticado'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getHiringStats', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          email: 'user@example.com',\r\n          roll: 'eventCreator',\r\n          name: 'Test User',\r\n          userEmail: 'user@example.com'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should return hiring stats successfully', async () => {\r\n      const mockStats: HiringStats = {\r\n        totalRequests: 10,\r\n        pendingRequests: 3,\r\n        acceptedRequests: 5,\r\n        rejectedRequests: 2,\r\n        completedRequests: 0,\r\n        averageResponseTime: 2.5\r\n      };\r\n\r\n      mockHiringService.getHiringStats.mockResolvedValue(mockStats);\r\n\r\n      await hiringController.getHiringStats(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(200);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockStats\r\n      });\r\n      expect(mockHiringService.getHiringStats).toHaveBeenCalledWith('user123', 'eventCreator');\r\n    });\r\n\r\n    it('should return error when user is not authenticated', async () => {\r\n      mockRequest = createMockRequest({});\r\n\r\n      await hiringController.getHiringStats(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(401);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Usuario no autenticado'\r\n      });\r\n    });\r\n  });\r\n}); "],"version":3}