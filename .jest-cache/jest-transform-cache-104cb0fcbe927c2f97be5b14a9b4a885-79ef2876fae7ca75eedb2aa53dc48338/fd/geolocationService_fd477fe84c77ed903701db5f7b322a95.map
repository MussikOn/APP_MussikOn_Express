{"version":3,"names":["cov_1aj20ce9yc","actualCoverage","firebase_1","s","require","loggerService_1","GeolocationService","constructor","f","earthRadius","calculateDistance","point1","point2","lat1","toRadians","latitude","lon1","longitude","lat2","lon2","dLat","dLon","a","Math","sin","cos","c","atan2","sqrt","degrees","PI","isWithinRadius","center","point","radius","distance","searchByProximity","filters","logger","info","metadata","snapshot","db","collection","where","b","type","limit","get","locations","forEach","doc","location","Object","assign","id","data","coordinates","push","total","length","error","findNearbyEvents","center_1","radius_1","events","event","_a","sort","findNearbyMusicians","musicians","musician","optimizeRoute","routeData","totalDistance","totalDuration","i","waypoints","speed","getAverageSpeed","mode","result","duration","polyline","generatePolyline","map","join","estimateTravelTime","origin_1","destination_1","origin","destination","calculateFuelCost","distance_1","fuelPrice","fuelEfficiency","fuelConsumption","geocodeAddress","address","country","mockCoordinates","key","warn","reverseGeocode","mockAddresses","getLocationStats","venues","Promise","all","stats","totalEvents","totalMusicians","totalVenues","averageEventDistance","reduce","sum","averageMusicianDistance","density","exports","geolocationService"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\geolocationService.ts"],"sourcesContent":["import { db } from '../utils/firebase';\r\nimport { logger } from './loggerService';\r\n\r\n// Interfaces para geolocalización\r\nexport interface Coordinates {\r\n  latitude: number;\r\n  longitude: number;\r\n}\r\n\r\nexport interface Location {\r\n  id: string;\r\n  name: string;\r\n  address: string;\r\n  coordinates: Coordinates;\r\n  type: 'event' | 'user' | 'venue';\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface GeoSearchFilters {\r\n  radius: number; // en kilómetros\r\n  type?: string;\r\n  limit?: number;\r\n}\r\n\r\nexport interface RouteOptimization {\r\n  waypoints: Coordinates[];\r\n  mode: 'driving' | 'walking' | 'bicycling' | 'transit';\r\n  avoid?: string[];\r\n}\r\n\r\nexport interface RouteResult {\r\n  distance: number; // en kilómetros\r\n  duration: number; // en minutos\r\n  polyline: string;\r\n  waypoints: Coordinates[];\r\n}\r\n\r\nexport class GeolocationService {\r\n  private readonly earthRadius = 6371; // Radio de la Tierra en kilómetros\r\n\r\n  /**\r\n   * Calcular distancia entre dos puntos usando la fórmula de Haversine\r\n   */\r\n  calculateDistance(point1: Coordinates, point2: Coordinates): number {\r\n    const lat1 = this.toRadians(point1.latitude);\r\n    const lon1 = this.toRadians(point1.longitude);\r\n    const lat2 = this.toRadians(point2.latitude);\r\n    const lon2 = this.toRadians(point2.longitude);\r\n\r\n    const dLat = lat2 - lat1;\r\n    const dLon = lon2 - lon1;\r\n\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return this.earthRadius * c;\r\n  }\r\n\r\n  /**\r\n   * Convertir grados a radianes\r\n   */\r\n  private toRadians(degrees: number): number {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n\r\n  /**\r\n   * Verificar si un punto está dentro del radio especificado\r\n   */\r\n  isWithinRadius(\r\n    center: Coordinates,\r\n    point: Coordinates,\r\n    radius: number\r\n  ): boolean {\r\n    const distance = this.calculateDistance(center, point);\r\n    return distance <= radius;\r\n  }\r\n\r\n  /**\r\n   * Buscar ubicaciones por proximidad\r\n   */\r\n  async searchByProximity(\r\n    center: Coordinates,\r\n    filters: GeoSearchFilters\r\n  ): Promise<Location[]> {\r\n    try {\r\n      logger.info('Buscando ubicaciones por proximidad', {\r\n        metadata: { filters },\r\n      });\r\n\r\n      // En una implementación real, usarías índices geoespaciales\r\n      // Por ahora, simulamos la búsqueda\r\n      const snapshot = await db\r\n        .collection('locations')\r\n        .where('type', '==', filters.type || 'event')\r\n        .limit(filters.limit || 50)\r\n        .get();\r\n\r\n      const locations: Location[] = [];\r\n      snapshot.forEach((doc: any) => {\r\n        const location = { id: doc.id, ...doc.data() };\r\n        if (this.isWithinRadius(center, location.coordinates, filters.radius)) {\r\n          locations.push(location);\r\n        }\r\n      });\r\n\r\n      logger.info('Búsqueda por proximidad completada', {\r\n        metadata: { total: locations.length },\r\n      });\r\n\r\n      return locations;\r\n    } catch (error) {\r\n      logger.error('Error en búsqueda por proximidad', error as Error, {\r\n        metadata: { center, filters },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encontrar eventos cercanos\r\n   */\r\n  async findNearbyEvents(\r\n    center: Coordinates,\r\n    radius: number,\r\n    limit: number = 20\r\n  ): Promise<any[]> {\r\n    try {\r\n      logger.info('Buscando eventos cercanos', {\r\n        metadata: { center, radius },\r\n      });\r\n\r\n      const snapshot = await db\r\n        .collection('events')\r\n        .where('status', '==', 'active')\r\n        .limit(limit)\r\n        .get();\r\n\r\n      const events: any[] = [];\r\n      snapshot.forEach((doc: any) => {\r\n        const event = { id: doc.id, ...doc.data() };\r\n        if (\r\n          event.location?.coordinates &&\r\n          this.isWithinRadius(center, event.location.coordinates, radius)\r\n        ) {\r\n          events.push({\r\n            ...event,\r\n            distance: this.calculateDistance(\r\n              center,\r\n              event.location.coordinates\r\n            ),\r\n          });\r\n        }\r\n      });\r\n\r\n      // Ordenar por distancia\r\n      events.sort((a, b) => a.distance - b.distance);\r\n\r\n      logger.info('Eventos cercanos encontrados', {\r\n        metadata: { total: events.length },\r\n      });\r\n\r\n      return events;\r\n    } catch (error) {\r\n      logger.error('Error buscando eventos cercanos', error as Error, {\r\n        metadata: { center, radius },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encontrar músicos cercanos\r\n   */\r\n  async findNearbyMusicians(\r\n    center: Coordinates,\r\n    radius: number,\r\n    limit: number = 20\r\n  ): Promise<any[]> {\r\n    try {\r\n      logger.info('Buscando músicos cercanos', {\r\n        metadata: { center, radius },\r\n      });\r\n\r\n      const snapshot = await db\r\n        .collection('users')\r\n        .where('roll', '==', 'musician')\r\n        .where('status', '==', true)\r\n        .limit(limit)\r\n        .get();\r\n\r\n      const musicians: any[] = [];\r\n      snapshot.forEach((doc: any) => {\r\n        const musician = { id: doc.id, ...doc.data() };\r\n        if (\r\n          musician.location?.coordinates &&\r\n          this.isWithinRadius(center, musician.location.coordinates, radius)\r\n        ) {\r\n          musicians.push({\r\n            ...musician,\r\n            distance: this.calculateDistance(\r\n              center,\r\n              musician.location.coordinates\r\n            ),\r\n          });\r\n        }\r\n      });\r\n\r\n      // Ordenar por distancia\r\n      musicians.sort((a, b) => a.distance - b.distance);\r\n\r\n      logger.info('Músicos cercanos encontrados', {\r\n        metadata: { total: musicians.length },\r\n      });\r\n\r\n      return musicians;\r\n    } catch (error) {\r\n      logger.error('Error buscando músicos cercanos', error as Error, {\r\n        metadata: { center, radius },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimizar ruta entre múltiples puntos\r\n   */\r\n  async optimizeRoute(routeData: RouteOptimization): Promise<RouteResult> {\r\n    try {\r\n      logger.info('Optimizando ruta', { metadata: { routeData } });\r\n\r\n      // En producción, esto se integraría con Google Maps Directions API\r\n      // Por ahora, simulamos la optimización\r\n      let totalDistance = 0;\r\n      let totalDuration = 0;\r\n\r\n      for (let i = 0; i < routeData.waypoints.length - 1; i++) {\r\n        const distance = this.calculateDistance(\r\n          routeData.waypoints[i],\r\n          routeData.waypoints[i + 1]\r\n        );\r\n        totalDistance += distance;\r\n\r\n        // Estimación de tiempo basada en el modo de transporte\r\n        const speed = this.getAverageSpeed(routeData.mode);\r\n        totalDuration += (distance / speed) * 60; // Convertir a minutos\r\n      }\r\n\r\n      const result: RouteResult = {\r\n        distance: totalDistance,\r\n        duration: totalDuration,\r\n        polyline: this.generatePolyline(routeData.waypoints),\r\n        waypoints: routeData.waypoints,\r\n      };\r\n\r\n      logger.info('Ruta optimizada', { metadata: { result } });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      logger.error('Error optimizando ruta', error as Error, {\r\n        metadata: { routeData },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener velocidad promedio según el modo de transporte\r\n   */\r\n  private getAverageSpeed(mode: string): number {\r\n    switch (mode) {\r\n      case 'driving':\r\n        return 50; // km/h\r\n      case 'walking':\r\n        return 5; // km/h\r\n      case 'bicycling':\r\n        return 15; // km/h\r\n      case 'transit':\r\n        return 25; // km/h\r\n      default:\r\n        return 30; // km/h\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generar polyline (simulado)\r\n   */\r\n  private generatePolyline(waypoints: Coordinates[]): string {\r\n    // En producción, esto generaría un polyline real\r\n    return waypoints\r\n      .map(point => `${point.latitude},${point.longitude}`)\r\n      .join('|');\r\n  }\r\n\r\n  /**\r\n   * Estimar tiempo de viaje\r\n   */\r\n  async estimateTravelTime(\r\n    origin: Coordinates,\r\n    destination: Coordinates,\r\n    mode: string = 'driving'\r\n  ): Promise<number> {\r\n    try {\r\n      const distance = this.calculateDistance(origin, destination);\r\n      const speed = this.getAverageSpeed(mode);\r\n      return (distance / speed) * 60; // Retornar en minutos\r\n    } catch (error) {\r\n      logger.error('Error estimando tiempo de viaje', error as Error, {\r\n        metadata: { origin, destination, mode },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcular costo de combustible\r\n   */\r\n  async calculateFuelCost(\r\n    distance: number,\r\n    fuelPrice: number = 1.2\r\n  ): Promise<number> {\r\n    try {\r\n      const fuelEfficiency = 8; // km/l\r\n      const fuelConsumption = distance / fuelEfficiency;\r\n      return fuelConsumption * fuelPrice;\r\n    } catch (error) {\r\n      logger.error('Error calculando costo de combustible', error as Error, {\r\n        metadata: { distance, fuelPrice },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Geocodificar dirección\r\n   */\r\n  async geocodeAddress(\r\n    address: string,\r\n    country?: string\r\n  ): Promise<Coordinates | null> {\r\n    try {\r\n      logger.info('Geocodificando dirección', {\r\n        metadata: { address, country },\r\n      });\r\n\r\n      // En producción, esto se integraría con Google Geocoding API\r\n      // Por ahora, simulamos la geocodificación\r\n      const mockCoordinates: Record<string, Coordinates> = {\r\n        'Madrid, Spain': { latitude: 40.4168, longitude: -3.7038 },\r\n        'Barcelona, Spain': { latitude: 41.3851, longitude: 2.1734 },\r\n        'Valencia, Spain': { latitude: 39.4699, longitude: -0.3763 },\r\n        'Sevilla, Spain': { latitude: 37.3891, longitude: -5.9845 },\r\n        'Zaragoza, Spain': { latitude: 41.6488, longitude: -0.8891 },\r\n      };\r\n\r\n      const key = country ? `${address}, ${country}` : address;\r\n      const coordinates = mockCoordinates[key];\r\n\r\n      if (coordinates) {\r\n        logger.info('Dirección geocodificada', {\r\n          metadata: { address, coordinates },\r\n        });\r\n        return coordinates;\r\n      }\r\n\r\n      logger.warn('Dirección no encontrada', { metadata: { address } });\r\n      return null;\r\n    } catch (error) {\r\n      logger.error('Error geocodificando dirección', error as Error, {\r\n        metadata: { address, country },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Geocodificación inversa\r\n   */\r\n  async reverseGeocode(coordinates: Coordinates): Promise<string | null> {\r\n    try {\r\n      logger.info('Geocodificación inversa', { metadata: { coordinates } });\r\n\r\n      // En producción, esto se integraría con Google Reverse Geocoding API\r\n      // Por ahora, simulamos la geocodificación inversa\r\n      const mockAddresses: Record<string, string> = {\r\n        '40.4168,-3.7038': 'Madrid, Spain',\r\n        '41.3851,2.1734': 'Barcelona, Spain',\r\n        '39.4699,-0.3763': 'Valencia, Spain',\r\n        '37.3891,-5.9845': 'Sevilla, Spain',\r\n        '41.6488,-0.8891': 'Zaragoza, Spain',\r\n      };\r\n\r\n      const key = `${coordinates.latitude},${coordinates.longitude}`;\r\n      const address = mockAddresses[key];\r\n\r\n      if (address) {\r\n        logger.info('Coordenadas geocodificadas', {\r\n          metadata: { coordinates, address },\r\n        });\r\n        return address;\r\n      }\r\n\r\n      logger.warn('Coordenadas no encontradas', { metadata: { coordinates } });\r\n      return null;\r\n    } catch (error) {\r\n      logger.error('Error en geocodificación inversa', error as Error, {\r\n        metadata: { coordinates },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de ubicación\r\n   */\r\n  async getLocationStats(center: Coordinates, radius: number): Promise<any> {\r\n    try {\r\n      logger.info('Obteniendo estadísticas de ubicación', {\r\n        metadata: { center, radius },\r\n      });\r\n\r\n      const [events, musicians, venues] = await Promise.all([\r\n        this.findNearbyEvents(center, radius),\r\n        this.findNearbyMusicians(center, radius),\r\n        this.searchByProximity(center, { radius, type: 'venue', limit: 100 }),\r\n      ]);\r\n\r\n      const stats = {\r\n        totalEvents: events.length,\r\n        totalMusicians: musicians.length,\r\n        totalVenues: venues.length,\r\n        averageEventDistance:\r\n          events.length > 0\r\n            ? events.reduce((sum, event) => sum + event.distance, 0) /\r\n              events.length\r\n            : 0,\r\n        averageMusicianDistance:\r\n          musicians.length > 0\r\n            ? musicians.reduce((sum, musician) => sum + musician.distance, 0) /\r\n              musicians.length\r\n            : 0,\r\n        density: {\r\n          events: events.length / (Math.PI * radius * radius),\r\n          musicians: musicians.length / (Math.PI * radius * radius),\r\n          venues: venues.length / (Math.PI * radius * radius),\r\n        },\r\n      };\r\n\r\n      logger.info('Estadísticas de ubicación obtenidas', {\r\n        metadata: { stats },\r\n      });\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      logger.error(\r\n        'Error obteniendo estadísticas de ubicación',\r\n        error as Error,\r\n        { metadata: { center, radius } }\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton del servicio\r\nexport const geolocationService = new GeolocationService();\r\n"],"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","ignoreList":[]}