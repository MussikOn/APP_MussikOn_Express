{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\paymentSystemController.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\paymentSystemController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { PaymentSystemController } from '../controllers/paymentSystemController';\nimport { PaymentSystemService } from '../services/paymentSystemService';\n\n// Mock the payment system service\njest.mock('../services/paymentSystemService');\njest.mock('../services/pushNotificationService', () => ({\n  pushNotificationService: {\n    sendNotificationToUser: jest.fn()\n  }\n}));\n\n// Mock Firebase\njest.mock('../utils/firebase', () => ({\n  db: {\n    collection: jest.fn().mockReturnValue({\n      where: jest.fn().mockReturnThis(),\n      get: jest.fn().mockResolvedValue({\n        docs: []\n      }),\n      add: jest.fn().mockResolvedValue({})\n    })\n  }\n}));\n\n// Mock logger\njest.mock('../services/loggerService', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn()\n  }\n}));\n\ndescribe('PaymentSystemController', () => {\n  let paymentController: PaymentSystemController;\n  let mockPaymentSystemService: jest.Mocked<PaymentSystemService>;\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockStatus: jest.Mock;\n  let mockJson: jest.Mock;\n\n  beforeEach(() => {\n    // Limpiar mocks antes de cada test\n    jest.clearAllMocks();\n    \n    // Crear mock del servicio\n    mockPaymentSystemService = {\n      getUserBalance: jest.fn(),\n      registerBankAccount: jest.fn(),\n      getUserBankAccounts: jest.fn(),\n      uploadDepositVoucher: jest.fn(),\n      verifyDeposit: jest.fn(),\n      processEventPayment: jest.fn(),\n      getMusicianEarnings: jest.fn(),\n      requestWithdrawal: jest.fn(),\n      processWithdrawal: jest.fn(),\n      getPaymentStatistics: jest.fn(),\n      getPendingDeposits: jest.fn(),\n      getPendingWithdrawals: jest.fn()\n    } as any;\n    \n    // Mock del constructor del servicio\n    (PaymentSystemService as jest.Mock).mockImplementation(() => mockPaymentSystemService);\n    \n    // Crear instancia del controlador\n    paymentController = new PaymentSystemController();\n    \n    // Reemplazar el servicio en el controlador con nuestro mock\n    (paymentController as any).paymentService = mockPaymentSystemService;\n    \n    // Configurar mocks de respuesta\n    mockStatus = jest.fn().mockReturnThis();\n    mockJson = jest.fn().mockReturnThis();\n    mockResponse = {\n      status: mockStatus,\n      json: mockJson\n    };\n  });\n\n  describe('getUserBalance', () => {\n    it('should return user balance successfully', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      const mockBalance = {\n        userId: userEmail,\n        balance: 1000,\n        currency: 'RD$',\n        lastUpdated: new Date().toISOString(),\n        totalDeposits: 2000,\n        totalEarnings: 1500,\n        totalWithdrawals: 500\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockPaymentSystemService.getUserBalance.mockResolvedValue(mockBalance);\n\n      // Act\n      await paymentController.getUserBalance(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.getUserBalance).toHaveBeenCalledWith(userEmail);\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockBalance\n      });\n    });\n\n    it('should return error when user is not authenticated', async () => {\n      // Arrange\n      mockRequest = {\n        user: undefined\n      };\n\n      // Act\n      await paymentController.getUserBalance(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(401);\n      expect(mockJson).toHaveBeenCalledWith({\n        error: 'Usuario no autenticado'\n      });\n    });\n\n    it('should handle service errors', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockPaymentSystemService.getUserBalance.mockRejectedValue(new Error('Service error'));\n\n      // Act\n      await paymentController.getUserBalance(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(500);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: false,\n        error: 'Error obteniendo balance de usuario'\n      });\n    });\n  });\n\n  describe('registerBankAccount', () => {\n    it('should register bank account successfully', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      const accountData = {\n        accountHolder: 'John Doe',\n        accountNumber: '1234567890',\n        accountType: 'savings' as const,\n        bankName: 'Banco Popular',\n        routingNumber: '123456789'\n      };\n\n      const mockAccount = {\n        id: 'bank123',\n        userId: userEmail,\n        ...accountData,\n        isVerified: false,\n        isDefault: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        body: accountData\n      };\n\n      mockPaymentSystemService.registerBankAccount.mockResolvedValue(mockAccount);\n\n      // Act\n      await paymentController.registerBankAccount(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.registerBankAccount).toHaveBeenCalledWith(userEmail, accountData);\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockAccount\n      });\n    });\n\n    it('should return error for missing required fields', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        body: {\n          accountHolder: 'John Doe'\n          // Missing required fields\n        }\n      };\n\n      // Act\n      await paymentController.registerBankAccount(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        error: 'Datos de cuenta bancaria incompletos'\n      });\n    });\n  });\n\n  describe('getUserBankAccounts', () => {\n    it('should return user bank accounts successfully', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      const mockAccounts = [\n        {\n          id: 'bank1',\n          userId: userEmail,\n          accountHolder: 'John Doe',\n          accountNumber: '1234567890',\n          accountType: 'savings' as const,\n          bankName: 'Banco Popular',\n          routingNumber: '123456789',\n          isVerified: true,\n          isDefault: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      ];\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        }\n      };\n\n      mockPaymentSystemService.getUserBankAccounts.mockResolvedValue(mockAccounts);\n\n      // Act\n      await paymentController.getUserBankAccounts(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.getUserBankAccounts).toHaveBeenCalledWith(userEmail);\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockAccounts\n      });\n    });\n  });\n\n  describe('uploadDepositVoucher', () => {\n    it('should upload deposit voucher successfully', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      const depositData = {\n        amount: 1000,\n        voucherFile: {\n          fieldname: 'voucher',\n          originalname: 'voucher.jpg',\n          encoding: '7bit',\n          mimetype: 'image/jpeg',\n          buffer: Buffer.from('test'),\n          size: 1024,\n          stream: {} as any,\n          destination: '',\n          filename: 'voucher.jpg',\n          path: ''\n        },\n        accountHolderName: 'Juan Pérez',\n        bankName: 'Banco Popular'\n      };\n\n      const mockDeposit = {\n        id: 'deposit_123',\n        userId: userEmail,\n        amount: 1000,\n        currency: 'RD$',\n        voucherFile: {\n          url: 'https://example.com/voucher.jpg',\n          filename: 'voucher.jpg',\n          uploadedAt: new Date().toISOString()\n        },\n        status: 'pending' as const,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        accountHolderName: 'Juan Pérez',\n        bankName: 'Banco Popular'\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        body: depositData,\n        file: depositData.voucherFile\n      };\n\n      mockPaymentSystemService.uploadDepositVoucher.mockResolvedValue(mockDeposit);\n\n      // Act\n      await paymentController.uploadDepositVoucher(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.uploadDepositVoucher).toHaveBeenCalledWith(userEmail, {\n        amount: 1000,\n        voucherFile: depositData.voucherFile,\n        accountHolderName: 'Juan Pérez',\n        bankName: 'Banco Popular'\n      });\n      expect(mockStatus).toHaveBeenCalledWith(201);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockDeposit,\n        message: 'Depósito subido exitosamente. Pendiente de verificación por administrador.'\n      });\n    });\n\n    it('should return error for missing file', async () => {\n      // Arrange\n      const userEmail = 'user@example.com';\n      mockRequest = {\n        user: {\n          userId: 'user123',\n          userEmail: userEmail,\n          email: userEmail,\n          role: 'user',\n          name: 'Test User'\n        },\n        body: {\n          amount: 1000\n          // Missing voucherFile\n        }\n      };\n\n      // Act\n      await paymentController.uploadDepositVoucher(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockStatus).toHaveBeenCalledWith(400);\n      expect(mockJson).toHaveBeenCalledWith({\n        error: 'No se proporcionó archivo de comprobante'\n      });\n    });\n  });\n\n  describe('verifyDeposit', () => {\n    it('should verify deposit successfully', async () => {\n      // Arrange\n      const depositId = 'deposit_123';\n      const adminEmail = 'admin@example.com';\n      const verificationData = {\n        bankDepositDate: '2024-01-15',\n        bankDepositTime: '14:30',\n        referenceNumber: 'REF123456',\n        accountLastFourDigits: '1234',\n        verifiedBy: 'admin_123'\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'admin_123',\n          userEmail: adminEmail,\n          email: adminEmail,\n          role: 'admin',\n          name: 'Admin User'\n        },\n        params: { depositId },\n        body: {\n          approved: true,\n          notes: 'Depósito verificado correctamente',\n          verificationData\n        }\n      };\n\n      mockPaymentSystemService.verifyDeposit.mockResolvedValue();\n\n      // Act\n      await paymentController.verifyDeposit(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.verifyDeposit).toHaveBeenCalledWith(\n        depositId,\n        adminEmail,\n        true,\n        'Depósito verificado correctamente',\n        {\n          bankDepositDate: verificationData.bankDepositDate,\n          bankDepositTime: verificationData.bankDepositTime,\n          referenceNumber: verificationData.referenceNumber,\n          accountLastFourDigits: verificationData.accountLastFourDigits,\n          verifiedBy: verificationData.verifiedBy\n        }\n      );\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: {\n          depositId,\n          status: 'approved',\n          verifiedBy: adminEmail,\n          verifiedAt: expect.any(String),\n          userBalanceUpdated: true\n        },\n        message: 'Depósito aprobado exitosamente'\n      });\n    });\n  });\n\n  describe('payMusicianForEvent', () => {\n    it('should process event payment successfully', async () => {\n      // Arrange\n      const eventId = 'event_123';\n      const organizerEmail = 'organizer@example.com';\n      const musicianId = 'musician_123';\n      const paymentData = {\n        amount: 500,\n        paymentMethod: 'balance' as const,\n        description: 'Pago por evento'\n      };\n\n      const mockPayment = {\n        id: 'payment_123',\n        eventId,\n        organizerId: organizerEmail,\n        musicianId,\n        amount: 500,\n        currency: 'RD$',\n        paymentMethod: 'balance' as const,\n        commission: 50,\n        musicianAmount: 450,\n        status: 'completed' as const,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'organizer_123',\n          userEmail: organizerEmail,\n          email: organizerEmail,\n          role: 'user',\n          name: 'Organizer User'\n        },\n        params: { eventId },\n        body: {\n          musicianId,\n          amount: 500\n        }\n      };\n\n      mockPaymentSystemService.processEventPayment.mockResolvedValue(mockPayment);\n\n      // Act\n      await paymentController.payMusicianForEvent(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.processEventPayment).toHaveBeenCalledWith({\n        eventId,\n        organizerId: organizerEmail,\n        musicianId,\n        amount: 500\n      });\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockPayment\n      });\n    });\n  });\n\n  describe('getMusicianEarnings', () => {\n    it('should return musician earnings successfully', async () => {\n      // Arrange\n      const musicianEmail = 'musician@example.com';\n      const mockEarnings = [\n        {\n          id: 'earning_123',\n          musicianId: musicianEmail,\n          eventId: 'event_123',\n          eventPaymentId: 'payment_123',\n          amount: 500,\n          currency: 'RD$',\n          status: 'available' as const,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      ];\n\n      mockRequest = {\n        user: {\n          userId: 'musician_123',\n          userEmail: musicianEmail,\n          email: musicianEmail,\n          role: 'musician',\n          name: 'Musician User'\n        }\n      };\n\n      mockPaymentSystemService.getMusicianEarnings.mockResolvedValue(mockEarnings);\n\n      // Act\n      await paymentController.getMusicianEarnings(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.getMusicianEarnings).toHaveBeenCalledWith(musicianEmail);\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockEarnings\n      });\n    });\n  });\n\n  describe('requestWithdrawal', () => {\n    it('should request withdrawal successfully', async () => {\n      // Arrange\n      const musicianEmail = 'musician@example.com';\n      const withdrawalData = {\n        amount: 200,\n        bankAccountId: 'bank_123',\n        description: 'Retiro de ganancias'\n      };\n\n      const mockWithdrawal = {\n        id: 'withdrawal_123',\n        musicianId: musicianEmail,\n        amount: 200,\n        currency: 'RD$',\n        bankAccountId: 'bank_123',\n        status: 'pending' as const,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'musician_123',\n          userEmail: musicianEmail,\n          email: musicianEmail,\n          role: 'musician',\n          name: 'Musician User'\n        },\n        body: {\n          amount: 200,\n          bankAccountId: 'bank_123'\n        }\n      };\n\n      mockPaymentSystemService.requestWithdrawal.mockResolvedValue(mockWithdrawal);\n\n      // Act\n      await paymentController.requestWithdrawal(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.requestWithdrawal).toHaveBeenCalledWith(musicianEmail, {\n        amount: 200,\n        bankAccountId: 'bank_123'\n      });\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockWithdrawal\n      });\n    });\n  });\n\n  describe('processWithdrawal', () => {\n    it('should process withdrawal successfully', async () => {\n      // Arrange\n      const withdrawalId = 'withdrawal_123';\n      const adminEmail = 'admin@example.com';\n      const processData = {\n        approved: true,\n        notes: 'Retiro procesado correctamente'\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'admin_123',\n          userEmail: adminEmail,\n          email: adminEmail,\n          role: 'admin',\n          name: 'Admin User'\n        },\n        params: { withdrawalId },\n        body: processData\n      };\n\n      mockPaymentSystemService.processWithdrawal.mockResolvedValue();\n\n      // Act\n      await paymentController.processWithdrawal(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.processWithdrawal).toHaveBeenCalledWith(\n        withdrawalId,\n        adminEmail,\n        processData.approved,\n        processData.notes\n      );\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        message: 'Retiro aprobado exitosamente'\n      });\n    });\n  });\n\n  describe('getPaymentStatistics', () => {\n    it('should return payment statistics successfully', async () => {\n      // Arrange\n      const mockStats = {\n        totalUsers: 100,\n        totalMusicians: 50,\n        totalEvents: 200,\n        totalDeposits: 50000,\n        totalPayments: 40000,\n        totalWithdrawals: 10000,\n        totalCommissions: 5000,\n        pendingDepositsCount: 5,\n        pendingWithdrawalsCount: 3,\n        averageEventValue: 250,\n        monthlyGrowth: 15.5,\n        lastUpdated: new Date().toISOString()\n      };\n\n      mockRequest = {\n        user: {\n          userId: 'admin_123',\n          userEmail: 'admin@example.com',\n          email: 'admin@example.com',\n          role: 'admin',\n          name: 'Admin User'\n        }\n      };\n\n      mockPaymentSystemService.getPaymentStatistics.mockResolvedValue(mockStats);\n\n      // Act\n      await paymentController.getPaymentStatistics(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.getPaymentStatistics).toHaveBeenCalled();\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockStats\n      });\n    });\n  });\n\n  describe('getPendingDeposits', () => {\n    it('should return pending deposits successfully', async () => {\n      // Arrange\n      const mockDeposits = [\n        {\n          id: 'deposit_123',\n          userId: 'user_123',\n          amount: 1000,\n          currency: 'RD$',\n          status: 'pending' as const,\n          voucherFile: {\n            url: 'https://example.com/voucher_123.jpg',\n            filename: 'voucher_123.jpg',\n            uploadedAt: new Date().toISOString()\n          },\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          accountHolderName: 'Juan Pérez',\n          bankName: 'Banco Popular'\n        }\n      ];\n\n      mockRequest = {\n        user: {\n          userId: 'admin_123',\n          userEmail: 'admin@example.com',\n          email: 'admin@example.com',\n          role: 'admin',\n          name: 'Admin User'\n        }\n      };\n\n      mockPaymentSystemService.getPendingDeposits.mockResolvedValue(mockDeposits);\n\n      // Act\n      await paymentController.getPendingDeposits(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.getPendingDeposits).toHaveBeenCalled();\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockDeposits\n      });\n    });\n  });\n\n  describe('getPendingWithdrawals', () => {\n    it('should return pending withdrawals successfully', async () => {\n      // Arrange\n      const mockWithdrawals = [\n        {\n          id: 'withdrawal_123',\n          musicianId: 'musician_123',\n          amount: 200,\n          currency: 'RD$',\n          bankAccountId: 'bank_123',\n          status: 'pending' as const,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      ];\n\n      mockRequest = {\n        user: {\n          userId: 'admin_123',\n          userEmail: 'admin@example.com',\n          email: 'admin@example.com',\n          role: 'admin',\n          name: 'Admin User'\n        }\n      };\n\n      mockPaymentSystemService.getPendingWithdrawals.mockResolvedValue(mockWithdrawals);\n\n      // Act\n      await paymentController.getPendingWithdrawals(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPaymentSystemService.getPendingWithdrawals).toHaveBeenCalled();\n      expect(mockStatus).toHaveBeenCalledWith(200);\n      expect(mockJson).toHaveBeenCalledWith({\n        success: true,\n        data: mockWithdrawals\n      });\n    });\n  });\n}); \n"],"version":3}