{"version":3,"names":["cov_1w2ojqcdqr","actualCoverage","chatModel_1","s","require","loggerService_1","connectedUsers","chatSocketHandler","io","socket","f","logger","info","context","metadata","socketId","id","on","userData","userEmail","userName","toLowerCase","join","console","log","Object","keys","conversationId","leave","messageData","__awaiter","senderId","senderName","content","type","b","conversation","getConversationByIdModel","emit","error","participants","includes","message","status","savedMessage","createMessageModel","to","forEach","participantEmail","participantSocket","unreadCount","data","messageId","isTyping","isOnline","disconnectedUser","find","email","exports","getConnectedUsers","sendNotificationToUser","notification","user"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\sockets\\chatSocket.ts"],"sourcesContent":["import { Server, Socket } from 'socket.io';\r\nimport {\r\n  createMessageModel,\r\n  getConversationByIdModel,\r\n} from '../models/chatModel';\r\nimport { Message } from '../utils/DataTypes';\r\nimport { logger } from '../services/loggerService';\r\n\r\ninterface ChatUser {\r\n  socketId: string;\r\n  userEmail: string;\r\n  userName: string;\r\n}\r\n\r\ninterface ConnectedUsers {\r\n  [userEmail: string]: ChatUser;\r\n}\r\n\r\nconst connectedUsers: ConnectedUsers = {};\r\n\r\nexport const chatSocketHandler = (io: Server, socket: Socket) => {\r\n  logger.info('üí¨ Usuario conectado al chat:', { context: 'ChatSocket', metadata: { socketId: socket.id } });\r\n\r\n  // Registrar usuario en el chat\r\n  socket.on(\r\n    'chat-register',\r\n    (userData: { userEmail: string; userName: string }) => {\r\n      const { userEmail, userName } = userData;\r\n      connectedUsers[userEmail.toLowerCase()] = {\r\n        socketId: socket.id,\r\n        userEmail: userEmail.toLowerCase(),\r\n        userName,\r\n      };\r\n\r\n      // Unirse a la sala personal del usuario\r\n      socket.join(userEmail.toLowerCase());\r\n\r\n      logger.info('üìù Usuario registrado en chat:', { context: 'ChatSocket', metadata: { userEmail } });\r\n      console.log(\r\n        '[src/sockets/chatSocket.ts:33] üë• Usuarios conectados al chat:',\r\n        Object.keys(connectedUsers)\r\n      );\r\n    }\r\n  );\r\n\r\n  // Unirse a una conversaci√≥n\r\n  socket.on('join-conversation', (conversationId: string) => {\r\n    socket.join(conversationId);\r\n    console.log(\r\n      `[src/sockets/chatSocket.ts:40] üí¨ Usuario ${socket.id} se uni√≥ a la conversaci√≥n: ${conversationId}`\r\n    );\r\n  });\r\n\r\n  // Salir de una conversaci√≥n\r\n  socket.on('leave-conversation', (conversationId: string) => {\r\n    socket.leave(conversationId);\r\n    console.log(\r\n      `[src/sockets/chatSocket.ts:46] üí¨ Usuario ${socket.id} sali√≥ de la conversaci√≥n: ${conversationId}`\r\n    );\r\n  });\r\n\r\n  // Enviar mensaje en tiempo real\r\n  socket.on(\r\n    'send-message',\r\n    async (messageData: {\r\n      conversationId: string;\r\n      senderId: string;\r\n      senderName: string;\r\n      content: string;\r\n      type?: 'text' | 'image' | 'audio' | 'file';\r\n    }) => {\r\n      try {\r\n        const {\r\n          conversationId,\r\n          senderId,\r\n          senderName,\r\n          content,\r\n          type = 'text',\r\n        } = messageData;\r\n\r\n        // Verificar que la conversaci√≥n existe\r\n        const conversation = await getConversationByIdModel(conversationId);\r\n        if (!conversation) {\r\n          socket.emit('message-error', { error: 'Conversaci√≥n no encontrada' });\r\n          return;\r\n        }\r\n\r\n        // Verificar que el remitente es participante\r\n        if (!conversation.participants.includes(senderId)) {\r\n          socket.emit('message-error', {\r\n            error:\r\n              'No tienes permisos para enviar mensajes a esta conversaci√≥n',\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Crear el mensaje en la base de datos\r\n        const message: Omit<Message, 'id' | 'timestamp'> = {\r\n          conversationId,\r\n          senderId,\r\n          senderName,\r\n          content,\r\n          status: 'sent',\r\n          type,\r\n        };\r\n\r\n        const savedMessage = await createMessageModel(message);\r\n\r\n        // Emitir el mensaje a todos los participantes de la conversaci√≥n\r\n        io.to(conversationId).emit('new-message', savedMessage);\r\n\r\n        // Emitir notificaci√≥n a participantes que no est√°n en la conversaci√≥n\r\n        conversation.participants.forEach(participantEmail => {\r\n          if (participantEmail !== senderId) {\r\n            const participantSocket =\r\n              connectedUsers[participantEmail.toLowerCase()];\r\n            if (participantSocket) {\r\n              io.to(participantSocket.socketId).emit('message-notification', {\r\n                conversationId,\r\n                message: savedMessage,\r\n                unreadCount: conversation.unreadCount + 1,\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        console.log(\r\n          `[src/sockets/chatSocket.ts:89] üí¨ Mensaje enviado en conversaci√≥n ${conversationId}:`,\r\n          savedMessage.content\r\n        );\r\n      } catch (error: any) {\r\n        logger.info('[src/sockets/chatSocket.ts:91] Error en send-message');\r\n        logger.error('[src/sockets/chatSocket.ts:92] Error al enviar mensaje:', error as Error);\r\n        socket.emit('message-error', {\r\n          error: error.message || 'Error al enviar mensaje',\r\n        });\r\n      }\r\n    }\r\n  );\r\n\r\n  // Marcar mensaje como le√≠do\r\n  socket.on(\r\n    'mark-message-read',\r\n    async (data: { messageId: string; conversationId: string }) => {\r\n      try {\r\n        const { messageId, conversationId } = data;\r\n\r\n        // Aqu√≠ podr√≠as actualizar el estado del mensaje en la base de datos\r\n        // Por ahora solo emitimos el evento\r\n\r\n        io.to(conversationId).emit('message-read', { messageId });\r\n        console.log(\r\n          `[src/sockets/chatSocket.ts:105] ‚úÖ Mensaje marcado como le√≠do: ${messageId}`\r\n        );\r\n      } catch (error: any) {\r\n        console.log(\r\n          '[src/sockets/chatSocket.ts:107] Error en mark-message-read'\r\n        );\r\n        logger.error('[src/sockets/chatSocket.ts:108] Error al marcar mensaje como le√≠do:', error as Error);\r\n        socket.emit('message-error', {\r\n          error: error.message || 'Error al marcar mensaje como le√≠do',\r\n        });\r\n      }\r\n    }\r\n  );\r\n\r\n  // Escribiendo...\r\n  socket.on(\r\n    'typing',\r\n    (data: {\r\n      conversationId: string;\r\n      userEmail: string;\r\n      isTyping: boolean;\r\n    }) => {\r\n      const { conversationId, userEmail, isTyping } = data;\r\n\r\n      // Emitir a todos en la conversaci√≥n excepto al remitente\r\n      socket.to(conversationId).emit('user-typing', {\r\n        conversationId,\r\n        userEmail,\r\n        isTyping,\r\n      });\r\n    }\r\n  );\r\n\r\n  // Estado de conexi√≥n\r\n  socket.on(\r\n    'online-status',\r\n    (data: { userEmail: string; isOnline: boolean }) => {\r\n      const { userEmail, isOnline } = data;\r\n\r\n      // Emitir a todos los usuarios conectados\r\n      io.emit('user-status-changed', {\r\n        userEmail,\r\n        isOnline,\r\n      });\r\n    }\r\n  );\r\n\r\n  // Desconexi√≥n\r\n  socket.on('disconnect', () => {\r\n    // Encontrar y eliminar al usuario desconectado\r\n    const disconnectedUser = Object.keys(connectedUsers).find(\r\n      email => connectedUsers[email].socketId === socket.id\r\n    );\r\n\r\n    if (disconnectedUser) {\r\n      delete connectedUsers[disconnectedUser];\r\n      console.log(\r\n        `[src/sockets/chatSocket.ts:135] ‚ùå Usuario desconectado del chat: ${disconnectedUser}`\r\n      );\r\n      console.log(\r\n        '[src/sockets/chatSocket.ts:136] üë• Usuarios conectados al chat:',\r\n        Object.keys(connectedUsers)\r\n      );\r\n    }\r\n\r\n    logger.info('üí¨ Usuario desconectado del chat:', { context: 'ChatSocket', metadata: { socketId: socket.id } });\r\n  });\r\n};\r\n\r\n// Funci√≥n para obtener usuarios conectados (para uso en otros m√≥dulos)\r\nexport const getConnectedUsers = () => connectedUsers;\r\n\r\n// Funci√≥n para enviar notificaci√≥n a un usuario espec√≠fico\r\nexport const sendNotificationToUser = (\r\n  io: Server,\r\n  userEmail: string,\r\n  notification: any\r\n) => {\r\n  const user = connectedUsers[userEmail.toLowerCase()];\r\n  if (user) {\r\n    io.to(user.socketId).emit('notification', notification);\r\n  }\r\n};\r\n"],"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","ignoreList":[]}