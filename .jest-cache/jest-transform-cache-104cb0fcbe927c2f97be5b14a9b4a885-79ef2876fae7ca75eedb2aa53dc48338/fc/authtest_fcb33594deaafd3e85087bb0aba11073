a54ac4fc2d106e6edea588ca1028a76c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Authentication tests for MussikOn API
const validationSchemas_1 = require("../utils/validationSchemas");
describe('Authentication Validation', () => {
    describe('Register Schema', () => {
        test('should validate correct registration data', () => {
            const validData = {
                name: 'Juan',
                lastName: 'Pérez',
                userEmail: 'juan@example.com',
                userPassword: 'Password123!',
                roll: 'musico'
            };
            const { error } = validationSchemas_1.registerSchema.validate(validData);
            expect(error).toBeUndefined();
        });
        test('should reject invalid email', () => {
            const invalidData = {
                name: 'Juan',
                lastName: 'Pérez',
                userEmail: 'invalid-email',
                userPassword: 'Password123!',
                roll: 'musico'
            };
            const { error } = validationSchemas_1.registerSchema.validate(invalidData);
            expect(error).toBeDefined();
            expect(error === null || error === void 0 ? void 0 : error.details[0].path).toContain('userEmail');
        });
        test('should reject weak password', () => {
            const invalidData = {
                name: 'Juan',
                lastName: 'Pérez',
                userEmail: 'juan@example.com',
                userPassword: '123',
                roll: 'musico'
            };
            const { error } = validationSchemas_1.registerSchema.validate(invalidData);
            expect(error).toBeDefined();
            expect(error === null || error === void 0 ? void 0 : error.details[0].path).toContain('userPassword');
        });
    });
    describe('Login Schema', () => {
        test('should validate correct login data', () => {
            const validData = {
                userEmail: 'juan@example.com',
                userPassword: 'Password123!'
            };
            const { error } = validationSchemas_1.loginSchema.validate(validData);
            expect(error).toBeUndefined();
        });
        test('should reject empty email', () => {
            const invalidData = {
                userEmail: '',
                userPassword: 'Password123!'
            };
            const { error } = validationSchemas_1.loginSchema.validate(invalidData);
            expect(error).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXHNyY1xcQVBQX011c3Npa09uXFxBUFBfTXVzc2lrT25fRXhwcmVzc1xcc3JjXFxfX3Rlc3RzX19cXGF1dGgudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF3QztBQUN4QyxrRUFBeUU7QUFFekUsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUN6QyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO1FBQy9CLElBQUksQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUU7WUFDckQsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLElBQUksRUFBRSxNQUFNO2dCQUNaLFFBQVEsRUFBRSxPQUFPO2dCQUNqQixTQUFTLEVBQUUsa0JBQWtCO2dCQUM3QixZQUFZLEVBQUUsY0FBYztnQkFDNUIsSUFBSSxFQUFFLFFBQVE7YUFDZixDQUFDO1lBRUYsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLGtDQUFjLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7WUFDdkMsTUFBTSxXQUFXLEdBQUc7Z0JBQ2xCLElBQUksRUFBRSxNQUFNO2dCQUNaLFFBQVEsRUFBRSxPQUFPO2dCQUNqQixTQUFTLEVBQUUsZUFBZTtnQkFDMUIsWUFBWSxFQUFFLGNBQWM7Z0JBQzVCLElBQUksRUFBRSxRQUFRO2FBQ2YsQ0FBQztZQUVGLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxrQ0FBYyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDNUIsTUFBTSxDQUFDLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7WUFDdkMsTUFBTSxXQUFXLEdBQUc7Z0JBQ2xCLElBQUksRUFBRSxNQUFNO2dCQUNaLFFBQVEsRUFBRSxPQUFPO2dCQUNqQixTQUFTLEVBQUUsa0JBQWtCO2dCQUM3QixZQUFZLEVBQUUsS0FBSztnQkFDbkIsSUFBSSxFQUFFLFFBQVE7YUFDZixDQUFDO1lBRUYsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLGtDQUFjLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM1QixNQUFNLENBQUMsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixJQUFJLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO1lBQzlDLE1BQU0sU0FBUyxHQUFHO2dCQUNoQixTQUFTLEVBQUUsa0JBQWtCO2dCQUM3QixZQUFZLEVBQUUsY0FBYzthQUM3QixDQUFDO1lBRUYsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLCtCQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7WUFDckMsTUFBTSxXQUFXLEdBQUc7Z0JBQ2xCLFNBQVMsRUFBRSxFQUFFO2dCQUNiLFlBQVksRUFBRSxjQUFjO2FBQzdCLENBQUM7WUFFRixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsK0JBQVcsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcc3JjXFxBUFBfTXVzc2lrT25cXEFQUF9NdXNzaWtPbl9FeHByZXNzXFxzcmNcXF9fdGVzdHNfX1xcYXV0aC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEF1dGhlbnRpY2F0aW9uIHRlc3RzIGZvciBNdXNzaWtPbiBBUElcclxuaW1wb3J0IHsgcmVnaXN0ZXJTY2hlbWEsIGxvZ2luU2NoZW1hIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGlvblNjaGVtYXMnO1xyXG5cclxuZGVzY3JpYmUoJ0F1dGhlbnRpY2F0aW9uIFZhbGlkYXRpb24nLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ1JlZ2lzdGVyIFNjaGVtYScsICgpID0+IHtcclxuICAgIHRlc3QoJ3Nob3VsZCB2YWxpZGF0ZSBjb3JyZWN0IHJlZ2lzdHJhdGlvbiBkYXRhJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCB2YWxpZERhdGEgPSB7XHJcbiAgICAgICAgbmFtZTogJ0p1YW4nLFxyXG4gICAgICAgIGxhc3ROYW1lOiAnUMOpcmV6JyxcclxuICAgICAgICB1c2VyRW1haWw6ICdqdWFuQGV4YW1wbGUuY29tJyxcclxuICAgICAgICB1c2VyUGFzc3dvcmQ6ICdQYXNzd29yZDEyMyEnLFxyXG4gICAgICAgIHJvbGw6ICdtdXNpY28nXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCB7IGVycm9yIH0gPSByZWdpc3RlclNjaGVtYS52YWxpZGF0ZSh2YWxpZERhdGEpO1xyXG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVVbmRlZmluZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ3Nob3VsZCByZWplY3QgaW52YWxpZCBlbWFpbCcsICgpID0+IHtcclxuICAgICAgY29uc3QgaW52YWxpZERhdGEgPSB7XHJcbiAgICAgICAgbmFtZTogJ0p1YW4nLFxyXG4gICAgICAgIGxhc3ROYW1lOiAnUMOpcmV6JyxcclxuICAgICAgICB1c2VyRW1haWw6ICdpbnZhbGlkLWVtYWlsJyxcclxuICAgICAgICB1c2VyUGFzc3dvcmQ6ICdQYXNzd29yZDEyMyEnLFxyXG4gICAgICAgIHJvbGw6ICdtdXNpY28nXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCB7IGVycm9yIH0gPSByZWdpc3RlclNjaGVtYS52YWxpZGF0ZShpbnZhbGlkRGF0YSk7XHJcbiAgICAgIGV4cGVjdChlcnJvcikudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KGVycm9yPy5kZXRhaWxzWzBdLnBhdGgpLnRvQ29udGFpbigndXNlckVtYWlsJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdzaG91bGQgcmVqZWN0IHdlYWsgcGFzc3dvcmQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGludmFsaWREYXRhID0ge1xyXG4gICAgICAgIG5hbWU6ICdKdWFuJyxcclxuICAgICAgICBsYXN0TmFtZTogJ1DDqXJleicsXHJcbiAgICAgICAgdXNlckVtYWlsOiAnanVhbkBleGFtcGxlLmNvbScsXHJcbiAgICAgICAgdXNlclBhc3N3b3JkOiAnMTIzJyxcclxuICAgICAgICByb2xsOiAnbXVzaWNvJ1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgeyBlcnJvciB9ID0gcmVnaXN0ZXJTY2hlbWEudmFsaWRhdGUoaW52YWxpZERhdGEpO1xyXG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChlcnJvcj8uZGV0YWlsc1swXS5wYXRoKS50b0NvbnRhaW4oJ3VzZXJQYXNzd29yZCcpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdMb2dpbiBTY2hlbWEnLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCdzaG91bGQgdmFsaWRhdGUgY29ycmVjdCBsb2dpbiBkYXRhJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCB2YWxpZERhdGEgPSB7XHJcbiAgICAgICAgdXNlckVtYWlsOiAnanVhbkBleGFtcGxlLmNvbScsXHJcbiAgICAgICAgdXNlclBhc3N3b3JkOiAnUGFzc3dvcmQxMjMhJ1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgeyBlcnJvciB9ID0gbG9naW5TY2hlbWEudmFsaWRhdGUodmFsaWREYXRhKTtcclxuICAgICAgZXhwZWN0KGVycm9yKS50b0JlVW5kZWZpbmVkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdzaG91bGQgcmVqZWN0IGVtcHR5IGVtYWlsJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnZhbGlkRGF0YSA9IHtcclxuICAgICAgICB1c2VyRW1haWw6ICcnLFxyXG4gICAgICAgIHVzZXJQYXNzd29yZDogJ1Bhc3N3b3JkMTIzISdcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGxvZ2luU2NoZW1hLnZhbGlkYXRlKGludmFsaWREYXRhKTtcclxuICAgICAgZXhwZWN0KGVycm9yKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pOyAiXSwidmVyc2lvbiI6M30=