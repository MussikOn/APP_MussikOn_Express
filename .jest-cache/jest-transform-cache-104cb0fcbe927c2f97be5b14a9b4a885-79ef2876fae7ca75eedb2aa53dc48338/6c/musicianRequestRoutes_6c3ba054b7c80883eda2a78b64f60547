ad6d9dff5ed73e15733b53266db557c8
"use strict";

/* istanbul ignore next */
function cov_1ney3o1q32() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\musicianRequestRoutes.ts";
  var hash = "3facb699f42ed967224c07cf69ecacc10b3555a2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\musicianRequestRoutes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 36
        },
        end: {
          line: 4,
          column: 87
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 38
        }
      },
      "4": {
        start: {
          line: 161,
          column: 0
        },
        end: {
          line: 161,
          column: 60
        }
      },
      "5": {
        start: {
          line: 489,
          column: 0
        },
        end: {
          line: 489,
          column: 63
        }
      },
      "6": {
        start: {
          line: 490,
          column: 0
        },
        end: {
          line: 490,
          column: 62
        }
      },
      "7": {
        start: {
          line: 491,
          column: 0
        },
        end: {
          line: 491,
          column: 65
        }
      },
      "8": {
        start: {
          line: 492,
          column: 0
        },
        end: {
          line: 492,
          column: 25
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\musicianRequestRoutes.ts",
      mappings: ";;AAAA,qCAAiC;AACjC,wFAQkD;AAElD,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6DG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsFG;AACH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,yCAAa,CAAC,CAAC;AAEhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuEG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2EG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4DG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AAEH,gBAAgB;AAChB,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,0CAAc,CAAC,CAAC;AACnC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,yCAAa,CAAC,CAAC;AAClC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,yCAAa,CAAC,CAAC;AAErC,kBAAe,MAAM,CAAC",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\routes\\musicianRequestRoutes.ts"],
      sourcesContent: ["import { Router } from 'express';\r\nimport {\r\n  createRequest,\r\n  acceptRequest,\r\n  cancelRequest,\r\n  getRequestStatus,\r\n  getRequestById,\r\n  updateRequest,\r\n  deleteRequest,\r\n} from '../controllers/musicianRequestController';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: MusicianRequests\r\n *   description: Endpoints para solicitudes directas de m\xFAsicos - CRUD completo implementado\r\n */\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     MusicianRequest:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *           description: ID \xFAnico de la solicitud\r\n *         userId:\r\n *           type: string\r\n *           description: ID del usuario que crea la solicitud\r\n *         eventType:\r\n *           type: string\r\n *           enum: [concierto, boda, culto, evento_corporativo, festival, fiesta_privada, graduacion, cumpleanos, otro]\r\n *           description: Tipo de evento\r\n *         date:\r\n *           type: string\r\n *           format: date\r\n *           description: Fecha del evento (YYYY-MM-DD)\r\n *         time:\r\n *           type: string\r\n *           description: Hora del evento (HH:MM)\r\n *         location:\r\n *           type: string\r\n *           description: Ubicaci\xF3n del evento\r\n *         instrument:\r\n *           type: string\r\n *           enum: [guitarra, piano, bajo, bateria, saxofon, trompeta, violin, canto, teclado, flauta, otro]\r\n *           description: Instrumento requerido\r\n *         budget:\r\n *           type: number\r\n *           description: Presupuesto disponible\r\n *         status:\r\n *           type: string\r\n *           enum: [pendiente, asignada, cancelada, completada, no_asignada]\r\n *           description: Estado de la solicitud\r\n *         assignedMusicianId:\r\n *           type: string\r\n *           description: ID del m\xFAsico asignado\r\n *         description:\r\n *           type: string\r\n *           description: Descripci\xF3n adicional del evento\r\n *         requirements:\r\n *           type: string\r\n *           description: Requisitos espec\xEDficos\r\n *         contactPhone:\r\n *           type: string\r\n *           description: Tel\xE9fono de contacto\r\n *         contactEmail:\r\n *           type: string\r\n *           description: Email de contacto\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *           description: Fecha de creaci\xF3n\r\n *         updatedAt:\r\n *           type: string\r\n *           format: date-time\r\n *           description: Fecha de \xFAltima actualizaci\xF3n\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /musician-requests:\r\n *   post:\r\n *     tags: [MusicianRequests]\r\n *     summary: Crear solicitud de m\xFAsico\r\n *     description: Crea una nueva solicitud de m\xFAsico para un evento\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - eventType\r\n *               - date\r\n *               - time\r\n *               - location\r\n *               - instrument\r\n *               - budget\r\n *             properties:\r\n *               eventType:\r\n *                 type: string\r\n *                 enum: [concierto, boda, culto, evento_corporativo, festival, fiesta_privada, graduacion, cumpleanos, otro]\r\n *                 example: \"boda\"\r\n *               date:\r\n *                 type: string\r\n *                 format: date\r\n *                 example: \"2024-12-25\"\r\n *               time:\r\n *                 type: string\r\n *                 example: \"18:00\"\r\n *               location:\r\n *                 type: string\r\n *                 example: \"Sal\xF3n de Eventos ABC\"\r\n *               instrument:\r\n *                 type: string\r\n *                 enum: [guitarra, piano, bajo, bateria, saxofon, trompeta, violin, canto, teclado, flauta, otro]\r\n *                 example: \"piano\"\r\n *               budget:\r\n *                 type: number\r\n *                 example: 50000\r\n *               description:\r\n *                 type: string\r\n *                 example: \"Necesitamos un pianista para ceremonia y recepci\xF3n\"\r\n *               requirements:\r\n *                 type: string\r\n *                 example: \"Repertorio rom\xE1ntico y cl\xE1sico\"\r\n *               contactPhone:\r\n *                 type: string\r\n *                 example: \"+1234567890\"\r\n *               contactEmail:\r\n *                 type: string\r\n *                 example: \"organizador@evento.com\"\r\n *     responses:\r\n *       201:\r\n *         description: Solicitud creada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                   example: true\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Solicitud creada correctamente\"\r\n *                 data:\r\n *                   $ref: '#/components/schemas/MusicianRequest'\r\n *       400:\r\n *         description: Datos de entrada inv\xE1lidos\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"Datos de entrada inv\xE1lidos\"\r\n *       401:\r\n *         description: No autorizado\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\nrouter.post('/', createRequest);\r\n\r\n/**\r\n * @swagger\r\n * /musician-requests/{id}:\r\n *   get:\r\n *     tags: [MusicianRequests]\r\n *     summary: Obtener solicitud por ID\r\n *     description: Obtiene una solicitud espec\xEDfica por su ID\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description: ID de la solicitud\r\n *         example: \"request_123456\"\r\n *     responses:\r\n *       200:\r\n *         description: Solicitud encontrada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/MusicianRequest'\r\n *       404:\r\n *         description: Solicitud no encontrada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"Solicitud no encontrada\"\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /musician-requests/{id}:\r\n *   put:\r\n *     tags: [MusicianRequests]\r\n *     summary: Actualizar solicitud\r\n *     description: Actualiza una solicitud existente\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description: ID de la solicitud\r\n *         example: \"request_123456\"\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               date:\r\n *                 type: string\r\n *                 format: date\r\n *                 example: \"2024-12-26\"\r\n *               time:\r\n *                 type: string\r\n *                 example: \"19:00\"\r\n *               location:\r\n *                 type: string\r\n *                 example: \"Sal\xF3n de Eventos XYZ\"\r\n *               budget:\r\n *                 type: number\r\n *                 example: 60000\r\n *               description:\r\n *                 type: string\r\n *                 example: \"Actualizaci\xF3n: Necesitamos un pianista para ceremonia, recepci\xF3n y baile\"\r\n *               requirements:\r\n *                 type: string\r\n *                 example: \"Repertorio actualizado\"\r\n *     responses:\r\n *       200:\r\n *         description: Solicitud actualizada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                   example: true\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Solicitud actualizada correctamente\"\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     id:\r\n *                       type: string\r\n *                       example: \"request_123456\"\r\n *                     updatedAt:\r\n *                       type: string\r\n *                       format: date-time\r\n *                       example: \"2024-01-15T11:45:00Z\"\r\n *       404:\r\n *         description: Solicitud no encontrada\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /musician-requests/{id}:\r\n *   delete:\r\n *     tags: [MusicianRequests]\r\n *     summary: Eliminar solicitud\r\n *     description: Elimina una solicitud espec\xEDfica\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description: ID de la solicitud\r\n *         example: \"request_123456\"\r\n *     responses:\r\n *       200:\r\n *         description: Solicitud eliminada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                   example: true\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Solicitud eliminada correctamente\"\r\n *       404:\r\n *         description: Solicitud no encontrada\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /musician-requests/accept:\r\n *   post:\r\n *     tags: [MusicianRequests]\r\n *     summary: Aceptar solicitud de m\xFAsico\r\n *     description: Permite a un m\xFAsico aceptar una solicitud disponible\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - requestId\r\n *               - musicianId\r\n *             properties:\r\n *               requestId:\r\n *                 type: string\r\n *                 description: ID de la solicitud\r\n *                 example: \"request_123456\"\r\n *               musicianId:\r\n *                 type: string\r\n *                 description: ID del m\xFAsico que acepta\r\n *                 example: \"musician_456\"\r\n *               message:\r\n *                 type: string\r\n *                 description: Mensaje opcional del m\xFAsico\r\n *                 example: \"Estoy disponible para tocar en tu boda\"\r\n *     responses:\r\n *       200:\r\n *         description: Solicitud aceptada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                   example: true\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Solicitud aceptada correctamente\"\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     requestId:\r\n *                       type: string\r\n *                       example: \"request_123456\"\r\n *                     musicianId:\r\n *                       type: string\r\n *                       example: \"musician_456\"\r\n *                     status:\r\n *                       type: string\r\n *                       example: \"asignada\"\r\n *                     assignedAt:\r\n *                       type: string\r\n *                       format: date-time\r\n *                       example: \"2024-01-15T12:00:00Z\"\r\n *       400:\r\n *         description: Solicitud ya asignada o no disponible\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"La solicitud ya ha sido asignada a otro m\xFAsico\"\r\n *       404:\r\n *         description: Solicitud no encontrada\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /musician-requests/cancel:\r\n *   post:\r\n *     tags: [MusicianRequests]\r\n *     summary: Cancelar solicitud de m\xFAsico\r\n *     description: Cancela una solicitud (solo el creador o admin)\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - requestId\r\n *             properties:\r\n *               requestId:\r\n *                 type: string\r\n *                 description: ID de la solicitud\r\n *                 example: \"request_123456\"\r\n *               reason:\r\n *                 type: string\r\n *                 description: Raz\xF3n de la cancelaci\xF3n\r\n *                 example: \"Evento cancelado por el cliente\"\r\n *     responses:\r\n *       200:\r\n *         description: Solicitud cancelada exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                   example: true\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Solicitud cancelada correctamente\"\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     requestId:\r\n *                       type: string\r\n *                       example: \"request_123456\"\r\n *                     status:\r\n *                       type: string\r\n *                       example: \"cancelada\"\r\n *                     cancelledAt:\r\n *                       type: string\r\n *                       format: date-time\r\n *                       example: \"2024-01-15T13:00:00Z\"\r\n *                     reason:\r\n *                       type: string\r\n *                       example: \"Evento cancelado por el cliente\"\r\n *       404:\r\n *         description: Solicitud no encontrada\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /musician-requests/{id}/status:\r\n *   get:\r\n *     tags: [MusicianRequests]\r\n *     summary: Consultar estado de solicitud\r\n *     description: Obtiene solo el estado actual de una solicitud\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description: ID de la solicitud\r\n *         example: \"request_123456\"\r\n *     responses:\r\n *       200:\r\n *         description: Estado de la solicitud\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 id:\r\n *                   type: string\r\n *                   example: \"request_123456\"\r\n *                 status:\r\n *                   type: string\r\n *                   enum: [pendiente, asignada, cancelada, completada, no_asignada]\r\n *                   example: \"asignada\"\r\n *                 assignedMusicianId:\r\n *                   type: string\r\n *                   example: \"musician_456\"\r\n *                 assignedAt:\r\n *                   type: string\r\n *                   format: date-time\r\n *                   example: \"2024-01-15T12:00:00Z\"\r\n *       404:\r\n *         description: Solicitud no encontrada\r\n *       500:\r\n *         description: Error interno del servidor\r\n */\r\n\r\n// CRUD completo\r\nrouter.get('/:id', getRequestById);\r\nrouter.put('/:id', updateRequest);\r\nrouter.delete('/:id', deleteRequest);\r\n\r\nexport default router;\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3facb699f42ed967224c07cf69ecacc10b3555a2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ney3o1q32 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ney3o1q32();
cov_1ney3o1q32().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1ney3o1q32().s[1]++, require("express"));
const musicianRequestController_1 =
/* istanbul ignore next */
(cov_1ney3o1q32().s[2]++, require("../controllers/musicianRequestController"));
const router =
/* istanbul ignore next */
(cov_1ney3o1q32().s[3]++, (0, express_1.Router)());
/**
 * @swagger
 * tags:
 *   name: MusicianRequests
 *   description: Endpoints para solicitudes directas de músicos - CRUD completo implementado
 */
/**
 * @swagger
 * components:
 *   schemas:
 *     MusicianRequest:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           description: ID único de la solicitud
 *         userId:
 *           type: string
 *           description: ID del usuario que crea la solicitud
 *         eventType:
 *           type: string
 *           enum: [concierto, boda, culto, evento_corporativo, festival, fiesta_privada, graduacion, cumpleanos, otro]
 *           description: Tipo de evento
 *         date:
 *           type: string
 *           format: date
 *           description: Fecha del evento (YYYY-MM-DD)
 *         time:
 *           type: string
 *           description: Hora del evento (HH:MM)
 *         location:
 *           type: string
 *           description: Ubicación del evento
 *         instrument:
 *           type: string
 *           enum: [guitarra, piano, bajo, bateria, saxofon, trompeta, violin, canto, teclado, flauta, otro]
 *           description: Instrumento requerido
 *         budget:
 *           type: number
 *           description: Presupuesto disponible
 *         status:
 *           type: string
 *           enum: [pendiente, asignada, cancelada, completada, no_asignada]
 *           description: Estado de la solicitud
 *         assignedMusicianId:
 *           type: string
 *           description: ID del músico asignado
 *         description:
 *           type: string
 *           description: Descripción adicional del evento
 *         requirements:
 *           type: string
 *           description: Requisitos específicos
 *         contactPhone:
 *           type: string
 *           description: Teléfono de contacto
 *         contactEmail:
 *           type: string
 *           description: Email de contacto
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: Fecha de creación
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: Fecha de última actualización
 */
/**
 * @swagger
 * /musician-requests:
 *   post:
 *     tags: [MusicianRequests]
 *     summary: Crear solicitud de músico
 *     description: Crea una nueva solicitud de músico para un evento
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - eventType
 *               - date
 *               - time
 *               - location
 *               - instrument
 *               - budget
 *             properties:
 *               eventType:
 *                 type: string
 *                 enum: [concierto, boda, culto, evento_corporativo, festival, fiesta_privada, graduacion, cumpleanos, otro]
 *                 example: "boda"
 *               date:
 *                 type: string
 *                 format: date
 *                 example: "2024-12-25"
 *               time:
 *                 type: string
 *                 example: "18:00"
 *               location:
 *                 type: string
 *                 example: "Salón de Eventos ABC"
 *               instrument:
 *                 type: string
 *                 enum: [guitarra, piano, bajo, bateria, saxofon, trompeta, violin, canto, teclado, flauta, otro]
 *                 example: "piano"
 *               budget:
 *                 type: number
 *                 example: 50000
 *               description:
 *                 type: string
 *                 example: "Necesitamos un pianista para ceremonia y recepción"
 *               requirements:
 *                 type: string
 *                 example: "Repertorio romántico y clásico"
 *               contactPhone:
 *                 type: string
 *                 example: "+1234567890"
 *               contactEmail:
 *                 type: string
 *                 example: "organizador@evento.com"
 *     responses:
 *       201:
 *         description: Solicitud creada exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "Solicitud creada correctamente"
 *                 data:
 *                   $ref: '#/components/schemas/MusicianRequest'
 *       400:
 *         description: Datos de entrada inválidos
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "Datos de entrada inválidos"
 *       401:
 *         description: No autorizado
 *       500:
 *         description: Error interno del servidor
 */
/* istanbul ignore next */
cov_1ney3o1q32().s[4]++;
router.post('/', musicianRequestController_1.createRequest);
/**
 * @swagger
 * /musician-requests/{id}:
 *   get:
 *     tags: [MusicianRequests]
 *     summary: Obtener solicitud por ID
 *     description: Obtiene una solicitud específica por su ID
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID de la solicitud
 *         example: "request_123456"
 *     responses:
 *       200:
 *         description: Solicitud encontrada
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/MusicianRequest'
 *       404:
 *         description: Solicitud no encontrada
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "Solicitud no encontrada"
 *       500:
 *         description: Error interno del servidor
 */
/**
 * @swagger
 * /musician-requests/{id}:
 *   put:
 *     tags: [MusicianRequests]
 *     summary: Actualizar solicitud
 *     description: Actualiza una solicitud existente
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID de la solicitud
 *         example: "request_123456"
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               date:
 *                 type: string
 *                 format: date
 *                 example: "2024-12-26"
 *               time:
 *                 type: string
 *                 example: "19:00"
 *               location:
 *                 type: string
 *                 example: "Salón de Eventos XYZ"
 *               budget:
 *                 type: number
 *                 example: 60000
 *               description:
 *                 type: string
 *                 example: "Actualización: Necesitamos un pianista para ceremonia, recepción y baile"
 *               requirements:
 *                 type: string
 *                 example: "Repertorio actualizado"
 *     responses:
 *       200:
 *         description: Solicitud actualizada exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "Solicitud actualizada correctamente"
 *                 data:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: string
 *                       example: "request_123456"
 *                     updatedAt:
 *                       type: string
 *                       format: date-time
 *                       example: "2024-01-15T11:45:00Z"
 *       404:
 *         description: Solicitud no encontrada
 *       500:
 *         description: Error interno del servidor
 */
/**
 * @swagger
 * /musician-requests/{id}:
 *   delete:
 *     tags: [MusicianRequests]
 *     summary: Eliminar solicitud
 *     description: Elimina una solicitud específica
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID de la solicitud
 *         example: "request_123456"
 *     responses:
 *       200:
 *         description: Solicitud eliminada exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "Solicitud eliminada correctamente"
 *       404:
 *         description: Solicitud no encontrada
 *       500:
 *         description: Error interno del servidor
 */
/**
 * @swagger
 * /musician-requests/accept:
 *   post:
 *     tags: [MusicianRequests]
 *     summary: Aceptar solicitud de músico
 *     description: Permite a un músico aceptar una solicitud disponible
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - requestId
 *               - musicianId
 *             properties:
 *               requestId:
 *                 type: string
 *                 description: ID de la solicitud
 *                 example: "request_123456"
 *               musicianId:
 *                 type: string
 *                 description: ID del músico que acepta
 *                 example: "musician_456"
 *               message:
 *                 type: string
 *                 description: Mensaje opcional del músico
 *                 example: "Estoy disponible para tocar en tu boda"
 *     responses:
 *       200:
 *         description: Solicitud aceptada exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "Solicitud aceptada correctamente"
 *                 data:
 *                   type: object
 *                   properties:
 *                     requestId:
 *                       type: string
 *                       example: "request_123456"
 *                     musicianId:
 *                       type: string
 *                       example: "musician_456"
 *                     status:
 *                       type: string
 *                       example: "asignada"
 *                     assignedAt:
 *                       type: string
 *                       format: date-time
 *                       example: "2024-01-15T12:00:00Z"
 *       400:
 *         description: Solicitud ya asignada o no disponible
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "La solicitud ya ha sido asignada a otro músico"
 *       404:
 *         description: Solicitud no encontrada
 *       500:
 *         description: Error interno del servidor
 */
/**
 * @swagger
 * /musician-requests/cancel:
 *   post:
 *     tags: [MusicianRequests]
 *     summary: Cancelar solicitud de músico
 *     description: Cancela una solicitud (solo el creador o admin)
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - requestId
 *             properties:
 *               requestId:
 *                 type: string
 *                 description: ID de la solicitud
 *                 example: "request_123456"
 *               reason:
 *                 type: string
 *                 description: Razón de la cancelación
 *                 example: "Evento cancelado por el cliente"
 *     responses:
 *       200:
 *         description: Solicitud cancelada exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "Solicitud cancelada correctamente"
 *                 data:
 *                   type: object
 *                   properties:
 *                     requestId:
 *                       type: string
 *                       example: "request_123456"
 *                     status:
 *                       type: string
 *                       example: "cancelada"
 *                     cancelledAt:
 *                       type: string
 *                       format: date-time
 *                       example: "2024-01-15T13:00:00Z"
 *                     reason:
 *                       type: string
 *                       example: "Evento cancelado por el cliente"
 *       404:
 *         description: Solicitud no encontrada
 *       500:
 *         description: Error interno del servidor
 */
/**
 * @swagger
 * /musician-requests/{id}/status:
 *   get:
 *     tags: [MusicianRequests]
 *     summary: Consultar estado de solicitud
 *     description: Obtiene solo el estado actual de una solicitud
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID de la solicitud
 *         example: "request_123456"
 *     responses:
 *       200:
 *         description: Estado de la solicitud
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   example: "request_123456"
 *                 status:
 *                   type: string
 *                   enum: [pendiente, asignada, cancelada, completada, no_asignada]
 *                   example: "asignada"
 *                 assignedMusicianId:
 *                   type: string
 *                   example: "musician_456"
 *                 assignedAt:
 *                   type: string
 *                   format: date-time
 *                   example: "2024-01-15T12:00:00Z"
 *       404:
 *         description: Solicitud no encontrada
 *       500:
 *         description: Error interno del servidor
 */
// CRUD completo
/* istanbul ignore next */
cov_1ney3o1q32().s[5]++;
router.get('/:id', musicianRequestController_1.getRequestById);
/* istanbul ignore next */
cov_1ney3o1q32().s[6]++;
router.put('/:id', musicianRequestController_1.updateRequest);
/* istanbul ignore next */
cov_1ney3o1q32().s[7]++;
router.delete('/:id', musicianRequestController_1.deleteRequest);
/* istanbul ignore next */
cov_1ney3o1q32().s[8]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,