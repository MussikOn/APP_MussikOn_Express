{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\firestoreIndexes.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\firestoreIndexes.test.ts"],"sourcesContent":["import { FirestoreIndexManager } from '../utils/firestoreIndexes';\r\n\r\ndescribe('FirestoreIndexManager', () => {\r\n  beforeEach(() => {\r\n    // Limpiar mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('initializeIndexes', () => {\r\n    it('should log required indexes information', async () => {\r\n      // Arrange\r\n      const consoleSpy = jest.spyOn(console, 'info').mockImplementation();\r\n\r\n      // Act\r\n      await FirestoreIndexManager.initializeIndexes();\r\n\r\n      // Assert\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('🔧 Verificando configuración de índices de Firestore...'));\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('📋 Índice requerido: bank_accounts - bank_accounts_user_default_created'));\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('   Campos: userId(ASCENDING), isDefault(DESCENDING), createdAt(DESCENDING)'));\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('📋 Índice requerido: user_deposits - user_deposits_status_created'));\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('   Campos: status(ASCENDING), createdAt(DESCENDING)'));\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('📋 Índice requerido: withdrawal_requests - withdrawal_requests_status_created'));\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('   Campos: status(ASCENDING), createdAt(DESCENDING)'));\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('📋 Índice requerido: musician_earnings - musician_earnings_musician_created'));\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('   Campos: musicianId(ASCENDING), createdAt(DESCENDING)'));\r\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('✅ Verificación de índices completada. Los índices deben crearse manualmente en Firebase Console.'));\r\n\r\n      // Cleanup\r\n      consoleSpy.mockRestore();\r\n    });\r\n\r\n\r\n  });\r\n\r\n  describe('getRequiredIndexes', () => {\r\n    it('should return all required indexes configuration', () => {\r\n      // Act\r\n      const indexes = FirestoreIndexManager.getRequiredIndexes();\r\n\r\n      // Assert\r\n      expect(indexes).toHaveProperty('bank_accounts');\r\n      expect(indexes).toHaveProperty('user_deposits');\r\n      expect(indexes).toHaveProperty('withdrawal_requests');\r\n      expect(indexes).toHaveProperty('musician_earnings');\r\n\r\n      // Verify bank_accounts index\r\n      expect(indexes.bank_accounts).toHaveLength(1);\r\n      expect(indexes.bank_accounts[0]).toEqual({\r\n        name: 'bank_accounts_user_default_created',\r\n        fields: [\r\n          { fieldPath: 'userId', order: 'ASCENDING' },\r\n          { fieldPath: 'isDefault', order: 'DESCENDING' },\r\n          { fieldPath: 'createdAt', order: 'DESCENDING' }\r\n        ]\r\n      });\r\n\r\n      // Verify user_deposits index\r\n      expect(indexes.user_deposits).toHaveLength(1);\r\n      expect(indexes.user_deposits[0]).toEqual({\r\n        name: 'user_deposits_status_created',\r\n        fields: [\r\n          { fieldPath: 'status', order: 'ASCENDING' },\r\n          { fieldPath: 'createdAt', order: 'DESCENDING' }\r\n        ]\r\n      });\r\n\r\n      // Verify withdrawal_requests index\r\n      expect(indexes.withdrawal_requests).toHaveLength(1);\r\n      expect(indexes.withdrawal_requests[0]).toEqual({\r\n        name: 'withdrawal_requests_status_created',\r\n        fields: [\r\n          { fieldPath: 'status', order: 'ASCENDING' },\r\n          { fieldPath: 'createdAt', order: 'DESCENDING' }\r\n        ]\r\n      });\r\n\r\n      // Verify musician_earnings index\r\n      expect(indexes.musician_earnings).toHaveLength(1);\r\n      expect(indexes.musician_earnings[0]).toEqual({\r\n        name: 'musician_earnings_musician_created',\r\n        fields: [\r\n          { fieldPath: 'musicianId', order: 'ASCENDING' },\r\n          { fieldPath: 'createdAt', order: 'DESCENDING' }\r\n        ]\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('isIndexConfigured', () => {\r\n    it('should return true for configured indexes', () => {\r\n      // Act & Assert\r\n      expect(FirestoreIndexManager.isIndexConfigured('bank_accounts', 'bank_accounts_user_default_created')).toBe(true);\r\n      expect(FirestoreIndexManager.isIndexConfigured('user_deposits', 'user_deposits_status_created')).toBe(true);\r\n      expect(FirestoreIndexManager.isIndexConfigured('withdrawal_requests', 'withdrawal_requests_status_created')).toBe(true);\r\n      expect(FirestoreIndexManager.isIndexConfigured('musician_earnings', 'musician_earnings_musician_created')).toBe(true);\r\n    });\r\n\r\n    it('should return false for non-configured indexes', () => {\r\n      // Act & Assert\r\n      expect(FirestoreIndexManager.isIndexConfigured('bank_accounts', 'non_existent_index')).toBe(false);\r\n      expect(FirestoreIndexManager.isIndexConfigured('non_existent_collection', 'some_index')).toBe(false);\r\n    });\r\n\r\n    it('should return false for non-existent collections', () => {\r\n      // Act & Assert\r\n      expect(FirestoreIndexManager.isIndexConfigured('non_existent_collection', 'bank_accounts_user_default_created')).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('getIndexesForCollection', () => {\r\n    it('should return indexes for existing collections', () => {\r\n      // Act\r\n      const bankAccountsIndexes = FirestoreIndexManager.getIndexesForCollection('bank_accounts');\r\n      const userDepositsIndexes = FirestoreIndexManager.getIndexesForCollection('user_deposits');\r\n      const withdrawalRequestsIndexes = FirestoreIndexManager.getIndexesForCollection('withdrawal_requests');\r\n      const musicianEarningsIndexes = FirestoreIndexManager.getIndexesForCollection('musician_earnings');\r\n\r\n      // Assert\r\n      expect(bankAccountsIndexes).toHaveLength(1);\r\n      expect(bankAccountsIndexes[0].name).toBe('bank_accounts_user_default_created');\r\n\r\n      expect(userDepositsIndexes).toHaveLength(1);\r\n      expect(userDepositsIndexes[0].name).toBe('user_deposits_status_created');\r\n\r\n      expect(withdrawalRequestsIndexes).toHaveLength(1);\r\n      expect(withdrawalRequestsIndexes[0].name).toBe('withdrawal_requests_status_created');\r\n\r\n      expect(musicianEarningsIndexes).toHaveLength(1);\r\n      expect(musicianEarningsIndexes[0].name).toBe('musician_earnings_musician_created');\r\n    });\r\n\r\n    it('should return empty array for non-existent collections', () => {\r\n      // Act\r\n      const nonExistentIndexes = FirestoreIndexManager.getIndexesForCollection('non_existent_collection');\r\n\r\n      // Assert\r\n      expect(nonExistentIndexes).toEqual([]);\r\n    });\r\n  });\r\n\r\n  describe('checkIndexStatus', () => {\r\n    it('should return simulated index status', async () => {\r\n      // Act\r\n      const status = await FirestoreIndexManager.checkIndexStatus();\r\n\r\n      // Assert\r\n      expect(status).toEqual({\r\n        'bank_accounts_bank_accounts_user_default_created': true,\r\n        'user_deposits_user_deposits_status_created': true,\r\n        'withdrawal_requests_withdrawal_requests_status_created': true,\r\n        'musician_earnings_musician_earnings_musician_created': true\r\n      });\r\n    });\r\n\r\n\r\n  });\r\n\r\n  describe('generateIndexCreationUrl', () => {\r\n    it('should generate URL for bank_accounts index', () => {\r\n      // Act\r\n      const url = FirestoreIndexManager.generateIndexCreationUrl('bank_accounts', 'bank_accounts_user_default_created');\r\n\r\n      // Assert\r\n      expect(url).toContain('https://console.firebase.google.com/project/_/firestore/indexes');\r\n      expect(url).toContain('create_composite=bank_accounts');\r\n      expect(url).toContain('query_mode=COLLECTION');\r\n      expect(url).toContain('fields=userId:ascending,isDefault:descending,createdAt:descending');\r\n    });\r\n\r\n    it('should generate URL for user_deposits index', () => {\r\n      // Act\r\n      const url = FirestoreIndexManager.generateIndexCreationUrl('user_deposits', 'user_deposits_status_created');\r\n\r\n      // Assert\r\n      expect(url).toContain('create_composite=user_deposits');\r\n      expect(url).toContain('fields=status:ascending,createdAt:descending');\r\n    });\r\n\r\n    it('should generate URL for withdrawal_requests index', () => {\r\n      // Act\r\n      const url = FirestoreIndexManager.generateIndexCreationUrl('withdrawal_requests', 'withdrawal_requests_status_created');\r\n\r\n      // Assert\r\n      expect(url).toContain('create_composite=withdrawal_requests');\r\n      expect(url).toContain('fields=status:ascending,createdAt:descending');\r\n    });\r\n\r\n    it('should generate URL for musician_earnings index', () => {\r\n      // Act\r\n      const url = FirestoreIndexManager.generateIndexCreationUrl('musician_earnings', 'musician_earnings_musician_created');\r\n\r\n      // Assert\r\n      expect(url).toContain('create_composite=musician_earnings');\r\n      expect(url).toContain('fields=musicianId:ascending,createdAt:descending');\r\n    });\r\n\r\n    it('should return empty string for non-existent index', () => {\r\n      // Act\r\n      const url = FirestoreIndexManager.generateIndexCreationUrl('bank_accounts', 'non_existent_index');\r\n\r\n      // Assert\r\n      expect(url).toBe('');\r\n    });\r\n\r\n    it('should return empty string for non-existent collection', () => {\r\n      // Act\r\n      const url = FirestoreIndexManager.generateIndexCreationUrl('non_existent_collection', 'bank_accounts_user_default_created');\r\n\r\n      // Assert\r\n      expect(url).toBe('');\r\n    });\r\n  });\r\n\r\n  describe('Index Configuration Validation', () => {\r\n    it('should have valid field configurations', () => {\r\n      // Act\r\n      const indexes = FirestoreIndexManager.getRequiredIndexes();\r\n\r\n      // Assert - Validate bank_accounts index\r\n      const bankAccountsIndex = indexes.bank_accounts[0];\r\n      expect(bankAccountsIndex.fields).toHaveLength(3);\r\n      expect(bankAccountsIndex.fields[0]).toEqual({ fieldPath: 'userId', order: 'ASCENDING' });\r\n      expect(bankAccountsIndex.fields[1]).toEqual({ fieldPath: 'isDefault', order: 'DESCENDING' });\r\n      expect(bankAccountsIndex.fields[2]).toEqual({ fieldPath: 'createdAt', order: 'DESCENDING' });\r\n\r\n      // Validate user_deposits index\r\n      const userDepositsIndex = indexes.user_deposits[0];\r\n      expect(userDepositsIndex.fields).toHaveLength(2);\r\n      expect(userDepositsIndex.fields[0]).toEqual({ fieldPath: 'status', order: 'ASCENDING' });\r\n      expect(userDepositsIndex.fields[1]).toEqual({ fieldPath: 'createdAt', order: 'DESCENDING' });\r\n\r\n      // Validate withdrawal_requests index\r\n      const withdrawalRequestsIndex = indexes.withdrawal_requests[0];\r\n      expect(withdrawalRequestsIndex.fields).toHaveLength(2);\r\n      expect(withdrawalRequestsIndex.fields[0]).toEqual({ fieldPath: 'status', order: 'ASCENDING' });\r\n      expect(withdrawalRequestsIndex.fields[1]).toEqual({ fieldPath: 'createdAt', order: 'DESCENDING' });\r\n\r\n      // Validate musician_earnings index\r\n      const musicianEarningsIndex = indexes.musician_earnings[0];\r\n      expect(musicianEarningsIndex.fields).toHaveLength(2);\r\n      expect(musicianEarningsIndex.fields[0]).toEqual({ fieldPath: 'musicianId', order: 'ASCENDING' });\r\n      expect(musicianEarningsIndex.fields[1]).toEqual({ fieldPath: 'createdAt', order: 'DESCENDING' });\r\n    });\r\n\r\n    it('should have unique index names', () => {\r\n      // Act\r\n      const indexes = FirestoreIndexManager.getRequiredIndexes();\r\n      const allIndexes = [\r\n        ...indexes.bank_accounts,\r\n        ...indexes.user_deposits,\r\n        ...indexes.withdrawal_requests,\r\n        ...indexes.musician_earnings\r\n      ];\r\n\r\n      const indexNames = allIndexes.map(index => index.name);\r\n\r\n      // Assert\r\n      const uniqueNames = new Set(indexNames);\r\n      expect(uniqueNames.size).toBe(indexNames.length);\r\n    });\r\n\r\n    it('should have valid order values', () => {\r\n      // Act\r\n      const indexes = FirestoreIndexManager.getRequiredIndexes();\r\n      const allIndexes = [\r\n        ...indexes.bank_accounts,\r\n        ...indexes.user_deposits,\r\n        ...indexes.withdrawal_requests,\r\n        ...indexes.musician_earnings\r\n      ];\r\n\r\n      // Assert\r\n      allIndexes.forEach(index => {\r\n        index.fields.forEach(field => {\r\n          expect(['ASCENDING', 'DESCENDING']).toContain(field.order);\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Integration Tests', () => {\r\n    it('should provide complete index information for all collections', () => {\r\n      // Act\r\n      const indexes = FirestoreIndexManager.getRequiredIndexes();\r\n      const collections = Object.keys(indexes);\r\n\r\n      // Assert\r\n      expect(collections).toHaveLength(4);\r\n      expect(collections).toContain('bank_accounts');\r\n      expect(collections).toContain('user_deposits');\r\n      expect(collections).toContain('withdrawal_requests');\r\n      expect(collections).toContain('musician_earnings');\r\n\r\n      // Verify each collection has at least one index\r\n      collections.forEach(collection => {\r\n        const collectionIndexes = indexes[collection as keyof typeof indexes];\r\n        expect(collectionIndexes).toHaveLength(1);\r\n        expect(collectionIndexes[0]).toHaveProperty('name');\r\n        expect(collectionIndexes[0]).toHaveProperty('fields');\r\n        expect(Array.isArray(collectionIndexes[0].fields)).toBe(true);\r\n      });\r\n    });\r\n\r\n    it('should generate valid URLs for all indexes', () => {\r\n      // Act\r\n      const indexes = FirestoreIndexManager.getRequiredIndexes();\r\n      const collections = Object.keys(indexes);\r\n\r\n      // Assert\r\n      collections.forEach(collection => {\r\n        const index = indexes[collection as keyof typeof indexes][0];\r\n        const url = FirestoreIndexManager.generateIndexCreationUrl(collection, index.name);\r\n        \r\n        expect(url).not.toBe('');\r\n        expect(url).toContain('https://console.firebase.google.com');\r\n        expect(url).toContain('firestore/indexes');\r\n        expect(url).toContain(`create_composite=${collection}`);\r\n        expect(url).toContain('query_mode=COLLECTION');\r\n        expect(url).toContain('fields=');\r\n      });\r\n    });\r\n  });\r\n}); "],"version":3}