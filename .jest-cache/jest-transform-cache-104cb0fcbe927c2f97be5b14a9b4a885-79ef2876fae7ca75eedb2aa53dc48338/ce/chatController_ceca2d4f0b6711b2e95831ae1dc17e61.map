{"version":3,"names":["cov_1liqedlifh","actualCoverage","loggerService_1","s","require","chatModel_1","getConversations","req","res","f","__awaiter","userEmail","b","_a","user","status","json","success","error","conversations","getConversationsByUserModel","data","logger","message","exports","getMessages","conversationId","params","conversation","getConversationByIdModel","participants","includes","messages","getMessagesByConversationModel","markConversationAsReadModel","sendMessage","content","type","body","userName","_b","name","trim","length","messageData","senderId","senderName","createMessageModel","markAsRead","messageId","markMessageAsReadModel","createConversation","Array","isArray","allParticipants","Set","existingConversation","getConversationBetweenUsersModel","createConversationModel","searchConversations","search","unreadOnly","dateFrom","dateTo","query","filters","searchConversationsModel","deleteConversation","deleteConversationModel","archiveConversation","archiveConversationModel","getConversationById","getChatStats","stats","getChatStatsModel","getAvailableUsers","db","usersSnapshot","collection","get","users","forEach","doc","userData","push","email","lastName","online","lastSeen","searchTerm","toString","toLowerCase","filter"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\chatController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { logger } from '../services/loggerService';\r\nimport {\r\n  createConversationModel,\r\n  getConversationsByUserModel,\r\n  getConversationByIdModel,\r\n  getMessagesByConversationModel,\r\n  createMessageModel,\r\n  markMessageAsReadModel,\r\n  markConversationAsReadModel,\r\n  searchConversationsModel,\r\n  deleteConversationModel,\r\n  archiveConversationModel,\r\n  getConversationBetweenUsersModel,\r\n  getChatStatsModel,\r\n} from '../models/chatModel';\r\nimport { ChatFilters } from '../utils/DataTypes';\r\n\r\n// Usar la interfaz global extendida de Express\r\n\r\n// Tipo para las funciones del controlador\r\ntype ChatControllerFunction = (req: any, res: Response) => Promise<void>;\r\n\r\n// Obtener todas las conversaciones del usuario\r\nexport const getConversations = async (req: any, res: Response) => {\r\n  try {\r\n    const userEmail = req.user?.userEmail;\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const conversations = await getConversationsByUserModel(userEmail);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: conversations,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al obtener conversaciones:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Obtener mensajes de una conversación específica\r\nexport const getMessages = async (req: any, res: Response) => {\r\n  try {\r\n    const { conversationId } = req.params;\r\n    const userEmail = req.user?.userEmail;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Verificar que el usuario es participante de la conversación\r\n    const conversation = await getConversationByIdModel(conversationId);\r\n    if (!conversation) {\r\n      res.status(404).json({\r\n        success: false,\r\n        error: 'Conversación no encontrada',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!conversation.participants.includes(userEmail)) {\r\n      res.status(403).json({\r\n        success: false,\r\n        error: 'No tienes permisos para acceder a esta conversación',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const messages = await getMessagesByConversationModel(conversationId);\r\n\r\n    // Marcar conversación como leída\r\n    await markConversationAsReadModel(conversationId, userEmail);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: messages,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al obtener mensajes:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Enviar un mensaje\r\nexport const sendMessage = async (req: any, res: Response) => {\r\n  try {\r\n    const { conversationId } = req.params;\r\n    const { content, type = 'text' } = req.body;\r\n    const userEmail = req.user?.userEmail;\r\n    const userName = req.user?.name;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!content || content.trim().length === 0) {\r\n      res.status(400).json({\r\n        success: false,\r\n        error: 'El contenido del mensaje es requerido',\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Verificar que el usuario es participante de la conversación\r\n    const conversation = await getConversationByIdModel(conversationId);\r\n    if (!conversation) {\r\n      res.status(404).json({\r\n        success: false,\r\n        error: 'Conversación no encontrada',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!conversation.participants.includes(userEmail)) {\r\n      res.status(403).json({\r\n        success: false,\r\n        error: 'No tienes permisos para enviar mensajes a esta conversación',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const messageData = {\r\n      conversationId,\r\n      senderId: userEmail,\r\n      senderName: userName || userEmail,\r\n      content: content.trim(),\r\n      status: 'sent' as const,\r\n      type: type as 'text' | 'image' | 'audio' | 'file',\r\n    };\r\n\r\n    const message = await createMessageModel(messageData);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: message,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al enviar mensaje:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Marcar mensaje como leído\r\nexport const markAsRead = async (req: any, res: Response) => {\r\n  try {\r\n    const { messageId } = req.params;\r\n    const userEmail = req.user?.userEmail;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    await markMessageAsReadModel(messageId);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: null,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al marcar mensaje como leído:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Crear una nueva conversación\r\nexport const createConversation = async (req: any, res: Response) => {\r\n  try {\r\n    const { participants } = req.body;\r\n    const userEmail = req.user?.userEmail;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !participants ||\r\n      !Array.isArray(participants) ||\r\n      participants.length === 0\r\n    ) {\r\n      res.status(400).json({\r\n        success: false,\r\n        error: 'Se requiere al menos un participante',\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Asegurar que el usuario actual esté en los participantes\r\n    const allParticipants = [...new Set([userEmail, ...participants])];\r\n\r\n    // Verificar si ya existe una conversación entre estos usuarios\r\n    const existingConversation = await getConversationBetweenUsersModel(\r\n      userEmail,\r\n      participants[0]\r\n    );\r\n    if (existingConversation) {\r\n      res.json({\r\n        success: true,\r\n        data: existingConversation,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const conversation = await createConversationModel(allParticipants);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: conversation,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al crear conversación:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Buscar conversaciones con filtros\r\nexport const searchConversations = async (req: any, res: Response) => {\r\n  try {\r\n    const userEmail = req.user?.userEmail;\r\n    const { search, unreadOnly, dateFrom, dateTo } = req.query;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const filters: ChatFilters = {\r\n      search: search as string,\r\n      unreadOnly: unreadOnly === 'true',\r\n      dateFrom: dateFrom as string,\r\n      dateTo: dateTo as string,\r\n    };\r\n\r\n    const conversations = await searchConversationsModel(userEmail, filters);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: conversations,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al buscar conversaciones:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Eliminar conversación\r\nexport const deleteConversation = async (req: any, res: Response) => {\r\n  try {\r\n    const { conversationId } = req.params;\r\n    const userEmail = req.user?.userEmail;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    await deleteConversationModel(conversationId, userEmail);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: null,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al eliminar conversación:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Archivar conversación\r\nexport const archiveConversation = async (req: any, res: Response) => {\r\n  try {\r\n    const { conversationId } = req.params;\r\n    const userEmail = req.user?.userEmail;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    await archiveConversationModel(conversationId, userEmail);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: null,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al archivar conversación:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Obtener conversación por ID\r\nexport const getConversationById = async (req: any, res: Response) => {\r\n  try {\r\n    const { conversationId } = req.params;\r\n    const userEmail = req.user?.userEmail;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const conversation = await getConversationByIdModel(conversationId);\r\n    if (!conversation) {\r\n      res.status(404).json({\r\n        success: false,\r\n        error: 'Conversación no encontrada',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!conversation.participants.includes(userEmail)) {\r\n      res.status(403).json({\r\n        success: false,\r\n        error: 'No tienes permisos para acceder a esta conversación',\r\n      });\r\n      return;\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      data: conversation,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al obtener conversación:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Obtener estadísticas de chat\r\nexport const getChatStats = async (req: any, res: Response) => {\r\n  try {\r\n    const userEmail = req.user?.userEmail;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const stats = await getChatStatsModel(userEmail);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: stats,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al obtener estadísticas de chat:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n\r\n// Obtener usuarios disponibles para chat\r\nexport const getAvailableUsers = async (req: any, res: Response) => {\r\n  try {\r\n    const userEmail = req.user?.userEmail;\r\n    const { search } = req.query;\r\n\r\n    if (!userEmail) {\r\n      res.status(401).json({\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Importar db aquí para evitar dependencias circulares\r\n    const { db } = require('../utils/firebase');\r\n    \r\n    // Obtener todos los usuarios\r\n    const usersSnapshot = await db.collection('users').get();\r\n    let users: any[] = [];\r\n    \r\n    usersSnapshot.forEach((doc: any) => {\r\n      const userData = doc.data();\r\n      // Excluir al usuario actual\r\n      if (userData.userEmail !== userEmail) {\r\n        users.push({\r\n          email: userData.userEmail,\r\n          name: userData.name || 'Usuario',\r\n          lastName: userData.lastName || '',\r\n          online: userData.online || false,\r\n          lastSeen: userData.lastSeen || null\r\n        });\r\n      }\r\n    });\r\n\r\n    // Aplicar filtro de búsqueda si se proporciona\r\n    if (search) {\r\n      const searchTerm = search.toString().toLowerCase();\r\n      users = users.filter(user => \r\n        user.name.toLowerCase().includes(searchTerm) ||\r\n        user.lastName.toLowerCase().includes(searchTerm) ||\r\n        user.email.toLowerCase().includes(searchTerm)\r\n      );\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      data: users,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('Error al obtener usuarios disponibles:', error as Error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    });\r\n  }\r\n};\r\n"],"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","ignoreList":[]}