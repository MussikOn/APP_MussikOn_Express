{"file":"C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\eventControllers.test.ts","mappings":"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","names":[],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\__tests__\\eventControllers.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport {\r\n  requestMusicianController,\r\n  myPendingEventsController,\r\n  myAssignedEventsController,\r\n  myCompletedEventsController,\r\n  availableRequestsController,\r\n  acceptEventController,\r\n  myScheduledEventsController,\r\n  myPastPerformancesController,\r\n  myEventsController,\r\n  myCancelledEventsController,\r\n  getEventByIdController,\r\n  cancelEventController,\r\n  completeEventController,\r\n  deleteEventController,\r\n} from '../controllers/eventControllers';\r\nimport {\r\n  createEventModel,\r\n  getEventsByUserAndStatus,\r\n  getAvailableEvents,\r\n  acceptEventModel,\r\n  getEventsByMusicianAndStatus,\r\n  getEventsByUser,\r\n  getEventsByMusician,\r\n  getEventByIdModel,\r\n  cancelEventModel,\r\n  completeEventModel,\r\n  deleteEventModel,\r\n} from '../models/eventModel';\r\nimport { createMockRequest, createMockResponse } from './setup';\r\n\r\n// Mock de todas las dependencias\r\njest.mock('../models/eventModel');\r\n\r\ndescribe('EventControllers', () => {\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockJson: jest.Mock;\r\n  let mockStatus: jest.Mock;\r\n\r\n  const mockEvent = {\r\n    id: 'event123',\r\n    eventName: 'Boda de María',\r\n    location: 'Santo Domingo',\r\n    status: 'pending',\r\n    user: 'juan@example.com',\r\n    assignedMusicianId: 'musician123'\r\n  };\r\n\r\n  const mockEvents = [\r\n    {\r\n      id: 'event1',\r\n      eventName: 'Evento 1',\r\n      status: 'pending'\r\n    },\r\n    {\r\n      id: 'event2',\r\n      eventName: 'Evento 2',\r\n      status: 'cancelled'\r\n    }\r\n  ];\r\n\r\n  beforeEach(() => {\r\n    mockJson = jest.fn();\r\n    mockStatus = jest.fn().mockReturnValue({ json: mockJson });\r\n    \r\n    mockResponse = {\r\n      status: mockStatus,\r\n      json: mockJson\r\n    };\r\n\r\n    // Reset de todos los mocks\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('requestMusicianController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          email: 'juan@example.com',\r\n          role: 'eventCreator',\r\n          name: 'Juan Pérez',\r\n          userEmail: 'juan@example.com'\r\n        },\r\n        body: {\r\n          eventName: 'Boda de María',\r\n          location: 'Santo Domingo',\r\n          date: '2024-12-25',\r\n          time: '18:00',\r\n          duration: '2 horas',\r\n          instrument: 'guitarra',\r\n          budget: '5000'\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should create event request successfully', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        user: 'juan@example.com',\r\n        status: 'pending_musician'\r\n      };\r\n\r\n      (createEventModel as jest.Mock).mockResolvedValue(mockEvent);\r\n\r\n      await requestMusicianController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(201);\r\n      expect(mockJson).toHaveBeenCalledWith({ data: mockEvent });\r\n    });\r\n\r\n    it('should return error when event creation fails', async () => {\r\n      (createEventModel as jest.Mock).mockRejectedValue(new Error('Database error'));\r\n\r\n      await requestMusicianController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(500);\r\n      expect(mockJson).toHaveBeenCalledWith({ msg: 'Error al crear solicitud' });\r\n    });\r\n  });\r\n\r\n  describe('myPendingEventsController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          email: 'juan@example.com',\r\n          role: 'eventCreator',\r\n          name: 'Juan Pérez',\r\n          userEmail: 'juan@example.com'\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should return pending events successfully', async () => {\r\n      const mockEvents = [\r\n        { id: 'event1', eventName: 'Evento 1', status: 'pending_musician' },\r\n        { id: 'event2', eventName: 'Evento 2', status: 'pending_musician' }\r\n      ];\r\n\r\n      (getEventsByUserAndStatus as jest.Mock).mockResolvedValue(mockEvents);\r\n\r\n      await myPendingEventsController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({ data: mockEvents });\r\n      expect(getEventsByUserAndStatus).toHaveBeenCalledWith('juan@example.com', 'pending_musician');\r\n    });\r\n  });\r\n\r\n  describe('myAssignedEventsController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          email: 'juan@example.com',\r\n          role: 'eventCreator',\r\n          name: 'Juan Pérez',\r\n          userEmail: 'juan@example.com'\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should return assigned events successfully', async () => {\r\n      const mockEvents = [\r\n        { id: 'event1', eventName: 'Evento 1', status: 'musician_assigned' },\r\n        { id: 'event2', eventName: 'Evento 2', status: 'musician_assigned' }\r\n      ];\r\n\r\n      (getEventsByUserAndStatus as jest.Mock).mockResolvedValue(mockEvents);\r\n\r\n      await myAssignedEventsController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({ data: mockEvents });\r\n      expect(getEventsByUserAndStatus).toHaveBeenCalledWith('juan@example.com', 'musician_assigned');\r\n    });\r\n  });\r\n\r\n  describe('myCompletedEventsController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'user123',\r\n          email: 'juan@example.com',\r\n          role: 'eventCreator',\r\n          name: 'Juan Pérez',\r\n          userEmail: 'juan@example.com'\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should return completed events successfully', async () => {\r\n      const mockEvents = [\r\n        { id: 'event1', eventName: 'Evento 1', status: 'completed' },\r\n        { id: 'event2', eventName: 'Evento 2', status: 'completed' }\r\n      ];\r\n\r\n      (getEventsByUserAndStatus as jest.Mock).mockResolvedValue(mockEvents);\r\n\r\n      await myCompletedEventsController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({ data: mockEvents });\r\n      expect(getEventsByUserAndStatus).toHaveBeenCalledWith('juan@example.com', 'completed');\r\n    });\r\n  });\r\n\r\n  describe('availableRequestsController', () => {\r\n    it('should return available events successfully', async () => {\r\n      const mockEvents = [\r\n        { id: 'event1', eventName: 'Evento 1', status: 'pending_musician' },\r\n        { id: 'event2', eventName: 'Evento 2', status: 'pending_musician' }\r\n      ];\r\n\r\n      (getAvailableEvents as jest.Mock).mockResolvedValue(mockEvents);\r\n\r\n      await availableRequestsController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({ data: mockEvents });\r\n    });\r\n  });\r\n\r\n  describe('acceptEventController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          eventId: 'event123'\r\n        },\r\n        user: {\r\n          id: 'user123',\r\n          userEmail: 'juan@example.com',\r\n          roll: 'musico'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should accept event successfully', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'musician_assigned'\r\n      };\r\n\r\n      (acceptEventModel as jest.Mock).mockResolvedValue(mockEvent);\r\n\r\n      await acceptEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith(mockEvent);\r\n    });\r\n\r\n    it('should return error when user is not a musician', async () => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          eventId: 'event123'\r\n        },\r\n        user: {\r\n          id: 'user123',\r\n          userEmail: 'juan@example.com',\r\n          roll: 'eventCreator'\r\n        }\r\n      });\r\n\r\n      await acceptEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(403);\r\n      expect(mockJson).toHaveBeenCalledWith({ msg: 'Solo los músicos pueden aceptar eventos.' });\r\n    });\r\n\r\n    it('should return error when event acceptance fails', async () => {\r\n      (acceptEventModel as jest.Mock).mockResolvedValue(null);\r\n\r\n      await acceptEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(400);\r\n      expect(mockJson).toHaveBeenCalledWith({ msg: 'No se pudo aceptar el evento.' });\r\n    });\r\n  });\r\n\r\n  describe('myScheduledEventsController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'musico123',\r\n          email: 'musico@example.com',\r\n          role: 'musico',\r\n          name: 'Músico Test',\r\n          userEmail: 'musico@example.com'\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should return scheduled events successfully', async () => {\r\n      const mockEvents = [\r\n        { id: 'event1', eventName: 'Evento 1', status: 'musician_assigned' },\r\n        { id: 'event2', eventName: 'Evento 2', status: 'musician_assigned' }\r\n      ];\r\n\r\n      (getEventsByMusicianAndStatus as jest.Mock).mockResolvedValue(mockEvents);\r\n\r\n      await myScheduledEventsController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({ data: mockEvents });\r\n      expect(getEventsByMusicianAndStatus).toHaveBeenCalledWith('musico@example.com', 'musician_assigned');\r\n    });\r\n  });\r\n\r\n  describe('myPastPerformancesController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = {\r\n        user: {\r\n          userId: 'musico123',\r\n          email: 'musico@example.com',\r\n          role: 'musico',\r\n          name: 'Músico Test',\r\n          userEmail: 'musico@example.com'\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should return past performances successfully', async () => {\r\n      const mockEvents = [\r\n        { id: 'event1', eventName: 'Evento 1', status: 'completed' },\r\n        { id: 'event2', eventName: 'Evento 2', status: 'completed' }\r\n      ];\r\n\r\n      (getEventsByMusicianAndStatus as jest.Mock).mockResolvedValue(mockEvents);\r\n\r\n      await myPastPerformancesController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({ data: mockEvents });\r\n      expect(getEventsByMusicianAndStatus).toHaveBeenCalledWith('musico@example.com', 'completed');\r\n    });\r\n  });\r\n\r\n  describe('myEventsController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          userEmail: 'juan@example.com',\r\n          roll: 'eventCreator'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should return all user events successfully', async () => {\r\n      const mockEvents = [\r\n        { id: 'event1', eventName: 'Evento 1' },\r\n        { id: 'event2', eventName: 'Evento 2' }\r\n      ];\r\n\r\n      (getEventsByUser as jest.Mock).mockResolvedValue(mockEvents);\r\n\r\n      await myEventsController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({ data: mockEvents });\r\n      expect(getEventsByUser).toHaveBeenCalledWith('juan@example.com');\r\n    });\r\n  });\r\n\r\n  describe('myCancelledEventsController', () => {\r\n    let isolatedMockRequest: Partial<Request>;\r\n    let isolatedMockResponse: Partial<Response>;\r\n    let isolatedMockJson: jest.Mock;\r\n    let isolatedMockStatus: jest.Mock;\r\n\r\n    beforeEach(() => {\r\n      // Crear mocks completamente aislados para este test\r\n      isolatedMockJson = jest.fn();\r\n      isolatedMockStatus = jest.fn().mockReturnValue({ json: isolatedMockJson });\r\n      \r\n      isolatedMockResponse = {\r\n        status: isolatedMockStatus,\r\n        json: isolatedMockJson\r\n      };\r\n\r\n      isolatedMockRequest = createMockRequest({\r\n        user: {\r\n          id: 'user123',\r\n          userEmail: 'juan@example.com',\r\n          roll: 'eventCreator'\r\n        }\r\n      });\r\n      \r\n      // Limpiar completamente todos los mocks\r\n      jest.clearAllMocks();\r\n    });\r\n\r\n    it('should return cancelled events successfully', async () => {\r\n      const cancelledEvents = [\r\n        { id: 'event1', eventName: 'Evento 1', status: 'cancelled' },\r\n        { id: 'event2', eventName: 'Evento 2', status: 'cancelled' }\r\n      ];\r\n\r\n      const musicianCancelledEvents = [\r\n        { id: 'event3', eventName: 'Evento 3', status: 'musician_cancelled' },\r\n        { id: 'event4', eventName: 'Evento 4', status: 'musician_cancelled' }\r\n      ];\r\n\r\n      const expectedEvents = [...cancelledEvents, ...musicianCancelledEvents];\r\n\r\n      // Mock específico para este test que devuelve diferentes resultados para cada llamada\r\n      (getEventsByUserAndStatus as jest.Mock)\r\n        .mockResolvedValueOnce(cancelledEvents)        // Primera llamada: 'cancelled'\r\n        .mockResolvedValueOnce(musicianCancelledEvents); // Segunda llamada: 'musician_cancelled'\r\n\r\n      await myCancelledEventsController(isolatedMockRequest as Request, isolatedMockResponse as Response);\r\n\r\n      expect(isolatedMockJson).toHaveBeenCalledWith({ data: expectedEvents });\r\n      expect(getEventsByUserAndStatus).toHaveBeenCalledWith('juan@example.com', 'cancelled');\r\n      expect(getEventsByUserAndStatus).toHaveBeenCalledWith('juan@example.com', 'musician_cancelled');\r\n    });\r\n  });\r\n\r\n  describe('getEventByIdController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          eventId: 'event123'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should return event by ID successfully', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        location: 'Santo Domingo'\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n\r\n      await getEventByIdController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        data: mockEvent\r\n      });\r\n      expect(getEventByIdModel).toHaveBeenCalledWith('event123');\r\n    });\r\n\r\n    it('should return error when event not found', async () => {\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(null);\r\n\r\n      await getEventByIdController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(404);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Evento no encontrado'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('cancelEventController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          eventId: 'event123'\r\n        },\r\n        user: {\r\n          id: 'user123',\r\n          userEmail: 'juan@example.com',\r\n          roll: 'eventCreator'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should cancel event successfully', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'cancelled',\r\n        user: 'juan@example.com' // El usuario debe ser el propietario\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n      (cancelEventModel as jest.Mock).mockResolvedValue(mockEvent);\r\n\r\n      await cancelEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Solicitud cancelada exitosamente',\r\n        data: mockEvent\r\n      });\r\n    });\r\n\r\n    it('should return error when user is not authorized', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'pending',\r\n        user: 'otro@example.com' // Usuario diferente al propietario\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n\r\n      await cancelEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(403);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'No tienes permisos para cancelar esta solicitud'\r\n      });\r\n    });\r\n\r\n    it('should return error when event cancellation fails', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'pending',\r\n        user: 'juan@example.com'\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n      (cancelEventModel as jest.Mock).mockResolvedValue(null);\r\n\r\n      await cancelEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(500);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Error al cancelar la solicitud'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('completeEventController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          eventId: 'event123'\r\n        },\r\n        user: {\r\n          id: 'user123',\r\n          userEmail: 'juan@example.com',\r\n          roll: 'eventCreator'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should complete event successfully', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'completed',\r\n        user: 'juan@example.com'\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n      (completeEventModel as jest.Mock).mockResolvedValue(mockEvent);\r\n\r\n      await completeEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Solicitud completada exitosamente',\r\n        data: mockEvent\r\n      });\r\n    });\r\n\r\n    it('should return error when user is not authorized', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'pending',\r\n        user: 'otro@example.com'\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n\r\n      await completeEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(403);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'No tienes permisos para completar esta solicitud'\r\n      });\r\n    });\r\n\r\n    it('should return error when event completion fails', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'pending',\r\n        user: 'juan@example.com'\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n      (completeEventModel as jest.Mock).mockResolvedValue(null);\r\n\r\n      await completeEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(500);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Error al completar la solicitud'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('deleteEventController', () => {\r\n    beforeEach(() => {\r\n      mockRequest = createMockRequest({\r\n        params: {\r\n          eventId: 'event123'\r\n        },\r\n        user: {\r\n          id: 'user123',\r\n          userEmail: 'juan@example.com',\r\n          roll: 'eventCreator'\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should delete event successfully', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'completed',\r\n        user: 'juan@example.com'\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n      (deleteEventModel as jest.Mock).mockResolvedValue(true);\r\n\r\n      await deleteEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: true,\r\n        message: 'Solicitud eliminada exitosamente'\r\n      });\r\n    });\r\n\r\n    it('should return error when user is not authorized', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'completed',\r\n        user: 'otro@example.com'\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n\r\n      await deleteEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(403);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'No tienes permisos para eliminar esta solicitud'\r\n      });\r\n    });\r\n\r\n    it('should return error when event deletion fails', async () => {\r\n      const mockEvent = {\r\n        id: 'event123',\r\n        eventName: 'Boda de María',\r\n        status: 'completed',\r\n        user: 'juan@example.com'\r\n      };\r\n\r\n      (getEventByIdModel as jest.Mock).mockResolvedValue(mockEvent);\r\n      (deleteEventModel as jest.Mock).mockResolvedValue(false);\r\n\r\n      await deleteEventController(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockStatus).toHaveBeenCalledWith(500);\r\n      expect(mockJson).toHaveBeenCalledWith({\r\n        success: false,\r\n        message: 'Error al eliminar la solicitud'\r\n      });\r\n    });\r\n  });\r\n}); "],"version":3}