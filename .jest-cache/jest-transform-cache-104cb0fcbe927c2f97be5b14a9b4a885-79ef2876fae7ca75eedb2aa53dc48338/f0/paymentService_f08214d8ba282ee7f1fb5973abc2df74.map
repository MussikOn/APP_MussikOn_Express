{"version":3,"names":["cov_19681mud5a","actualCoverage","firebase_1","s","require","loggerService_1","PaymentService","constructor","f","supportedCurrencies","defaultCurrency","createPaymentMethod","userId","paymentData","logger","info","metadata","paymentMethod","id","Date","now","Math","random","toString","substr","type","last4","brand","expiryMonth","expiryYear","isDefault","b","db","collection","doc","set","setDefaultPaymentMethod","paymentMethodId","error","getPaymentMethods","snapshot","where","orderBy","get","paymentMethods","forEach","push","Object","assign","data","batch","update","ref","commit","createPaymentIntent","userId_1","amount_1","amount","currency","description","paymentIntent","includes","status","createdAt","updatedAt","paymentIntentId","processPayment","success","paymentIntentRef","paymentIntentDoc","exists","Error","createInvoiceFromPayment","invoice","number","dueDate","paidAt","eventId","items","quantity","unitPrice","total","subtotal","tax","invoiceId","createInvoice","reduce","sum","item","map","index","getInvoices","query","invoices","markInvoiceAsPaid","invoiceRef","invoiceDoc","result","undefined","processRefund","reason","refund","refundId","getPaymentStats","period","startDate","getFullYear","getMonth","getTime","getDate","paymentQuery","paymentSnapshot","payments","docs","invoiceQuery","invoiceSnapshot","refundQuery","refundSnapshot","refunds","stats","totalRevenue","filter","p","totalTransactions","length","successfulTransactions","failedTransactions","totalInvoices","paidInvoices","i","totalRefunds","refundAmount","r","averageTransaction","successRate","validatePaymentMethod","cardNumber","cvc","replace","test","expiryDate","getPaymentGateways","gateways","name","isActive","config","fees","percentage","fixed","gateway","exports"],"sources":["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\services\\paymentService.ts"],"sourcesContent":["import { db } from '../utils/firebase';\r\nimport { logger } from './loggerService';\r\nimport { FieldValue } from 'firebase-admin/firestore';\r\n\r\n// Interfaces para el sistema de pagos\r\nexport interface PaymentMethod {\r\n  id: string;\r\n  type: 'card' | 'bank_transfer' | 'paypal' | 'stripe';\r\n  last4?: string;\r\n  brand?: string;\r\n  expiryMonth?: number;\r\n  expiryYear?: number;\r\n  isDefault: boolean;\r\n  userId: string;\r\n}\r\n\r\nexport interface PaymentIntent {\r\n  id: string;\r\n  amount: number; // en centavos\r\n  currency: string;\r\n  status: 'pending' | 'processing' | 'succeeded' | 'failed' | 'cancelled';\r\n  paymentMethodId: string;\r\n  userId: string;\r\n  eventId?: string;\r\n  description: string;\r\n  metadata: Record<string, any>;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface Invoice {\r\n  id: string;\r\n  number: string;\r\n  amount: number;\r\n  currency: string;\r\n  status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';\r\n  dueDate: Date;\r\n  paidAt?: Date;\r\n  userId: string;\r\n  eventId?: string;\r\n  items: InvoiceItem[];\r\n  subtotal: number;\r\n  tax: number;\r\n  total: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface InvoiceItem {\r\n  id: string;\r\n  description: string;\r\n  quantity: number;\r\n  unitPrice: number;\r\n  total: number;\r\n  type: 'service' | 'product' | 'fee';\r\n}\r\n\r\nexport interface PaymentGateway {\r\n  name: string;\r\n  isActive: boolean;\r\n  config: Record<string, any>;\r\n}\r\n\r\nexport interface Refund {\r\n  id: string;\r\n  paymentIntentId: string;\r\n  amount: number;\r\n  reason: string;\r\n  status: 'pending' | 'succeeded' | 'failed';\r\n  createdAt: Date;\r\n}\r\n\r\nexport class PaymentService {\r\n  private readonly supportedCurrencies = ['EUR', 'USD', 'GBP'];\r\n  private readonly defaultCurrency = 'EUR';\r\n\r\n  /**\r\n   * Crear un método de pago\r\n   */\r\n  async createPaymentMethod(\r\n    userId: string,\r\n    paymentData: any\r\n  ): Promise<PaymentMethod> {\r\n    try {\r\n      logger.info('Creando método de pago', {\r\n        userId,\r\n        metadata: { paymentData },\r\n      });\r\n\r\n      // En producción, esto se integraría con Stripe/PayPal\r\n      const paymentMethod: PaymentMethod = {\r\n        id: `pm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        type: paymentData.type,\r\n        last4: paymentData.last4,\r\n        brand: paymentData.brand,\r\n        expiryMonth: paymentData.expiryMonth,\r\n        expiryYear: paymentData.expiryYear,\r\n        isDefault: paymentData.isDefault || false,\r\n        userId,\r\n      };\r\n\r\n      await db\r\n        .collection('paymentMethods')\r\n        .doc(paymentMethod.id)\r\n        .set(paymentMethod);\r\n\r\n      // Si es el método por defecto, actualizar otros métodos\r\n      if (paymentMethod.isDefault) {\r\n        await this.setDefaultPaymentMethod(userId, paymentMethod.id);\r\n      }\r\n\r\n      logger.info('Método de pago creado', {\r\n        userId,\r\n        metadata: { paymentMethodId: paymentMethod.id },\r\n      });\r\n\r\n      return paymentMethod;\r\n    } catch (error) {\r\n      logger.error('Error creando método de pago', error as Error, { userId });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener métodos de pago de un usuario\r\n   */\r\n  async getPaymentMethods(userId: string): Promise<PaymentMethod[]> {\r\n    try {\r\n      const snapshot = await db\r\n        .collection('paymentMethods')\r\n        .where('userId', '==', userId)\r\n        .orderBy('isDefault', 'desc')\r\n        .get();\r\n\r\n      const paymentMethods: PaymentMethod[] = [];\r\n      snapshot.forEach((doc: any) => {\r\n        paymentMethods.push({ id: doc.id, ...doc.data() });\r\n      });\r\n\r\n      return paymentMethods;\r\n    } catch (error) {\r\n      logger.error('Error obteniendo métodos de pago', error as Error, {\r\n        userId,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Establecer método de pago por defecto\r\n   */\r\n  async setDefaultPaymentMethod(\r\n    userId: string,\r\n    paymentMethodId: string\r\n  ): Promise<void> {\r\n    try {\r\n      const batch = db.batch();\r\n\r\n      // Remover default de otros métodos\r\n      const snapshot = await db\r\n        .collection('paymentMethods')\r\n        .where('userId', '==', userId)\r\n        .where('isDefault', '==', true)\r\n        .get();\r\n\r\n      snapshot.forEach((doc: any) => {\r\n        batch.update(doc.ref, { isDefault: false });\r\n      });\r\n\r\n      // Establecer nuevo método por defecto\r\n      batch.update(db.collection('paymentMethods').doc(paymentMethodId), {\r\n        isDefault: true,\r\n      });\r\n\r\n      await batch.commit();\r\n\r\n      logger.info('Método de pago por defecto actualizado', {\r\n        userId,\r\n        metadata: { paymentMethodId },\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error estableciendo método por defecto', error as Error, {\r\n        userId,\r\n        metadata: { paymentMethodId },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crear intento de pago\r\n   */\r\n  async createPaymentIntent(\r\n    userId: string,\r\n    amount: number,\r\n    currency: string = 'EUR',\r\n    description: string,\r\n    metadata: Record<string, any> = {}\r\n  ): Promise<PaymentIntent> {\r\n    try {\r\n      logger.info('Creando intento de pago', {\r\n        userId,\r\n        metadata: { amount, currency, description },\r\n      });\r\n\r\n      const paymentIntent: PaymentIntent = {\r\n        id: `pi_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        amount,\r\n        currency: this.supportedCurrencies.includes(currency)\r\n          ? currency\r\n          : this.defaultCurrency,\r\n        status: 'pending',\r\n        paymentMethodId: '',\r\n        userId,\r\n        description,\r\n        metadata,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      };\r\n\r\n      await db\r\n        .collection('paymentIntents')\r\n        .doc(paymentIntent.id)\r\n        .set(paymentIntent);\r\n\r\n      logger.info('Intento de pago creado', {\r\n        userId,\r\n        metadata: { paymentIntentId: paymentIntent.id },\r\n      });\r\n\r\n      return paymentIntent;\r\n    } catch (error) {\r\n      logger.error('Error creando intento de pago', error as Error, {\r\n        userId,\r\n        metadata: { amount },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Procesar pago\r\n   */\r\n  async processPayment(\r\n    paymentIntentId: string,\r\n    paymentMethodId: string\r\n  ): Promise<PaymentIntent> {\r\n    try {\r\n      logger.info('Procesando pago', {\r\n        metadata: { paymentIntentId, paymentMethodId },\r\n      });\r\n\r\n      // Simular procesamiento de pago\r\n      const success = Math.random() > 0.1; // 90% de éxito\r\n\r\n      const paymentIntentRef = db\r\n        .collection('paymentIntents')\r\n        .doc(paymentIntentId);\r\n      const paymentIntentDoc = await paymentIntentRef.get();\r\n\r\n      if (!paymentIntentDoc.exists) {\r\n        throw new Error('Payment intent no encontrado');\r\n      }\r\n\r\n      const paymentIntent = paymentIntentDoc.data() as PaymentIntent;\r\n\r\n      if (success) {\r\n        // Pago exitoso\r\n        await paymentIntentRef.update({\r\n          status: 'succeeded',\r\n          paymentMethodId,\r\n          updatedAt: new Date(),\r\n        });\r\n\r\n        // Crear factura automáticamente\r\n        await this.createInvoiceFromPayment({\r\n          ...paymentIntent,\r\n          status: 'succeeded',\r\n          paymentMethodId,\r\n        });\r\n\r\n        logger.info('Pago procesado exitosamente', {\r\n          metadata: {\r\n            paymentIntentId,\r\n            amount: paymentIntent.amount,\r\n            currency: paymentIntent.currency,\r\n          },\r\n        });\r\n      } else {\r\n        // Pago fallido\r\n        await paymentIntentRef.update({\r\n          status: 'failed',\r\n          paymentMethodId,\r\n          updatedAt: new Date(),\r\n        });\r\n\r\n        logger.info('Pago fallido', { metadata: { paymentIntentId } });\r\n      }\r\n\r\n      return {\r\n        ...paymentIntent,\r\n        status: success ? 'succeeded' : 'failed',\r\n        paymentMethodId,\r\n        updatedAt: new Date(),\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error procesando pago', error as Error, {\r\n        metadata: { paymentIntentId },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crear factura desde un pago\r\n   */\r\n  async createInvoiceFromPayment(\r\n    paymentIntent: PaymentIntent\r\n  ): Promise<Invoice> {\r\n    try {\r\n      const invoice: Invoice = {\r\n        id: `inv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        number: `INV-${Date.now()}`,\r\n        amount: paymentIntent.amount,\r\n        currency: paymentIntent.currency,\r\n        status: 'paid',\r\n        dueDate: new Date(),\r\n        paidAt: new Date(),\r\n        userId: paymentIntent.userId,\r\n        eventId: paymentIntent.eventId,\r\n        items: [\r\n          {\r\n            id: `item_${Date.now()}`,\r\n            description: paymentIntent.description,\r\n            quantity: 1,\r\n            unitPrice: paymentIntent.amount,\r\n            total: paymentIntent.amount,\r\n            type: 'service',\r\n          },\r\n        ],\r\n        subtotal: paymentIntent.amount,\r\n        tax: 0,\r\n        total: paymentIntent.amount,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      };\r\n\r\n      await db.collection('invoices').doc(invoice.id).set(invoice);\r\n\r\n      logger.info('Factura creada desde pago', {\r\n        metadata: {\r\n          invoiceId: invoice.id,\r\n          paymentIntentId: paymentIntent.id,\r\n        },\r\n      });\r\n\r\n      return invoice;\r\n    } catch (error) {\r\n      logger.error('Error creando factura desde pago', error as Error, {\r\n        metadata: { paymentIntent },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crear factura manual\r\n   */\r\n  async createInvoice(\r\n    userId: string,\r\n    items: Omit<InvoiceItem, 'id'>[],\r\n    dueDate: Date,\r\n    eventId?: string\r\n  ): Promise<Invoice> {\r\n    try {\r\n      logger.info('Creando factura manual', {\r\n        userId,\r\n        metadata: { items, dueDate },\r\n      });\r\n\r\n      const subtotal = items.reduce(\r\n        (sum, item) => sum + item.quantity * item.unitPrice,\r\n        0\r\n      );\r\n      const tax = subtotal * 0.16; // 16% IVA\r\n      const total = subtotal + tax;\r\n\r\n      const invoice: Invoice = {\r\n        id: `inv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        number: `INV-${Date.now()}`,\r\n        amount: total,\r\n        currency: this.defaultCurrency,\r\n        status: 'draft',\r\n        dueDate,\r\n        userId,\r\n        eventId,\r\n        items: items.map((item, index) => ({\r\n          id: `item_${Date.now()}_${index}`,\r\n          ...item,\r\n          total: item.quantity * item.unitPrice,\r\n        })),\r\n        subtotal,\r\n        tax,\r\n        total,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      };\r\n\r\n      await db.collection('invoices').doc(invoice.id).set(invoice);\r\n\r\n      logger.info('Factura manual creada', {\r\n        userId,\r\n        metadata: { invoiceId: invoice.id },\r\n      });\r\n\r\n      return invoice;\r\n    } catch (error) {\r\n      logger.error('Error creando factura manual', error as Error, { userId });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener facturas de un usuario\r\n   */\r\n  async getInvoices(userId: string, status?: string): Promise<Invoice[]> {\r\n    try {\r\n      let query = db.collection('invoices').where('userId', '==', userId);\r\n\r\n      if (status) {\r\n        query = query.where('status', '==', status);\r\n      }\r\n\r\n      const snapshot = await query.orderBy('createdAt', 'desc').get();\r\n\r\n      const invoices: Invoice[] = [];\r\n      snapshot.forEach((doc: any) => {\r\n        invoices.push({ id: doc.id, ...doc.data() });\r\n      });\r\n\r\n      return invoices;\r\n    } catch (error) {\r\n      logger.error('Error obteniendo facturas', error as Error, { userId });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marcar factura como pagada\r\n   */\r\n  async markInvoiceAsPaid(\r\n    invoiceId: string,\r\n    paymentMethodId: string\r\n  ): Promise<Invoice> {\r\n    try {\r\n      logger.info('Marcando factura como pagada', {\r\n        metadata: { invoiceId, paymentMethodId },\r\n      });\r\n\r\n      const invoiceRef = db.collection('invoices').doc(invoiceId);\r\n      const invoiceDoc = await invoiceRef.get();\r\n\r\n      if (!invoiceDoc.exists) {\r\n        throw new Error('Factura no encontrada');\r\n      }\r\n\r\n      const invoice = invoiceDoc.data() as Invoice;\r\n\r\n      // Crear payment intent para la factura\r\n      const paymentIntent = await this.createPaymentIntent(\r\n        invoice.userId,\r\n        invoice.total,\r\n        invoice.currency,\r\n        `Pago de factura ${invoice.number}`,\r\n        { invoiceId }\r\n      );\r\n\r\n      // Procesar el pago\r\n      const result = await this.processPayment(\r\n        paymentIntent.id,\r\n        paymentMethodId\r\n      );\r\n\r\n      if (result.status === 'succeeded') {\r\n        // Actualizar factura como pagada\r\n        await invoiceRef.update({\r\n          status: 'paid',\r\n          paidAt: new Date(),\r\n          updatedAt: new Date(),\r\n        });\r\n\r\n        logger.info('Factura marcada como pagada', { metadata: { invoiceId } });\r\n      }\r\n\r\n      return {\r\n        ...invoice,\r\n        status: result.status === 'succeeded' ? 'paid' : 'sent',\r\n        paidAt: result.status === 'succeeded' ? new Date() : undefined,\r\n        updatedAt: new Date(),\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error marcando factura como pagada', error as Error, {\r\n        metadata: { invoiceId },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Procesar reembolso\r\n   */\r\n  async processRefund(\r\n    paymentIntentId: string,\r\n    amount: number,\r\n    reason: string\r\n  ): Promise<Refund> {\r\n    try {\r\n      logger.info('Procesando reembolso', {\r\n        metadata: { paymentIntentId, amount, reason },\r\n      });\r\n\r\n      // Verificar que el payment intent existe y fue exitoso\r\n      const paymentIntentDoc = await db\r\n        .collection('paymentIntents')\r\n        .doc(paymentIntentId)\r\n        .get();\r\n\r\n      if (!paymentIntentDoc.exists) {\r\n        throw new Error('Payment intent no encontrado');\r\n      }\r\n\r\n      const paymentIntent = paymentIntentDoc.data() as PaymentIntent;\r\n\r\n      if (paymentIntent.status !== 'succeeded') {\r\n        throw new Error('Solo se pueden reembolsar pagos exitosos');\r\n      }\r\n\r\n      if (amount > paymentIntent.amount) {\r\n        throw new Error(\r\n          'El monto del reembolso no puede ser mayor al pago original'\r\n        );\r\n      }\r\n\r\n      // Simular procesamiento de reembolso\r\n      const success = Math.random() > 0.05; // 95% de éxito\r\n\r\n      const refund: Refund = {\r\n        id: `ref_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        paymentIntentId,\r\n        amount,\r\n        reason,\r\n        status: success ? 'succeeded' : 'failed',\r\n        createdAt: new Date(),\r\n      };\r\n\r\n      await db.collection('refunds').doc(refund.id).set(refund);\r\n\r\n      if (success) {\r\n        // Actualizar payment intent\r\n        await db.collection('paymentIntents').doc(paymentIntentId).update({\r\n          status: 'cancelled',\r\n          updatedAt: new Date(),\r\n        });\r\n      }\r\n\r\n      logger.info('Reembolso procesado', {\r\n        metadata: { refundId: refund.id, amount },\r\n      });\r\n\r\n      return refund;\r\n    } catch (error) {\r\n      logger.error('Error procesando reembolso', error as Error, {\r\n        metadata: { paymentIntentId },\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de pagos\r\n   */\r\n  async getPaymentStats(userId?: string, period?: string): Promise<any> {\r\n    try {\r\n      logger.info('Obteniendo estadísticas de pagos', {\r\n        metadata: { userId, period },\r\n      });\r\n\r\n      const now = new Date();\r\n      let startDate = new Date(now.getFullYear(), now.getMonth(), 1); // Inicio del mes\r\n\r\n      if (period === 'week') {\r\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n      } else if (period === 'month') {\r\n        startDate = new Date(\r\n          now.getFullYear(),\r\n          now.getMonth() - 1,\r\n          now.getDate()\r\n        );\r\n      } else if (period === 'year') {\r\n        startDate = new Date(now.getFullYear(), 0, 1);\r\n      }\r\n\r\n      // Estadísticas de payment intents\r\n      let paymentQuery = db\r\n        .collection('paymentIntents')\r\n        .where('createdAt', '>=', startDate);\r\n\r\n      if (userId) {\r\n        paymentQuery = paymentQuery.where('userId', '==', userId);\r\n      }\r\n\r\n      const paymentSnapshot = await paymentQuery.get();\r\n      const payments = paymentSnapshot.docs.map(doc => doc.data());\r\n\r\n      // Estadísticas de facturas\r\n      let invoiceQuery = db\r\n        .collection('invoices')\r\n        .where('createdAt', '>=', startDate);\r\n\r\n      if (userId) {\r\n        invoiceQuery = invoiceQuery.where('userId', '==', userId);\r\n      }\r\n\r\n      const invoiceSnapshot = await invoiceQuery.get();\r\n      const invoices = invoiceSnapshot.docs.map(doc => doc.data());\r\n\r\n      // Estadísticas de reembolsos\r\n      const refundQuery = db\r\n        .collection('refunds')\r\n        .where('createdAt', '>=', startDate);\r\n\r\n      const refundSnapshot = await refundQuery.get();\r\n      const refunds = refundSnapshot.docs.map(doc => doc.data());\r\n\r\n      const stats = {\r\n        totalRevenue: payments\r\n          .filter((p: any) => p.status === 'succeeded')\r\n          .reduce((sum: number, p: any) => sum + p.amount, 0),\r\n        totalTransactions: payments.length,\r\n        successfulTransactions: payments.filter(\r\n          (p: any) => p.status === 'succeeded'\r\n        ).length,\r\n        failedTransactions: payments.filter((p: any) => p.status === 'failed')\r\n          .length,\r\n        totalInvoices: invoices.length,\r\n        paidInvoices: invoices.filter((i: any) => i.status === 'paid').length,\r\n        totalRefunds: refunds.length,\r\n        refundAmount: refunds\r\n          .filter((r: any) => r.status === 'succeeded')\r\n          .reduce((sum: number, r: any) => sum + r.amount, 0),\r\n        averageTransaction:\r\n          payments.length > 0\r\n            ? payments.reduce((sum: number, p: any) => sum + p.amount, 0) /\r\n              payments.length\r\n            : 0,\r\n        successRate:\r\n          payments.length > 0\r\n            ? (payments.filter((p: any) => p.status === 'succeeded').length /\r\n                payments.length) *\r\n              100\r\n            : 0,\r\n      };\r\n\r\n      logger.info('Estadísticas de pagos obtenidas', { metadata: { stats } });\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      logger.error('Error obteniendo estadísticas de pagos', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validar método de pago\r\n   */\r\n  async validatePaymentMethod(paymentData: any): Promise<boolean> {\r\n    try {\r\n      // Validaciones básicas\r\n      if (\r\n        !paymentData.cardNumber ||\r\n        !paymentData.expiryMonth ||\r\n        !paymentData.expiryYear ||\r\n        !paymentData.cvc\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      // Validar formato de tarjeta (Luhn algorithm)\r\n      const cardNumber = paymentData.cardNumber.replace(/\\s/g, '');\r\n      if (!/^\\d{13,19}$/.test(cardNumber)) {\r\n        return false;\r\n      }\r\n\r\n      // Validar fecha de expiración\r\n      const now = new Date();\r\n      const expiryDate = new Date(\r\n        paymentData.expiryYear,\r\n        paymentData.expiryMonth - 1\r\n      );\r\n      if (expiryDate <= now) {\r\n        return false;\r\n      }\r\n\r\n      // Validar CVC\r\n      if (!/^\\d{3,4}$/.test(paymentData.cvc)) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Error validando método de pago', error as Error, {\r\n        metadata: { paymentData },\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener gateways de pago disponibles\r\n   */\r\n  async getPaymentGateways(): Promise<PaymentGateway[]> {\r\n    try {\r\n      const gateways: PaymentGateway[] = [\r\n        {\r\n          name: 'Stripe',\r\n          isActive: true,\r\n          config: {\r\n            supportedCurrencies: ['USD', 'EUR', 'GBP'],\r\n            fees: { percentage: 2.9, fixed: 30 },\r\n          },\r\n        },\r\n        {\r\n          name: 'PayPal',\r\n          isActive: true,\r\n          config: {\r\n            supportedCurrencies: ['USD', 'EUR', 'GBP'],\r\n            fees: { percentage: 3.5, fixed: 0 },\r\n          },\r\n        },\r\n        {\r\n          name: 'MercadoPago',\r\n          isActive: false,\r\n          config: {\r\n            supportedCurrencies: ['USD', 'ARS', 'BRL'],\r\n            fees: { percentage: 3.5, fixed: 0 },\r\n          },\r\n        },\r\n      ];\r\n\r\n      return gateways.filter(gateway => gateway.isActive);\r\n    } catch (error) {\r\n      logger.error('Error obteniendo pasarelas de pago', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"],"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","ignoreList":[]}