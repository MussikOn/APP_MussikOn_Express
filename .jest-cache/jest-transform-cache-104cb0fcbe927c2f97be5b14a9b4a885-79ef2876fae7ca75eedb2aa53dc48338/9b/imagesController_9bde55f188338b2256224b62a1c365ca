bb6ea059b6d6ff3014c00cc6750301b2
"use strict";

/* istanbul ignore next */
function cov_2jviggwuus() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\imagesController.ts";
  var hash = "4d6bbf27600ba6ccd19844ff94fbbb202235cc2a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\imagesController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 417
        }
      },
      "14": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 60
        }
      },
      "15": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 54
        }
      },
      "16": {
        start: {
          line: 63,
          column: 30
        },
        end: {
          line: 100,
          column: 2
        }
      },
      "17": {
        start: {
          line: 63,
          column: 44
        },
        end: {
          line: 100,
          column: 2
        }
      },
      "18": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "19": {
        start: {
          line: 65,
          column: 21
        },
        end: {
          line: 65,
          column: 29
        }
      },
      "20": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "21": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 70
        }
      },
      "22": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 19
        }
      },
      "23": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "24": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 80
        }
      },
      "25": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 19
        }
      },
      "26": {
        start: {
          line: 74,
          column: 58
        },
        end: {
          line: 74,
          column: 66
        }
      },
      "27": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "28": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 66
        }
      },
      "29": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 19
        }
      },
      "30": {
        start: {
          line: 80,
          column: 25
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "31": {
        start: {
          line: 85,
          column: 22
        },
        end: {
          line: 85,
          column: 104
        }
      },
      "32": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 130
        }
      },
      "33": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "34": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 130
        }
      },
      "35": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "36": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 101,
          column: 54
        }
      },
      "37": {
        start: {
          line: 130,
          column: 31
        },
        end: {
          line: 155,
          column: 2
        }
      },
      "38": {
        start: {
          line: 130,
          column: 45
        },
        end: {
          line: 155,
          column: 2
        }
      },
      "39": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 154,
          column: 5
        }
      },
      "40": {
        start: {
          line: 132,
          column: 28
        },
        end: {
          line: 132,
          column: 38
        }
      },
      "41": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "42": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 70
        }
      },
      "43": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 19
        }
      },
      "44": {
        start: {
          line: 137,
          column: 22
        },
        end: {
          line: 137,
          column: 68
        }
      },
      "45": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "46": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 68
        }
      },
      "47": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 19
        }
      },
      "48": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 110
        }
      },
      "49": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "50": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 133
        }
      },
      "51": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "52": {
        start: {
          line: 156,
          column: 0
        },
        end: {
          line: 156,
          column: 56
        }
      },
      "53": {
        start: {
          line: 214,
          column: 29
        },
        end: {
          line: 246,
          column: 2
        }
      },
      "54": {
        start: {
          line: 214,
          column: 43
        },
        end: {
          line: 246,
          column: 2
        }
      },
      "55": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "56": {
        start: {
          line: 216,
          column: 80
        },
        end: {
          line: 216,
          column: 89
        }
      },
      "57": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 26
        }
      },
      "58": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 219,
          column: 40
        }
      },
      "59": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 40
        }
      },
      "60": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 221,
          column: 36
        }
      },
      "61": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 36
        }
      },
      "62": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 223,
          column: 51
        }
      },
      "63": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 51
        }
      },
      "64": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 225,
          column: 36
        }
      },
      "65": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 36
        }
      },
      "66": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 227,
          column: 44
        }
      },
      "67": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 44
        }
      },
      "68": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 229,
          column: 46
        }
      },
      "69": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 46
        }
      },
      "70": {
        start: {
          line: 230,
          column: 23
        },
        end: {
          line: 230,
          column: 67
        }
      },
      "71": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 117
        }
      },
      "72": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 237,
          column: 11
        }
      },
      "73": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 132
        }
      },
      "74": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 244,
          column: 11
        }
      },
      "75": {
        start: {
          line: 247,
          column: 0
        },
        end: {
          line: 247,
          column: 52
        }
      },
      "76": {
        start: {
          line: 293,
          column: 30
        },
        end: {
          line: 333,
          column: 2
        }
      },
      "77": {
        start: {
          line: 293,
          column: 44
        },
        end: {
          line: 333,
          column: 2
        }
      },
      "78": {
        start: {
          line: 294,
          column: 4
        },
        end: {
          line: 332,
          column: 5
        }
      },
      "79": {
        start: {
          line: 295,
          column: 21
        },
        end: {
          line: 295,
          column: 29
        }
      },
      "80": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "81": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 70
        }
      },
      "82": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 19
        }
      },
      "83": {
        start: {
          line: 300,
          column: 28
        },
        end: {
          line: 300,
          column: 38
        }
      },
      "84": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 35
        }
      },
      "85": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "86": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 70
        }
      },
      "87": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 19
        }
      },
      "88": {
        start: {
          line: 307,
          column: 30
        },
        end: {
          line: 307,
          column: 76
        }
      },
      "89": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "90": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 68
        }
      },
      "91": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 19
        }
      },
      "92": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "93": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 315,
          column: 83
        }
      },
      "94": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 19
        }
      },
      "95": {
        start: {
          line: 318,
          column: 29
        },
        end: {
          line: 318,
          column: 86
        }
      },
      "96": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 134
        }
      },
      "97": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 324,
          column: 11
        }
      },
      "98": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 135
        }
      },
      "99": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 331,
          column: 11
        }
      },
      "100": {
        start: {
          line: 334,
          column: 0
        },
        end: {
          line: 334,
          column: 54
        }
      },
      "101": {
        start: {
          line: 363,
          column: 30
        },
        end: {
          line: 389,
          column: 2
        }
      },
      "102": {
        start: {
          line: 363,
          column: 44
        },
        end: {
          line: 389,
          column: 2
        }
      },
      "103": {
        start: {
          line: 364,
          column: 4
        },
        end: {
          line: 388,
          column: 5
        }
      },
      "104": {
        start: {
          line: 365,
          column: 21
        },
        end: {
          line: 365,
          column: 29
        }
      },
      "105": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "106": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 70
        }
      },
      "107": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 19
        }
      },
      "108": {
        start: {
          line: 370,
          column: 28
        },
        end: {
          line: 370,
          column: 38
        }
      },
      "109": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 374,
          column: 9
        }
      },
      "110": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 70
        }
      },
      "111": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 19
        }
      },
      "112": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 375,
          column: 70
        }
      },
      "113": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 132
        }
      },
      "114": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 380,
          column: 11
        }
      },
      "115": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 133
        }
      },
      "116": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 387,
          column: 11
        }
      },
      "117": {
        start: {
          line: 390,
          column: 0
        },
        end: {
          line: 390,
          column: 54
        }
      },
      "118": {
        start: {
          line: 412,
          column: 32
        },
        end: {
          line: 436,
          column: 2
        }
      },
      "119": {
        start: {
          line: 412,
          column: 46
        },
        end: {
          line: 436,
          column: 2
        }
      },
      "120": {
        start: {
          line: 413,
          column: 4
        },
        end: {
          line: 435,
          column: 5
        }
      },
      "121": {
        start: {
          line: 414,
          column: 21
        },
        end: {
          line: 414,
          column: 29
        }
      },
      "122": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "123": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 419,
          column: 15
        }
      },
      "124": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 19
        }
      },
      "125": {
        start: {
          line: 422,
          column: 22
        },
        end: {
          line: 422,
          column: 62
        }
      },
      "126": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 130
        }
      },
      "127": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 427,
          column: 11
        }
      },
      "128": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 430,
          column: 140
        }
      },
      "129": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 434,
          column: 11
        }
      },
      "130": {
        start: {
          line: 437,
          column: 0
        },
        end: {
          line: 437,
          column: 58
        }
      },
      "131": {
        start: {
          line: 466,
          column: 39
        },
        end: {
          line: 487,
          column: 2
        }
      },
      "132": {
        start: {
          line: 466,
          column: 53
        },
        end: {
          line: 487,
          column: 2
        }
      },
      "133": {
        start: {
          line: 467,
          column: 4
        },
        end: {
          line: 486,
          column: 5
        }
      },
      "134": {
        start: {
          line: 468,
          column: 27
        },
        end: {
          line: 468,
          column: 37
        }
      },
      "135": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 472,
          column: 9
        }
      },
      "136": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 470,
          column: 71
        }
      },
      "137": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 19
        }
      },
      "138": {
        start: {
          line: 473,
          column: 23
        },
        end: {
          line: 473,
          column: 76
        }
      },
      "139": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 474,
          column: 136
        }
      },
      "140": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 478,
          column: 11
        }
      },
      "141": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 481,
          column: 153
        }
      },
      "142": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 485,
          column: 11
        }
      },
      "143": {
        start: {
          line: 488,
          column: 0
        },
        end: {
          line: 488,
          column: 72
        }
      },
      "144": {
        start: {
          line: 516,
          column: 32
        },
        end: {
          line: 533,
          column: 2
        }
      },
      "145": {
        start: {
          line: 516,
          column: 46
        },
        end: {
          line: 533,
          column: 2
        }
      },
      "146": {
        start: {
          line: 517,
          column: 4
        },
        end: {
          line: 532,
          column: 5
        }
      },
      "147": {
        start: {
          line: 518,
          column: 27
        },
        end: {
          line: 518,
          column: 36
        }
      },
      "148": {
        start: {
          line: 519,
          column: 23
        },
        end: {
          line: 519,
          column: 69
        }
      },
      "149": {
        start: {
          line: 520,
          column: 8
        },
        end: {
          line: 520,
          column: 130
        }
      },
      "150": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 524,
          column: 11
        }
      },
      "151": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 527,
          column: 145
        }
      },
      "152": {
        start: {
          line: 528,
          column: 8
        },
        end: {
          line: 531,
          column: 11
        }
      },
      "153": {
        start: {
          line: 534,
          column: 0
        },
        end: {
          line: 534,
          column: 58
        }
      },
      "154": {
        start: {
          line: 562,
          column: 33
        },
        end: {
          line: 579,
          column: 2
        }
      },
      "155": {
        start: {
          line: 562,
          column: 47
        },
        end: {
          line: 579,
          column: 2
        }
      },
      "156": {
        start: {
          line: 563,
          column: 4
        },
        end: {
          line: 578,
          column: 5
        }
      },
      "157": {
        start: {
          line: 564,
          column: 28
        },
        end: {
          line: 564,
          column: 37
        }
      },
      "158": {
        start: {
          line: 565,
          column: 23
        },
        end: {
          line: 565,
          column: 71
        }
      },
      "159": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 566,
          column: 133
        }
      },
      "160": {
        start: {
          line: 567,
          column: 8
        },
        end: {
          line: 570,
          column: 11
        }
      },
      "161": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 148
        }
      },
      "162": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 577,
          column: 11
        }
      },
      "163": {
        start: {
          line: 580,
          column: 0
        },
        end: {
          line: 580,
          column: 60
        }
      },
      "164": {
        start: {
          line: 604,
          column: 39
        },
        end: {
          line: 628,
          column: 2
        }
      },
      "165": {
        start: {
          line: 604,
          column: 53
        },
        end: {
          line: 628,
          column: 2
        }
      },
      "166": {
        start: {
          line: 605,
          column: 4
        },
        end: {
          line: 627,
          column: 5
        }
      },
      "167": {
        start: {
          line: 606,
          column: 21
        },
        end: {
          line: 606,
          column: 29
        }
      },
      "168": {
        start: {
          line: 607,
          column: 8
        },
        end: {
          line: 612,
          column: 9
        }
      },
      "169": {
        start: {
          line: 608,
          column: 12
        },
        end: {
          line: 610,
          column: 15
        }
      },
      "170": {
        start: {
          line: 611,
          column: 12
        },
        end: {
          line: 611,
          column: 19
        }
      },
      "171": {
        start: {
          line: 613,
          column: 29
        },
        end: {
          line: 613,
          column: 76
        }
      },
      "172": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 170
        }
      },
      "173": {
        start: {
          line: 615,
          column: 8
        },
        end: {
          line: 619,
          column: 11
        }
      },
      "174": {
        start: {
          line: 622,
          column: 8
        },
        end: {
          line: 622,
          column: 135
        }
      },
      "175": {
        start: {
          line: 623,
          column: 8
        },
        end: {
          line: 626,
          column: 11
        }
      },
      "176": {
        start: {
          line: 629,
          column: 0
        },
        end: {
          line: 629,
          column: 72
        }
      },
      "177": {
        start: {
          line: 631,
          column: 31
        },
        end: {
          line: 647,
          column: 2
        }
      },
      "178": {
        start: {
          line: 631,
          column: 45
        },
        end: {
          line: 647,
          column: 2
        }
      },
      "179": {
        start: {
          line: 632,
          column: 4
        },
        end: {
          line: 646,
          column: 5
        }
      },
      "180": {
        start: {
          line: 633,
          column: 23
        },
        end: {
          line: 633,
          column: 60
        }
      },
      "181": {
        start: {
          line: 634,
          column: 8
        },
        end: {
          line: 638,
          column: 11
        }
      },
      "182": {
        start: {
          line: 641,
          column: 8
        },
        end: {
          line: 641,
          column: 134
        }
      },
      "183": {
        start: {
          line: 642,
          column: 8
        },
        end: {
          line: 645,
          column: 11
        }
      },
      "184": {
        start: {
          line: 648,
          column: 0
        },
        end: {
          line: 648,
          column: 56
        }
      },
      "185": {
        start: {
          line: 649,
          column: 30
        },
        end: {
          line: 670,
          column: 2
        }
      },
      "186": {
        start: {
          line: 649,
          column: 44
        },
        end: {
          line: 670,
          column: 2
        }
      },
      "187": {
        start: {
          line: 650,
          column: 4
        },
        end: {
          line: 669,
          column: 5
        }
      },
      "188": {
        start: {
          line: 651,
          column: 24
        },
        end: {
          line: 651,
          column: 34
        }
      },
      "189": {
        start: {
          line: 652,
          column: 8
        },
        end: {
          line: 655,
          column: 9
        }
      },
      "190": {
        start: {
          line: 653,
          column: 12
        },
        end: {
          line: 653,
          column: 74
        }
      },
      "191": {
        start: {
          line: 654,
          column: 12
        },
        end: {
          line: 654,
          column: 19
        }
      },
      "192": {
        start: {
          line: 656,
          column: 22
        },
        end: {
          line: 656,
          column: 64
        }
      },
      "193": {
        start: {
          line: 657,
          column: 8
        },
        end: {
          line: 660,
          column: 9
        }
      },
      "194": {
        start: {
          line: 658,
          column: 12
        },
        end: {
          line: 658,
          column: 68
        }
      },
      "195": {
        start: {
          line: 659,
          column: 12
        },
        end: {
          line: 659,
          column: 19
        }
      },
      "196": {
        start: {
          line: 661,
          column: 8
        },
        end: {
          line: 661,
          column: 49
        }
      },
      "197": {
        start: {
          line: 664,
          column: 8
        },
        end: {
          line: 664,
          column: 129
        }
      },
      "198": {
        start: {
          line: 665,
          column: 8
        },
        end: {
          line: 668,
          column: 11
        }
      },
      "199": {
        start: {
          line: 671,
          column: 0
        },
        end: {
          line: 671,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 63,
            column: 31
          }
        },
        loc: {
          start: {
            line: 63,
            column: 44
          },
          end: {
            line: 100,
            column: 2
          }
        },
        line: 63
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 63,
            column: 78
          },
          end: {
            line: 63,
            column: 79
          }
        },
        loc: {
          start: {
            line: 63,
            column: 91
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 63
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 130,
            column: 31
          },
          end: {
            line: 130,
            column: 32
          }
        },
        loc: {
          start: {
            line: 130,
            column: 45
          },
          end: {
            line: 155,
            column: 2
          }
        },
        line: 130
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 130,
            column: 79
          },
          end: {
            line: 130,
            column: 80
          }
        },
        loc: {
          start: {
            line: 130,
            column: 92
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 130
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 214,
            column: 29
          },
          end: {
            line: 214,
            column: 30
          }
        },
        loc: {
          start: {
            line: 214,
            column: 43
          },
          end: {
            line: 246,
            column: 2
          }
        },
        line: 214
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 214,
            column: 77
          },
          end: {
            line: 214,
            column: 78
          }
        },
        loc: {
          start: {
            line: 214,
            column: 90
          },
          end: {
            line: 246,
            column: 1
          }
        },
        line: 214
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 293,
            column: 30
          },
          end: {
            line: 293,
            column: 31
          }
        },
        loc: {
          start: {
            line: 293,
            column: 44
          },
          end: {
            line: 333,
            column: 2
          }
        },
        line: 293
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 293,
            column: 78
          },
          end: {
            line: 293,
            column: 79
          }
        },
        loc: {
          start: {
            line: 293,
            column: 91
          },
          end: {
            line: 333,
            column: 1
          }
        },
        line: 293
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 363,
            column: 30
          },
          end: {
            line: 363,
            column: 31
          }
        },
        loc: {
          start: {
            line: 363,
            column: 44
          },
          end: {
            line: 389,
            column: 2
          }
        },
        line: 363
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 363,
            column: 78
          },
          end: {
            line: 363,
            column: 79
          }
        },
        loc: {
          start: {
            line: 363,
            column: 91
          },
          end: {
            line: 389,
            column: 1
          }
        },
        line: 363
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 412,
            column: 32
          },
          end: {
            line: 412,
            column: 33
          }
        },
        loc: {
          start: {
            line: 412,
            column: 46
          },
          end: {
            line: 436,
            column: 2
          }
        },
        line: 412
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 412,
            column: 80
          },
          end: {
            line: 412,
            column: 81
          }
        },
        loc: {
          start: {
            line: 412,
            column: 93
          },
          end: {
            line: 436,
            column: 1
          }
        },
        line: 412
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 466,
            column: 39
          },
          end: {
            line: 466,
            column: 40
          }
        },
        loc: {
          start: {
            line: 466,
            column: 53
          },
          end: {
            line: 487,
            column: 2
          }
        },
        line: 466
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 466,
            column: 87
          },
          end: {
            line: 466,
            column: 88
          }
        },
        loc: {
          start: {
            line: 466,
            column: 100
          },
          end: {
            line: 487,
            column: 1
          }
        },
        line: 466
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 516,
            column: 32
          },
          end: {
            line: 516,
            column: 33
          }
        },
        loc: {
          start: {
            line: 516,
            column: 46
          },
          end: {
            line: 533,
            column: 2
          }
        },
        line: 516
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 516,
            column: 80
          },
          end: {
            line: 516,
            column: 81
          }
        },
        loc: {
          start: {
            line: 516,
            column: 93
          },
          end: {
            line: 533,
            column: 1
          }
        },
        line: 516
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 562,
            column: 33
          },
          end: {
            line: 562,
            column: 34
          }
        },
        loc: {
          start: {
            line: 562,
            column: 47
          },
          end: {
            line: 579,
            column: 2
          }
        },
        line: 562
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 562,
            column: 81
          },
          end: {
            line: 562,
            column: 82
          }
        },
        loc: {
          start: {
            line: 562,
            column: 94
          },
          end: {
            line: 579,
            column: 1
          }
        },
        line: 562
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 604,
            column: 39
          },
          end: {
            line: 604,
            column: 40
          }
        },
        loc: {
          start: {
            line: 604,
            column: 53
          },
          end: {
            line: 628,
            column: 2
          }
        },
        line: 604
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 604,
            column: 87
          },
          end: {
            line: 604,
            column: 88
          }
        },
        loc: {
          start: {
            line: 604,
            column: 100
          },
          end: {
            line: 628,
            column: 1
          }
        },
        line: 604
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 631,
            column: 31
          },
          end: {
            line: 631,
            column: 32
          }
        },
        loc: {
          start: {
            line: 631,
            column: 45
          },
          end: {
            line: 647,
            column: 2
          }
        },
        line: 631
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 631,
            column: 79
          },
          end: {
            line: 631,
            column: 80
          }
        },
        loc: {
          start: {
            line: 631,
            column: 92
          },
          end: {
            line: 647,
            column: 1
          }
        },
        line: 631
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 649,
            column: 30
          },
          end: {
            line: 649,
            column: 31
          }
        },
        loc: {
          start: {
            line: 649,
            column: 44
          },
          end: {
            line: 670,
            column: 2
          }
        },
        line: 649
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 649,
            column: 78
          },
          end: {
            line: 649,
            column: 79
          }
        },
        loc: {
          start: {
            line: 649,
            column: 91
          },
          end: {
            line: 670,
            column: 1
          }
        },
        line: 649
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "8": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 76,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 21
          }
        }, {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 80
          }
        }],
        line: 75
      },
      "9": {
        loc: {
          start: {
            line: 81,
            column: 25
          },
          end: {
            line: 81,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 25
          },
          end: {
            line: 81,
            column: 36
          }
        }, {
          start: {
            line: 81,
            column: 40
          },
          end: {
            line: 81,
            column: 42
          }
        }],
        line: 81
      },
      "10": {
        loc: {
          start: {
            line: 82,
            column: 18
          },
          end: {
            line: 82,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 25
          },
          end: {
            line: 82,
            column: 41
          }
        }, {
          start: {
            line: 82,
            column: 44
          },
          end: {
            line: 82,
            column: 46
          }
        }],
        line: 82
      },
      "11": {
        loc: {
          start: {
            line: 83,
            column: 22
          },
          end: {
            line: 83,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 47
          },
          end: {
            line: 83,
            column: 67
          }
        }, {
          start: {
            line: 83,
            column: 70
          },
          end: {
            line: 83,
            column: 74
          }
        }],
        line: 83
      },
      "12": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 216,
            column: 52
          },
          end: {
            line: 216,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 216,
            column: 60
          },
          end: {
            line: 216,
            column: 62
          }
        }],
        line: 216
      },
      "15": {
        loc: {
          start: {
            line: 216,
            column: 64
          },
          end: {
            line: 216,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 216,
            column: 73
          },
          end: {
            line: 216,
            column: 74
          }
        }],
        line: 216
      },
      "16": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 219,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 219,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "17": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 221,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 221,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "18": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 223,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 223,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "19": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 225,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 225,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "20": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 227,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 227,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "21": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 229,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 229,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "22": {
        loc: {
          start: {
            line: 296,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "23": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "24": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "25": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "26": {
        loc: {
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "27": {
        loc: {
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "28": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "29": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 416,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 415,
            column: 17
          }
        }, {
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 416,
            column: 94
          }
        }],
        line: 415
      },
      "30": {
        loc: {
          start: {
            line: 469,
            column: 8
          },
          end: {
            line: 472,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 8
          },
          end: {
            line: 472,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 469
      },
      "31": {
        loc: {
          start: {
            line: 607,
            column: 8
          },
          end: {
            line: 612,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 607,
            column: 8
          },
          end: {
            line: 612,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 607
      },
      "32": {
        loc: {
          start: {
            line: 607,
            column: 12
          },
          end: {
            line: 607,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 607,
            column: 12
          },
          end: {
            line: 607,
            column: 17
          }
        }, {
          start: {
            line: 607,
            column: 21
          },
          end: {
            line: 607,
            column: 71
          }
        }],
        line: 607
      },
      "33": {
        loc: {
          start: {
            line: 652,
            column: 8
          },
          end: {
            line: 655,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 652,
            column: 8
          },
          end: {
            line: 655,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 652
      },
      "34": {
        loc: {
          start: {
            line: 657,
            column: 8
          },
          end: {
            line: 660,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 657,
            column: 8
          },
          end: {
            line: 660,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 657
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\imagesController.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\controllers\\imagesController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\r\nimport { logger } from '../services/loggerService';\r\nimport {\r\n  uploadImage,\r\n  getImageById,\r\n  listImages,\r\n  updateImage,\r\n  deleteImage,\r\n  getImageStats,\r\n  getUserProfileImages,\r\n  getPostImages,\r\n  getEventImages,\r\n  deleteImageFromS3,\r\n  cleanupExpiredImages,\r\n} from '../models/imagesModel';\r\nimport { ImageFilters, ImageUpdateRequest } from '../utils/DataTypes';\r\n\r\n/**\r\n * @swagger\r\n * /images/upload:\r\n *   post:\r\n *     summary: Subir una nueva imagen\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               image:\r\n *                 type: string\r\n *                 format: binary\r\n *                 description: Archivo de imagen\r\n *               category:\r\n *                 type: string\r\n *                 enum: [profile, post, event, gallery, admin]\r\n *                 description: Categor\xEDa de la imagen\r\n *               description:\r\n *                 type: string\r\n *                 description: Descripci\xF3n de la imagen\r\n *               tags:\r\n *                 type: array\r\n *                 items:\r\n *                   type: string\r\n *                 description: Etiquetas de la imagen\r\n *               isPublic:\r\n *                 type: boolean\r\n *                 default: true\r\n *                 description: Si la imagen es p\xFAblica\r\n *     responses:\r\n *       200:\r\n *         description: Imagen subida exitosamente\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 image:\r\n *                   $ref: '#/components/schemas/Image'\r\n */\r\nexport const uploadImageController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (!user) {\r\n      res.status(401).json({ error: 'Usuario no autenticado' });\r\n      return;\r\n    }\r\n\r\n    if (!req.file) {\r\n      res.status(400).json({ error: 'No se proporcion\xF3 ning\xFAn archivo' });\r\n      return;\r\n    }\r\n\r\n    const { category, description, tags, isPublic } = req.body;\r\n\r\n    if (\r\n      !category ||\r\n      !['profile', 'post', 'event', 'gallery', 'admin'].includes(category)\r\n    ) {\r\n      res.status(400).json({ error: 'Categor\xEDa inv\xE1lida' });\r\n      return;\r\n    }\r\n\r\n    const metadata = {\r\n      description: description || '',\r\n      tags: tags ? JSON.parse(tags) : [],\r\n      isPublic: isPublic !== undefined ? JSON.parse(isPublic) : true,\r\n    };\r\n\r\n    const image = await uploadImage(\r\n      req.file,\r\n      user.userEmail,\r\n      category,\r\n      metadata\r\n    );\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:uploadImageController] Imagen subida por ${user.userEmail}:`,\r\n      image.id\r\n    );\r\n\r\n    res.status(201).json({\r\n      success: true,\r\n      message: 'Imagen subida exitosamente',\r\n      image,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:uploadImageController] Error al subir imagen:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al subir imagen',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/{imageId}:\r\n *   get:\r\n *     summary: Obtener imagen por ID\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: path\r\n *         name: imageId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID de la imagen\r\n *     responses:\r\n *       200:\r\n *         description: Imagen encontrada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 image:\r\n *                   $ref: '#/components/schemas/Image'\r\n *       404:\r\n *         description: Imagen no encontrada\r\n */\r\nexport const getImageByIdController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { imageId } = req.params;\r\n\r\n    if (!imageId) {\r\n      res.status(400).json({ error: 'ID de imagen requerido' });\r\n      return;\r\n    }\r\n\r\n    const image = await getImageById(imageId);\r\n\r\n    if (!image) {\r\n      res.status(404).json({ error: 'Imagen no encontrada' });\r\n      return;\r\n    }\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getImageByIdController] Imagen obtenida:`,\r\n      imageId\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      image,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getImageByIdController] Error al obtener imagen:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener imagen',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images:\r\n *   get:\r\n *     summary: Listar im\xE1genes con filtros\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: query\r\n *         name: category\r\n *         schema:\r\n *           type: string\r\n *           enum: [profile, post, event, gallery, admin]\r\n *         description: Filtrar por categor\xEDa\r\n *       - in: query\r\n *         name: userId\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por usuario\r\n *       - in: query\r\n *         name: isPublic\r\n *         schema:\r\n *           type: boolean\r\n *         description: Filtrar por visibilidad\r\n *       - in: query\r\n *         name: search\r\n *         schema:\r\n *           type: string\r\n *         description: Buscar en descripci\xF3n y nombre\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           default: 20\r\n *         description: L\xEDmite de resultados\r\n *       - in: query\r\n *         name: offset\r\n *         schema:\r\n *           type: integer\r\n *           default: 0\r\n *         description: Offset para paginaci\xF3n\r\n *     responses:\r\n *       200:\r\n *         description: Lista de im\xE1genes\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 images:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/Image'\r\n *                 total:\r\n *                   type: integer\r\n */\r\nexport const listImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const {\r\n      category,\r\n      userId,\r\n      isPublic,\r\n      search,\r\n      limit = 20,\r\n      offset = 0,\r\n    } = req.query;\r\n\r\n    const filters: ImageFilters = {};\r\n\r\n    if (category) filters.category = category as any;\r\n    if (userId) filters.userId = userId as string;\r\n    if (isPublic !== undefined) filters.isPublic = isPublic === 'true';\r\n    if (search) filters.search = search as string;\r\n    if (limit) filters.limit = parseInt(limit as string);\r\n    if (offset) filters.offset = parseInt(offset as string);\r\n\r\n    const images = await listImages(filters);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:listImagesController] ${images.length} im\xE1genes listadas`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      images,\r\n      total: images.length,\r\n      filters,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:listImagesController] Error al listar im\xE1genes:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al listar im\xE1genes',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/{imageId}:\r\n *   put:\r\n *     summary: Actualizar imagen\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: imageId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID de la imagen\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               description:\r\n *                 type: string\r\n *               tags:\r\n *                 type: array\r\n *                 items:\r\n *                   type: string\r\n *               isPublic:\r\n *                 type: boolean\r\n *               isActive:\r\n *                 type: boolean\r\n *     responses:\r\n *       200:\r\n *         description: Imagen actualizada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 image:\r\n *                   $ref: '#/components/schemas/Image'\r\n */\r\nexport const updateImageController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (!user) {\r\n      res.status(401).json({ error: 'Usuario no autenticado' });\r\n      return;\r\n    }\r\n\r\n    const { imageId } = req.params;\r\n    const updateData: ImageUpdateRequest = req.body;\r\n\r\n    if (!imageId) {\r\n      res.status(400).json({ error: 'ID de imagen requerido' });\r\n      return;\r\n    }\r\n\r\n    // Verificar que la imagen existe y pertenece al usuario\r\n    const existingImage = await getImageById(imageId);\r\n    if (!existingImage) {\r\n      res.status(404).json({ error: 'Imagen no encontrada' });\r\n      return;\r\n    }\r\n\r\n    if (existingImage.userId !== user.userEmail) {\r\n      res\r\n        .status(403)\r\n        .json({ error: 'No tienes permisos para actualizar esta imagen' });\r\n      return;\r\n    }\r\n\r\n    const updatedImage = await updateImage(imageId, updateData);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:updateImageController] Imagen actualizada por ${user.userEmail}:`,\r\n      imageId\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Imagen actualizada exitosamente',\r\n      image: updatedImage,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:updateImageController] Error al actualizar imagen:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al actualizar imagen',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/{imageId}:\r\n *   delete:\r\n *     summary: Eliminar imagen\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: imageId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID de la imagen\r\n *     responses:\r\n *       200:\r\n *         description: Imagen eliminada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n */\r\nexport const deleteImageController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (!user) {\r\n      res.status(401).json({ error: 'Usuario no autenticado' });\r\n      return;\r\n    }\r\n\r\n    const { imageId } = req.params;\r\n\r\n    if (!imageId) {\r\n      res.status(400).json({ error: 'ID de imagen requerido' });\r\n      return;\r\n    }\r\n\r\n    await deleteImage(imageId, user.userEmail);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:deleteImageController] Imagen eliminada por ${user.userEmail}:`,\r\n      imageId\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Imagen eliminada exitosamente',\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:deleteImageController] Error al eliminar imagen:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al eliminar imagen',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/stats:\r\n *   get:\r\n *     summary: Obtener estad\xEDsticas de im\xE1genes\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Estad\xEDsticas de im\xE1genes\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 stats:\r\n *                   $ref: '#/components/schemas/ImageStats'\r\n */\r\nexport const getImageStatsController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (\r\n      !user ||\r\n      !['adminJunior', 'adminMidLevel', 'adminSenior', 'superAdmin'].includes(\r\n        user.roll\r\n      )\r\n    ) {\r\n      res.status(403).json({\r\n        error: 'Acceso denegado. Se requieren permisos de administrador',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const stats = await getImageStats();\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getImageStatsController] Estad\xEDsticas obtenidas por ${user.userEmail}`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      stats,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getImageStatsController] Error al obtener estad\xEDsticas:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener estad\xEDsticas',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/profile/{userId}:\r\n *   get:\r\n *     summary: Obtener im\xE1genes de perfil de un usuario\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: path\r\n *         name: userId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: Email del usuario\r\n *     responses:\r\n *       200:\r\n *         description: Im\xE1genes de perfil\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 images:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/Image'\r\n */\r\nexport const getUserProfileImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { userId } = req.params;\r\n\r\n    if (!userId) {\r\n      res.status(400).json({ error: 'ID de usuario requerido' });\r\n      return;\r\n    }\r\n\r\n    const images = await getUserProfileImages(userId);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getUserProfileImagesController] Im\xE1genes de perfil obtenidas para ${userId}`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      images,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getUserProfileImagesController] Error al obtener im\xE1genes de perfil:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener im\xE1genes de perfil',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/posts:\r\n *   get:\r\n *     summary: Obtener im\xE1genes de posts\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: query\r\n *         name: userId\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por usuario espec\xEDfico\r\n *     responses:\r\n *       200:\r\n *         description: Im\xE1genes de posts\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 images:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/Image'\r\n */\r\nexport const getPostImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { userId } = req.query;\r\n\r\n    const images = await getPostImages(userId as string);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getPostImagesController] ${images.length} im\xE1genes de posts obtenidas`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      images,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getPostImagesController] Error al obtener im\xE1genes de posts:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener im\xE1genes de posts',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/events:\r\n *   get:\r\n *     summary: Obtener im\xE1genes de eventos\r\n *     tags: [Images]\r\n *     parameters:\r\n *       - in: query\r\n *         name: eventId\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por evento espec\xEDfico\r\n *     responses:\r\n *       200:\r\n *         description: Im\xE1genes de eventos\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 images:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/Image'\r\n */\r\nexport const getEventImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { eventId } = req.query;\r\n\r\n    const images = await getEventImages(eventId as string);\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:getEventImagesController] ${images.length} im\xE1genes de eventos obtenidas`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      images,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getEventImagesController] Error al obtener im\xE1genes de eventos:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener im\xE1genes de eventos',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @swagger\r\n * /images/cleanup:\r\n *   post:\r\n *     summary: Limpiar im\xE1genes expiradas (Solo administradores)\r\n *     tags: [Images]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Limpieza completada\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 deletedCount:\r\n *                   type: integer\r\n *                 message:\r\n *                   type: string\r\n */\r\nexport const cleanupExpiredImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const user = (req as any).user;\r\n    if (!user || !['adminSenior', 'superAdmin'].includes(user.roll)) {\r\n      res.status(403).json({\r\n        error: 'Acceso denegado. Se requieren permisos de administrador senior',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const deletedCount = await cleanupExpiredImages();\r\n\r\n    console.log(\r\n      `[src/controllers/imagesController.ts:cleanupExpiredImagesController] Limpieza realizada por ${user.userEmail}: ${deletedCount} im\xE1genes eliminadas`\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      deletedCount,\r\n      message: `${deletedCount} im\xE1genes expiradas eliminadas`,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:cleanupExpiredImagesController] Error en limpieza:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error en limpieza de im\xE1genes',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Controladores legacy para compatibilidad\r\nexport const getAllImagesController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const images = await listImages();\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Galer\xEDa de fotos obtenida',\r\n      images,\r\n    });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getAllImagesController] Error al obtener galer\xEDa:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al obtener galer\xEDa de im\xE1genes',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getImageUrlController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { key } = req.params;\r\n    if (!key) {\r\n      res.status(400).json({ error: 'Clave de archivo requerida' });\r\n      return;\r\n    }\r\n\r\n    const image = await getImageById(key);\r\n    if (!image) {\r\n      res.status(404).json({ error: 'Imagen no encontrada' });\r\n      return;\r\n    }\r\n\r\n    res.status(200).json({ url: image.url });\r\n  } catch (error: any) {\r\n    logger.error('[src/controllers/imagesController.ts:getImageUrlController] Error al obtener URL:', error as Error);\r\n    res.status(500).json({\r\n      error: 'Error al generar URL de archivo',\r\n      details: error.message,\r\n    });\r\n  }\r\n};\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4d6bbf27600ba6ccd19844ff94fbbb202235cc2a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jviggwuus = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jviggwuus();
var __awaiter =
/* istanbul ignore next */
(cov_2jviggwuus().s[0]++,
/* istanbul ignore next */
(cov_2jviggwuus().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2jviggwuus().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_2jviggwuus().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_2jviggwuus().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_2jviggwuus().f[1]++;
    cov_2jviggwuus().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_2jviggwuus().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_2jviggwuus().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_2jviggwuus().f[2]++;
      cov_2jviggwuus().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_2jviggwuus().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_2jviggwuus().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_2jviggwuus().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_2jviggwuus().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_2jviggwuus().f[4]++;
      cov_2jviggwuus().s[4]++;
      try {
        /* istanbul ignore next */
        cov_2jviggwuus().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_2jviggwuus().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_2jviggwuus().f[5]++;
      cov_2jviggwuus().s[7]++;
      try {
        /* istanbul ignore next */
        cov_2jviggwuus().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_2jviggwuus().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_2jviggwuus().f[6]++;
      cov_2jviggwuus().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_2jviggwuus().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_2jviggwuus().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_2jviggwuus().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_2jviggwuus().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_2jviggwuus().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_2jviggwuus().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2jviggwuus().s[13]++;
exports.getImageUrlController = exports.getAllImagesController = exports.cleanupExpiredImagesController = exports.getEventImagesController = exports.getPostImagesController = exports.getUserProfileImagesController = exports.getImageStatsController = exports.deleteImageController = exports.updateImageController = exports.listImagesController = exports.getImageByIdController = exports.uploadImageController = void 0;
const loggerService_1 =
/* istanbul ignore next */
(cov_2jviggwuus().s[14]++, require("../services/loggerService"));
const imagesModel_1 =
/* istanbul ignore next */
(cov_2jviggwuus().s[15]++, require("../models/imagesModel"));
/**
 * @swagger
 * /images/upload:
 *   post:
 *     summary: Subir una nueva imagen
 *     tags: [Images]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               image:
 *                 type: string
 *                 format: binary
 *                 description: Archivo de imagen
 *               category:
 *                 type: string
 *                 enum: [profile, post, event, gallery, admin]
 *                 description: Categoría de la imagen
 *               description:
 *                 type: string
 *                 description: Descripción de la imagen
 *               tags:
 *                 type: array
 *                 items:
 *                   type: string
 *                 description: Etiquetas de la imagen
 *               isPublic:
 *                 type: boolean
 *                 default: true
 *                 description: Si la imagen es pública
 *     responses:
 *       200:
 *         description: Imagen subida exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 image:
 *                   $ref: '#/components/schemas/Image'
 */
/* istanbul ignore next */
cov_2jviggwuus().s[16]++;
const uploadImageController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[7]++;
  cov_2jviggwuus().s[17]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[8]++;
    cov_2jviggwuus().s[18]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[19]++, req.user);
      /* istanbul ignore next */
      cov_2jviggwuus().s[20]++;
      if (!user) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[5][0]++;
        cov_2jviggwuus().s[21]++;
        res.status(401).json({
          error: 'Usuario no autenticado'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[22]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[5][1]++;
      }
      cov_2jviggwuus().s[23]++;
      if (!req.file) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[6][0]++;
        cov_2jviggwuus().s[24]++;
        res.status(400).json({
          error: 'No se proporcionó ningún archivo'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[25]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[6][1]++;
      }
      const {
        category,
        description,
        tags,
        isPublic
      } =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[26]++, req.body);
      /* istanbul ignore next */
      cov_2jviggwuus().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_2jviggwuus().b[8][0]++, !category) ||
      /* istanbul ignore next */
      (cov_2jviggwuus().b[8][1]++, !['profile', 'post', 'event', 'gallery', 'admin'].includes(category))) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[7][0]++;
        cov_2jviggwuus().s[28]++;
        res.status(400).json({
          error: 'Categoría inválida'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[29]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[7][1]++;
      }
      const metadata =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[30]++, {
        description:
        /* istanbul ignore next */
        (cov_2jviggwuus().b[9][0]++, description) ||
        /* istanbul ignore next */
        (cov_2jviggwuus().b[9][1]++, ''),
        tags: tags ?
        /* istanbul ignore next */
        (cov_2jviggwuus().b[10][0]++, JSON.parse(tags)) :
        /* istanbul ignore next */
        (cov_2jviggwuus().b[10][1]++, []),
        isPublic: isPublic !== undefined ?
        /* istanbul ignore next */
        (cov_2jviggwuus().b[11][0]++, JSON.parse(isPublic)) :
        /* istanbul ignore next */
        (cov_2jviggwuus().b[11][1]++, true)
      });
      const image =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[31]++, yield (0, imagesModel_1.uploadImage)(req.file, user.userEmail, category, metadata));
      /* istanbul ignore next */
      cov_2jviggwuus().s[32]++;
      console.log(`[src/controllers/imagesController.ts:uploadImageController] Imagen subida por ${user.userEmail}:`, image.id);
      /* istanbul ignore next */
      cov_2jviggwuus().s[33]++;
      res.status(201).json({
        success: true,
        message: 'Imagen subida exitosamente',
        image
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[34]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:uploadImageController] Error al subir imagen:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[35]++;
      res.status(500).json({
        error: 'Error al subir imagen',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[36]++;
exports.uploadImageController = uploadImageController;
/**
 * @swagger
 * /images/{imageId}:
 *   get:
 *     summary: Obtener imagen por ID
 *     tags: [Images]
 *     parameters:
 *       - in: path
 *         name: imageId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID de la imagen
 *     responses:
 *       200:
 *         description: Imagen encontrada
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 image:
 *                   $ref: '#/components/schemas/Image'
 *       404:
 *         description: Imagen no encontrada
 */
/* istanbul ignore next */
cov_2jviggwuus().s[37]++;
const getImageByIdController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[9]++;
  cov_2jviggwuus().s[38]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[10]++;
    cov_2jviggwuus().s[39]++;
    try {
      const {
        imageId
      } =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[40]++, req.params);
      /* istanbul ignore next */
      cov_2jviggwuus().s[41]++;
      if (!imageId) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[12][0]++;
        cov_2jviggwuus().s[42]++;
        res.status(400).json({
          error: 'ID de imagen requerido'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[43]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[12][1]++;
      }
      const image =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[44]++, yield (0, imagesModel_1.getImageById)(imageId));
      /* istanbul ignore next */
      cov_2jviggwuus().s[45]++;
      if (!image) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[13][0]++;
        cov_2jviggwuus().s[46]++;
        res.status(404).json({
          error: 'Imagen no encontrada'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[47]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[13][1]++;
      }
      cov_2jviggwuus().s[48]++;
      console.log(`[src/controllers/imagesController.ts:getImageByIdController] Imagen obtenida:`, imageId);
      /* istanbul ignore next */
      cov_2jviggwuus().s[49]++;
      res.status(200).json({
        success: true,
        image
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[50]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:getImageByIdController] Error al obtener imagen:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[51]++;
      res.status(500).json({
        error: 'Error al obtener imagen',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[52]++;
exports.getImageByIdController = getImageByIdController;
/**
 * @swagger
 * /images:
 *   get:
 *     summary: Listar imágenes con filtros
 *     tags: [Images]
 *     parameters:
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *           enum: [profile, post, event, gallery, admin]
 *         description: Filtrar por categoría
 *       - in: query
 *         name: userId
 *         schema:
 *           type: string
 *         description: Filtrar por usuario
 *       - in: query
 *         name: isPublic
 *         schema:
 *           type: boolean
 *         description: Filtrar por visibilidad
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Buscar en descripción y nombre
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 20
 *         description: Límite de resultados
 *       - in: query
 *         name: offset
 *         schema:
 *           type: integer
 *           default: 0
 *         description: Offset para paginación
 *     responses:
 *       200:
 *         description: Lista de imágenes
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 images:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Image'
 *                 total:
 *                   type: integer
 */
/* istanbul ignore next */
cov_2jviggwuus().s[53]++;
const listImagesController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[11]++;
  cov_2jviggwuus().s[54]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[12]++;
    cov_2jviggwuus().s[55]++;
    try {
      const {
        category,
        userId,
        isPublic,
        search,
        limit =
        /* istanbul ignore next */
        (cov_2jviggwuus().b[14][0]++, 20),
        offset =
        /* istanbul ignore next */
        (cov_2jviggwuus().b[15][0]++, 0)
      } =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[56]++, req.query);
      const filters =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[57]++, {});
      /* istanbul ignore next */
      cov_2jviggwuus().s[58]++;
      if (category) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[16][0]++;
        cov_2jviggwuus().s[59]++;
        filters.category = category;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[16][1]++;
      }
      cov_2jviggwuus().s[60]++;
      if (userId) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[17][0]++;
        cov_2jviggwuus().s[61]++;
        filters.userId = userId;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[17][1]++;
      }
      cov_2jviggwuus().s[62]++;
      if (isPublic !== undefined) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[18][0]++;
        cov_2jviggwuus().s[63]++;
        filters.isPublic = isPublic === 'true';
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[18][1]++;
      }
      cov_2jviggwuus().s[64]++;
      if (search) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[19][0]++;
        cov_2jviggwuus().s[65]++;
        filters.search = search;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[19][1]++;
      }
      cov_2jviggwuus().s[66]++;
      if (limit) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[20][0]++;
        cov_2jviggwuus().s[67]++;
        filters.limit = parseInt(limit);
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[20][1]++;
      }
      cov_2jviggwuus().s[68]++;
      if (offset) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[21][0]++;
        cov_2jviggwuus().s[69]++;
        filters.offset = parseInt(offset);
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[21][1]++;
      }
      const images =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[70]++, yield (0, imagesModel_1.listImages)(filters));
      /* istanbul ignore next */
      cov_2jviggwuus().s[71]++;
      console.log(`[src/controllers/imagesController.ts:listImagesController] ${images.length} imágenes listadas`);
      /* istanbul ignore next */
      cov_2jviggwuus().s[72]++;
      res.status(200).json({
        success: true,
        images,
        total: images.length,
        filters
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[73]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:listImagesController] Error al listar imágenes:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[74]++;
      res.status(500).json({
        error: 'Error al listar imágenes',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[75]++;
exports.listImagesController = listImagesController;
/**
 * @swagger
 * /images/{imageId}:
 *   put:
 *     summary: Actualizar imagen
 *     tags: [Images]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: imageId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID de la imagen
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               description:
 *                 type: string
 *               tags:
 *                 type: array
 *                 items:
 *                   type: string
 *               isPublic:
 *                 type: boolean
 *               isActive:
 *                 type: boolean
 *     responses:
 *       200:
 *         description: Imagen actualizada
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 image:
 *                   $ref: '#/components/schemas/Image'
 */
/* istanbul ignore next */
cov_2jviggwuus().s[76]++;
const updateImageController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[13]++;
  cov_2jviggwuus().s[77]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[14]++;
    cov_2jviggwuus().s[78]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[79]++, req.user);
      /* istanbul ignore next */
      cov_2jviggwuus().s[80]++;
      if (!user) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[22][0]++;
        cov_2jviggwuus().s[81]++;
        res.status(401).json({
          error: 'Usuario no autenticado'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[82]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[22][1]++;
      }
      const {
        imageId
      } =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[83]++, req.params);
      const updateData =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[84]++, req.body);
      /* istanbul ignore next */
      cov_2jviggwuus().s[85]++;
      if (!imageId) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[23][0]++;
        cov_2jviggwuus().s[86]++;
        res.status(400).json({
          error: 'ID de imagen requerido'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[87]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[23][1]++;
      }
      // Verificar que la imagen existe y pertenece al usuario
      const existingImage =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[88]++, yield (0, imagesModel_1.getImageById)(imageId));
      /* istanbul ignore next */
      cov_2jviggwuus().s[89]++;
      if (!existingImage) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[24][0]++;
        cov_2jviggwuus().s[90]++;
        res.status(404).json({
          error: 'Imagen no encontrada'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[91]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[24][1]++;
      }
      cov_2jviggwuus().s[92]++;
      if (existingImage.userId !== user.userEmail) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[25][0]++;
        cov_2jviggwuus().s[93]++;
        res.status(403).json({
          error: 'No tienes permisos para actualizar esta imagen'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[94]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[25][1]++;
      }
      const updatedImage =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[95]++, yield (0, imagesModel_1.updateImage)(imageId, updateData));
      /* istanbul ignore next */
      cov_2jviggwuus().s[96]++;
      console.log(`[src/controllers/imagesController.ts:updateImageController] Imagen actualizada por ${user.userEmail}:`, imageId);
      /* istanbul ignore next */
      cov_2jviggwuus().s[97]++;
      res.status(200).json({
        success: true,
        message: 'Imagen actualizada exitosamente',
        image: updatedImage
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[98]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:updateImageController] Error al actualizar imagen:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[99]++;
      res.status(500).json({
        error: 'Error al actualizar imagen',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[100]++;
exports.updateImageController = updateImageController;
/**
 * @swagger
 * /images/{imageId}:
 *   delete:
 *     summary: Eliminar imagen
 *     tags: [Images]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: imageId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID de la imagen
 *     responses:
 *       200:
 *         description: Imagen eliminada
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 */
/* istanbul ignore next */
cov_2jviggwuus().s[101]++;
const deleteImageController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[15]++;
  cov_2jviggwuus().s[102]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[16]++;
    cov_2jviggwuus().s[103]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[104]++, req.user);
      /* istanbul ignore next */
      cov_2jviggwuus().s[105]++;
      if (!user) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[26][0]++;
        cov_2jviggwuus().s[106]++;
        res.status(401).json({
          error: 'Usuario no autenticado'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[107]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[26][1]++;
      }
      const {
        imageId
      } =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[108]++, req.params);
      /* istanbul ignore next */
      cov_2jviggwuus().s[109]++;
      if (!imageId) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[27][0]++;
        cov_2jviggwuus().s[110]++;
        res.status(400).json({
          error: 'ID de imagen requerido'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[111]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[27][1]++;
      }
      cov_2jviggwuus().s[112]++;
      yield (0, imagesModel_1.deleteImage)(imageId, user.userEmail);
      /* istanbul ignore next */
      cov_2jviggwuus().s[113]++;
      console.log(`[src/controllers/imagesController.ts:deleteImageController] Imagen eliminada por ${user.userEmail}:`, imageId);
      /* istanbul ignore next */
      cov_2jviggwuus().s[114]++;
      res.status(200).json({
        success: true,
        message: 'Imagen eliminada exitosamente'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[115]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:deleteImageController] Error al eliminar imagen:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[116]++;
      res.status(500).json({
        error: 'Error al eliminar imagen',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[117]++;
exports.deleteImageController = deleteImageController;
/**
 * @swagger
 * /images/stats:
 *   get:
 *     summary: Obtener estadísticas de imágenes
 *     tags: [Images]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estadísticas de imágenes
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 stats:
 *                   $ref: '#/components/schemas/ImageStats'
 */
/* istanbul ignore next */
cov_2jviggwuus().s[118]++;
const getImageStatsController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[17]++;
  cov_2jviggwuus().s[119]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[18]++;
    cov_2jviggwuus().s[120]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[121]++, req.user);
      /* istanbul ignore next */
      cov_2jviggwuus().s[122]++;
      if (
      /* istanbul ignore next */
      (cov_2jviggwuus().b[29][0]++, !user) ||
      /* istanbul ignore next */
      (cov_2jviggwuus().b[29][1]++, !['adminJunior', 'adminMidLevel', 'adminSenior', 'superAdmin'].includes(user.roll))) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[28][0]++;
        cov_2jviggwuus().s[123]++;
        res.status(403).json({
          error: 'Acceso denegado. Se requieren permisos de administrador'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[124]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[28][1]++;
      }
      const stats =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[125]++, yield (0, imagesModel_1.getImageStats)());
      /* istanbul ignore next */
      cov_2jviggwuus().s[126]++;
      console.log(`[src/controllers/imagesController.ts:getImageStatsController] Estadísticas obtenidas por ${user.userEmail}`);
      /* istanbul ignore next */
      cov_2jviggwuus().s[127]++;
      res.status(200).json({
        success: true,
        stats
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[128]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:getImageStatsController] Error al obtener estadísticas:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[129]++;
      res.status(500).json({
        error: 'Error al obtener estadísticas',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[130]++;
exports.getImageStatsController = getImageStatsController;
/**
 * @swagger
 * /images/profile/{userId}:
 *   get:
 *     summary: Obtener imágenes de perfil de un usuario
 *     tags: [Images]
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: string
 *         description: Email del usuario
 *     responses:
 *       200:
 *         description: Imágenes de perfil
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 images:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Image'
 */
/* istanbul ignore next */
cov_2jviggwuus().s[131]++;
const getUserProfileImagesController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[19]++;
  cov_2jviggwuus().s[132]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[20]++;
    cov_2jviggwuus().s[133]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[134]++, req.params);
      /* istanbul ignore next */
      cov_2jviggwuus().s[135]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[30][0]++;
        cov_2jviggwuus().s[136]++;
        res.status(400).json({
          error: 'ID de usuario requerido'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[137]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[30][1]++;
      }
      const images =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[138]++, yield (0, imagesModel_1.getUserProfileImages)(userId));
      /* istanbul ignore next */
      cov_2jviggwuus().s[139]++;
      console.log(`[src/controllers/imagesController.ts:getUserProfileImagesController] Imágenes de perfil obtenidas para ${userId}`);
      /* istanbul ignore next */
      cov_2jviggwuus().s[140]++;
      res.status(200).json({
        success: true,
        images
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[141]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:getUserProfileImagesController] Error al obtener imágenes de perfil:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[142]++;
      res.status(500).json({
        error: 'Error al obtener imágenes de perfil',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[143]++;
exports.getUserProfileImagesController = getUserProfileImagesController;
/**
 * @swagger
 * /images/posts:
 *   get:
 *     summary: Obtener imágenes de posts
 *     tags: [Images]
 *     parameters:
 *       - in: query
 *         name: userId
 *         schema:
 *           type: string
 *         description: Filtrar por usuario específico
 *     responses:
 *       200:
 *         description: Imágenes de posts
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 images:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Image'
 */
/* istanbul ignore next */
cov_2jviggwuus().s[144]++;
const getPostImagesController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[21]++;
  cov_2jviggwuus().s[145]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[22]++;
    cov_2jviggwuus().s[146]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[147]++, req.query);
      const images =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[148]++, yield (0, imagesModel_1.getPostImages)(userId));
      /* istanbul ignore next */
      cov_2jviggwuus().s[149]++;
      console.log(`[src/controllers/imagesController.ts:getPostImagesController] ${images.length} imágenes de posts obtenidas`);
      /* istanbul ignore next */
      cov_2jviggwuus().s[150]++;
      res.status(200).json({
        success: true,
        images
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[151]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:getPostImagesController] Error al obtener imágenes de posts:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[152]++;
      res.status(500).json({
        error: 'Error al obtener imágenes de posts',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[153]++;
exports.getPostImagesController = getPostImagesController;
/**
 * @swagger
 * /images/events:
 *   get:
 *     summary: Obtener imágenes de eventos
 *     tags: [Images]
 *     parameters:
 *       - in: query
 *         name: eventId
 *         schema:
 *           type: string
 *         description: Filtrar por evento específico
 *     responses:
 *       200:
 *         description: Imágenes de eventos
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 images:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Image'
 */
/* istanbul ignore next */
cov_2jviggwuus().s[154]++;
const getEventImagesController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[23]++;
  cov_2jviggwuus().s[155]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[24]++;
    cov_2jviggwuus().s[156]++;
    try {
      const {
        eventId
      } =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[157]++, req.query);
      const images =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[158]++, yield (0, imagesModel_1.getEventImages)(eventId));
      /* istanbul ignore next */
      cov_2jviggwuus().s[159]++;
      console.log(`[src/controllers/imagesController.ts:getEventImagesController] ${images.length} imágenes de eventos obtenidas`);
      /* istanbul ignore next */
      cov_2jviggwuus().s[160]++;
      res.status(200).json({
        success: true,
        images
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[161]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:getEventImagesController] Error al obtener imágenes de eventos:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[162]++;
      res.status(500).json({
        error: 'Error al obtener imágenes de eventos',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[163]++;
exports.getEventImagesController = getEventImagesController;
/**
 * @swagger
 * /images/cleanup:
 *   post:
 *     summary: Limpiar imágenes expiradas (Solo administradores)
 *     tags: [Images]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Limpieza completada
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 deletedCount:
 *                   type: integer
 *                 message:
 *                   type: string
 */
/* istanbul ignore next */
cov_2jviggwuus().s[164]++;
const cleanupExpiredImagesController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[25]++;
  cov_2jviggwuus().s[165]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[26]++;
    cov_2jviggwuus().s[166]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[167]++, req.user);
      /* istanbul ignore next */
      cov_2jviggwuus().s[168]++;
      if (
      /* istanbul ignore next */
      (cov_2jviggwuus().b[32][0]++, !user) ||
      /* istanbul ignore next */
      (cov_2jviggwuus().b[32][1]++, !['adminSenior', 'superAdmin'].includes(user.roll))) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[31][0]++;
        cov_2jviggwuus().s[169]++;
        res.status(403).json({
          error: 'Acceso denegado. Se requieren permisos de administrador senior'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[170]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[31][1]++;
      }
      const deletedCount =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[171]++, yield (0, imagesModel_1.cleanupExpiredImages)());
      /* istanbul ignore next */
      cov_2jviggwuus().s[172]++;
      console.log(`[src/controllers/imagesController.ts:cleanupExpiredImagesController] Limpieza realizada por ${user.userEmail}: ${deletedCount} imágenes eliminadas`);
      /* istanbul ignore next */
      cov_2jviggwuus().s[173]++;
      res.status(200).json({
        success: true,
        deletedCount,
        message: `${deletedCount} imágenes expiradas eliminadas`
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[174]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:cleanupExpiredImagesController] Error en limpieza:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[175]++;
      res.status(500).json({
        error: 'Error en limpieza de imágenes',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[176]++;
exports.cleanupExpiredImagesController = cleanupExpiredImagesController;
// Controladores legacy para compatibilidad
/* istanbul ignore next */
cov_2jviggwuus().s[177]++;
const getAllImagesController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[27]++;
  cov_2jviggwuus().s[178]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[28]++;
    cov_2jviggwuus().s[179]++;
    try {
      const images =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[180]++, yield (0, imagesModel_1.listImages)());
      /* istanbul ignore next */
      cov_2jviggwuus().s[181]++;
      res.status(200).json({
        success: true,
        message: 'Galería de fotos obtenida',
        images
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[182]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:getAllImagesController] Error al obtener galería:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[183]++;
      res.status(500).json({
        error: 'Error al obtener galería de imágenes',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[184]++;
exports.getAllImagesController = getAllImagesController;
/* istanbul ignore next */
cov_2jviggwuus().s[185]++;
const getImageUrlController = (req, res) => {
  /* istanbul ignore next */
  cov_2jviggwuus().f[29]++;
  cov_2jviggwuus().s[186]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_2jviggwuus().f[30]++;
    cov_2jviggwuus().s[187]++;
    try {
      const {
        key
      } =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[188]++, req.params);
      /* istanbul ignore next */
      cov_2jviggwuus().s[189]++;
      if (!key) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[33][0]++;
        cov_2jviggwuus().s[190]++;
        res.status(400).json({
          error: 'Clave de archivo requerida'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[191]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[33][1]++;
      }
      const image =
      /* istanbul ignore next */
      (cov_2jviggwuus().s[192]++, yield (0, imagesModel_1.getImageById)(key));
      /* istanbul ignore next */
      cov_2jviggwuus().s[193]++;
      if (!image) {
        /* istanbul ignore next */
        cov_2jviggwuus().b[34][0]++;
        cov_2jviggwuus().s[194]++;
        res.status(404).json({
          error: 'Imagen no encontrada'
        });
        /* istanbul ignore next */
        cov_2jviggwuus().s[195]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jviggwuus().b[34][1]++;
      }
      cov_2jviggwuus().s[196]++;
      res.status(200).json({
        url: image.url
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2jviggwuus().s[197]++;
      loggerService_1.logger.error('[src/controllers/imagesController.ts:getImageUrlController] Error al obtener URL:', error);
      /* istanbul ignore next */
      cov_2jviggwuus().s[198]++;
      res.status(500).json({
        error: 'Error al generar URL de archivo',
        details: error.message
      });
    }
  });
};
/* istanbul ignore next */
cov_2jviggwuus().s[199]++;
exports.getImageUrlController = getImageUrlController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,