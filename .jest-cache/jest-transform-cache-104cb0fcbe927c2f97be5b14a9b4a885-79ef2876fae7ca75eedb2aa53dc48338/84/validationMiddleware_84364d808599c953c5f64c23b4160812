a11354296c557fc8543cd60f9715b55a
"use strict";

/* istanbul ignore next */
function cov_st3c3l33s() {
  var path = "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\validationMiddleware.ts";
  var hash = "9fb5c667235db5ecd41b276fb90f940d52ef2686";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\validationMiddleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 42
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 38
        }
      },
      "3": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 50
        }
      },
      "4": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 28
        }
      },
      "5": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 32
        }
      },
      "6": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 48
        }
      },
      "7": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "8": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 50
        }
      },
      "9": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "10": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "11": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "12": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 48
        }
      },
      "13": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 50
        }
      },
      "14": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 60
        }
      },
      "15": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 23
        }
      },
      "16": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 47
        }
      },
      "17": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 29
        }
      },
      "18": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 30
        }
      },
      "19": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 60
        }
      },
      "20": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "21": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 41,
          column: 80
        }
      },
      "22": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "23": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 53
        }
      },
      "24": {
        start: {
          line: 44,
          column: 32
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "25": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "26": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 47,
          column: 28
        }
      },
      "27": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "28": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 50
        }
      },
      "29": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 25
        }
      },
      "30": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 16
        }
      },
      "31": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "32": {
        start: {
          line: 66,
          column: 30
        },
        end: {
          line: 66,
          column: 87
        }
      },
      "33": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "34": {
        start: {
          line: 69,
          column: 30
        },
        end: {
          line: 69,
          column: 49
        }
      },
      "35": {
        start: {
          line: 70,
          column: 33
        },
        end: {
          line: 70,
          column: 82
        }
      },
      "36": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "37": {
        start: {
          line: 72,
          column: 27
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "38": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 79,
          column: 19
        }
      },
      "39": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "40": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 91,
          column: 10
        }
      },
      "41": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 69
        }
      },
      "42": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 105,
          column: 10
        }
      },
      "43": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 150,
          column: 6
        }
      },
      "44": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "45": {
        start: {
          line: 115,
          column: 25
        },
        end: {
          line: 115,
          column: 38
        }
      },
      "46": {
        start: {
          line: 116,
          column: 27
        },
        end: {
          line: 116,
          column: 69
        }
      },
      "47": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "48": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 123,
          column: 19
        }
      },
      "49": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 130,
          column: 19
        }
      },
      "50": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 23
        }
      },
      "51": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 49
        }
      },
      "52": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "53": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 19
        }
      },
      "54": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 85
        }
      },
      "55": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 148,
          column: 15
        }
      },
      "56": {
        start: {
          line: 156,
          column: 15
        },
        end: {
          line: 156,
          column: 28
        }
      },
      "57": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "58": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "59": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 15
        }
      },
      "60": {
        start: {
          line: 166,
          column: 24
        },
        end: {
          line: 166,
          column: 41
        }
      },
      "61": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 177,
          column: 5
        }
      },
      "62": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "63": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "64": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 188,
          column: 5
        }
      },
      "65": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "66": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "67": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 189,
          column: 32
        }
      },
      "68": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "69": {
        start: {
          line: 196,
          column: 17
        },
        end: {
          line: 196,
          column: 46
        }
      },
      "70": {
        start: {
          line: 197,
          column: 18
        },
        end: {
          line: 197,
          column: 49
        }
      },
      "71": {
        start: {
          line: 198,
          column: 19
        },
        end: {
          line: 198,
          column: 50
        }
      },
      "72": {
        start: {
          line: 199,
          column: 19
        },
        end: {
          line: 199,
          column: 21
        }
      },
      "73": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 206,
          column: 5
        }
      },
      "74": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      },
      "75": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "76": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 212,
          column: 11
        }
      },
      "77": {
        start: {
          line: 214,
          column: 4
        },
        end: {
          line: 220,
          column: 5
        }
      },
      "78": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 219,
          column: 11
        }
      },
      "79": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 229,
          column: 5
        }
      },
      "80": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 227,
          column: 11
        }
      },
      "81": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 15
        }
      },
      "82": {
        start: {
          line: 231,
          column: 4
        },
        end: {
          line: 231,
          column: 45
        }
      },
      "83": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 232,
          column: 11
        }
      },
      "84": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 313,
          column: 6
        }
      },
      "85": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "86": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 251,
          column: 15
        }
      },
      "87": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 19
        }
      },
      "88": {
        start: {
          line: 254,
          column: 22
        },
        end: {
          line: 258,
          column: 24
        }
      },
      "89": {
        start: {
          line: 259,
          column: 23
        },
        end: {
          line: 259,
          column: 25
        }
      },
      "90": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "91": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 262,
          column: 25
        }
      },
      "92": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 25
        }
      },
      "93": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "94": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 271,
          column: 19
        }
      },
      "95": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "96": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 279,
          column: 19
        }
      },
      "97": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "98": {
        start: {
          line: 283,
          column: 38
        },
        end: {
          line: 283,
          column: 70
        }
      },
      "99": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 290,
          column: 17
        }
      },
      "100": {
        start: {
          line: 285,
          column: 20
        },
        end: {
          line: 289,
          column: 23
        }
      },
      "101": {
        start: {
          line: 292,
          column: 34
        },
        end: {
          line: 292,
          column: 125
        }
      },
      "102": {
        start: {
          line: 293,
          column: 42
        },
        end: {
          line: 293,
          column: 86
        }
      },
      "103": {
        start: {
          line: 293,
          column: 67
        },
        end: {
          line: 293,
          column: 85
        }
      },
      "104": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 300,
          column: 17
        }
      },
      "105": {
        start: {
          line: 295,
          column: 20
        },
        end: {
          line: 299,
          column: 23
        }
      },
      "106": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "107": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 309,
          column: 15
        }
      },
      "108": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 19
        }
      },
      "109": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 15
        }
      },
      "110": {
        start: {
          line: 319,
          column: 46
        },
        end: {
          line: 319,
          column: 55
        }
      },
      "111": {
        start: {
          line: 320,
          column: 21
        },
        end: {
          line: 320,
          column: 50
        }
      },
      "112": {
        start: {
          line: 321,
          column: 21
        },
        end: {
          line: 321,
          column: 51
        }
      },
      "113": {
        start: {
          line: 322,
          column: 19
        },
        end: {
          line: 322,
          column: 21
        }
      },
      "114": {
        start: {
          line: 323,
          column: 4
        },
        end: {
          line: 329,
          column: 5
        }
      },
      "115": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 328,
          column: 11
        }
      },
      "116": {
        start: {
          line: 330,
          column: 4
        },
        end: {
          line: 336,
          column: 5
        }
      },
      "117": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 335,
          column: 11
        }
      },
      "118": {
        start: {
          line: 337,
          column: 4
        },
        end: {
          line: 345,
          column: 5
        }
      },
      "119": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 343,
          column: 11
        }
      },
      "120": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 15
        }
      },
      "121": {
        start: {
          line: 347,
          column: 4
        },
        end: {
          line: 347,
          column: 66
        }
      },
      "122": {
        start: {
          line: 348,
          column: 4
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "123": {
        start: {
          line: 354,
          column: 53
        },
        end: {
          line: 354,
          column: 62
        }
      },
      "124": {
        start: {
          line: 355,
          column: 18
        },
        end: {
          line: 355,
          column: 39
        }
      },
      "125": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 33
        }
      },
      "126": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 364,
          column: 5
        }
      },
      "127": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 362,
          column: 11
        }
      },
      "128": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 15
        }
      },
      "129": {
        start: {
          line: 365,
          column: 25
        },
        end: {
          line: 365,
          column: 40
        }
      },
      "130": {
        start: {
          line: 366,
          column: 23
        },
        end: {
          line: 366,
          column: 36
        }
      },
      "131": {
        start: {
          line: 367,
          column: 19
        },
        end: {
          line: 367,
          column: 21
        }
      },
      "132": {
        start: {
          line: 368,
          column: 4
        },
        end: {
          line: 374,
          column: 5
        }
      },
      "133": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 373,
          column: 11
        }
      },
      "134": {
        start: {
          line: 375,
          column: 4
        },
        end: {
          line: 381,
          column: 5
        }
      },
      "135": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 380,
          column: 11
        }
      },
      "136": {
        start: {
          line: 382,
          column: 4
        },
        end: {
          line: 388,
          column: 5
        }
      },
      "137": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 387,
          column: 11
        }
      },
      "138": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 390,
          column: 30
        }
      },
      "139": {
        start: {
          line: 391,
          column: 4
        },
        end: {
          line: 391,
          column: 52
        }
      },
      "140": {
        start: {
          line: 392,
          column: 4
        },
        end: {
          line: 398,
          column: 5
        }
      },
      "141": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 397,
          column: 11
        }
      },
      "142": {
        start: {
          line: 399,
          column: 4
        },
        end: {
          line: 407,
          column: 5
        }
      },
      "143": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 405,
          column: 11
        }
      },
      "144": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 406,
          column: 15
        }
      },
      "145": {
        start: {
          line: 409,
          column: 4
        },
        end: {
          line: 409,
          column: 69
        }
      },
      "146": {
        start: {
          line: 410,
          column: 4
        },
        end: {
          line: 410,
          column: 11
        }
      },
      "147": {
        start: {
          line: 416,
          column: 54
        },
        end: {
          line: 416,
          column: 63
        }
      },
      "148": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 48
        }
      },
      "149": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 418,
          column: 51
        }
      },
      "150": {
        start: {
          line: 419,
          column: 4
        },
        end: {
          line: 453,
          column: 5
        }
      },
      "151": {
        start: {
          line: 420,
          column: 23
        },
        end: {
          line: 420,
          column: 25
        }
      },
      "152": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "153": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 426,
          column: 15
        }
      },
      "154": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 434,
          column: 9
        }
      },
      "155": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 433,
          column: 15
        }
      },
      "156": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "157": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 440,
          column: 15
        }
      },
      "158": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "159": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 448,
          column: 15
        }
      },
      "160": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 19
        }
      },
      "161": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 38
        }
      },
      "162": {
        start: {
          line: 454,
          column: 4
        },
        end: {
          line: 454,
          column: 11
        }
      },
      "163": {
        start: {
          line: 460,
          column: 4
        },
        end: {
          line: 481,
          column: 6
        }
      },
      "164": {
        start: {
          line: 461,
          column: 21
        },
        end: {
          line: 461,
          column: 29
        }
      },
      "165": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 469,
          column: 9
        }
      },
      "166": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 467,
          column: 15
        }
      },
      "167": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 468,
          column: 19
        }
      },
      "168": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 479,
          column: 9
        }
      },
      "169": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 477,
          column: 15
        }
      },
      "170": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 19
        }
      },
      "171": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 480,
          column: 15
        }
      },
      "172": {
        start: {
          line: 487,
          column: 4
        },
        end: {
          line: 501,
          column: 6
        }
      },
      "173": {
        start: {
          line: 488,
          column: 22
        },
        end: {
          line: 488,
          column: 53
        }
      },
      "174": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 499,
          column: 9
        }
      },
      "175": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 497,
          column: 15
        }
      },
      "176": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 498,
          column: 19
        }
      },
      "177": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 500,
          column: 15
        }
      },
      "178": {
        start: {
          line: 507,
          column: 30
        },
        end: {
          line: 507,
          column: 39
        }
      },
      "179": {
        start: {
          line: 508,
          column: 23
        },
        end: {
          line: 508,
          column: 38
        }
      },
      "180": {
        start: {
          line: 509,
          column: 4
        },
        end: {
          line: 541,
          column: 5
        }
      },
      "181": {
        start: {
          line: 510,
          column: 31
        },
        end: {
          line: 510,
          column: 56
        }
      },
      "182": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 519,
          column: 9
        }
      },
      "183": {
        start: {
          line: 512,
          column: 12
        },
        end: {
          line: 517,
          column: 15
        }
      },
      "184": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 518,
          column: 19
        }
      },
      "185": {
        start: {
          line: 520,
          column: 8
        },
        end: {
          line: 529,
          column: 9
        }
      },
      "186": {
        start: {
          line: 521,
          column: 12
        },
        end: {
          line: 527,
          column: 15
        }
      },
      "187": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 528,
          column: 19
        }
      },
      "188": {
        start: {
          line: 531,
          column: 8
        },
        end: {
          line: 539,
          column: 9
        }
      },
      "189": {
        start: {
          line: 532,
          column: 12
        },
        end: {
          line: 537,
          column: 15
        }
      },
      "190": {
        start: {
          line: 538,
          column: 12
        },
        end: {
          line: 538,
          column: 19
        }
      },
      "191": {
        start: {
          line: 540,
          column: 8
        },
        end: {
          line: 540,
          column: 41
        }
      },
      "192": {
        start: {
          line: 542,
          column: 4
        },
        end: {
          line: 542,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 57
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 21
      },
      "1": {
        name: "sanitizeInput",
        decl: {
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 32,
            column: 22
          }
        },
        loc: {
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 25
          }
        },
        loc: {
          start: {
            line: 44,
            column: 32
          },
          end: {
            line: 44,
            column: 51
          }
        },
        line: 44
      },
      "3": {
        name: "validateAndSanitize",
        decl: {
          start: {
            line: 58,
            column: 9
          },
          end: {
            line: 58,
            column: 28
          }
        },
        loc: {
          start: {
            line: 58,
            column: 57
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 58
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 45
          },
          end: {
            line: 72,
            column: 46
          }
        },
        loc: {
          start: {
            line: 72,
            column: 55
          },
          end: {
            line: 80,
            column: 13
          }
        },
        line: 72
      },
      "5": {
        name: "validate",
        decl: {
          start: {
            line: 111,
            column: 9
          },
          end: {
            line: 111,
            column: 17
          }
        },
        loc: {
          start: {
            line: 111,
            column: 59
          },
          end: {
            line: 151,
            column: 1
          }
        },
        line: 111
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 112,
            column: 11
          },
          end: {
            line: 112,
            column: 12
          }
        },
        loc: {
          start: {
            line: 112,
            column: 31
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 112
      },
      "7": {
        name: "validateId",
        decl: {
          start: {
            line: 155,
            column: 9
          },
          end: {
            line: 155,
            column: 19
          }
        },
        loc: {
          start: {
            line: 155,
            column: 36
          },
          end: {
            line: 191,
            column: 1
          }
        },
        line: 155
      },
      "8": {
        name: "validatePagination",
        decl: {
          start: {
            line: 195,
            column: 9
          },
          end: {
            line: 195,
            column: 27
          }
        },
        loc: {
          start: {
            line: 195,
            column: 44
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 195
      },
      "9": {
        name: "validateFile",
        decl: {
          start: {
            line: 237,
            column: 9
          },
          end: {
            line: 237,
            column: 21
          }
        },
        loc: {
          start: {
            line: 243,
            column: 2
          },
          end: {
            line: 314,
            column: 1
          }
        },
        line: 243
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 244,
            column: 11
          },
          end: {
            line: 244,
            column: 12
          }
        },
        loc: {
          start: {
            line: 244,
            column: 31
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 244
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 293,
            column: 59
          },
          end: {
            line: 293,
            column: 60
          }
        },
        loc: {
          start: {
            line: 293,
            column: 67
          },
          end: {
            line: 293,
            column: 85
          }
        },
        line: 293
      },
      "12": {
        name: "validateCoordinates",
        decl: {
          start: {
            line: 318,
            column: 9
          },
          end: {
            line: 318,
            column: 28
          }
        },
        loc: {
          start: {
            line: 318,
            column: 45
          },
          end: {
            line: 349,
            column: 1
          }
        },
        line: 318
      },
      "13": {
        name: "validateDateRange",
        decl: {
          start: {
            line: 353,
            column: 9
          },
          end: {
            line: 353,
            column: 26
          }
        },
        loc: {
          start: {
            line: 353,
            column: 43
          },
          end: {
            line: 411,
            column: 1
          }
        },
        line: 353
      },
      "14": {
        name: "validatePriceRange",
        decl: {
          start: {
            line: 415,
            column: 9
          },
          end: {
            line: 415,
            column: 27
          }
        },
        loc: {
          start: {
            line: 415,
            column: 44
          },
          end: {
            line: 455,
            column: 1
          }
        },
        line: 415
      },
      "15": {
        name: "validateUserRole",
        decl: {
          start: {
            line: 459,
            column: 9
          },
          end: {
            line: 459,
            column: 25
          }
        },
        loc: {
          start: {
            line: 459,
            column: 40
          },
          end: {
            line: 482,
            column: 1
          }
        },
        line: 459
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 460,
            column: 11
          },
          end: {
            line: 460,
            column: 12
          }
        },
        loc: {
          start: {
            line: 460,
            column: 31
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 460
      },
      "17": {
        name: "validateQueryLimit",
        decl: {
          start: {
            line: 486,
            column: 9
          },
          end: {
            line: 486,
            column: 27
          }
        },
        loc: {
          start: {
            line: 486,
            column: 44
          },
          end: {
            line: 502,
            column: 1
          }
        },
        line: 486
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 487,
            column: 11
          },
          end: {
            line: 487,
            column: 12
          }
        },
        loc: {
          start: {
            line: 487,
            column: 31
          },
          end: {
            line: 501,
            column: 5
          }
        },
        line: 487
      },
      "19": {
        name: "validateSearchQuery",
        decl: {
          start: {
            line: 506,
            column: 9
          },
          end: {
            line: 506,
            column: 28
          }
        },
        loc: {
          start: {
            line: 506,
            column: 45
          },
          end: {
            line: 543,
            column: 1
          }
        },
        line: 506
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 34
          },
          end: {
            line: 21,
            column: 55
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 32
          }
        }, {
          start: {
            line: 46,
            column: 36
          },
          end: {
            line: 46,
            column: 49
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 43
          },
          end: {
            line: 58,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 58,
            column: 53
          },
          end: {
            line: 58,
            column: 55
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "7": {
        loc: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 77
          },
          end: {
            line: 77,
            column: 83
          }
        }, {
          start: {
            line: 77,
            column: 86
          },
          end: {
            line: 77,
            column: 94
          }
        }],
        line: 77
      },
      "8": {
        loc: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 57
          }
        }, {
          start: {
            line: 77,
            column: 61
          },
          end: {
            line: 77,
            column: 74
          }
        }],
        line: 77
      },
      "9": {
        loc: {
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 111,
            column: 37
          },
          end: {
            line: 111,
            column: 43
          }
        }],
        line: 111
      },
      "10": {
        loc: {
          start: {
            line: 111,
            column: 45
          },
          end: {
            line: 111,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 111,
            column: 55
          },
          end: {
            line: 111,
            column: 57
          }
        }],
        line: 111
      },
      "11": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "12": {
        loc: {
          start: {
            line: 119,
            column: 28
          },
          end: {
            line: 119,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 72
          },
          end: {
            line: 119,
            column: 78
          }
        }, {
          start: {
            line: 119,
            column: 81
          },
          end: {
            line: 119,
            column: 90
          }
        }],
        line: 119
      },
      "13": {
        loc: {
          start: {
            line: 119,
            column: 28
          },
          end: {
            line: 119,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 28
          },
          end: {
            line: 119,
            column: 52
          }
        }, {
          start: {
            line: 119,
            column: 56
          },
          end: {
            line: 119,
            column: 69
          }
        }],
        line: 119
      },
      "14": {
        loc: {
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 136,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 68
          },
          end: {
            line: 136,
            column: 74
          }
        }, {
          start: {
            line: 136,
            column: 77
          },
          end: {
            line: 136,
            column: 86
          }
        }],
        line: 136
      },
      "15": {
        loc: {
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 136,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 136,
            column: 48
          }
        }, {
          start: {
            line: 136,
            column: 52
          },
          end: {
            line: 136,
            column: 65
          }
        }],
        line: 136
      },
      "16": {
        loc: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "17": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 157,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 157,
            column: 11
          }
        }, {
          start: {
            line: 157,
            column: 15
          },
          end: {
            line: 157,
            column: 37
          }
        }],
        line: 157
      },
      "18": {
        loc: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "19": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 168,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 168,
            column: 30
          }
        }, {
          start: {
            line: 168,
            column: 34
          },
          end: {
            line: 168,
            column: 59
          }
        }],
        line: 168
      },
      "20": {
        loc: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "21": {
        loc: {
          start: {
            line: 196,
            column: 17
          },
          end: {
            line: 196,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 17
          },
          end: {
            line: 196,
            column: 41
          }
        }, {
          start: {
            line: 196,
            column: 45
          },
          end: {
            line: 196,
            column: 46
          }
        }],
        line: 196
      },
      "22": {
        loc: {
          start: {
            line: 197,
            column: 18
          },
          end: {
            line: 197,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 18
          },
          end: {
            line: 197,
            column: 43
          }
        }, {
          start: {
            line: 197,
            column: 47
          },
          end: {
            line: 197,
            column: 49
          }
        }],
        line: 197
      },
      "23": {
        loc: {
          start: {
            line: 198,
            column: 19
          },
          end: {
            line: 198,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 19
          },
          end: {
            line: 198,
            column: 45
          }
        }, {
          start: {
            line: 198,
            column: 49
          },
          end: {
            line: 198,
            column: 50
          }
        }],
        line: 198
      },
      "24": {
        loc: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "25": {
        loc: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "26": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 207,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 207,
            column: 17
          }
        }, {
          start: {
            line: 207,
            column: 21
          },
          end: {
            line: 207,
            column: 32
          }
        }],
        line: 207
      },
      "27": {
        loc: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "28": {
        loc: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "29": {
        loc: {
          start: {
            line: 237,
            column: 22
          },
          end: {
            line: 242,
            column: 1
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 237,
            column: 37
          },
          end: {
            line: 242,
            column: 1
          }
        }],
        line: 237
      },
      "30": {
        loc: {
          start: {
            line: 242,
            column: 3
          },
          end: {
            line: 242,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 242,
            column: 13
          },
          end: {
            line: 242,
            column: 29
          }
        }],
        line: 242
      },
      "31": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "32": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 21
          }
        }, {
          start: {
            line: 246,
            column: 25
          },
          end: {
            line: 246,
            column: 35
          }
        }],
        line: 246
      },
      "33": {
        loc: {
          start: {
            line: 254,
            column: 22
          },
          end: {
            line: 258,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 255,
            column: 14
          },
          end: {
            line: 257,
            column: 29
          }
        }, {
          start: {
            line: 258,
            column: 14
          },
          end: {
            line: 258,
            column: 24
          }
        }],
        line: 254
      },
      "34": {
        loc: {
          start: {
            line: 255,
            column: 14
          },
          end: {
            line: 257,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 256,
            column: 18
          },
          end: {
            line: 256,
            column: 27
          }
        }, {
          start: {
            line: 257,
            column: 18
          },
          end: {
            line: 257,
            column: 29
          }
        }],
        line: 255
      },
      "35": {
        loc: {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 262,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 262,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "36": {
        loc: {
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "37": {
        loc: {
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 266,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 264,
            column: 29
          }
        }, {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 49
          }
        }, {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 266,
            column: 53
          }
        }],
        line: 264
      },
      "38": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "39": {
        loc: {
          start: {
            line: 274,
            column: 16
          },
          end: {
            line: 274,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 16
          },
          end: {
            line: 274,
            column: 45
          }
        }, {
          start: {
            line: 274,
            column: 49
          },
          end: {
            line: 274,
            column: 68
          }
        }],
        line: 274
      },
      "40": {
        loc: {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "41": {
        loc: {
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 282,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 282,
            column: 33
          }
        }, {
          start: {
            line: 282,
            column: 37
          },
          end: {
            line: 282,
            column: 74
          }
        }],
        line: 282
      },
      "42": {
        loc: {
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 290,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 290,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "43": {
        loc: {
          start: {
            line: 292,
            column: 34
          },
          end: {
            line: 292,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 100
          },
          end: {
            line: 292,
            column: 106
          }
        }, {
          start: {
            line: 292,
            column: 109
          },
          end: {
            line: 292,
            column: 125
          }
        }],
        line: 292
      },
      "44": {
        loc: {
          start: {
            line: 292,
            column: 34
          },
          end: {
            line: 292,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 34
          },
          end: {
            line: 292,
            column: 80
          }
        }, {
          start: {
            line: 292,
            column: 84
          },
          end: {
            line: 292,
            column: 97
          }
        }],
        line: 292
      },
      "45": {
        loc: {
          start: {
            line: 294,
            column: 16
          },
          end: {
            line: 300,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 16
          },
          end: {
            line: 300,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "46": {
        loc: {
          start: {
            line: 294,
            column: 20
          },
          end: {
            line: 294,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 20
          },
          end: {
            line: 294,
            column: 29
          }
        }, {
          start: {
            line: 294,
            column: 33
          },
          end: {
            line: 294,
            column: 71
          }
        }],
        line: 294
      },
      "47": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "48": {
        loc: {
          start: {
            line: 320,
            column: 33
          },
          end: {
            line: 320,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 320,
            column: 33
          },
          end: {
            line: 320,
            column: 36
          }
        }, {
          start: {
            line: 320,
            column: 40
          },
          end: {
            line: 320,
            column: 48
          }
        }],
        line: 320
      },
      "49": {
        loc: {
          start: {
            line: 321,
            column: 33
          },
          end: {
            line: 321,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 33
          },
          end: {
            line: 321,
            column: 36
          }
        }, {
          start: {
            line: 321,
            column: 40
          },
          end: {
            line: 321,
            column: 49
          }
        }],
        line: 321
      },
      "50": {
        loc: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "51": {
        loc: {
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 323,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 323,
            column: 23
          }
        }, {
          start: {
            line: 323,
            column: 27
          },
          end: {
            line: 323,
            column: 41
          }
        }, {
          start: {
            line: 323,
            column: 45
          },
          end: {
            line: 323,
            column: 58
          }
        }],
        line: 323
      },
      "52": {
        loc: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "53": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 330,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 330,
            column: 23
          }
        }, {
          start: {
            line: 330,
            column: 27
          },
          end: {
            line: 330,
            column: 42
          }
        }, {
          start: {
            line: 330,
            column: 46
          },
          end: {
            line: 330,
            column: 60
          }
        }],
        line: 330
      },
      "54": {
        loc: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "55": {
        loc: {
          start: {
            line: 355,
            column: 18
          },
          end: {
            line: 355,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 18
          },
          end: {
            line: 355,
            column: 27
          }
        }, {
          start: {
            line: 355,
            column: 31
          },
          end: {
            line: 355,
            column: 39
          }
        }],
        line: 355
      },
      "56": {
        loc: {
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 356,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 356,
            column: 23
          }
        }, {
          start: {
            line: 356,
            column: 27
          },
          end: {
            line: 356,
            column: 33
          }
        }],
        line: 356
      },
      "57": {
        loc: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "58": {
        loc: {
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 357,
            column: 22
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 357,
            column: 14
          }
        }, {
          start: {
            line: 357,
            column: 18
          },
          end: {
            line: 357,
            column: 22
          }
        }],
        line: 357
      },
      "59": {
        loc: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "60": {
        loc: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "61": {
        loc: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "62": {
        loc: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 398,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 398,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "63": {
        loc: {
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 392,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 392,
            column: 30
          }
        }, {
          start: {
            line: 392,
            column: 34
          },
          end: {
            line: 392,
            column: 54
          }
        }],
        line: 392
      },
      "64": {
        loc: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "65": {
        loc: {
          start: {
            line: 417,
            column: 28
          },
          end: {
            line: 417,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 28
          },
          end: {
            line: 417,
            column: 36
          }
        }, {
          start: {
            line: 417,
            column: 40
          },
          end: {
            line: 417,
            column: 46
          }
        }],
        line: 417
      },
      "66": {
        loc: {
          start: {
            line: 418,
            column: 28
          },
          end: {
            line: 418,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 418,
            column: 28
          },
          end: {
            line: 418,
            column: 36
          }
        }, {
          start: {
            line: 418,
            column: 40
          },
          end: {
            line: 418,
            column: 49
          }
        }],
        line: 418
      },
      "67": {
        loc: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "68": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 419,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 419,
            column: 25
          }
        }, {
          start: {
            line: 419,
            column: 29
          },
          end: {
            line: 419,
            column: 46
          }
        }],
        line: 419
      },
      "69": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "70": {
        loc: {
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 421,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 421,
            column: 29
          }
        }, {
          start: {
            line: 421,
            column: 34
          },
          end: {
            line: 421,
            column: 44
          }
        }, {
          start: {
            line: 421,
            column: 48
          },
          end: {
            line: 421,
            column: 55
          }
        }],
        line: 421
      },
      "71": {
        loc: {
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 434,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 434,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 428
      },
      "72": {
        loc: {
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 428,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 428,
            column: 29
          }
        }, {
          start: {
            line: 428,
            column: 34
          },
          end: {
            line: 428,
            column: 44
          }
        }, {
          start: {
            line: 428,
            column: 48
          },
          end: {
            line: 428,
            column: 55
          }
        }],
        line: 428
      },
      "73": {
        loc: {
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 441,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 441,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "74": {
        loc: {
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 435,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 435,
            column: 29
          }
        }, {
          start: {
            line: 435,
            column: 33
          },
          end: {
            line: 435,
            column: 50
          }
        }, {
          start: {
            line: 435,
            column: 54
          },
          end: {
            line: 435,
            column: 63
          }
        }],
        line: 435
      },
      "75": {
        loc: {
          start: {
            line: 442,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 442,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 442
      },
      "76": {
        loc: {
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 469,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 469,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "77": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 479,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 479,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "78": {
        loc: {
          start: {
            line: 486,
            column: 28
          },
          end: {
            line: 486,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 486,
            column: 39
          },
          end: {
            line: 486,
            column: 42
          }
        }],
        line: 486
      },
      "79": {
        loc: {
          start: {
            line: 488,
            column: 22
          },
          end: {
            line: 488,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 488,
            column: 22
          },
          end: {
            line: 488,
            column: 47
          }
        }, {
          start: {
            line: 488,
            column: 51
          },
          end: {
            line: 488,
            column: 53
          }
        }],
        line: 488
      },
      "80": {
        loc: {
          start: {
            line: 489,
            column: 8
          },
          end: {
            line: 499,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 8
          },
          end: {
            line: 499,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 489
      },
      "81": {
        loc: {
          start: {
            line: 508,
            column: 23
          },
          end: {
            line: 508,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 508,
            column: 23
          },
          end: {
            line: 508,
            column: 28
          }
        }, {
          start: {
            line: 508,
            column: 32
          },
          end: {
            line: 508,
            column: 38
          }
        }],
        line: 508
      },
      "82": {
        loc: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 541,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 541,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 509
      },
      "83": {
        loc: {
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 509,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 509,
            column: 18
          }
        }, {
          start: {
            line: 509,
            column: 22
          },
          end: {
            line: 509,
            column: 52
          }
        }],
        line: 509
      },
      "84": {
        loc: {
          start: {
            line: 511,
            column: 8
          },
          end: {
            line: 519,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 511,
            column: 8
          },
          end: {
            line: 519,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 511
      },
      "85": {
        loc: {
          start: {
            line: 520,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 520,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 520
      },
      "86": {
        loc: {
          start: {
            line: 531,
            column: 8
          },
          end: {
            line: 539,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 531,
            column: 8
          },
          end: {
            line: 539,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 531
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0, 0],
      "52": [0, 0],
      "53": [0, 0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0, 0],
      "71": [0, 0],
      "72": [0, 0, 0],
      "73": [0, 0],
      "74": [0, 0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\validationMiddleware.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\src\\APP_MussikOn\\APP_MussikOn_Express\\src\\middleware\\validationMiddleware.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\r\nimport Joi from 'joi';\r\nimport { logger } from '../services/loggerService';\r\n\r\n// Tipos para errores de validaci\xF3n\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n  value?: any;\r\n  type?: string;\r\n}\r\n\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: ValidationError[];\r\n  sanitizedData: any;\r\n}\r\n\r\n/**\r\n * Clase para manejo de errores de validaci\xF3n\r\n */\r\nexport class ValidationErrorException extends Error {\r\n  public errors: ValidationError[];\r\n  public statusCode: number;\r\n\r\n  constructor(\r\n    errors: ValidationError[],\r\n    message: string = 'Error de validaci\xF3n'\r\n  ) {\r\n    super(message);\r\n    this.name = 'ValidationErrorException';\r\n    this.errors = errors;\r\n    this.statusCode = 400;\r\n  }\r\n}\r\n\r\n/**\r\n * Funci\xF3n para sanitizar datos de entrada\r\n */\r\nexport function sanitizeInput(data: any): any {\r\n  if (typeof data === 'string') {\r\n    // Remover caracteres peligrosos y normalizar espacios\r\n    return data\r\n      .trim()\r\n      .replace(/[<>]/g, '') // Remover < y >\r\n      .replace(/\\s+/g, ' ') // Normalizar espacios m\xFAltiples\r\n      .replace(/javascript:/gi, '') // Remover javascript: protocol\r\n      .replace(/on\\w+=/gi, '') // Remover event handlers\r\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, ''); // Remover scripts\r\n  }\r\n\r\n  if (Array.isArray(data)) {\r\n    return data.map(item => sanitizeInput(item));\r\n  }\r\n\r\n  if (typeof data === 'object' && data !== null) {\r\n    const sanitized: any = {};\r\n    for (const [key, value] of Object.entries(data)) {\r\n      sanitized[key] = sanitizeInput(value);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Funci\xF3n para validar y sanitizar datos usando Joi\r\n */\r\nexport function validateAndSanitize(\r\n  schema: Joi.ObjectSchema,\r\n  data: any,\r\n  options: Joi.ValidationOptions = {}\r\n): ValidationResult {\r\n  const defaultOptions: Joi.ValidationOptions = {\r\n    abortEarly: false,\r\n    stripUnknown: true,\r\n    allowUnknown: false,\r\n    convert: true,\r\n    presence: 'required',\r\n  };\r\n\r\n  const validationOptions = { ...defaultOptions, ...options };\r\n\r\n  try {\r\n    // Sanitizar datos antes de validar\r\n    const sanitizedData = sanitizeInput(data);\r\n\r\n    const { error, value } = schema.validate(sanitizedData, validationOptions);\r\n\r\n    if (error) {\r\n      const errors: ValidationError[] = error.details.map(detail => ({\r\n        field: detail.path.join('.'),\r\n        message: detail.message,\r\n        value: detail.context?.value,\r\n        type: detail.type,\r\n      }));\r\n\r\n      return {\r\n        isValid: false,\r\n        errors,\r\n        sanitizedData: value,\r\n      };\r\n    }\r\n\r\n    return {\r\n      isValid: true,\r\n      errors: [],\r\n      sanitizedData: value,\r\n    };\r\n  } catch (err) {\r\n    logger.error('Error en validaci\xF3n Joi', err as Error);\r\n    return {\r\n      isValid: false,\r\n      errors: [\r\n        {\r\n          field: 'unknown',\r\n          message: 'Error interno de validaci\xF3n',\r\n          type: 'internal',\r\n        },\r\n      ],\r\n      sanitizedData: data,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Middleware de validaci\xF3n gen\xE9rico mejorado\r\n */\r\nexport function validate(\r\n  schema: Joi.ObjectSchema,\r\n  property: 'body' | 'query' | 'params' = 'body',\r\n  options: Joi.ValidationOptions = {}\r\n) {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    try {\r\n      const data = req[property];\r\n      const result = validateAndSanitize(schema, data, options);\r\n\r\n      if (!result.isValid) {\r\n        logger.warn('Validaci\xF3n fallida', {\r\n          userId: (req as any).user?.userId,\r\n          url: req.originalUrl,\r\n          method: req.method,\r\n          metadata: { errors: result.errors },\r\n        });\r\n\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Datos de entrada inv\xE1lidos',\r\n          errors: result.errors,\r\n          timestamp: new Date().toISOString(),\r\n          path: req.originalUrl,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Reemplazar datos con los validados y sanitizados\r\n      req[property] = result.sanitizedData;\r\n\r\n      logger.debug('Validaci\xF3n exitosa', {\r\n        userId: (req as any).user?.userId,\r\n        url: req.originalUrl,\r\n        method: req.method,\r\n      });\r\n\r\n      next();\r\n    } catch (error) {\r\n      logger.error('Error en middleware de validaci\xF3n', error as Error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Error interno del servidor',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para validar IDs de Firestore\r\n */\r\nexport function validateId(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const id = req.params.id;\r\n\r\n  if (!id || typeof id !== 'string') {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'ID requerido',\r\n      field: 'id',\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  const sanitizedId = sanitizeInput(id);\r\n\r\n  // Validaci\xF3n para IDs de Firestore\r\n  if (sanitizedId.length < 1 || sanitizedId.length > 1500) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'ID inv\xE1lido: debe tener entre 1 y 1500 caracteres',\r\n      field: 'id',\r\n      value: sanitizedId,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Verificar que no contenga caracteres peligrosos\r\n  if (/[<>\\\"'&]/.test(sanitizedId)) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'ID contiene caracteres no permitidos',\r\n      field: 'id',\r\n      value: sanitizedId,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  req.params.id = sanitizedId;\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar paginaci\xF3n\r\n */\r\nexport function validatePagination(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const page = parseInt(req.query.page as string) || 1;\r\n  const limit = parseInt(req.query.limit as string) || 10;\r\n  const offset = parseInt(req.query.offset as string) || 0;\r\n\r\n  const errors: ValidationError[] = [];\r\n\r\n  if (page < 1) {\r\n    errors.push({\r\n      field: 'page',\r\n      message: 'P\xE1gina debe ser mayor a 0',\r\n      value: page,\r\n    });\r\n  }\r\n\r\n  if (limit < 1 || limit > 100) {\r\n    errors.push({\r\n      field: 'limit',\r\n      message: 'L\xEDmite debe estar entre 1 y 100',\r\n      value: limit,\r\n    });\r\n  }\r\n\r\n  if (offset < 0) {\r\n    errors.push({\r\n      field: 'offset',\r\n      message: 'Offset debe ser mayor o igual a 0',\r\n      value: offset,\r\n    });\r\n  }\r\n\r\n  if (errors.length > 0) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'Par\xE1metros de paginaci\xF3n inv\xE1lidos',\r\n      errors,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Agregar valores validados a req\r\n  (req as any).pagination = { page, limit, offset };\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar archivos\r\n */\r\nexport function validateFile(\r\n  allowedTypes: string[] = [\r\n    'image/jpeg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n  ],\r\n  maxSize: number = 10 * 1024 * 1024 // 10MB por defecto\r\n) {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    if (!req.file && !req.files) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'Archivo requerido',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const files = req.files\r\n      ? Array.isArray(req.files)\r\n        ? req.files\r\n        : [req.files]\r\n      : [req.file];\r\n    const errors: ValidationError[] = [];\r\n\r\n    for (const file of files) {\r\n      if (!file) continue;\r\n\r\n      // Validar tipo de archivo\r\n      if (\r\n        file.mimetype &&\r\n        typeof file.mimetype === 'string' &&\r\n        !allowedTypes.includes(file.mimetype)\r\n      ) {\r\n        errors.push({\r\n          field: 'file',\r\n          message: `Tipo de archivo no permitido. Tipos permitidos: ${allowedTypes.join(', ')}`,\r\n          value: file.mimetype,\r\n        });\r\n      }\r\n\r\n      // Validar tama\xF1o\r\n      if (typeof file.size === 'number' && file.size > maxSize) {\r\n        errors.push({\r\n          field: 'file',\r\n          message: `Archivo demasiado grande. Tama\xF1o m\xE1ximo: ${Math.round(maxSize / 1024 / 1024)}MB`,\r\n          value: file.size,\r\n        });\r\n      }\r\n\r\n      // Validar nombre de archivo\r\n      if (file.originalname && typeof file.originalname === 'string') {\r\n        const sanitizedName = sanitizeInput(file.originalname);\r\n        if (sanitizedName.length > 255) {\r\n          errors.push({\r\n            field: 'filename',\r\n            message: 'Nombre de archivo demasiado largo',\r\n            value: sanitizedName,\r\n          });\r\n        }\r\n\r\n        // Verificar extensi\xF3n\r\n        const extension = sanitizedName.split('.').pop()?.toLowerCase();\r\n        const allowedExtensions = allowedTypes.map(type => type.split('/')[1]);\r\n        if (extension && !allowedExtensions.includes(extension)) {\r\n          errors.push({\r\n            field: 'filename',\r\n            message: `Extensi\xF3n no permitida. Extensiones permitidas: ${allowedExtensions.join(', ')}`,\r\n            value: extension,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'Archivo(s) inv\xE1lido(s)',\r\n        errors,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    next();\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para validar coordenadas geogr\xE1ficas\r\n */\r\nexport function validateCoordinates(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const { lat, lng, latitude, longitude } = req.query;\r\n\r\n  const latValue = parseFloat((lat || latitude) as string);\r\n  const lngValue = parseFloat((lng || longitude) as string);\r\n\r\n  const errors: ValidationError[] = [];\r\n\r\n  if (isNaN(latValue) || latValue < -90 || latValue > 90) {\r\n    errors.push({\r\n      field: 'latitude',\r\n      message: 'Latitud debe ser un n\xFAmero entre -90 y 90',\r\n      value: latValue,\r\n    });\r\n  }\r\n\r\n  if (isNaN(lngValue) || lngValue < -180 || lngValue > 180) {\r\n    errors.push({\r\n      field: 'longitude',\r\n      message: 'Longitud debe ser un n\xFAmero entre -180 y 180',\r\n      value: lngValue,\r\n    });\r\n  }\r\n\r\n  if (errors.length > 0) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'Coordenadas geogr\xE1ficas inv\xE1lidas',\r\n      errors,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Agregar coordenadas validadas a req\r\n  (req as any).coordinates = { latitude: latValue, longitude: lngValue };\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar fechas\r\n */\r\nexport function validateDateRange(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const { startDate, endDate, dateFrom, dateTo } = req.query;\r\n\r\n  const start = startDate || dateFrom;\r\n  const end = endDate || dateTo;\r\n\r\n  if (!start || !end) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'Fechas de inicio y fin requeridas',\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  const startDateObj = new Date(start as string);\r\n  const endDateObj = new Date(end as string);\r\n\r\n  const errors: ValidationError[] = [];\r\n\r\n  if (isNaN(startDateObj.getTime())) {\r\n    errors.push({\r\n      field: 'startDate',\r\n      message: 'Fecha de inicio inv\xE1lida',\r\n      value: start,\r\n    });\r\n  }\r\n\r\n  if (isNaN(endDateObj.getTime())) {\r\n    errors.push({\r\n      field: 'endDate',\r\n      message: 'Fecha de fin inv\xE1lida',\r\n      value: end,\r\n    });\r\n  }\r\n\r\n  if (startDateObj >= endDateObj) {\r\n    errors.push({\r\n      field: 'dateRange',\r\n      message: 'La fecha de inicio debe ser anterior a la fecha de fin',\r\n      value: { start: startDateObj, end: endDateObj },\r\n    });\r\n  }\r\n\r\n  // Verificar que las fechas no est\xE9n muy en el futuro (m\xE1s de 10 a\xF1os)\r\n  const maxDate = new Date();\r\n  maxDate.setFullYear(maxDate.getFullYear() + 10);\r\n\r\n  if (startDateObj > maxDate || endDateObj > maxDate) {\r\n    errors.push({\r\n      field: 'dateRange',\r\n      message: 'Las fechas no pueden estar m\xE1s de 10 a\xF1os en el futuro',\r\n      value: { start: startDateObj, end: endDateObj },\r\n    });\r\n  }\r\n\r\n  if (errors.length > 0) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'Rango de fechas inv\xE1lido',\r\n      errors,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Agregar fechas validadas a req\r\n  (req as any).dateRange = { startDate: startDateObj, endDate: endDateObj };\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar rangos de precios\r\n */\r\nexport function validatePriceRange(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const { minPrice, maxPrice, budget, budgetMax } = req.query;\r\n\r\n  const min = parseFloat((minPrice || budget) as string);\r\n  const max = parseFloat((maxPrice || budgetMax) as string);\r\n\r\n  if (min !== undefined || max !== undefined) {\r\n    const errors: ValidationError[] = [];\r\n\r\n    if (min !== undefined && (isNaN(min) || min < 0)) {\r\n      errors.push({\r\n        field: 'minPrice',\r\n        message: 'Precio m\xEDnimo debe ser un n\xFAmero mayor o igual a 0',\r\n        value: min,\r\n      });\r\n    }\r\n\r\n    if (max !== undefined && (isNaN(max) || max < 0)) {\r\n      errors.push({\r\n        field: 'maxPrice',\r\n        message: 'Precio m\xE1ximo debe ser un n\xFAmero mayor o igual a 0',\r\n        value: max,\r\n      });\r\n    }\r\n\r\n    if (min !== undefined && max !== undefined && min > max) {\r\n      errors.push({\r\n        field: 'priceRange',\r\n        message: 'El precio m\xEDnimo no puede ser mayor al precio m\xE1ximo',\r\n        value: { min, max },\r\n      });\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'Rango de precios inv\xE1lido',\r\n        errors,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Agregar precios validados a req\r\n    (req as any).priceRange = { min, max };\r\n  }\r\n\r\n  next();\r\n}\r\n\r\n/**\r\n * Middleware para validar roles de usuario\r\n */\r\nexport function validateUserRole(allowedRoles: string[]) {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    const user = (req as any).user;\r\n\r\n    if (!user) {\r\n      res.status(401).json({\r\n        success: false,\r\n        message: 'Usuario no autenticado',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!allowedRoles.includes(user.roll)) {\r\n      res.status(403).json({\r\n        success: false,\r\n        message: `Acceso denegado. Roles permitidos: ${allowedRoles.join(', ')}`,\r\n        userRole: user.roll,\r\n        allowedRoles,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    next();\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para validar l\xEDmites de consulta\r\n */\r\nexport function validateQueryLimit(maxLimit: number = 100) {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    const limit = parseInt(req.query.limit as string) || 10;\r\n\r\n    if (limit > maxLimit) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: `L\xEDmite m\xE1ximo permitido: ${maxLimit}`,\r\n        field: 'limit',\r\n        value: limit,\r\n        maxLimit,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    next();\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para validar campos de b\xFAsqueda\r\n */\r\nexport function validateSearchQuery(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const { query, search } = req.query;\r\n  const searchTerm = query || search;\r\n\r\n  if (searchTerm && typeof searchTerm === 'string') {\r\n    const sanitizedQuery = sanitizeInput(searchTerm);\r\n\r\n    if (sanitizedQuery.length < 1) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'T\xE9rmino de b\xFAsqueda no puede estar vac\xEDo',\r\n        field: 'query',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (sanitizedQuery.length > 100) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'T\xE9rmino de b\xFAsqueda demasiado largo (m\xE1ximo 100 caracteres)',\r\n        field: 'query',\r\n        value: sanitizedQuery.length,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Verificar caracteres especiales peligrosos\r\n    if (/[<>\\\"'&]/.test(sanitizedQuery)) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: 'T\xE9rmino de b\xFAsqueda contiene caracteres no permitidos',\r\n        field: 'query',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    req.query.query = sanitizedQuery;\r\n  }\r\n\r\n  next();\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9fb5c667235db5ecd41b276fb90f940d52ef2686"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_st3c3l33s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_st3c3l33s();
cov_st3c3l33s().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_st3c3l33s().s[1]++;
exports.ValidationErrorException = void 0;
/* istanbul ignore next */
cov_st3c3l33s().s[2]++;
exports.sanitizeInput = sanitizeInput;
/* istanbul ignore next */
cov_st3c3l33s().s[3]++;
exports.validateAndSanitize = validateAndSanitize;
/* istanbul ignore next */
cov_st3c3l33s().s[4]++;
exports.validate = validate;
/* istanbul ignore next */
cov_st3c3l33s().s[5]++;
exports.validateId = validateId;
/* istanbul ignore next */
cov_st3c3l33s().s[6]++;
exports.validatePagination = validatePagination;
/* istanbul ignore next */
cov_st3c3l33s().s[7]++;
exports.validateFile = validateFile;
/* istanbul ignore next */
cov_st3c3l33s().s[8]++;
exports.validateCoordinates = validateCoordinates;
/* istanbul ignore next */
cov_st3c3l33s().s[9]++;
exports.validateDateRange = validateDateRange;
/* istanbul ignore next */
cov_st3c3l33s().s[10]++;
exports.validatePriceRange = validatePriceRange;
/* istanbul ignore next */
cov_st3c3l33s().s[11]++;
exports.validateUserRole = validateUserRole;
/* istanbul ignore next */
cov_st3c3l33s().s[12]++;
exports.validateQueryLimit = validateQueryLimit;
/* istanbul ignore next */
cov_st3c3l33s().s[13]++;
exports.validateSearchQuery = validateSearchQuery;
const loggerService_1 =
/* istanbul ignore next */
(cov_st3c3l33s().s[14]++, require("../services/loggerService"));
/**
 * Clase para manejo de errores de validación
 */
class ValidationErrorException extends Error {
  constructor(errors, message =
  /* istanbul ignore next */
  (cov_st3c3l33s().b[0][0]++, 'Error de validación')) {
    /* istanbul ignore next */
    cov_st3c3l33s().f[0]++;
    cov_st3c3l33s().s[15]++;
    super(message);
    /* istanbul ignore next */
    cov_st3c3l33s().s[16]++;
    this.name = 'ValidationErrorException';
    /* istanbul ignore next */
    cov_st3c3l33s().s[17]++;
    this.errors = errors;
    /* istanbul ignore next */
    cov_st3c3l33s().s[18]++;
    this.statusCode = 400;
  }
}
/* istanbul ignore next */
cov_st3c3l33s().s[19]++;
exports.ValidationErrorException = ValidationErrorException;
/**
 * Función para sanitizar datos de entrada
 */
function sanitizeInput(data) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[1]++;
  cov_st3c3l33s().s[20]++;
  if (typeof data === 'string') {
    /* istanbul ignore next */
    cov_st3c3l33s().b[1][0]++;
    cov_st3c3l33s().s[21]++;
    // Remover caracteres peligrosos y normalizar espacios
    return data.trim().replace(/[<>]/g, '') // Remover < y >
    .replace(/\s+/g, ' ') // Normalizar espacios múltiples
    .replace(/javascript:/gi, '') // Remover javascript: protocol
    .replace(/on\w+=/gi, '') // Remover event handlers
    .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, ''); // Remover scripts
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[1][1]++;
  }
  cov_st3c3l33s().s[22]++;
  if (Array.isArray(data)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[2][0]++;
    cov_st3c3l33s().s[23]++;
    return data.map(item => {
      /* istanbul ignore next */
      cov_st3c3l33s().f[2]++;
      cov_st3c3l33s().s[24]++;
      return sanitizeInput(item);
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[2][1]++;
  }
  cov_st3c3l33s().s[25]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[4][0]++, typeof data === 'object') &&
  /* istanbul ignore next */
  (cov_st3c3l33s().b[4][1]++, data !== null)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[3][0]++;
    const sanitized =
    /* istanbul ignore next */
    (cov_st3c3l33s().s[26]++, {});
    /* istanbul ignore next */
    cov_st3c3l33s().s[27]++;
    for (const [key, value] of Object.entries(data)) {
      /* istanbul ignore next */
      cov_st3c3l33s().s[28]++;
      sanitized[key] = sanitizeInput(value);
    }
    /* istanbul ignore next */
    cov_st3c3l33s().s[29]++;
    return sanitized;
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[3][1]++;
  }
  cov_st3c3l33s().s[30]++;
  return data;
}
/**
 * Función para validar y sanitizar datos usando Joi
 */
function validateAndSanitize(schema, data, options =
/* istanbul ignore next */
(cov_st3c3l33s().b[5][0]++, {})) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[3]++;
  const defaultOptions =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[31]++, {
    abortEarly: false,
    stripUnknown: true,
    allowUnknown: false,
    convert: true,
    presence: 'required'
  });
  const validationOptions =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[32]++, Object.assign(Object.assign({}, defaultOptions), options));
  /* istanbul ignore next */
  cov_st3c3l33s().s[33]++;
  try {
    // Sanitizar datos antes de validar
    const sanitizedData =
    /* istanbul ignore next */
    (cov_st3c3l33s().s[34]++, sanitizeInput(data));
    const {
      error,
      value
    } =
    /* istanbul ignore next */
    (cov_st3c3l33s().s[35]++, schema.validate(sanitizedData, validationOptions));
    /* istanbul ignore next */
    cov_st3c3l33s().s[36]++;
    if (error) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[6][0]++;
      const errors =
      /* istanbul ignore next */
      (cov_st3c3l33s().s[37]++, error.details.map(detail => {
        /* istanbul ignore next */
        cov_st3c3l33s().f[4]++;
        var _a;
        /* istanbul ignore next */
        cov_st3c3l33s().s[38]++;
        return {
          field: detail.path.join('.'),
          message: detail.message,
          value:
          /* istanbul ignore next */
          (cov_st3c3l33s().b[8][0]++, (_a = detail.context) === null) ||
          /* istanbul ignore next */
          (cov_st3c3l33s().b[8][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_st3c3l33s().b[7][0]++, void 0) :
          /* istanbul ignore next */
          (cov_st3c3l33s().b[7][1]++, _a.value),
          type: detail.type
        };
      }));
      /* istanbul ignore next */
      cov_st3c3l33s().s[39]++;
      return {
        isValid: false,
        errors,
        sanitizedData: value
      };
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[6][1]++;
    }
    cov_st3c3l33s().s[40]++;
    return {
      isValid: true,
      errors: [],
      sanitizedData: value
    };
  } catch (err) {
    /* istanbul ignore next */
    cov_st3c3l33s().s[41]++;
    loggerService_1.logger.error('Error en validación Joi', err);
    /* istanbul ignore next */
    cov_st3c3l33s().s[42]++;
    return {
      isValid: false,
      errors: [{
        field: 'unknown',
        message: 'Error interno de validación',
        type: 'internal'
      }],
      sanitizedData: data
    };
  }
}
/**
 * Middleware de validación genérico mejorado
 */
function validate(schema, property =
/* istanbul ignore next */
(cov_st3c3l33s().b[9][0]++, 'body'), options =
/* istanbul ignore next */
(cov_st3c3l33s().b[10][0]++, {})) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[5]++;
  cov_st3c3l33s().s[43]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_st3c3l33s().f[6]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_st3c3l33s().s[44]++;
    try {
      const data =
      /* istanbul ignore next */
      (cov_st3c3l33s().s[45]++, req[property]);
      const result =
      /* istanbul ignore next */
      (cov_st3c3l33s().s[46]++, validateAndSanitize(schema, data, options));
      /* istanbul ignore next */
      cov_st3c3l33s().s[47]++;
      if (!result.isValid) {
        /* istanbul ignore next */
        cov_st3c3l33s().b[11][0]++;
        cov_st3c3l33s().s[48]++;
        loggerService_1.logger.warn('Validación fallida', {
          userId:
          /* istanbul ignore next */
          (cov_st3c3l33s().b[13][0]++, (_a = req.user) === null) ||
          /* istanbul ignore next */
          (cov_st3c3l33s().b[13][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_st3c3l33s().b[12][0]++, void 0) :
          /* istanbul ignore next */
          (cov_st3c3l33s().b[12][1]++, _a.userId),
          url: req.originalUrl,
          method: req.method,
          metadata: {
            errors: result.errors
          }
        });
        /* istanbul ignore next */
        cov_st3c3l33s().s[49]++;
        res.status(400).json({
          success: false,
          message: 'Datos de entrada inválidos',
          errors: result.errors,
          timestamp: new Date().toISOString(),
          path: req.originalUrl
        });
        /* istanbul ignore next */
        cov_st3c3l33s().s[50]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_st3c3l33s().b[11][1]++;
      }
      // Reemplazar datos con los validados y sanitizados
      cov_st3c3l33s().s[51]++;
      req[property] = result.sanitizedData;
      /* istanbul ignore next */
      cov_st3c3l33s().s[52]++;
      loggerService_1.logger.debug('Validación exitosa', {
        userId:
        /* istanbul ignore next */
        (cov_st3c3l33s().b[15][0]++, (_b = req.user) === null) ||
        /* istanbul ignore next */
        (cov_st3c3l33s().b[15][1]++, _b === void 0) ?
        /* istanbul ignore next */
        (cov_st3c3l33s().b[14][0]++, void 0) :
        /* istanbul ignore next */
        (cov_st3c3l33s().b[14][1]++, _b.userId),
        url: req.originalUrl,
        method: req.method
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[53]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_st3c3l33s().s[54]++;
      loggerService_1.logger.error('Error en middleware de validación', error);
      /* istanbul ignore next */
      cov_st3c3l33s().s[55]++;
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor',
        timestamp: new Date().toISOString()
      });
    }
  };
}
/**
 * Middleware para validar IDs de Firestore
 */
function validateId(req, res, next) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[7]++;
  const id =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[56]++, req.params.id);
  /* istanbul ignore next */
  cov_st3c3l33s().s[57]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[17][0]++, !id) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[17][1]++, typeof id !== 'string')) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[16][0]++;
    cov_st3c3l33s().s[58]++;
    res.status(400).json({
      success: false,
      message: 'ID requerido',
      field: 'id',
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_st3c3l33s().s[59]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[16][1]++;
  }
  const sanitizedId =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[60]++, sanitizeInput(id));
  // Validación para IDs de Firestore
  /* istanbul ignore next */
  cov_st3c3l33s().s[61]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[19][0]++, sanitizedId.length < 1) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[19][1]++, sanitizedId.length > 1500)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[18][0]++;
    cov_st3c3l33s().s[62]++;
    res.status(400).json({
      success: false,
      message: 'ID inválido: debe tener entre 1 y 1500 caracteres',
      field: 'id',
      value: sanitizedId,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_st3c3l33s().s[63]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[18][1]++;
  }
  // Verificar que no contenga caracteres peligrosos
  cov_st3c3l33s().s[64]++;
  if (/[<>\"'&]/.test(sanitizedId)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[20][0]++;
    cov_st3c3l33s().s[65]++;
    res.status(400).json({
      success: false,
      message: 'ID contiene caracteres no permitidos',
      field: 'id',
      value: sanitizedId,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_st3c3l33s().s[66]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[20][1]++;
  }
  cov_st3c3l33s().s[67]++;
  req.params.id = sanitizedId;
  /* istanbul ignore next */
  cov_st3c3l33s().s[68]++;
  next();
}
/**
 * Middleware para validar paginación
 */
function validatePagination(req, res, next) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[8]++;
  const page =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[69]++,
  /* istanbul ignore next */
  (cov_st3c3l33s().b[21][0]++, parseInt(req.query.page)) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[21][1]++, 1));
  const limit =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[70]++,
  /* istanbul ignore next */
  (cov_st3c3l33s().b[22][0]++, parseInt(req.query.limit)) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[22][1]++, 10));
  const offset =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[71]++,
  /* istanbul ignore next */
  (cov_st3c3l33s().b[23][0]++, parseInt(req.query.offset)) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[23][1]++, 0));
  const errors =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[72]++, []);
  /* istanbul ignore next */
  cov_st3c3l33s().s[73]++;
  if (page < 1) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[24][0]++;
    cov_st3c3l33s().s[74]++;
    errors.push({
      field: 'page',
      message: 'Página debe ser mayor a 0',
      value: page
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[24][1]++;
  }
  cov_st3c3l33s().s[75]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[26][0]++, limit < 1) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[26][1]++, limit > 100)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[25][0]++;
    cov_st3c3l33s().s[76]++;
    errors.push({
      field: 'limit',
      message: 'Límite debe estar entre 1 y 100',
      value: limit
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[25][1]++;
  }
  cov_st3c3l33s().s[77]++;
  if (offset < 0) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[27][0]++;
    cov_st3c3l33s().s[78]++;
    errors.push({
      field: 'offset',
      message: 'Offset debe ser mayor o igual a 0',
      value: offset
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[27][1]++;
  }
  cov_st3c3l33s().s[79]++;
  if (errors.length > 0) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[28][0]++;
    cov_st3c3l33s().s[80]++;
    res.status(400).json({
      success: false,
      message: 'Parámetros de paginación inválidos',
      errors,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_st3c3l33s().s[81]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[28][1]++;
  }
  // Agregar valores validados a req
  cov_st3c3l33s().s[82]++;
  req.pagination = {
    page,
    limit,
    offset
  };
  /* istanbul ignore next */
  cov_st3c3l33s().s[83]++;
  next();
}
/**
 * Middleware para validar archivos
 */
function validateFile(allowedTypes =
/* istanbul ignore next */
(cov_st3c3l33s().b[29][0]++, ['image/jpeg', 'image/png', 'image/gif', 'image/webp']), maxSize =
/* istanbul ignore next */
(cov_st3c3l33s().b[30][0]++, 10 * 1024 * 1024) // 10MB por defecto
) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[9]++;
  cov_st3c3l33s().s[84]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_st3c3l33s().f[10]++;
    var _a;
    /* istanbul ignore next */
    cov_st3c3l33s().s[85]++;
    if (
    /* istanbul ignore next */
    (cov_st3c3l33s().b[32][0]++, !req.file) &&
    /* istanbul ignore next */
    (cov_st3c3l33s().b[32][1]++, !req.files)) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[31][0]++;
      cov_st3c3l33s().s[86]++;
      res.status(400).json({
        success: false,
        message: 'Archivo requerido',
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[87]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[31][1]++;
    }
    const files =
    /* istanbul ignore next */
    (cov_st3c3l33s().s[88]++, req.files ?
    /* istanbul ignore next */
    (cov_st3c3l33s().b[33][0]++, Array.isArray(req.files) ?
    /* istanbul ignore next */
    (cov_st3c3l33s().b[34][0]++, req.files) :
    /* istanbul ignore next */
    (cov_st3c3l33s().b[34][1]++, [req.files])) :
    /* istanbul ignore next */
    (cov_st3c3l33s().b[33][1]++, [req.file]));
    const errors =
    /* istanbul ignore next */
    (cov_st3c3l33s().s[89]++, []);
    /* istanbul ignore next */
    cov_st3c3l33s().s[90]++;
    for (const file of files) {
      /* istanbul ignore next */
      cov_st3c3l33s().s[91]++;
      if (!file) {
        /* istanbul ignore next */
        cov_st3c3l33s().b[35][0]++;
        cov_st3c3l33s().s[92]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_st3c3l33s().b[35][1]++;
      }
      // Validar tipo de archivo
      cov_st3c3l33s().s[93]++;
      if (
      /* istanbul ignore next */
      (cov_st3c3l33s().b[37][0]++, file.mimetype) &&
      /* istanbul ignore next */
      (cov_st3c3l33s().b[37][1]++, typeof file.mimetype === 'string') &&
      /* istanbul ignore next */
      (cov_st3c3l33s().b[37][2]++, !allowedTypes.includes(file.mimetype))) {
        /* istanbul ignore next */
        cov_st3c3l33s().b[36][0]++;
        cov_st3c3l33s().s[94]++;
        errors.push({
          field: 'file',
          message: `Tipo de archivo no permitido. Tipos permitidos: ${allowedTypes.join(', ')}`,
          value: file.mimetype
        });
      } else
      /* istanbul ignore next */
      {
        cov_st3c3l33s().b[36][1]++;
      }
      // Validar tamaño
      cov_st3c3l33s().s[95]++;
      if (
      /* istanbul ignore next */
      (cov_st3c3l33s().b[39][0]++, typeof file.size === 'number') &&
      /* istanbul ignore next */
      (cov_st3c3l33s().b[39][1]++, file.size > maxSize)) {
        /* istanbul ignore next */
        cov_st3c3l33s().b[38][0]++;
        cov_st3c3l33s().s[96]++;
        errors.push({
          field: 'file',
          message: `Archivo demasiado grande. Tamaño máximo: ${Math.round(maxSize / 1024 / 1024)}MB`,
          value: file.size
        });
      } else
      /* istanbul ignore next */
      {
        cov_st3c3l33s().b[38][1]++;
      }
      // Validar nombre de archivo
      cov_st3c3l33s().s[97]++;
      if (
      /* istanbul ignore next */
      (cov_st3c3l33s().b[41][0]++, file.originalname) &&
      /* istanbul ignore next */
      (cov_st3c3l33s().b[41][1]++, typeof file.originalname === 'string')) {
        /* istanbul ignore next */
        cov_st3c3l33s().b[40][0]++;
        const sanitizedName =
        /* istanbul ignore next */
        (cov_st3c3l33s().s[98]++, sanitizeInput(file.originalname));
        /* istanbul ignore next */
        cov_st3c3l33s().s[99]++;
        if (sanitizedName.length > 255) {
          /* istanbul ignore next */
          cov_st3c3l33s().b[42][0]++;
          cov_st3c3l33s().s[100]++;
          errors.push({
            field: 'filename',
            message: 'Nombre de archivo demasiado largo',
            value: sanitizedName
          });
        } else
        /* istanbul ignore next */
        {
          cov_st3c3l33s().b[42][1]++;
        }
        // Verificar extensión
        const extension =
        /* istanbul ignore next */
        (cov_st3c3l33s().s[101]++,
        /* istanbul ignore next */
        (cov_st3c3l33s().b[44][0]++, (_a = sanitizedName.split('.').pop()) === null) ||
        /* istanbul ignore next */
        (cov_st3c3l33s().b[44][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_st3c3l33s().b[43][0]++, void 0) :
        /* istanbul ignore next */
        (cov_st3c3l33s().b[43][1]++, _a.toLowerCase()));
        const allowedExtensions =
        /* istanbul ignore next */
        (cov_st3c3l33s().s[102]++, allowedTypes.map(type => {
          /* istanbul ignore next */
          cov_st3c3l33s().f[11]++;
          cov_st3c3l33s().s[103]++;
          return type.split('/')[1];
        }));
        /* istanbul ignore next */
        cov_st3c3l33s().s[104]++;
        if (
        /* istanbul ignore next */
        (cov_st3c3l33s().b[46][0]++, extension) &&
        /* istanbul ignore next */
        (cov_st3c3l33s().b[46][1]++, !allowedExtensions.includes(extension))) {
          /* istanbul ignore next */
          cov_st3c3l33s().b[45][0]++;
          cov_st3c3l33s().s[105]++;
          errors.push({
            field: 'filename',
            message: `Extensión no permitida. Extensiones permitidas: ${allowedExtensions.join(', ')}`,
            value: extension
          });
        } else
        /* istanbul ignore next */
        {
          cov_st3c3l33s().b[45][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_st3c3l33s().b[40][1]++;
      }
    }
    /* istanbul ignore next */
    cov_st3c3l33s().s[106]++;
    if (errors.length > 0) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[47][0]++;
      cov_st3c3l33s().s[107]++;
      res.status(400).json({
        success: false,
        message: 'Archivo(s) inválido(s)',
        errors,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[108]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[47][1]++;
    }
    cov_st3c3l33s().s[109]++;
    next();
  };
}
/**
 * Middleware para validar coordenadas geográficas
 */
function validateCoordinates(req, res, next) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[12]++;
  const {
    lat,
    lng,
    latitude,
    longitude
  } =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[110]++, req.query);
  const latValue =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[111]++, parseFloat(
  /* istanbul ignore next */
  (cov_st3c3l33s().b[48][0]++, lat) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[48][1]++, latitude)));
  const lngValue =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[112]++, parseFloat(
  /* istanbul ignore next */
  (cov_st3c3l33s().b[49][0]++, lng) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[49][1]++, longitude)));
  const errors =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[113]++, []);
  /* istanbul ignore next */
  cov_st3c3l33s().s[114]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[51][0]++, isNaN(latValue)) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[51][1]++, latValue < -90) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[51][2]++, latValue > 90)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[50][0]++;
    cov_st3c3l33s().s[115]++;
    errors.push({
      field: 'latitude',
      message: 'Latitud debe ser un número entre -90 y 90',
      value: latValue
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[50][1]++;
  }
  cov_st3c3l33s().s[116]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[53][0]++, isNaN(lngValue)) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[53][1]++, lngValue < -180) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[53][2]++, lngValue > 180)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[52][0]++;
    cov_st3c3l33s().s[117]++;
    errors.push({
      field: 'longitude',
      message: 'Longitud debe ser un número entre -180 y 180',
      value: lngValue
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[52][1]++;
  }
  cov_st3c3l33s().s[118]++;
  if (errors.length > 0) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[54][0]++;
    cov_st3c3l33s().s[119]++;
    res.status(400).json({
      success: false,
      message: 'Coordenadas geográficas inválidas',
      errors,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_st3c3l33s().s[120]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[54][1]++;
  }
  // Agregar coordenadas validadas a req
  cov_st3c3l33s().s[121]++;
  req.coordinates = {
    latitude: latValue,
    longitude: lngValue
  };
  /* istanbul ignore next */
  cov_st3c3l33s().s[122]++;
  next();
}
/**
 * Middleware para validar fechas
 */
function validateDateRange(req, res, next) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[13]++;
  const {
    startDate,
    endDate,
    dateFrom,
    dateTo
  } =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[123]++, req.query);
  const start =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[124]++,
  /* istanbul ignore next */
  (cov_st3c3l33s().b[55][0]++, startDate) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[55][1]++, dateFrom));
  const end =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[125]++,
  /* istanbul ignore next */
  (cov_st3c3l33s().b[56][0]++, endDate) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[56][1]++, dateTo));
  /* istanbul ignore next */
  cov_st3c3l33s().s[126]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[58][0]++, !start) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[58][1]++, !end)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[57][0]++;
    cov_st3c3l33s().s[127]++;
    res.status(400).json({
      success: false,
      message: 'Fechas de inicio y fin requeridas',
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_st3c3l33s().s[128]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[57][1]++;
  }
  const startDateObj =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[129]++, new Date(start));
  const endDateObj =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[130]++, new Date(end));
  const errors =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[131]++, []);
  /* istanbul ignore next */
  cov_st3c3l33s().s[132]++;
  if (isNaN(startDateObj.getTime())) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[59][0]++;
    cov_st3c3l33s().s[133]++;
    errors.push({
      field: 'startDate',
      message: 'Fecha de inicio inválida',
      value: start
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[59][1]++;
  }
  cov_st3c3l33s().s[134]++;
  if (isNaN(endDateObj.getTime())) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[60][0]++;
    cov_st3c3l33s().s[135]++;
    errors.push({
      field: 'endDate',
      message: 'Fecha de fin inválida',
      value: end
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[60][1]++;
  }
  cov_st3c3l33s().s[136]++;
  if (startDateObj >= endDateObj) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[61][0]++;
    cov_st3c3l33s().s[137]++;
    errors.push({
      field: 'dateRange',
      message: 'La fecha de inicio debe ser anterior a la fecha de fin',
      value: {
        start: startDateObj,
        end: endDateObj
      }
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[61][1]++;
  }
  // Verificar que las fechas no estén muy en el futuro (más de 10 años)
  const maxDate =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[138]++, new Date());
  /* istanbul ignore next */
  cov_st3c3l33s().s[139]++;
  maxDate.setFullYear(maxDate.getFullYear() + 10);
  /* istanbul ignore next */
  cov_st3c3l33s().s[140]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[63][0]++, startDateObj > maxDate) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[63][1]++, endDateObj > maxDate)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[62][0]++;
    cov_st3c3l33s().s[141]++;
    errors.push({
      field: 'dateRange',
      message: 'Las fechas no pueden estar más de 10 años en el futuro',
      value: {
        start: startDateObj,
        end: endDateObj
      }
    });
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[62][1]++;
  }
  cov_st3c3l33s().s[142]++;
  if (errors.length > 0) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[64][0]++;
    cov_st3c3l33s().s[143]++;
    res.status(400).json({
      success: false,
      message: 'Rango de fechas inválido',
      errors,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_st3c3l33s().s[144]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[64][1]++;
  }
  // Agregar fechas validadas a req
  cov_st3c3l33s().s[145]++;
  req.dateRange = {
    startDate: startDateObj,
    endDate: endDateObj
  };
  /* istanbul ignore next */
  cov_st3c3l33s().s[146]++;
  next();
}
/**
 * Middleware para validar rangos de precios
 */
function validatePriceRange(req, res, next) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[14]++;
  const {
    minPrice,
    maxPrice,
    budget,
    budgetMax
  } =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[147]++, req.query);
  const min =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[148]++, parseFloat(
  /* istanbul ignore next */
  (cov_st3c3l33s().b[65][0]++, minPrice) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[65][1]++, budget)));
  const max =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[149]++, parseFloat(
  /* istanbul ignore next */
  (cov_st3c3l33s().b[66][0]++, maxPrice) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[66][1]++, budgetMax)));
  /* istanbul ignore next */
  cov_st3c3l33s().s[150]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[68][0]++, min !== undefined) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[68][1]++, max !== undefined)) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[67][0]++;
    const errors =
    /* istanbul ignore next */
    (cov_st3c3l33s().s[151]++, []);
    /* istanbul ignore next */
    cov_st3c3l33s().s[152]++;
    if (
    /* istanbul ignore next */
    (cov_st3c3l33s().b[70][0]++, min !== undefined) && (
    /* istanbul ignore next */
    (cov_st3c3l33s().b[70][1]++, isNaN(min)) ||
    /* istanbul ignore next */
    (cov_st3c3l33s().b[70][2]++, min < 0))) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[69][0]++;
      cov_st3c3l33s().s[153]++;
      errors.push({
        field: 'minPrice',
        message: 'Precio mínimo debe ser un número mayor o igual a 0',
        value: min
      });
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[69][1]++;
    }
    cov_st3c3l33s().s[154]++;
    if (
    /* istanbul ignore next */
    (cov_st3c3l33s().b[72][0]++, max !== undefined) && (
    /* istanbul ignore next */
    (cov_st3c3l33s().b[72][1]++, isNaN(max)) ||
    /* istanbul ignore next */
    (cov_st3c3l33s().b[72][2]++, max < 0))) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[71][0]++;
      cov_st3c3l33s().s[155]++;
      errors.push({
        field: 'maxPrice',
        message: 'Precio máximo debe ser un número mayor o igual a 0',
        value: max
      });
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[71][1]++;
    }
    cov_st3c3l33s().s[156]++;
    if (
    /* istanbul ignore next */
    (cov_st3c3l33s().b[74][0]++, min !== undefined) &&
    /* istanbul ignore next */
    (cov_st3c3l33s().b[74][1]++, max !== undefined) &&
    /* istanbul ignore next */
    (cov_st3c3l33s().b[74][2]++, min > max)) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[73][0]++;
      cov_st3c3l33s().s[157]++;
      errors.push({
        field: 'priceRange',
        message: 'El precio mínimo no puede ser mayor al precio máximo',
        value: {
          min,
          max
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[73][1]++;
    }
    cov_st3c3l33s().s[158]++;
    if (errors.length > 0) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[75][0]++;
      cov_st3c3l33s().s[159]++;
      res.status(400).json({
        success: false,
        message: 'Rango de precios inválido',
        errors,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[160]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[75][1]++;
    }
    // Agregar precios validados a req
    cov_st3c3l33s().s[161]++;
    req.priceRange = {
      min,
      max
    };
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[67][1]++;
  }
  cov_st3c3l33s().s[162]++;
  next();
}
/**
 * Middleware para validar roles de usuario
 */
function validateUserRole(allowedRoles) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[15]++;
  cov_st3c3l33s().s[163]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_st3c3l33s().f[16]++;
    const user =
    /* istanbul ignore next */
    (cov_st3c3l33s().s[164]++, req.user);
    /* istanbul ignore next */
    cov_st3c3l33s().s[165]++;
    if (!user) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[76][0]++;
      cov_st3c3l33s().s[166]++;
      res.status(401).json({
        success: false,
        message: 'Usuario no autenticado',
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[167]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[76][1]++;
    }
    cov_st3c3l33s().s[168]++;
    if (!allowedRoles.includes(user.roll)) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[77][0]++;
      cov_st3c3l33s().s[169]++;
      res.status(403).json({
        success: false,
        message: `Acceso denegado. Roles permitidos: ${allowedRoles.join(', ')}`,
        userRole: user.roll,
        allowedRoles,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[170]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[77][1]++;
    }
    cov_st3c3l33s().s[171]++;
    next();
  };
}
/**
 * Middleware para validar límites de consulta
 */
function validateQueryLimit(maxLimit =
/* istanbul ignore next */
(cov_st3c3l33s().b[78][0]++, 100)) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[17]++;
  cov_st3c3l33s().s[172]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_st3c3l33s().f[18]++;
    const limit =
    /* istanbul ignore next */
    (cov_st3c3l33s().s[173]++,
    /* istanbul ignore next */
    (cov_st3c3l33s().b[79][0]++, parseInt(req.query.limit)) ||
    /* istanbul ignore next */
    (cov_st3c3l33s().b[79][1]++, 10));
    /* istanbul ignore next */
    cov_st3c3l33s().s[174]++;
    if (limit > maxLimit) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[80][0]++;
      cov_st3c3l33s().s[175]++;
      res.status(400).json({
        success: false,
        message: `Límite máximo permitido: ${maxLimit}`,
        field: 'limit',
        value: limit,
        maxLimit,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[176]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[80][1]++;
    }
    cov_st3c3l33s().s[177]++;
    next();
  };
}
/**
 * Middleware para validar campos de búsqueda
 */
function validateSearchQuery(req, res, next) {
  /* istanbul ignore next */
  cov_st3c3l33s().f[19]++;
  const {
    query,
    search
  } =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[178]++, req.query);
  const searchTerm =
  /* istanbul ignore next */
  (cov_st3c3l33s().s[179]++,
  /* istanbul ignore next */
  (cov_st3c3l33s().b[81][0]++, query) ||
  /* istanbul ignore next */
  (cov_st3c3l33s().b[81][1]++, search));
  /* istanbul ignore next */
  cov_st3c3l33s().s[180]++;
  if (
  /* istanbul ignore next */
  (cov_st3c3l33s().b[83][0]++, searchTerm) &&
  /* istanbul ignore next */
  (cov_st3c3l33s().b[83][1]++, typeof searchTerm === 'string')) {
    /* istanbul ignore next */
    cov_st3c3l33s().b[82][0]++;
    const sanitizedQuery =
    /* istanbul ignore next */
    (cov_st3c3l33s().s[181]++, sanitizeInput(searchTerm));
    /* istanbul ignore next */
    cov_st3c3l33s().s[182]++;
    if (sanitizedQuery.length < 1) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[84][0]++;
      cov_st3c3l33s().s[183]++;
      res.status(400).json({
        success: false,
        message: 'Término de búsqueda no puede estar vacío',
        field: 'query',
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[184]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[84][1]++;
    }
    cov_st3c3l33s().s[185]++;
    if (sanitizedQuery.length > 100) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[85][0]++;
      cov_st3c3l33s().s[186]++;
      res.status(400).json({
        success: false,
        message: 'Término de búsqueda demasiado largo (máximo 100 caracteres)',
        field: 'query',
        value: sanitizedQuery.length,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[187]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[85][1]++;
    }
    // Verificar caracteres especiales peligrosos
    cov_st3c3l33s().s[188]++;
    if (/[<>\"'&]/.test(sanitizedQuery)) {
      /* istanbul ignore next */
      cov_st3c3l33s().b[86][0]++;
      cov_st3c3l33s().s[189]++;
      res.status(400).json({
        success: false,
        message: 'Término de búsqueda contiene caracteres no permitidos',
        field: 'query',
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_st3c3l33s().s[190]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_st3c3l33s().b[86][1]++;
    }
    cov_st3c3l33s().s[191]++;
    req.query.query = sanitizedQuery;
  } else
  /* istanbul ignore next */
  {
    cov_st3c3l33s().b[82][1]++;
  }
  cov_st3c3l33s().s[192]++;
  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,